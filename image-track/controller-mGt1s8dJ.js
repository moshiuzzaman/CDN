import { O as WC } from "./ui-fBadYuor.js";
function DC(n, t) {
    for (var e = 0; e < t.length; e++) {
        const s = t[e];
        if (typeof s != "string" && !Array.isArray(s)) {
            for (const o in s)
                if (o !== "default" && !(o in n)) {
                    const r = Object.getOwnPropertyDescriptor(s, o);
                    r &&
                        Object.defineProperty(
                            n,
                            o,
                            r.get
                                ? r
                                : {
                                      enumerable: !0,
                                      get: () => s[o],
                                  }
                        );
                }
        }
    }
    return Object.freeze(
        Object.defineProperty(n, Symbol.toStringTag, { value: "Module" })
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FC = 1e-7,
    VC = 1e-4;
class qg {
    constructor(t, e) {
        (this.backend = t),
            (this.dataMover = e),
            (this.data = /* @__PURE__ */ new WeakMap()),
            (this.dataIdsCount = 0);
    }
    get(t) {
        return (
            this.data.has(t) || this.dataMover.moveData(this.backend, t),
            this.data.get(t)
        );
    }
    set(t, e) {
        this.dataIdsCount++, this.data.set(t, e);
    }
    has(t) {
        return this.data.has(t);
    }
    delete(t) {
        return this.dataIdsCount--, this.data.delete(t);
    }
    numDataIds() {
        return this.dataIdsCount;
    }
}
class _d {
    refCount(t) {
        return Qe("refCount");
    }
    incRef(t) {
        return Qe("incRef");
    }
    timerAvailable() {
        return !0;
    }
    time(t) {
        return Qe("time");
    }
    read(t) {
        return Qe("read");
    }
    readSync(t) {
        return Qe("readSync");
    }
    readToGPU(t, e) {
        return Qe("readToGPU");
    }
    numDataIds() {
        return Qe("numDataIds");
    }
    disposeData(t, e) {
        return Qe("disposeData");
    }
    write(t, e, s) {
        return Qe("write");
    }
    move(t, e, s, o, r) {
        return Qe("move");
    }
    createTensorFromGPUData(t, e, s) {
        return Qe("createTensorFromGPUData");
    }
    memory() {
        return Qe("memory");
    }
    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */
    floatPrecision() {
        return Qe("floatPrecision");
    }
    /** Returns the smallest representable number.  */
    epsilon() {
        return this.floatPrecision() === 32 ? FC : VC;
    }
    dispose() {
        return Qe("dispose");
    }
}
function Qe(n) {
    throw new Error(
        `'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ud(n) {
    let t = n.length,
        e = 0;
    for (; t > 0; ) (e = (Math.random() * t) | 0), t--, ds(n, t, e);
}
function zC(n, t) {
    if (n.length !== t.length)
        throw new Error(
            `Array sizes must match to be shuffled together First array length was ${n.length}Second array length was ${t.length}`
        );
    let e = n.length,
        s = 0;
    for (; e > 0; )
        (s = (Math.random() * e) | 0), e--, ds(n, e, s), ds(t, e, s);
}
function Os(n, t, e) {
    return Math.max(n, Math.min(t, e));
}
function Bl(n) {
    return n % 2 === 0 ? n : n + 1;
}
function ds(n, t, e) {
    const s = n[t];
    (n[t] = n[e]), (n[e] = s);
}
function tb(n) {
    let t = 0;
    for (let e = 0; e < n.length; e++) t += n[e];
    return t;
}
function PC(n, t) {
    const e = Math.random();
    return t * e + (1 - e) * n;
}
function AC(n, t) {
    let e = 0;
    for (let s = 0; s < n.length; s++) {
        const o = Number(n[s]) - Number(t[s]);
        e += o * o;
    }
    return e;
}
function C(n, t) {
    if (!n) throw new Error(typeof t == "string" ? t : t());
}
function Pe(n, t, e = "") {
    C($t(n, t), () => e + ` Shapes ${n} and ${t} must match`);
}
function Hl(n) {
    C(
        n != null,
        () => "The input to the tensor constructor must be a non-null value."
    );
}
function X(n) {
    if (n.length === 0) return 1;
    let t = n[0];
    for (let e = 1; e < n.length; e++) t *= n[e];
    return t;
}
function OC(n) {
    return n.length === 0;
}
function XC(n, t) {
    if (n === t) return !0;
    if (n == null || t == null || n.length !== t.length) return !1;
    for (let e = 0; e < n.length; e++)
        if (n[e] !== null && t[e] !== null && n[e] !== t[e]) return !1;
    return !0;
}
function $t(n, t) {
    if (n === t) return !0;
    if (n == null || t == null || n.length !== t.length) return !1;
    for (let e = 0; e < n.length; e++) if (n[e] !== t[e]) return !1;
    return !0;
}
function Co(n) {
    return n % 1 === 0;
}
function KC(n) {
    if (Math.tanh != null) return Math.tanh(n);
    if (n === 1 / 0) return 1;
    if (n === -1 / 0) return -1;
    {
        const t = Math.exp(2 * n);
        return (t - 1) / (t + 1);
    }
}
function hl(n) {
    const t = Math.ceil(Math.sqrt(n));
    return [t, Math.ceil(n / t)];
}
function ZC(n) {
    const t = new Uint32Array(n);
    for (let e = 0; e < n; ++e) t[e] = e;
    return Ud(t), t;
}
function xo(n, t) {
    return t <= n.length ? n : n + " ".repeat(t - n.length);
}
function id(n, t = (o) => 0, e, s) {
    return new Promise((o, r) => {
        let i = 0;
        const a = () => {
            if (n()) {
                o();
                return;
            }
            i++;
            const l = t(i);
            if (e != null && i >= e) {
                r();
                return;
            }
            s != null ? s(a, l) : setTimeout(a, l);
        };
        a();
    });
}
function Yd(n, t) {
    let e = 1,
        s = -1;
    for (let r = 0; r < n.length; ++r)
        if (n[r] >= 0) e *= n[r];
        else if (n[r] === -1) {
            if (s !== -1)
                throw Error(
                    `Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${r}`
                );
            s = r;
        } else if (n[r] < 0)
            throw Error(`Shapes can not be < 0. Found ${n[r]} at dim ${r}`);
    if (s === -1) {
        if (t > 0 && t !== e)
            throw Error(`Size(${t}) must match the product of shape ${n}`);
        return n;
    }
    if (e === 0)
        throw Error(
            `Cannot infer the missing size in [${n}] when there are 0 elements`
        );
    if (t % e !== 0)
        throw Error(
            `The implicit shape can't be a fractional number. Got ${t} / ${e}`
        );
    const o = n.slice();
    return (o[s] = t / e), o;
}
function Ct(n, t) {
    const e = t.length;
    return (
        (n = n == null ? t.map((s, o) => o) : [].concat(n)),
        C(
            n.every((s) => s >= -e && s < e),
            () =>
                `All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`
        ),
        C(
            n.every((s) => Co(s)),
            () => `All values in axis param must be integers but got axis ${n}`
        ),
        n.map((s) => (s < 0 ? e + s : s))
    );
}
function ws(n, t) {
    const e = [],
        s = [],
        o = t != null && Array.isArray(t) && t.length === 0,
        r = t == null || o ? null : Ct(t, n).sort();
    let i = 0;
    for (let a = 0; a < n.length; ++a) {
        if (r != null) {
            if (r[i] === a && n[a] !== 1)
                throw new Error(
                    `Can't squeeze axis ${a} since its dim '${n[a]}' is not 1`
                );
            (r[i] == null || r[i] > a) &&
                n[a] === 1 &&
                (e.push(n[a]), s.push(a)),
                r[i] <= a && i++;
        }
        n[a] !== 1 && (e.push(n[a]), s.push(a));
    }
    return { newShape: e, keptDims: s };
}
function Se(n, t) {
    return ne(n, t);
}
function ne(n, t) {
    let e = null;
    if (n == null || n === "float32") e = new Float32Array(t);
    else if (n === "int32") e = new Int32Array(t);
    else if (n === "bool") e = new Uint8Array(t);
    else if (n === "string") e = new Array(t);
    else throw new Error(`Unknown data type ${n}`);
    return e;
}
function eb(n, t) {
    for (let e = 0; e < n.length; e++) {
        const s = n[e];
        if (isNaN(s) || !isFinite(s))
            throw Error(`A tensor of type ${t} being uploaded contains ${s}.`);
    }
}
function nb(n) {
    return (
        n === "bool" ||
        n === "complex64" ||
        n === "float32" ||
        n === "int32" ||
        n === "string"
    );
}
function Qd(n, t) {
    return !(
        t === "complex64" ||
        (t === "float32" && n !== "complex64") ||
        (t === "int32" && n !== "float32" && n !== "complex64") ||
        (t === "bool" && n === "bool")
    );
}
function ri(n) {
    if (n === "float32" || n === "int32") return 4;
    if (n === "complex64") return 8;
    if (n === "bool") return 1;
    throw new Error(`Unknown dtype ${n}`);
}
function sb(n) {
    if (n == null) return 0;
    let t = 0;
    return n.forEach((e) => (t += e.length)), t;
}
function vr(n) {
    return typeof n == "string" || n instanceof String;
}
function ob(n) {
    return typeof n == "boolean";
}
function pl(n) {
    return typeof n == "number";
}
function Oo(n) {
    return Array.isArray(n)
        ? Oo(n[0])
        : n instanceof Float32Array
        ? "float32"
        : n instanceof Int32Array ||
          n instanceof Uint8Array ||
          n instanceof Uint8ClampedArray
        ? "int32"
        : pl(n)
        ? "float32"
        : vr(n)
        ? "string"
        : ob(n)
        ? "bool"
        : "float32";
}
function Xs(n) {
    return !!(n && n.constructor && n.call && n.apply);
}
function fl(n, t) {
    for (let e = t; e < n; ++e) if (n % e === 0) return e;
    return n;
}
function dt(n) {
    const t = n.length;
    if (t < 2) return [];
    const e = new Array(t - 1);
    e[t - 2] = n[t - 1];
    for (let s = t - 3; s >= 0; --s) e[s] = e[s + 1] * n[s + 1];
    return e;
}
function rb(n, t, e, s = !1) {
    const o = new Array();
    if (t.length === 1) {
        const r = t[0] * (s ? 2 : 1);
        for (let i = 0; i < r; i++) o[i] = e[n + i];
    } else {
        const r = t[0],
            i = t.slice(1),
            a = i.reduce((l, c) => l * c) * (s ? 2 : 1);
        for (let l = 0; l < r; l++) o[l] = rb(n + l * a, i, e, s);
    }
    return o;
}
function kn(n, t, e = !1) {
    if (n.length === 0) return t[0];
    const s = n.reduce((o, r) => o * r) * (e ? 2 : 1);
    if (s === 0) return [];
    if (s !== t.length)
        throw new Error(
            `[${n}] does not match the input size ${t.length}${
                e ? " for a complex tensor" : ""
            }.`
        );
    return rb(0, n, t, e);
}
function ib(n, t) {
    if (Array.isArray(n)) return n;
    if (t === "float32")
        return n instanceof Float32Array ? n : new Float32Array(n);
    if (t === "int32") return n instanceof Int32Array ? n : new Int32Array(n);
    if (t === "bool" || t === "string")
        return Uint8Array.from(new Int32Array(n));
    throw new Error(`Unknown dtype ${t}`);
}
function _l(n, t) {
    const e = ke(n, t);
    for (let s = 0; s < e.length; s++) e[s] = 1;
    return e;
}
function ke(n, t) {
    if (t == null || t === "float32" || t === "complex64")
        return new Float32Array(n);
    if (t === "int32") return new Int32Array(n);
    if (t === "bool") return new Uint8Array(n);
    throw new Error(`Unknown data type ${t}`);
}
function Jd(n, t) {
    const e = n.reduce((s, o) => s * o, 1);
    if (t == null || t === "float32") return kn(n, new Float32Array(e));
    if (t === "int32") return kn(n, new Int32Array(e));
    if (t === "bool") return kn(n, new Uint8Array(e));
    throw new Error(`Unknown data type ${t}`);
}
function is(n) {
    n.forEach((t) => {
        C(
            Number.isInteger(t) && t >= 0,
            () =>
                `Tensor must have a shape comprised of positive integers but got shape [${n}].`
        );
    });
}
function zn(n, t, e) {
    if (t === 0) return 0;
    if (t === 1) return n[0];
    let s = n[n.length - 1];
    for (let o = 0; o < n.length - 1; ++o) s += e[o] * n[o];
    return s;
}
function Xo(n, t, e) {
    if (t === 0) return [];
    if (t === 1) return [n];
    const s = new Array(t);
    for (let o = 0; o < s.length - 1; ++o)
        (s[o] = Math.floor(n / e[o])), (n -= s[o] * e[o]);
    return (s[s.length - 1] = n), s;
}
function Ci(n) {
    return n && n.then && typeof n.then == "function";
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const um = "tfjsflags";
class BC {
    // tslint:disable-next-line: no-any
    constructor(t) {
        (this.global = t),
            (this.flags = {}),
            (this.flagRegistry = {}),
            (this.urlFlags = {}),
            (this.getQueryParams = HC),
            this.populateURLFlags();
    }
    setPlatform(t, e) {
        this.platform != null &&
            (F().getBool("IS_TEST") ||
                F().getBool("PROD") ||
                console.warn(
                    `Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`
                )),
            (this.platformName = t),
            (this.platform = e);
    }
    registerFlag(t, e, s) {
        if (
            ((this.flagRegistry[t] = { evaluationFn: e, setHook: s }),
            this.urlFlags[t] != null)
        ) {
            const o = this.urlFlags[t];
            F().getBool("IS_TEST") ||
                F().getBool("PROD") ||
                console.warn(`Setting feature override from URL ${t}: ${o}.`),
                this.set(t, o);
        }
    }
    async getAsync(t) {
        return t in this.flags
            ? this.flags[t]
            : ((this.flags[t] = await this.evaluateFlag(t)), this.flags[t]);
    }
    get(t) {
        if (t in this.flags) return this.flags[t];
        const e = this.evaluateFlag(t);
        if (Ci(e))
            throw new Error(
                `Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`
            );
        return (this.flags[t] = e), this.flags[t];
    }
    getNumber(t) {
        return this.get(t);
    }
    getBool(t) {
        return this.get(t);
    }
    getString(t) {
        return this.get(t);
    }
    getFlags() {
        return this.flags;
    }
    // For backwards compatibility.
    get features() {
        return this.flags;
    }
    set(t, e) {
        if (this.flagRegistry[t] == null)
            throw new Error(
                `Cannot set flag ${t} as it has not been registered.`
            );
        (this.flags[t] = e),
            this.flagRegistry[t].setHook != null &&
                this.flagRegistry[t].setHook(e);
    }
    evaluateFlag(t) {
        if (this.flagRegistry[t] == null)
            throw new Error(
                `Cannot evaluate flag '${t}': no evaluation function found.`
            );
        return this.flagRegistry[t].evaluationFn();
    }
    setFlags(t) {
        this.flags = Object.assign({}, t);
    }
    reset() {
        (this.flags = {}), (this.urlFlags = {}), this.populateURLFlags();
    }
    populateURLFlags() {
        if (
            typeof this.global > "u" ||
            typeof this.global.location > "u" ||
            typeof this.global.location.search > "u"
        )
            return;
        const t = this.getQueryParams(this.global.location.search);
        um in t &&
            t[um].split(",").forEach((s) => {
                const [o, r] = s.split(":");
                this.urlFlags[o] = UC(o, r);
            });
    }
}
function HC(n) {
    const t = {};
    return (
        n.replace(
            /[?&]([^=?&]+)(?:=([^&]*))?/g,
            (e, ...s) => (_C(t, s[0], s[1]), s.join("="))
        ),
        t
    );
}
function _C(n, t, e) {
    n[decodeURIComponent(t)] = decodeURIComponent(e || "");
}
function UC(n, t) {
    const e = t.toLowerCase();
    return e === "true" || e === "false"
        ? e === "true"
        : `${+e}` === e
        ? +e
        : t;
}
function F() {
    return ab;
}
let ab = null;
function YC(n) {
    ab = n;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let $u;
function lb() {
    if ($u == null) {
        let n;
        if (typeof window < "u") n = window;
        else if (typeof global < "u") n = global;
        else if (typeof process < "u") n = process;
        else if (typeof self < "u") n = self;
        else throw new Error("Could not find a global object");
        $u = n;
    }
    return $u;
}
function QC() {
    const n = lb();
    return (
        n._tfGlobals == null && (n._tfGlobals = /* @__PURE__ */ new Map()),
        n._tfGlobals
    );
}
function jd(n, t) {
    const e = QC();
    if (e.has(n)) return e.get(n);
    {
        const s = t();
        return e.set(n, s), e.get(n);
    }
}
const Ul = "Abs",
    vi = "Acos",
    Si = "Acosh",
    Sr = "Add",
    qd = "AddN",
    th = "All",
    eh = "Any",
    Yl = "ArgMax",
    Ql = "ArgMin",
    ki = "Asin",
    Ti = "Asinh",
    Ni = "Atan",
    Ri = "Atanh",
    $i = "Atan2",
    Jl = "AvgPool",
    nh = "AvgPoolGrad",
    jl = "AvgPool3D",
    sh = "AvgPool3DGrad",
    ql = "BatchMatMul",
    tc = "BatchToSpaceND",
    oh = "Bincount",
    rh = "BitwiseAnd",
    JC = "BroadcastTo",
    cb = "BroadcastArgs",
    Gi = "Cast",
    Ei = "Ceil",
    Li = "ClipByValue",
    ih = "Complex",
    ec = "ComplexAbs",
    nc = "Concat",
    sc = "Conv2D",
    ah = "Conv2DBackpropFilter",
    oc = "Conv2DBackpropInput",
    rc = "Conv3D",
    lh = "Conv3DBackpropFilterV2",
    ch = "Conv3DBackpropInputV2",
    Mi = "Cos",
    Wi = "Cosh",
    uh = "Cumprod",
    ic = "Cumsum",
    dh = "CropAndResize",
    hh = "DenseBincount",
    ph = "DepthToSpace",
    ac = "DepthwiseConv2dNative",
    fh = "DepthwiseConv2dNativeBackpropFilter",
    mh = "DepthwiseConv2dNativeBackpropInput",
    ub = "Diag",
    lc = "Dilation2D",
    ad = "Dilation2DBackpropInput",
    ld = "Dilation2DBackpropFilter",
    gh = "Draw",
    Di = "RealDiv",
    bh = "Einsum",
    Fi = "Elu",
    xh = "EluGrad",
    Vi = "Erf",
    cc = "Equal",
    zi = "Exp",
    uc = "ExpandDims",
    Pi = "Expm1",
    yh = "FFT",
    wh = "Fill",
    Ih = "FlipLeftRight",
    Ai = "Floor",
    Oi = "FloorDiv",
    dc = "FusedBatchNorm",
    hc = "GatherV2",
    db = "GatherNd",
    pc = "Greater",
    Xi = "GreaterEqual",
    Ki = "Identity",
    Ch = "IFFT",
    vh = "Imag",
    Zi = "IsFinite",
    Bi = "IsInf",
    Hi = "IsNan",
    fc = "LeakyRelu",
    mc = "Less",
    gc = "LessEqual",
    hb = "LinSpace",
    _i = "Log",
    Ui = "Log1p",
    bc = "LogicalAnd",
    xc = "LogicalNot",
    yc = "LogicalOr",
    XY = "LogicalXor",
    jC = "LogSoftmax",
    KY = "LowerBound",
    wc = "LRN",
    Sh = "LRNGrad",
    ZY = "MatrixBandPart",
    Ic = "Max",
    Yi = "Maximum",
    Cc = "MaxPool",
    kh = "MaxPoolGrad",
    vc = "MaxPool3D",
    Th = "MaxPool3DGrad",
    pb = "MaxPoolWithArgmax",
    Sc = "Mean",
    kc = "Min",
    Qi = "Minimum",
    Tc = "MirrorPad",
    Ji = "Mod",
    fb = "Multinomial",
    ji = "Multiply",
    Nc = "Neg",
    Rc = "NotEqual",
    Nh = "NonMaxSuppressionV3",
    Rh = "NonMaxSuppressionV4",
    $h = "NonMaxSuppressionV5",
    $c = "OnesLike",
    Gc = "OneHot",
    Ec = "Pack",
    Lc = "PadV2",
    BY = "Pool",
    qi = "Pow",
    Mc = "Prelu",
    Wc = "Prod",
    mb = "RaggedGather",
    gb = "RaggedRange",
    bb = "RaggedTensorToTensor",
    Gh = "Range",
    Eh = "Real",
    ta = "Reciprocal",
    ea = "Relu",
    Dc = "Reshape",
    Fc = "ResizeNearestNeighbor",
    Lh = "ResizeNearestNeighborGrad",
    Vc = "ResizeBilinear",
    Mh = "ResizeBilinearGrad",
    na = "Relu6",
    zc = "Reverse",
    sa = "Round",
    oa = "Rsqrt",
    xb = "ScatterNd",
    yb = "TensorScatterUpdate",
    wb = "SearchSorted",
    Pc = "Select",
    ra = "Selu",
    Ac = "Slice",
    ia = "Sin",
    aa = "Sinh",
    la = "Sign",
    ca = "Sigmoid",
    ua = "Softplus",
    da = "Sqrt",
    Oc = "Sum",
    Xc = "SpaceToBatchND",
    Kc = "SplitV",
    Zc = "Softmax",
    Wh = "SparseFillEmptyRows",
    Dh = "SparseReshape",
    Fh = "SparseSegmentMean",
    Vh = "SparseSegmentSum",
    Ib = "SparseToDense",
    ha = "SquaredDifference",
    zh = "Square",
    Bc = "StaticRegexReplace",
    Ph = "StridedSlice",
    Ah = "StringNGrams",
    Oh = "StringSplit",
    Xh = "StringToHashBucketFast",
    pa = "Sub",
    fa = "Tan",
    ma = "Tanh",
    ga = "Tile",
    Kh = "TopK",
    Zh = "Transform",
    ar = "Transpose",
    Bh = "Unique",
    Hc = "Unpack",
    _c = "UnsortedSegmentSum",
    HY = "UpperBound",
    Uc = "ZerosLike",
    ba = "Step",
    cd = "FromPixels",
    Hh = "RotateWithOffset",
    ml = "_FusedMatMul",
    gl = "FusedConv2D",
    Cb = "FusedDepthwiseConv2D";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ln(...n) {
    F().getBool("IS_TEST") || F().getBool("PROD") || console.warn(...n);
}
function qC(...n) {
    F().getBool("IS_TEST") || F().getBool("PROD") || console.log(...n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pr = jd("kernelRegistry", () => /* @__PURE__ */ new Map()),
    ii = jd("gradRegistry", () => /* @__PURE__ */ new Map());
function bl(n, t) {
    const e = _h(n, t);
    return pr.get(e);
}
function dm(n) {
    return ii.get(n);
}
function ud(n) {
    const t = pr.entries(),
        e = [];
    for (;;) {
        const { done: s, value: o } = t.next();
        if (s) break;
        const [r, i] = o,
            [a] = r.split("_");
        a === n && e.push(i);
    }
    return e;
}
function sn(n) {
    const { kernelName: t, backendName: e } = n,
        s = _h(t, e);
    pr.has(s) &&
        ln(`The kernel '${t}' for backend '${e}' is already registered`),
        pr.set(s, n);
}
function t2(n) {
    const { kernelName: t } = n;
    ii.has(t) &&
        F().getBool("DEBUG") &&
        ln(`Overriding the gradient for '${t}'`),
        ii.set(t, n);
}
function _Y(n, t) {
    const e = _h(n, t);
    if (!pr.has(e))
        throw new Error(
            `The kernel '${n}' for backend '${t}' is not registered`
        );
    pr.delete(e);
}
function UY(n) {
    if (!ii.has(n))
        throw new Error(`The gradient '${n}' for backend is not registered`);
    ii.delete(n);
}
function YY(n, t) {
    ud(n).forEach((s) => {
        const o = Object.assign({}, s, { backendName: t });
        sn(o);
    });
}
function _h(n, t) {
    return `${t}_${n}`;
}
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vb(n) {
    return (
        n instanceof Float32Array ||
        n instanceof Int32Array ||
        n instanceof Uint8Array ||
        n instanceof Uint8ClampedArray
    );
}
var Ko =
    typeof globalThis < "u"
        ? globalThis
        : typeof window < "u"
        ? window
        : typeof global < "u"
        ? global
        : typeof self < "u"
        ? self
        : {};
function e2(n) {
    return n &&
        n.__esModule &&
        Object.prototype.hasOwnProperty.call(n, "default")
        ? n.default
        : n;
}
function n2(n) {
    if (n.__esModule) return n;
    var t = n.default;
    if (typeof t == "function") {
        var e = function s() {
            return this instanceof s
                ? Reflect.construct(t, arguments, this.constructor)
                : t.apply(this, arguments);
        };
        e.prototype = t.prototype;
    } else e = {};
    return (
        Object.defineProperty(e, "__esModule", { value: !0 }),
        Object.keys(n).forEach(function (s) {
            var o = Object.getOwnPropertyDescriptor(n, s);
            Object.defineProperty(
                e,
                s,
                o.get
                    ? o
                    : {
                          enumerable: !0,
                          get: function () {
                              return n[s];
                          },
                      }
            );
        }),
        e
    );
}
var Sb = Bt,
    In = null;
try {
    In = new WebAssembly.Instance(
        new WebAssembly.Module(
            new Uint8Array([
                0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4,
                127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1,
                127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100,
                105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5,
                114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5,
                8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6,
                4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32,
                134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4,
                66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0,
                173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66,
                32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167,
                11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32,
                2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135,
                167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1,
                173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132,
                129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1,
                126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,
                3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0,
                32, 4, 167, 11,
            ])
        ),
        {}
    ).exports;
} catch {}
function Bt(n, t, e) {
    (this.low = n | 0), (this.high = t | 0), (this.unsigned = !!e);
}
Bt.prototype.__isLong__;
Object.defineProperty(Bt.prototype, "__isLong__", { value: !0 });
function on(n) {
    return (n && n.__isLong__) === !0;
}
Bt.isLong = on;
var hm = {},
    pm = {};
function Zo(n, t) {
    var e, s, o;
    return t
        ? ((n >>>= 0),
          (o = 0 <= n && n < 256) && ((s = pm[n]), s)
              ? s
              : ((e = Ht(n, (n | 0) < 0 ? -1 : 0, !0)), o && (pm[n] = e), e))
        : ((n |= 0),
          (o = -128 <= n && n < 128) && ((s = hm[n]), s)
              ? s
              : ((e = Ht(n, n < 0 ? -1 : 0, !1)), o && (hm[n] = e), e));
}
Bt.fromInt = Zo;
function Cn(n, t) {
    if (isNaN(n)) return t ? mo : vn;
    if (t) {
        if (n < 0) return mo;
        if (n >= kb) return Rb;
    } else {
        if (n <= -mm) return je;
        if (n + 1 >= mm) return Nb;
    }
    return n < 0 ? Cn(-n, t).neg() : Ht(n % fr | 0, (n / fr) | 0, t);
}
Bt.fromNumber = Cn;
function Ht(n, t, e) {
    return new Bt(n, t, e);
}
Bt.fromBits = Ht;
var xl = Math.pow;
function Uh(n, t, e) {
    if (n.length === 0) throw Error("empty string");
    if (
        n === "NaN" ||
        n === "Infinity" ||
        n === "+Infinity" ||
        n === "-Infinity"
    )
        return vn;
    if (
        (typeof t == "number" ? ((e = t), (t = !1)) : (t = !!t),
        (e = e || 10),
        e < 2 || 36 < e)
    )
        throw RangeError("radix");
    var s;
    if ((s = n.indexOf("-")) > 0) throw Error("interior hyphen");
    if (s === 0) return Uh(n.substring(1), t, e).neg();
    for (var o = Cn(xl(e, 8)), r = vn, i = 0; i < n.length; i += 8) {
        var a = Math.min(8, n.length - i),
            l = parseInt(n.substring(i, i + a), e);
        if (a < 8) {
            var c = Cn(xl(e, a));
            r = r.mul(c).add(Cn(l));
        } else (r = r.mul(o)), (r = r.add(Cn(l)));
    }
    return (r.unsigned = t), r;
}
Bt.fromString = Uh;
function Hn(n, t) {
    return typeof n == "number"
        ? Cn(n, t)
        : typeof n == "string"
        ? Uh(n, t)
        : Ht(n.low, n.high, typeof t == "boolean" ? t : n.unsigned);
}
Bt.fromValue = Hn;
var fm = 65536,
    s2 = 1 << 24,
    fr = fm * fm,
    kb = fr * fr,
    mm = kb / 2,
    gm = Zo(s2),
    vn = Zo(0);
Bt.ZERO = vn;
var mo = Zo(0, !0);
Bt.UZERO = mo;
var ir = Zo(1);
Bt.ONE = ir;
var Tb = Zo(1, !0);
Bt.UONE = Tb;
var dd = Zo(-1);
Bt.NEG_ONE = dd;
var Nb = Ht(-1, 2147483647, !1);
Bt.MAX_VALUE = Nb;
var Rb = Ht(-1, -1, !0);
Bt.MAX_UNSIGNED_VALUE = Rb;
var je = Ht(0, -2147483648, !1);
Bt.MIN_VALUE = je;
var st = Bt.prototype;
st.toInt = function () {
    return this.unsigned ? this.low >>> 0 : this.low;
};
st.toNumber = function () {
    return this.unsigned
        ? (this.high >>> 0) * fr + (this.low >>> 0)
        : this.high * fr + (this.low >>> 0);
};
st.toString = function (t) {
    if (((t = t || 10), t < 2 || 36 < t)) throw RangeError("radix");
    if (this.isZero()) return "0";
    if (this.isNegative())
        if (this.eq(je)) {
            var e = Cn(t),
                s = this.div(e),
                o = s.mul(e).sub(this);
            return s.toString(t) + o.toInt().toString(t);
        } else return "-" + this.neg().toString(t);
    for (var r = Cn(xl(t, 6), this.unsigned), i = this, a = ""; ; ) {
        var l = i.div(r),
            c = i.sub(l.mul(r)).toInt() >>> 0,
            u = c.toString(t);
        if (((i = l), i.isZero())) return u + a;
        for (; u.length < 6; ) u = "0" + u;
        a = "" + u + a;
    }
};
st.getHighBits = function () {
    return this.high;
};
st.getHighBitsUnsigned = function () {
    return this.high >>> 0;
};
st.getLowBits = function () {
    return this.low;
};
st.getLowBitsUnsigned = function () {
    return this.low >>> 0;
};
st.getNumBitsAbs = function () {
    if (this.isNegative()) return this.eq(je) ? 64 : this.neg().getNumBitsAbs();
    for (
        var t = this.high != 0 ? this.high : this.low, e = 31;
        e > 0 && !(t & (1 << e));
        e--
    );
    return this.high != 0 ? e + 33 : e + 1;
};
st.isZero = function () {
    return this.high === 0 && this.low === 0;
};
st.eqz = st.isZero;
st.isNegative = function () {
    return !this.unsigned && this.high < 0;
};
st.isPositive = function () {
    return this.unsigned || this.high >= 0;
};
st.isOdd = function () {
    return (this.low & 1) === 1;
};
st.isEven = function () {
    return (this.low & 1) === 0;
};
st.equals = function (t) {
    return (
        on(t) || (t = Hn(t)),
        this.unsigned !== t.unsigned &&
        this.high >>> 31 === 1 &&
        t.high >>> 31 === 1
            ? !1
            : this.high === t.high && this.low === t.low
    );
};
st.eq = st.equals;
st.notEquals = function (t) {
    return !this.eq(
        /* validates */
        t
    );
};
st.neq = st.notEquals;
st.ne = st.notEquals;
st.lessThan = function (t) {
    return (
        this.comp(
            /* validates */
            t
        ) < 0
    );
};
st.lt = st.lessThan;
st.lessThanOrEqual = function (t) {
    return (
        this.comp(
            /* validates */
            t
        ) <= 0
    );
};
st.lte = st.lessThanOrEqual;
st.le = st.lessThanOrEqual;
st.greaterThan = function (t) {
    return (
        this.comp(
            /* validates */
            t
        ) > 0
    );
};
st.gt = st.greaterThan;
st.greaterThanOrEqual = function (t) {
    return (
        this.comp(
            /* validates */
            t
        ) >= 0
    );
};
st.gte = st.greaterThanOrEqual;
st.ge = st.greaterThanOrEqual;
st.compare = function (t) {
    if ((on(t) || (t = Hn(t)), this.eq(t))) return 0;
    var e = this.isNegative(),
        s = t.isNegative();
    return e && !s
        ? -1
        : !e && s
        ? 1
        : this.unsigned
        ? t.high >>> 0 > this.high >>> 0 ||
          (t.high === this.high && t.low >>> 0 > this.low >>> 0)
            ? -1
            : 1
        : this.sub(t).isNegative()
        ? -1
        : 1;
};
st.comp = st.compare;
st.negate = function () {
    return !this.unsigned && this.eq(je) ? je : this.not().add(ir);
};
st.neg = st.negate;
st.add = function (t) {
    on(t) || (t = Hn(t));
    var e = this.high >>> 16,
        s = this.high & 65535,
        o = this.low >>> 16,
        r = this.low & 65535,
        i = t.high >>> 16,
        a = t.high & 65535,
        l = t.low >>> 16,
        c = t.low & 65535,
        u = 0,
        d = 0,
        h = 0,
        p = 0;
    return (
        (p += r + c),
        (h += p >>> 16),
        (p &= 65535),
        (h += o + l),
        (d += h >>> 16),
        (h &= 65535),
        (d += s + a),
        (u += d >>> 16),
        (d &= 65535),
        (u += e + i),
        (u &= 65535),
        Ht((h << 16) | p, (u << 16) | d, this.unsigned)
    );
};
st.subtract = function (t) {
    return on(t) || (t = Hn(t)), this.add(t.neg());
};
st.sub = st.subtract;
st.multiply = function (t) {
    if (this.isZero()) return vn;
    if ((on(t) || (t = Hn(t)), In)) {
        var e = In.mul(this.low, this.high, t.low, t.high);
        return Ht(e, In.get_high(), this.unsigned);
    }
    if (t.isZero()) return vn;
    if (this.eq(je)) return t.isOdd() ? je : vn;
    if (t.eq(je)) return this.isOdd() ? je : vn;
    if (this.isNegative())
        return t.isNegative()
            ? this.neg().mul(t.neg())
            : this.neg().mul(t).neg();
    if (t.isNegative()) return this.mul(t.neg()).neg();
    if (this.lt(gm) && t.lt(gm))
        return Cn(this.toNumber() * t.toNumber(), this.unsigned);
    var s = this.high >>> 16,
        o = this.high & 65535,
        r = this.low >>> 16,
        i = this.low & 65535,
        a = t.high >>> 16,
        l = t.high & 65535,
        c = t.low >>> 16,
        u = t.low & 65535,
        d = 0,
        h = 0,
        p = 0,
        f = 0;
    return (
        (f += i * u),
        (p += f >>> 16),
        (f &= 65535),
        (p += r * u),
        (h += p >>> 16),
        (p &= 65535),
        (p += i * c),
        (h += p >>> 16),
        (p &= 65535),
        (h += o * u),
        (d += h >>> 16),
        (h &= 65535),
        (h += r * c),
        (d += h >>> 16),
        (h &= 65535),
        (h += i * l),
        (d += h >>> 16),
        (h &= 65535),
        (d += s * u + o * c + r * l + i * a),
        (d &= 65535),
        Ht((p << 16) | f, (d << 16) | h, this.unsigned)
    );
};
st.mul = st.multiply;
st.divide = function (t) {
    if ((on(t) || (t = Hn(t)), t.isZero())) throw Error("division by zero");
    if (In) {
        if (
            !this.unsigned &&
            this.high === -2147483648 &&
            t.low === -1 &&
            t.high === -1
        )
            return this;
        var e = (this.unsigned ? In.div_u : In.div_s)(
            this.low,
            this.high,
            t.low,
            t.high
        );
        return Ht(e, In.get_high(), this.unsigned);
    }
    if (this.isZero()) return this.unsigned ? mo : vn;
    var s, o, r;
    if (this.unsigned) {
        if ((t.unsigned || (t = t.toUnsigned()), t.gt(this))) return mo;
        if (t.gt(this.shru(1))) return Tb;
        r = mo;
    } else {
        if (this.eq(je)) {
            if (t.eq(ir) || t.eq(dd)) return je;
            if (t.eq(je)) return ir;
            var i = this.shr(1);
            return (
                (s = i.div(t).shl(1)),
                s.eq(vn)
                    ? t.isNegative()
                        ? ir
                        : dd
                    : ((o = this.sub(t.mul(s))), (r = s.add(o.div(t))), r)
            );
        } else if (t.eq(je)) return this.unsigned ? mo : vn;
        if (this.isNegative())
            return t.isNegative()
                ? this.neg().div(t.neg())
                : this.neg().div(t).neg();
        if (t.isNegative()) return this.div(t.neg()).neg();
        r = vn;
    }
    for (o = this; o.gte(t); ) {
        s = Math.max(1, Math.floor(o.toNumber() / t.toNumber()));
        for (
            var a = Math.ceil(Math.log(s) / Math.LN2),
                l = a <= 48 ? 1 : xl(2, a - 48),
                c = Cn(s),
                u = c.mul(t);
            u.isNegative() || u.gt(o);

        )
            (s -= l), (c = Cn(s, this.unsigned)), (u = c.mul(t));
        c.isZero() && (c = ir), (r = r.add(c)), (o = o.sub(u));
    }
    return r;
};
st.div = st.divide;
st.modulo = function (t) {
    if ((on(t) || (t = Hn(t)), In)) {
        var e = (this.unsigned ? In.rem_u : In.rem_s)(
            this.low,
            this.high,
            t.low,
            t.high
        );
        return Ht(e, In.get_high(), this.unsigned);
    }
    return this.sub(this.div(t).mul(t));
};
st.mod = st.modulo;
st.rem = st.modulo;
st.not = function () {
    return Ht(~this.low, ~this.high, this.unsigned);
};
st.and = function (t) {
    return (
        on(t) || (t = Hn(t)),
        Ht(this.low & t.low, this.high & t.high, this.unsigned)
    );
};
st.or = function (t) {
    return (
        on(t) || (t = Hn(t)),
        Ht(this.low | t.low, this.high | t.high, this.unsigned)
    );
};
st.xor = function (t) {
    return (
        on(t) || (t = Hn(t)),
        Ht(this.low ^ t.low, this.high ^ t.high, this.unsigned)
    );
};
st.shiftLeft = function (t) {
    return (
        on(t) && (t = t.toInt()),
        (t &= 63) === 0
            ? this
            : t < 32
            ? Ht(
                  this.low << t,
                  (this.high << t) | (this.low >>> (32 - t)),
                  this.unsigned
              )
            : Ht(0, this.low << (t - 32), this.unsigned)
    );
};
st.shl = st.shiftLeft;
st.shiftRight = function (t) {
    return (
        on(t) && (t = t.toInt()),
        (t &= 63) === 0
            ? this
            : t < 32
            ? Ht(
                  (this.low >>> t) | (this.high << (32 - t)),
                  this.high >> t,
                  this.unsigned
              )
            : Ht(this.high >> (t - 32), this.high >= 0 ? 0 : -1, this.unsigned)
    );
};
st.shr = st.shiftRight;
st.shiftRightUnsigned = function (t) {
    if ((on(t) && (t = t.toInt()), (t &= 63), t === 0)) return this;
    var e = this.high;
    if (t < 32) {
        var s = this.low;
        return Ht((s >>> t) | (e << (32 - t)), e >>> t, this.unsigned);
    } else
        return t === 32
            ? Ht(e, 0, this.unsigned)
            : Ht(e >>> (t - 32), 0, this.unsigned);
};
st.shru = st.shiftRightUnsigned;
st.shr_u = st.shiftRightUnsigned;
st.toSigned = function () {
    return this.unsigned ? Ht(this.low, this.high, !1) : this;
};
st.toUnsigned = function () {
    return this.unsigned ? this : Ht(this.low, this.high, !0);
};
st.toBytes = function (t) {
    return t ? this.toBytesLE() : this.toBytesBE();
};
st.toBytesLE = function () {
    var t = this.high,
        e = this.low;
    return [
        e & 255,
        (e >>> 8) & 255,
        (e >>> 16) & 255,
        e >>> 24,
        t & 255,
        (t >>> 8) & 255,
        (t >>> 16) & 255,
        t >>> 24,
    ];
};
st.toBytesBE = function () {
    var t = this.high,
        e = this.low;
    return [
        t >>> 24,
        (t >>> 16) & 255,
        (t >>> 8) & 255,
        t & 255,
        e >>> 24,
        (e >>> 16) & 255,
        (e >>> 8) & 255,
        e & 255,
    ];
};
Bt.fromBytes = function (t, e, s) {
    return s ? Bt.fromBytesLE(t, e) : Bt.fromBytesBE(t, e);
};
Bt.fromBytesLE = function (t, e) {
    return new Bt(
        t[0] | (t[1] << 8) | (t[2] << 16) | (t[3] << 24),
        t[4] | (t[5] << 8) | (t[6] << 16) | (t[7] << 24),
        e
    );
};
Bt.fromBytesBE = function (t, e) {
    return new Bt(
        (t[4] << 24) | (t[5] << 16) | (t[6] << 8) | t[7],
        (t[0] << 24) | (t[1] << 16) | (t[2] << 8) | t[3],
        e
    );
};
const $b = /* @__PURE__ */ e2(Sb),
    o2 = /* @__PURE__ */ DC(
        {
            __proto__: null,
            default: $b,
        },
        [Sb]
    );
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uo =
    // tslint:disable-next-line
    $b || o2;
function xa(n) {
    return uo.fromString(n, !0, 16);
}
const Gb = xa("c3a5c85c97cb3127"),
    co = xa("b492b66fbe98f273"),
    De = xa("9ae16a3b2f90404f");
function hd(n) {
    return n.xor(n.shru(47));
}
function Eb(n, t, e) {
    const s = n.slice(t, t + e);
    return uo.fromBytes(Array.from(s), !0, !0);
}
function Xt(n, t) {
    return Eb(n, t, 8);
}
function bm(n, t) {
    return Eb(n, t, 4);
}
function ge(n, t) {
    return t === 0 ? n : n.shru(t).or(n.shl(64 - t));
}
function zs(n, t, e = xa("9ddfea08eb382d69")) {
    let s = n.xor(t).mul(e);
    s = s.xor(s.shru(47));
    let o = t.xor(s).mul(e);
    return (o = o.xor(o.shru(47))), (o = o.mul(e)), o;
}
function r2(n, t, e, s, o, r) {
    (o = o.add(n)), (r = ge(r.add(o).add(s), 21));
    const i = o;
    return (
        (o = o.add(t)),
        (o = o.add(e)),
        (r = r.add(ge(o, 44))),
        [o.add(s), r.add(i)]
    );
}
function Za(n, t, e, s) {
    return r2(Xt(n, t), Xt(n, t + 8), Xt(n, t + 16), Xt(n, t + 24), e, s);
}
function i2(n, t = n.length) {
    if (t >= 8) {
        const e = De.add(t * 2),
            s = Xt(n, 0).add(De),
            o = Xt(n, t - 8),
            r = ge(o, 37).mul(e).add(s),
            i = ge(s, 25).add(o).mul(e);
        return zs(r, i, e);
    }
    if (t >= 4) {
        const e = De.add(t * 2),
            s = bm(n, 0);
        return zs(s.shl(3).add(t), bm(n, t - 4), e);
    }
    if (t > 0) {
        const e = n[0],
            s = n[t >> 1],
            o = n[t - 1],
            r = e + (s << 8),
            i = t + (o << 2);
        return hd(De.mul(r).xor(Gb.mul(i))).mul(De);
    }
    return De;
}
function a2(n, t = n.length) {
    const e = De.add(t * 2),
        s = Xt(n, 0).mul(co),
        o = Xt(n, 8),
        r = Xt(n, t - 8).mul(e),
        i = Xt(n, t - 16).mul(De);
    return zs(
        ge(s.add(o), 43).add(ge(r, 30)).add(i),
        s.add(ge(o.add(De), 18)).add(r),
        e
    );
}
function l2(n, t = n.length) {
    const e = De.add(t * 2),
        s = Xt(n, 0).mul(De),
        o = Xt(n, 8),
        r = Xt(n, t - 8).mul(e),
        i = Xt(n, t - 16).mul(De),
        a = ge(s.add(o), 43).add(ge(r, 30)).add(i),
        l = zs(a, s.add(ge(o.add(De), 18)).add(r), e),
        c = Xt(n, 16).mul(e),
        u = Xt(n, 24),
        d = a.add(Xt(n, t - 32)).mul(e),
        h = l.add(Xt(n, t - 24)).mul(e);
    return zs(
        ge(c.add(u), 43).add(ge(d, 30)).add(h),
        c.add(ge(u.add(s), 18)).add(d),
        e
    );
}
function Lb(n, t = n.length) {
    const e = uo.fromNumber(81, !0);
    if (t <= 32) return t <= 16 ? i2(n, t) : a2(n, t);
    if (t <= 64) return l2(n, t);
    let s = e,
        o = e.mul(co).add(113),
        r = hd(o.mul(De).add(113)).mul(De),
        i = [uo.UZERO, uo.UZERO],
        a = [uo.UZERO, uo.UZERO];
    s = s.mul(De).add(Xt(n, 0));
    let l = 0;
    const c = ((t - 1) >> 6) * 64,
        u = c + ((t - 1) & 63) - 63;
    do
        (s = ge(
            s
                .add(o)
                .add(i[0])
                .add(Xt(n, l + 8)),
            37
        ).mul(co)),
            (o = ge(o.add(i[1]).add(Xt(n, l + 48)), 42).mul(co)),
            (s = s.xor(a[1])),
            (o = o.add(i[0]).add(Xt(n, l + 40))),
            (r = ge(r.add(a[0]), 33).mul(co)),
            (i = Za(n, l, i[1].mul(co), s.add(a[0]))),
            (a = Za(n, l + 32, r.add(a[1]), o.add(Xt(n, l + 16)))),
            ([r, s] = [s, r]),
            (l += 64);
    while (l !== c);
    const d = co.add(r.and(255).shl(1));
    return (
        (l = u),
        (a[0] = a[0].add((t - 1) & 63)),
        (i[0] = i[0].add(a[0])),
        (a[0] = a[0].add(i[0])),
        (s = ge(
            s
                .add(o)
                .add(i[0])
                .add(Xt(n, l + 8)),
            37
        ).mul(d)),
        (o = ge(o.add(i[1]).add(Xt(n, l + 48)), 42).mul(d)),
        (s = s.xor(a[1].mul(9))),
        (o = o.add(i[0].mul(9).add(Xt(n, l + 40)))),
        (r = ge(r.add(a[0]), 33).mul(d)),
        (i = Za(n, l, i[1].mul(d), s.add(a[0]))),
        (a = Za(n, l + 32, r.add(a[1]), o.add(Xt(n, l + 16)))),
        ([r, s] = [s, r]),
        zs(
            zs(i[0], a[0], d).add(hd(o).mul(Gb)).add(r),
            zs(i[1], a[1], d).add(s),
            d
        )
    );
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Is(n, t) {
    return t === "string" ? ms(n) : Qs([n], t);
}
function c2(n, t) {
    return (
        (n instanceof Float32Array && t === "float32") ||
        (n instanceof Int32Array && t === "int32") ||
        (n instanceof Uint8Array && t === "bool")
    );
}
function Qs(n, t) {
    if (t === "string")
        throw new Error("Cannot convert a string[] to a TypedArray");
    if (
        (Array.isArray(n) && (n = Ks(n)),
        F().getBool("DEBUG") && eb(n, t),
        c2(n, t))
    )
        return n;
    if (t == null || t === "float32" || t === "complex64")
        return new Float32Array(n);
    if (t === "int32") return new Int32Array(n);
    if (t === "bool") {
        const e = new Uint8Array(n.length);
        for (let s = 0; s < e.length; ++s) Math.round(n[s]) !== 0 && (e[s] = 1);
        return e;
    } else throw new Error(`Unknown data type ${t}`);
}
function Ie() {
    return F().platform.now();
}
function u2(n, t) {
    return F().platform.fetch(n, t);
}
function ms(n, t = "utf-8") {
    return (t = t || "utf-8"), F().platform.encode(n, t);
}
function gs(n, t = "utf-8") {
    return (t = t || "utf-8"), F().platform.decode(n, t);
}
function qe(n) {
    return F().platform.isTypedArray != null
        ? F().platform.isTypedArray(n)
        : vb(n);
}
function Ks(n, t = [], e = !1) {
    if (
        (t == null && (t = []),
        typeof n == "boolean" ||
            typeof n == "number" ||
            typeof n == "string" ||
            Ci(n) ||
            n == null ||
            (qe(n) && e))
    )
        t.push(n);
    else if (Array.isArray(n) || qe(n))
        for (let s = 0; s < n.length; ++s) Ks(n[s], t, e);
    else {
        let s = -1;
        for (const o of Object.keys(n))
            /^([1-9]+[0-9]*|0)$/.test(o) && (s = Math.max(s, Number(o)));
        for (let o = 0; o <= s; o++) Ks(n[o], t, e);
    }
    return t;
}
const QY = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            arraysEqual: $t,
            arraysEqualWithNull: XC,
            assert: C,
            assertNonNegativeIntegerDimensions: is,
            assertNonNull: Hl,
            assertShapesMatch: Pe,
            bytesFromStringArray: sb,
            bytesPerElement: ri,
            checkConversionForErrors: eb,
            clamp: Os,
            computeStrides: dt,
            convertBackendValuesAndArrayBuffer: ib,
            createScalarValue: Is,
            createShuffledIndices: ZC,
            decodeString: gs,
            distSquared: AC,
            encodeString: ms,
            fetch: u2,
            fingerPrint64: Lb,
            flatten: Ks,
            getArrayFromDType: ne,
            getTypedArrayFromDType: Se,
            hasEncodingLoss: Qd,
            hexToLong: xa,
            indexToLoc: Xo,
            inferDtype: Oo,
            inferFromImplicitShape: Yd,
            isBoolean: ob,
            isFunction: Xs,
            isInt: Co,
            isNumber: pl,
            isPromise: Ci,
            isScalarShape: OC,
            isString: vr,
            isTypedArray: qe,
            isValidDtype: nb,
            locToIndex: zn,
            makeOnesTypedArray: _l,
            makeZerosNestedTypedArray: Jd,
            makeZerosTypedArray: ke,
            nearestDivisor: fl,
            nearestLargerEven: Bl,
            now: Ie,
            parseAxisParam: Ct,
            randUniform: PC,
            repeatedTry: id,
            rightPad: xo,
            shuffle: Ud,
            shuffleCombo: zC,
            sizeFromShape: X,
            sizeToSquarishShape: hl,
            squeezeShape: ws,
            sum: tb,
            swap: ds,
            tanh: KC,
            toNestedArray: kn,
            toTypedArray: Qs,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class d2 {
    constructor(t, e) {
        (this.backendTimer = t),
            (this.logger = e),
            e == null && (this.logger = new p2());
    }
    profileKernel(t, e, s) {
        let o;
        const r = () => {
            o = s();
        };
        let i;
        const a = Ie();
        if (this.backendTimer.timerAvailable()) i = this.backendTimer.time(r);
        else {
            r();
            for (const c of o) c.dataSync();
            i = Promise.resolve({ kernelMs: Ie() - a });
        }
        if (F().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
            for (let c = 0; c < o.length; c++) {
                const u = o[c];
                u.data().then((d) => {
                    h2(d, u.dtype, t);
                });
            }
        return {
            kernelName: t,
            outputs: o,
            inputs: e,
            timeMs: i.then((c) => c.kernelMs),
            extraInfo: i.then((c) =>
                c.getExtraProfileInfo != null ? c.getExtraProfileInfo() : ""
            ),
        };
    }
    logKernelProfile(t) {
        const {
            kernelName: e,
            outputs: s,
            timeMs: o,
            inputs: r,
            extraInfo: i,
        } = t;
        s.forEach((a) => {
            Promise.all([a.data(), o, i]).then((l) => {
                this.logger.logKernelProfile(e, a, l[0], l[1], r, l[2]);
            });
        });
    }
}
function h2(n, t, e) {
    if (t !== "float32") return !1;
    for (let s = 0; s < n.length; s++) {
        const o = n[s];
        if (isNaN(o) || !isFinite(o))
            return console.warn(`Found ${o} in the result of '${e}'`), !0;
    }
    return !1;
}
class p2 {
    logKernelProfile(t, e, s, o, r, i) {
        const a = typeof o == "number" ? xo(`${o}ms`, 9) : o.error,
            l = xo(t, 25),
            c = e.rank,
            u = e.size,
            d = xo(e.shape.toString(), 14);
        let h = "";
        for (const p in r) {
            const f = r[p];
            if (f != null) {
                const m = f.shape || e.shape,
                    g = m.length;
                h += `${p}: ${g}D ${g > 0 ? m : ""} `;
            }
        }
        console.log(
            `%c${l}	%c${a}	%c${c}D ${d}	%c${u}	%c${h}	%c${i}`,
            "font-weight:bold",
            "color:red",
            "color:blue",
            "color: orange",
            "color: green",
            "color: steelblue"
        );
    }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f2(n, t, e) {
    const s = {},
        o = {};
    for (let l = 0; l < t.length; l++) s[t[l].id] = !0;
    for (let l = 0; l < n.length; l++) {
        const c = n[l],
            u = c.inputs;
        for (const d in u) {
            const h = u[d];
            let p = !1;
            for (let f = 0; f < t.length; f++)
                if (s[h.id]) {
                    c.outputs.forEach((m) => (s[m.id] = !0)),
                        (p = !0),
                        (o[c.id] = !0);
                    break;
                }
            if (p) break;
        }
    }
    const r = {};
    r[e.id] = !0;
    const i = {};
    for (let l = n.length - 1; l >= 0; l--) {
        const c = n[l],
            u = c.inputs;
        for (let d = 0; d < c.outputs.length; d++)
            if (r[c.outputs[d].id]) {
                for (const h in u) (r[u[h].id] = !0), (i[c.id] = !0);
                break;
            }
    }
    const a = [];
    for (let l = 0; l < n.length; l++) {
        const c = n[l];
        if (o[c.id] && i[c.id]) {
            const u = {};
            for (const h in c.inputs) {
                const p = c.inputs[h];
                s[p.id] && (u[h] = p);
            }
            const d = Object.assign({}, c);
            (d.inputs = u), (d.outputs = c.outputs), a.push(d);
        }
    }
    return a;
}
function m2(n, t, e, s) {
    for (let o = t.length - 1; o >= 0; o--) {
        const r = t[o],
            i = [];
        if (
            (r.outputs.forEach((l) => {
                const c = n[l.id];
                c != null ? i.push(c) : i.push(null);
            }),
            r.gradient == null)
        )
            throw new Error(
                `Cannot compute gradient: gradient function not found for ${r.kernelName}.`
            );
        const a = r.gradient(i);
        for (const l in r.inputs) {
            if (!(l in a))
                throw new Error(
                    `Cannot backprop through input ${l}. Available gradients found: ${Object.keys(
                        a
                    )}.`
                );
            const c = e(() => a[l]());
            if (c.dtype !== "float32")
                throw new Error(
                    `Error in gradient for op ${r.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${c.dtype}'`
                );
            const u = r.inputs[l];
            if (!$t(c.shape, u.shape))
                throw new Error(
                    `Error in gradient for op ${r.kernelName}. The gradient of input '${l}' has shape '${c.shape}', which does not match the shape of the input '${u.shape}'`
                );
            if (n[u.id] == null) n[u.id] = c;
            else {
                const d = n[u.id];
                (n[u.id] = s(d, c)), d.dispose();
            }
        }
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xm = 20,
    Ar = 3,
    Gu = 7;
function g2(n, t, e, s) {
    const o = dt(t),
        r = b2(n, t, e, o),
        i = t.length,
        a = ol(n, t, e, o, r),
        l = ["Tensor"];
    return (
        s &&
            (l.push(`  dtype: ${e}`),
            l.push(`  rank: ${i}`),
            l.push(`  shape: [${t}]`),
            l.push("  values:")),
        l.push(
            a.map((c) => "    " + c).join(`
`)
        ),
        l.join(`
`)
    );
}
function b2(n, t, e, s) {
    const o = X(t),
        r = s[s.length - 1],
        i = new Array(r).fill(0),
        a = t.length,
        l = e === "complex64" ? Ur(n) : n;
    if (a > 1)
        for (let c = 0; c < o / r; c++) {
            const u = c * r;
            for (let d = 0; d < r; d++)
                i[d] = Math.max(i[d], _r(l[u + d], 0, e).length);
        }
    return i;
}
function _r(n, t, e) {
    let s;
    return (
        Array.isArray(n)
            ? (s = `${parseFloat(n[0].toFixed(Gu))} + ${parseFloat(
                  n[1].toFixed(Gu)
              )}j`)
            : vr(n)
            ? (s = `'${n}'`)
            : e === "bool"
            ? (s = Mb(n))
            : (s = parseFloat(n.toFixed(Gu)).toString()),
        xo(s, t)
    );
}
function Mb(n) {
    return n === 0 ? "false" : "true";
}
function ol(n, t, e, s, o, r = !0) {
    const i = e === "complex64" ? 2 : 1,
        a = t[0],
        l = t.length;
    if (l === 0) {
        if (e === "complex64") {
            const m = Ur(n);
            return [_r(m[0], 0, e)];
        }
        return e === "bool" ? [Mb(n[0])] : [n[0].toString()];
    }
    if (l === 1) {
        if (a > xm) {
            const g = Ar * i;
            let b = Array.from(n.slice(0, g)),
                x = Array.from(n.slice((a - Ar) * i, a * i));
            return (
                e === "complex64" && ((b = Ur(b)), (x = Ur(x))),
                [
                    "[" +
                        b.map((w, y) => _r(w, o[y], e)).join(", ") +
                        ", ..., " +
                        x.map((w, y) => _r(w, o[a - Ar + y], e)).join(", ") +
                        "]",
                ]
            );
        }
        return [
            "[" +
                (e === "complex64" ? Ur(n) : Array.from(n))
                    .map((g, b) => _r(g, o[b], e))
                    .join(", ") +
                "]",
        ];
    }
    const c = t.slice(1),
        u = s.slice(1),
        d = s[0] * i,
        h = [];
    if (a > xm) {
        for (let m = 0; m < Ar; m++) {
            const g = m * d,
                b = g + d;
            h.push(
                ...ol(
                    n.slice(g, b),
                    c,
                    e,
                    u,
                    o,
                    !1
                    /* isLast */
                )
            );
        }
        h.push("...");
        for (let m = a - Ar; m < a; m++) {
            const g = m * d,
                b = g + d;
            h.push(
                ...ol(
                    n.slice(g, b),
                    c,
                    e,
                    u,
                    o,
                    m === a - 1
                    /* isLast */
                )
            );
        }
    } else
        for (let m = 0; m < a; m++) {
            const g = m * d,
                b = g + d;
            h.push(
                ...ol(
                    n.slice(g, b),
                    c,
                    e,
                    u,
                    o,
                    m === a - 1
                    /* isLast */
                )
            );
        }
    const p = l === 2 ? "," : "";
    h[0] = "[" + (a > 0 ? h[0] + p : "");
    for (let m = 1; m < h.length - 1; m++) h[m] = " " + h[m] + p;
    let f = `,
`;
    for (let m = 2; m < l; m++)
        f += `
`;
    return (h[h.length - 1] = " " + h[h.length - 1] + "]" + (r ? "" : f)), h;
}
function Ur(n) {
    const t = [];
    for (let e = 0; e < n.length; e += 2) t.push([n[e], n[e + 1]]);
    return t;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ve {
    constructor(t, e, s) {
        if (
            ((this.dtype = e),
            (this.shape = t.slice()),
            (this.size = X(t)),
            s != null)
        ) {
            const o = s.length;
            C(
                o === this.size,
                () =>
                    `Length of values '${o}' does not match the size inferred by the shape '${this.size}'.`
            );
        }
        if (e === "complex64")
            throw new Error(
                "complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag)."
            );
        (this.values = s || ne(e, this.size)), (this.strides = dt(t));
    }
    /**
     * Sets a value in the buffer at a given location.
     *
     * @param value The value to set.
     * @param locs  The location indices.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    set(t, ...e) {
        e.length === 0 && (e = [0]),
            C(
                e.length === this.rank,
                () =>
                    `The number of provided coordinates (${e.length}) must match the rank (${this.rank})`
            );
        const s = this.locToIndex(e);
        this.values[s] = t;
    }
    /**
     * Returns the value in the buffer at the provided location.
     *
     * @param locs The location indices.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    get(...t) {
        t.length === 0 && (t = [0]);
        let e = 0;
        for (const o of t) {
            if (o < 0 || o >= this.shape[e]) {
                const r = `Requested out of range element at ${t}.   Buffer shape=${this.shape}`;
                throw new Error(r);
            }
            e++;
        }
        let s = t[t.length - 1];
        for (let o = 0; o < t.length - 1; ++o) s += this.strides[o] * t[o];
        return this.values[s];
    }
    locToIndex(t) {
        if (this.rank === 0) return 0;
        if (this.rank === 1) return t[0];
        let e = t[t.length - 1];
        for (let s = 0; s < t.length - 1; ++s) e += this.strides[s] * t[s];
        return e;
    }
    indexToLoc(t) {
        if (this.rank === 0) return [];
        if (this.rank === 1) return [t];
        const e = new Array(this.shape.length);
        for (let s = 0; s < e.length - 1; ++s)
            (e[s] = Math.floor(t / this.strides[s])),
                (t -= e[s] * this.strides[s]);
        return (e[e.length - 1] = t), e;
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Creates an immutable `tf.Tensor` object from the buffer.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    toTensor() {
        return Dn().makeTensor(this.values, this.shape, this.dtype);
    }
}
let Dn = null,
    or = null;
function x2(n) {
    Dn = n;
}
function y2(n) {
    or = n;
}
class Mt {
    constructor(t, e, s, o) {
        (this.kept = !1),
            (this.isDisposedInternal = !1),
            (this.shape = t.slice()),
            (this.dtype = e || "float32"),
            (this.size = X(t)),
            (this.strides = dt(t)),
            (this.dataId = s),
            (this.id = o),
            (this.rankType = this.rank < 5 ? this.rank.toString() : "higher");
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async buffer() {
        const t = await this.data();
        return or.buffer(this.shape, this.dtype, t);
    }
    /**
     * Returns a `tf.TensorBuffer` that holds the underlying data.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    bufferSync() {
        return or.buffer(this.shape, this.dtype, this.dataSync());
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * asynchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async array() {
        const t = await this.data();
        return kn(this.shape, t, this.dtype === "complex64");
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * synchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    arraySync() {
        return kn(this.shape, this.dataSync(), this.dtype === "complex64");
    }
    /**
     * Asynchronously downloads the values from the `tf.Tensor`. Returns a
     * promise of `TypedArray` that resolves when the computation has finished.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async data() {
        this.throwIfDisposed();
        const t = Dn().read(this.dataId);
        if (this.dtype === "string") {
            const e = await t;
            try {
                return e.map((s) => gs(s));
            } catch {
                throw new Error(
                    "Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes()."
                );
            }
        }
        return t;
    }
    /**
     * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`
     * and `data()`, this method prevents data from being downloaded to CPU.
     *
     * For WebGL backend, the data will be stored on a densely packed texture.
     * This means that the texture will use the RGBA channels to store value.
     *
     * For WebGPU backend, the data will be stored on a buffer. There is no
     * parameter, so can not use a user-defined size to create the buffer.
     *
     * @param options:
     *     For WebGL,
     *         - customTexShape: Optional. If set, will use the user defined
     *     texture shape to create the texture.
     *
     * @returns For WebGL backend, a GPUData contains the new texture and
     *     its information.
     *     {
     *        tensorRef: The tensor that is associated with this texture,
     *        texture: WebGLTexture,
     *        texShape: [number, number] // [height, width]
     *     }
     *
     *     For WebGPU backend, a GPUData contains the new buffer.
     *     {
     *        tensorRef: The tensor that is associated with this buffer,
     *        buffer: GPUBuffer,
     *     }
     *
     *     Remember to dispose the GPUData after it is used by
     *     `res.tensorRef.dispose()`.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    dataToGPU(t) {
        return this.throwIfDisposed(), Dn().readToGPU(this.dataId, t);
    }
    /**
     * Synchronously downloads the values from the `tf.Tensor`. This blocks the
     * UI thread until the values are ready, which can cause performance issues.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    dataSync() {
        this.throwIfDisposed();
        const t = Dn().readSync(this.dataId);
        if (this.dtype === "string")
            try {
                return t.map((e) => gs(e));
            } catch {
                throw new Error(
                    "Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes()."
                );
            }
        return t;
    }
    /** Returns the underlying bytes of the tensor's data. */
    async bytes() {
        this.throwIfDisposed();
        const t = await Dn().read(this.dataId);
        return this.dtype === "string" ? t : new Uint8Array(t.buffer);
    }
    /**
     * Disposes `tf.Tensor` from memory.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    dispose() {
        this.isDisposed ||
            (this.kerasMask && this.kerasMask.dispose(),
            Dn().disposeTensor(this),
            (this.isDisposedInternal = !0));
    }
    get isDisposed() {
        return this.isDisposedInternal;
    }
    throwIfDisposed() {
        if (this.isDisposed) throw new Error("Tensor is disposed.");
    }
    /**
     * Prints the `tf.Tensor`. See `tf.print` for details.
     *
     * @param verbose Whether to print verbose information about the tensor,
     *    including dtype and size.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    print(t = !1) {
        return or.print(this, t);
    }
    /**
     * Returns a copy of the tensor. See `tf.clone` for details.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    clone() {
        return this.throwIfDisposed(), or.clone(this);
    }
    /**
     * Returns a human-readable description of the tensor. Useful for logging.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    toString(t = !1) {
        const e = this.dataSync();
        return g2(e, this.shape, this.dtype, t);
    }
    cast(t) {
        return this.throwIfDisposed(), or.cast(this, t);
    }
    variable(t = !0, e, s) {
        return this.throwIfDisposed(), Dn().makeVariable(this, t, e, s);
    }
}
Object.defineProperty(Mt, Symbol.hasInstance, {
    value: (n) =>
        !!n &&
        n.data != null &&
        n.dataSync != null &&
        n.throwIfDisposed != null,
});
function K() {
    return jd("Tensor", () => Mt);
}
K();
class yl extends Mt {
    constructor(t, e, s, o) {
        super(t.shape, t.dtype, t.dataId, o),
            (this.trainable = e),
            (this.name = s);
    }
    /**
     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
     * the same shape and dtype as the old `tf.Tensor`.
     *
     * @param newValue New tensor to be assigned to this variable.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    assign(t) {
        if (t.dtype !== this.dtype)
            throw new Error(
                `dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`
            );
        if (!$t(t.shape, this.shape))
            throw new Error(
                `shape of the new value (${t.shape}) and previous value (${this.shape}) must match`
            );
        Dn().disposeTensor(this),
            (this.dataId = t.dataId),
            Dn().incRef(
                this,
                null
                /* backend */
            );
    }
    dispose() {
        Dn().disposeVariable(this), (this.isDisposedInternal = !0);
    }
}
Object.defineProperty(yl, Symbol.hasInstance, {
    value: (n) =>
        n instanceof Mt && n.assign != null && n.assign instanceof Function,
});
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var ym;
(function (n) {
    (n.R0 = "R0"),
        (n.R1 = "R1"),
        (n.R2 = "R2"),
        (n.R3 = "R3"),
        (n.R4 = "R4"),
        (n.R5 = "R5"),
        (n.R6 = "R6");
})(ym || (ym = {}));
var pd;
(function (n) {
    (n.float32 = "float32"),
        (n.int32 = "int32"),
        (n.bool = "int32"),
        (n.complex64 = "complex64");
})(pd || (pd = {}));
var fd;
(function (n) {
    (n.float32 = "float32"),
        (n.int32 = "int32"),
        (n.bool = "bool"),
        (n.complex64 = "complex64");
})(fd || (fd = {}));
var md;
(function (n) {
    (n.float32 = "float32"),
        (n.int32 = "float32"),
        (n.bool = "float32"),
        (n.complex64 = "complex64");
})(md || (md = {}));
var gd;
(function (n) {
    (n.float32 = "complex64"),
        (n.int32 = "complex64"),
        (n.bool = "complex64"),
        (n.complex64 = "complex64");
})(gd || (gd = {}));
const w2 = {
    float32: md,
    int32: pd,
    bool: fd,
    complex64: gd,
};
function tn(n, t) {
    if (n === "string" || t === "string") {
        if (n === "string" && t === "string") return "string";
        throw new Error(`Can not upcast ${n} with ${t}`);
    }
    return w2[n][t];
}
function Yh(n) {
    return tn(n, "int32");
}
function Wb(n) {
    return (
        n != null &&
        typeof n == "object" &&
        "texture" in n &&
        n.texture instanceof WebGLTexture
    );
}
function Db(n) {
    return (
        typeof GPUBuffer < "u" &&
        n != null &&
        typeof n == "object" &&
        "buffer" in n &&
        n.buffer instanceof GPUBuffer
    );
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function se(n, t) {
    if (n.dtype === t.dtype) return [n, t];
    const e = tn(n.dtype, t.dtype);
    return [n.cast(e), t.cast(e)];
}
function I2(n, t) {
    C(
        n.dtype === t.dtype,
        () =>
            `The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`
    );
}
function Yc(n, t) {
    return t.some((e) => e.id === n.id);
}
function bs(n) {
    const t = [];
    return Fb(n, t, /* @__PURE__ */ new Set()), t;
}
function Fb(n, t, e) {
    if (n == null) return;
    if (n instanceof Mt) {
        t.push(n);
        return;
    }
    if (!C2(n)) return;
    const s = n;
    for (const o in s) {
        const r = s[o];
        e.has(r) || (e.add(r), Fb(r, t, e));
    }
}
function C2(n) {
    return Array.isArray(n) || typeof n == "object";
}
const JY = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            assertTypesMatch: I2,
            getTensorsInContainer: bs,
            isTensorInList: Yc,
            makeTypesMatch: se,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Eu(n) {
    return n.kernelName != null;
}
class wm {
    constructor() {
        (this.registeredVariables = {}),
            (this.nextTapeNodeId = 0),
            (this.numBytes = 0),
            (this.numTensors = 0),
            (this.numStringTensors = 0),
            (this.numDataBuffers = 0),
            (this.gradientDepth = 0),
            (this.kernelDepth = 0),
            (this.scopeStack = []),
            (this.numDataMovesStack = []),
            (this.nextScopeId = 0),
            (this.tensorInfo = /* @__PURE__ */ new WeakMap()),
            (this.profiling = !1),
            (this.activeProfile = {
                newBytes: 0,
                newTensors: 0,
                peakBytes: 0,
                kernels: [],
                result: null,
                get kernelNames() {
                    return Array.from(new Set(this.kernels.map((t) => t.name)));
                },
            });
    }
    dispose() {
        for (const t in this.registeredVariables)
            this.registeredVariables[t].dispose();
    }
}
class mr {
    constructor(t) {
        (this.ENV = t),
            (this.registry = {}),
            (this.registryFactory = {}),
            (this.pendingBackendInitId = 0),
            (this.state = new wm());
    }
    async ready() {
        if (this.pendingBackendInit != null)
            return this.pendingBackendInit.then(() => {});
        if (this.backendInstance != null) return;
        const t = this.getSortedBackends();
        for (let e = 0; e < t.length; e++) {
            const s = t[e];
            if (await this.initializeBackend(s).success) {
                await this.setBackend(s);
                return;
            }
        }
        throw new Error(
            "Could not initialize any backends, all backend initializations failed."
        );
    }
    get backend() {
        if (this.pendingBackendInit != null)
            throw new Error(
                `Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`
            );
        if (this.backendInstance == null) {
            const { name: t, asyncInit: e } =
                this.initializeBackendsAndReturnBest();
            if (e)
                throw new Error(
                    `The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`
                );
            this.setBackend(t);
        }
        return this.backendInstance;
    }
    backendNames() {
        return Object.keys(this.registryFactory);
    }
    findBackend(t) {
        if (!(t in this.registry))
            if (t in this.registryFactory) {
                const { asyncInit: e } = this.initializeBackend(t);
                if (e) return null;
            } else return null;
        return this.registry[t];
    }
    findBackendFactory(t) {
        return t in this.registryFactory
            ? this.registryFactory[t].factory
            : null;
    }
    registerBackend(t, e, s = 1) {
        return t in this.registryFactory
            ? (ln(
                  `${t} backend was already registered. Reusing existing backend factory.`
              ),
              !1)
            : ((this.registryFactory[t] = { factory: e, priority: s }), !0);
    }
    async setBackend(t) {
        if (this.registryFactory[t] == null)
            throw new Error(`Backend name '${t}' not found in registry`);
        if (((this.backendName = t), this.registry[t] == null)) {
            this.backendInstance = null;
            const { success: e, asyncInit: s } = this.initializeBackend(t);
            if (!(s ? await e : e)) return !1;
        }
        return (
            (this.backendInstance = this.registry[t]),
            this.setupRegisteredKernels(),
            (this.profiler = new d2(this.backendInstance)),
            !0
        );
    }
    setupRegisteredKernels() {
        ud(this.backendName).forEach((e) => {
            e.setupFunc != null && e.setupFunc(this.backendInstance);
        });
    }
    disposeRegisteredKernels(t) {
        ud(t).forEach((s) => {
            s.disposeFunc != null && s.disposeFunc(this.registry[t]);
        });
    }
    /**
     * Initializes a backend by looking up the backend name in the factory
     * registry and calling the factory method. Returns a boolean representing
     * whether the initialization of the backend suceeded. Throws an error if
     * there is no backend in the factory registry.
     */
    initializeBackend(t) {
        const e = this.registryFactory[t];
        if (e == null)
            throw new Error(
                `Cannot initialize backend ${t}, no registration found.`
            );
        try {
            const s = e.factory();
            if (s && !(s instanceof _d) && typeof s.then == "function") {
                const o = ++this.pendingBackendInitId,
                    r = s
                        .then((i) =>
                            o < this.pendingBackendInitId
                                ? !1
                                : ((this.registry[t] = i),
                                  (this.pendingBackendInit = null),
                                  !0)
                        )
                        .catch(
                            (i) => (
                                o < this.pendingBackendInitId ||
                                    ((this.pendingBackendInit = null),
                                    ln(`Initialization of backend ${t} failed`),
                                    ln(i.stack || i.message)),
                                !1
                            )
                        );
                return (
                    (this.pendingBackendInit = r), { success: r, asyncInit: !0 }
                );
            } else
                return (this.registry[t] = s), { success: !0, asyncInit: !1 };
        } catch (s) {
            return (
                ln(`Initialization of backend ${t} failed`),
                ln(s.stack || s.message),
                { success: !1, asyncInit: !1 }
            );
        }
    }
    removeBackend(t) {
        if (!(t in this.registryFactory))
            throw new Error(`${t} backend not found in registry`);
        this.backendName === t &&
            this.pendingBackendInit != null &&
            this.pendingBackendInitId++,
            t in this.registry &&
                (this.disposeRegisteredKernels(t),
                this.registry[t].dispose(),
                delete this.registry[t]),
            delete this.registryFactory[t],
            this.backendName === t &&
                ((this.pendingBackendInit = null),
                (this.backendName = null),
                (this.backendInstance = null));
    }
    getSortedBackends() {
        if (Object.keys(this.registryFactory).length === 0)
            throw new Error("No backend found in registry.");
        return Object.keys(this.registryFactory).sort(
            (t, e) =>
                this.registryFactory[e].priority -
                this.registryFactory[t].priority
        );
    }
    initializeBackendsAndReturnBest() {
        const t = this.getSortedBackends();
        for (let e = 0; e < t.length; e++) {
            const s = t[e],
                { success: o, asyncInit: r } = this.initializeBackend(s);
            if (r || o) return { name: s, asyncInit: r };
        }
        throw new Error(
            "Could not initialize any backends, all backend initializations failed."
        );
    }
    moveData(t, e) {
        const s = this.state.tensorInfo.get(e),
            o = s.backend,
            r = this.readSync(e),
            i = o.refCount(e);
        o.disposeData(e, !0),
            (s.backend = t),
            t.move(e, r, s.shape, s.dtype, i),
            this.shouldCheckForMemLeaks() &&
                this.state.numDataMovesStack[
                    this.state.numDataMovesStack.length - 1
                ]++;
    }
    tidy(t, e) {
        let s = null;
        if (e == null) {
            if (typeof t != "function")
                throw new Error("Please provide a function to tidy()");
            e = t;
        } else {
            if (typeof t != "string" && !(t instanceof String))
                throw new Error(
                    "When calling with two arguments, the first argument to tidy() must be a string"
                );
            if (typeof e != "function")
                throw new Error(
                    "When calling with two arguments, the 2nd argument to tidy() must be a function"
                );
            s = t;
        }
        let o;
        return this.scopedRun(
            () => this.startScope(s),
            () => this.endScope(o),
            () => (
                (o = e()),
                o instanceof Promise &&
                    console.error("Cannot return a Promise inside of tidy."),
                o
            )
        );
    }
    scopedRun(t, e, s) {
        t();
        try {
            const o = s();
            return e(), o;
        } catch (o) {
            throw (e(), o);
        }
    }
    nextTensorId() {
        return mr.nextTensorId++;
    }
    nextVariableId() {
        return mr.nextVariableId++;
    }
    /**
     * This method is called instead of the public-facing tensor.clone() when
     * saving a tensor for backwards pass. It makes sure to add the clone
     * operation to the tape regardless of being called inside a kernel
     * execution.
     */
    clone(t) {
        const e = $.runKernel(Ki, { x: t }),
            s = { x: t },
            o = (i) => ({
                x: () => {
                    const a = "float32",
                        l = { x: i },
                        c = { dtype: a };
                    return $.runKernel(
                        Gi,
                        l,
                        // tslint:disable-next-line: no-unnecessary-type-assertion
                        c
                    );
                },
            }),
            r = [];
        return (
            this.addTapeNode(this.state.activeScope.name, s, [e], o, r, {}), e
        );
    }
    /**
     * Execute a kernel with the given name and return the output tensor.
     *
     * @param kernelName The name of the kernel to execute.
     * @param inputs A map of input names to tensors.
     * @param attrs A map of attribute names to their values. An attribute is a
     *     primitive (non-tensor) input to the kernel.
     * @param inputsToSave A list of tensors, inputs to save for the backprop
     *     computation.
     * @param outputsToSave A list of booleans, specifying which output to save
     *     for the backprop computation. These are booleans since the output
     * tensors are not visible to the user.
     */
    runKernel(t, e, s) {
        if (
            (this.backendName == null && this.backend,
            !(bl(t, this.backendName) != null))
        )
            throw new Error(
                `Kernel '${t}' not registered for backend '${this.backendName}'`
            );
        return this.runKernelFunc({ kernelName: t, inputs: e, attrs: s });
    }
    shouldCheckForMemLeaks() {
        return this.ENV.getBool("IS_TEST");
    }
    checkKernelForMemLeak(t, e, s) {
        const o = this.backend.numDataIds();
        let r = 0;
        s.forEach((l) => {
            r += l.dtype === "complex64" ? 3 : 1;
        });
        const i =
                this.state.numDataMovesStack[
                    this.state.numDataMovesStack.length - 1
                ],
            a = o - e - r - i;
        if (a > 0)
            throw new Error(
                `Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`
            );
    }
    /**
     * Internal helper method to execute a kernel Func
     *
     * Use `runKernel` to execute kernels from outside of engine.
     */
    runKernelFunc(t) {
        let e,
            s = [];
        const o = this.isTapeOn(),
            r = this.state.numBytes,
            i = this.state.numTensors;
        this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
        let a;
        this.backendName == null && this.backend;
        let l;
        const c = Eu(t)
            ? t.kernelName
            : this.state.activeScope != null
            ? this.state.activeScope.name
            : "";
        if (Eu(t)) {
            const { kernelName: f, inputs: m, attrs: g } = t;
            this.backendName == null && this.backend;
            const b = bl(f, this.backendName);
            C(
                b != null,
                () =>
                    `Cannot find registered kernel '${f}' for backend '${this.backendName}'`
            ),
                (a = () => {
                    const x = this.backend.numDataIds();
                    l = b.kernelFunc({
                        inputs: m,
                        attrs: g,
                        backend: this.backend,
                    });
                    const w = Array.isArray(l) ? l : [l];
                    this.shouldCheckForMemLeaks() &&
                        this.checkKernelForMemLeak(f, x, w);
                    const y = w.map((I) =>
                        I.rank != null ? I : this.makeTensorFromTensorInfo(I)
                    );
                    if (o) {
                        const I = this.getTensorsForGradient(f, m, y);
                        s = this.saveTensorsForBackwardMode(I);
                    }
                    return y;
                });
        } else {
            const { forwardFunc: f } = t,
                m = (g) => {
                    o && (s = g.map((b) => this.keep(this.clone(b))));
                };
            a = () => {
                const g = this.backend.numDataIds();
                l = this.tidy(() => f(this.backend, m));
                const b = Array.isArray(l) ? l : [l];
                return (
                    this.shouldCheckForMemLeaks() &&
                        this.checkKernelForMemLeak(c, g, b),
                    b
                );
            };
        }
        const { inputs: u, attrs: d } = t,
            h = Eu(t) ? null : t.backwardsFunc;
        let p;
        return (
            this.scopedRun(
                // Stop recording to a tape when running a kernel.
                () => this.state.kernelDepth++,
                () => this.state.kernelDepth--,
                () => {
                    !this.ENV.getBool("DEBUG") && !this.state.profiling
                        ? (e = a())
                        : ((p = this.profiler.profileKernel(c, u, () => a())),
                          this.ENV.getBool("DEBUG") &&
                              this.profiler.logKernelProfile(p),
                          (e = p.outputs));
                }
            ),
            o && this.addTapeNode(c, u, e, h, s, d),
            this.state.profiling &&
                this.state.activeProfile.kernels.push({
                    name: c,
                    bytesAdded: this.state.numBytes - r,
                    totalBytesSnapshot: this.state.numBytes,
                    tensorsAdded: this.state.numTensors - i,
                    totalTensorsSnapshot: this.state.numTensors,
                    inputShapes: Object.keys(u).map((f) =>
                        u[f] != null ? u[f].shape : null
                    ),
                    outputShapes: e.map((f) => f.shape),
                    kernelTimeMs: p.timeMs,
                    extraInfo: p.extraInfo,
                }),
            Array.isArray(l) ? e : e[0]
        );
    }
    /**
     * Saves tensors used in forward mode for use in backward mode.
     *
     * @param tensors the list of tensors to save.
     */
    saveTensorsForBackwardMode(t) {
        return t.map((s) => this.keep(this.clone(s)));
    }
    /**
     * Returns a list of tensors to save for a given gradient calculation.
     *
     * @param kernelName name of kernel to look up gradient for.
     * @param inputs a map of input tensors.
     * @param outputs an array of output tensors from forward mode of kernel.
     */
    getTensorsForGradient(t, e, s) {
        const o = dm(t);
        if (o != null) {
            const r = o.inputsToSave || [],
                i = o.outputsToSave || [];
            let a;
            o.saveAllInputs
                ? (C(
                      Array.isArray(e),
                      () =>
                          "saveAllInputs is true, expected inputs to be an array."
                  ),
                  (a = Object.keys(e).map((c) => e[c])))
                : (a = r.map((c) => e[c]));
            const l = s.filter((c, u) => i[u]);
            return a.concat(l);
        }
        return [];
    }
    /**
     * Internal method used by public APIs for tensor creation. Makes a new
     * tensor with the provided shape, dtype and values. It always
     * creates a new data id and writes the values to the underlying backend.
     */
    makeTensor(t, e, s, o) {
        if (t == null)
            throw new Error("Values passed to engine.makeTensor() are null");
        (s = s || "float32"), (o = o || this.backend);
        let r = t;
        s === "string" && vr(t[0]) && (r = t.map((l) => ms(l)));
        const i = o.write(r, e, s),
            a = new Mt(e, s, i, this.nextTensorId());
        if ((this.trackTensor(a, o), s === "string")) {
            const l = this.state.tensorInfo.get(i),
                c = sb(r);
            (this.state.numBytes += c - l.bytes), (l.bytes = c);
        }
        return a;
    }
    /**
     * Internal method used by backends. Makes a new tensor
     * that is a wrapper around an existing data id. It doesn't create
     * a new data id, only increments the ref count used in memory tracking.
     * @deprecated
     */
    makeTensorFromDataId(t, e, s, o) {
        s = s || "float32";
        const r = { dataId: t, shape: e, dtype: s };
        return this.makeTensorFromTensorInfo(r, o);
    }
    /**
     * Internal method used by backends. Makes a new tensor that is a wrapper
     * around an existing data id in TensorInfo. It doesn't create a new data id,
     * only increments the ref count used in memory tracking.
     */
    makeTensorFromTensorInfo(t, e) {
        const { dataId: s, shape: o, dtype: r } = t,
            i = new Mt(o, r, s, this.nextTensorId());
        return this.trackTensor(i, e), i;
    }
    makeVariable(t, e = !0, s, o) {
        (s = s || this.nextVariableId().toString()),
            o != null && o !== t.dtype && (t = t.cast(o));
        const r = new yl(t, e, s, this.nextTensorId());
        if (this.state.registeredVariables[r.name] != null)
            throw new Error(
                `Variable with name ${r.name} was already registered`
            );
        return (
            (this.state.registeredVariables[r.name] = r),
            this.incRef(r, this.backend),
            r
        );
    }
    trackTensor(t, e) {
        this.state.numTensors++,
            t.dtype === "string" && this.state.numStringTensors++;
        let s = 0;
        t.dtype !== "complex64" &&
            t.dtype !== "string" &&
            (s = t.size * ri(t.dtype)),
            (this.state.numBytes += s),
            this.state.tensorInfo.has(t.dataId) ||
                (this.state.numDataBuffers++,
                this.state.tensorInfo.set(t.dataId, {
                    backend: e || this.backend,
                    dtype: t.dtype,
                    shape: t.shape,
                    bytes: s,
                })),
            t instanceof yl || this.track(t);
    }
    // Track the tensor by dataId and increase the refCount for the dataId in the
    // backend.
    // TODO(pyu10055): This is currently used by makeVariable method, to increase
    // refCount on the backend for the dataId. It can potentially be replaced with
    // Identity op indead of calling backend directly.
    incRef(t, e) {
        this.trackTensor(t, e), this.backend.incRef(t.dataId);
    }
    removeDataId(t, e) {
        this.state.tensorInfo.has(t) &&
            this.state.tensorInfo.get(t).backend === e &&
            (this.state.tensorInfo.delete(t), this.state.numDataBuffers--);
    }
    disposeTensor(t) {
        if (!this.state.tensorInfo.has(t.dataId)) return;
        const e = this.state.tensorInfo.get(t.dataId);
        if (
            (this.state.numTensors--,
            t.dtype === "string" &&
                (this.state.numStringTensors--,
                (this.state.numBytes -= e.bytes)),
            t.dtype !== "complex64" && t.dtype !== "string")
        ) {
            const s = t.size * ri(t.dtype);
            this.state.numBytes -= s;
        }
        e.backend.disposeData(t.dataId) &&
            this.removeDataId(t.dataId, e.backend);
    }
    disposeVariables() {
        for (const t in this.state.registeredVariables) {
            const e = this.state.registeredVariables[t];
            this.disposeVariable(e);
        }
    }
    disposeVariable(t) {
        this.disposeTensor(t),
            this.state.registeredVariables[t.name] != null &&
                delete this.state.registeredVariables[t.name];
    }
    memory() {
        const t = this.backend.memory();
        return (
            (t.numTensors = this.state.numTensors),
            (t.numDataBuffers = this.state.numDataBuffers),
            (t.numBytes = this.state.numBytes),
            this.state.numStringTensors > 0 &&
                ((t.unreliable = !0),
                t.reasons == null && (t.reasons = []),
                t.reasons.push(
                    "Memory usage by string tensors is approximate (2 bytes per character)"
                )),
            t
        );
    }
    async profile(t) {
        this.state.profiling = !0;
        const e = this.state.numBytes,
            s = this.state.numTensors;
        (this.state.activeProfile.kernels = []),
            (this.state.activeProfile.result = await t()),
            (this.state.profiling = !1),
            (this.state.activeProfile.peakBytes = Math.max(
                ...this.state.activeProfile.kernels.map(
                    (o) => o.totalBytesSnapshot
                )
            )),
            (this.state.activeProfile.newBytes = this.state.numBytes - e),
            (this.state.activeProfile.newTensors = this.state.numTensors - s);
        for (const o of this.state.activeProfile.kernels)
            (o.kernelTimeMs = await o.kernelTimeMs),
                (o.extraInfo = await o.extraInfo);
        return this.state.activeProfile;
    }
    isTapeOn() {
        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
    }
    addTapeNode(t, e, s, o, r, i) {
        const a = {
                id: this.state.nextTapeNodeId++,
                kernelName: t,
                inputs: e,
                outputs: s,
                saved: r,
            },
            l = dm(t);
        l != null && (o = l.gradFunc),
            o != null &&
                (a.gradient = (c) => (
                    (c = c.map((u, d) => {
                        if (u == null) {
                            const h = s[d],
                                p = ke(h.size, h.dtype);
                            return this.makeTensor(p, h.shape, h.dtype);
                        }
                        return u;
                    })),
                    o(c.length > 1 ? c : c[0], r, i)
                )),
            this.state.activeTape.push(a);
    }
    keep(t) {
        return (t.kept = !0), t;
    }
    startTape() {
        this.state.gradientDepth === 0 && (this.state.activeTape = []),
            this.state.gradientDepth++;
    }
    endTape() {
        this.state.gradientDepth--;
    }
    /**
     * Start a scope. Use this with endScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */
    startScope(t) {
        const e = {
            track: [],
            name: "unnamed scope",
            id: this.state.nextScopeId++,
        };
        t && (e.name = t),
            this.state.scopeStack.push(e),
            (this.state.activeScope = e);
    }
    /**
     * End a scope. Use this with startScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */
    endScope(t) {
        const e = bs(t),
            s = new Set(e.map((r) => r.id));
        for (let r = 0; r < this.state.activeScope.track.length; r++) {
            const i = this.state.activeScope.track[r];
            !i.kept && !s.has(i.id) && i.dispose();
        }
        const o = this.state.scopeStack.pop();
        (this.state.activeScope =
            this.state.scopeStack.length === 0
                ? null
                : this.state.scopeStack[this.state.scopeStack.length - 1]),
            e.forEach((r) => {
                !r.kept && r.scopeId === o.id && this.track(r);
            });
    }
    /**
     * Returns gradients of `f` with respect to each of the `xs`. The gradients
     * returned are of the same length as `xs`, but some might be null if `f`
     * was not a function of that `x`. It also takes optional dy to multiply the
     * gradient, which defaults to `1`.
     */
    gradients(t, e, s, o = !1) {
        if (
            (C(e.length > 0, () => "gradients() received an empty list of xs."),
            s != null && s.dtype !== "float32")
        )
            throw new Error(
                `dy must have 'float32' dtype, but has '${s.dtype}'`
            );
        const r = this.scopedRun(
            () => this.startTape(),
            () => this.endTape(),
            () => this.tidy("forward", t)
        );
        C(
            r instanceof Mt,
            () => "The result y returned by f() must be a tensor."
        );
        const i = f2(this.state.activeTape, e, r);
        if (!o && i.length === 0 && e.length > 0)
            throw new Error(
                "Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y."
            );
        return this.tidy("backward", () => {
            const a = {};
            (a[r.id] = s ?? v2(r.shape)),
                m2(
                    a,
                    i,
                    // Pass the tidy function to avoid circular dep with `tape.ts`.
                    (c) => this.tidy(c),
                    // Pass an add function to avoide a circular dep with `tape.ts`.
                    S2
                );
            const l = e.map((c) => a[c.id]);
            return (
                this.state.gradientDepth === 0 &&
                    (this.state.activeTape.forEach((c) => {
                        for (const u of c.saved) u.dispose();
                    }),
                    (this.state.activeTape = null)),
                { value: r, grads: l }
            );
        });
    }
    customGrad(t) {
        return (
            C(Xs(t), () => "The f passed in customGrad(f) must be a function."),
            (...e) => {
                C(
                    e.every((a) => a instanceof Mt),
                    () =>
                        "The args passed in customGrad(f)(x1, x2,...) must all be tensors"
                );
                let s;
                const o = {};
                e.forEach((a, l) => {
                    o[l] = a;
                });
                const r = (a, l) => (
                        (s = t(...e, l)),
                        C(
                            s.value instanceof Mt,
                            () =>
                                "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"
                        ),
                        C(
                            Xs(s.gradFunc),
                            () =>
                                "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."
                        ),
                        s.value
                    ),
                    i = (a, l) => {
                        const c = s.gradFunc(a, l),
                            u = Array.isArray(c) ? c : [c];
                        C(
                            u.length === e.length,
                            () =>
                                "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."
                        ),
                            C(
                                u.every((h) => h instanceof Mt),
                                () =>
                                    "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."
                            );
                        const d = {};
                        return (
                            u.forEach((h, p) => {
                                d[p] = () => h;
                            }),
                            d
                        );
                    };
                return this.runKernelFunc({
                    forwardFunc: r,
                    backwardsFunc: i,
                    inputs: o,
                });
            }
        );
    }
    readSync(t) {
        return this.state.tensorInfo.get(t).backend.readSync(t);
    }
    read(t) {
        return this.state.tensorInfo.get(t).backend.read(t);
    }
    readToGPU(t, e) {
        return this.state.tensorInfo.get(t).backend.readToGPU(t, e);
    }
    async time(t) {
        const e = Ie(),
            s = await this.backend.time(t);
        return (s.wallMs = Ie() - e), s;
    }
    /**
     * Tracks a Tensor in the current scope to be automatically cleaned up
     * when the current scope ends, and returns the value.
     *
     * @param result The Tensor to track in the current scope.
     */
    track(t) {
        return (
            this.state.activeScope != null &&
                ((t.scopeId = this.state.activeScope.id),
                this.state.activeScope.track.push(t)),
            t
        );
    }
    get registeredVariables() {
        return this.state.registeredVariables;
    }
    /**
     * Resets the engine state. Removes all backends but does not remove
     * registered backend factories.
     */
    reset() {
        this.pendingBackendInitId++,
            this.state.dispose(),
            this.ENV.reset(),
            (this.state = new wm());
        for (const t in this.registry)
            this.disposeRegisteredKernels(t),
                this.registry[t].dispose(),
                delete this.registry[t];
        (this.backendName = null),
            (this.backendInstance = null),
            (this.pendingBackendInit = null);
    }
}
mr.nextTensorId = 0;
mr.nextVariableId = 0;
function v2(n) {
    const t = _l(X(n), "float32");
    return $.makeTensor(t, n, "float32");
}
function Vb() {
    const n = lb();
    if (n._tfengine == null) {
        const t = new BC(n);
        n._tfengine = new mr(t);
    }
    return YC(n._tfengine.ENV), x2(() => n._tfengine), n._tfengine;
}
const $ = Vb();
function S2(n, t) {
    const e = { a: n, b: t };
    return $.runKernel(Sr, e);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function k2() {
    return typeof navigator < "u" && navigator != null;
}
let bd;
function T2(n) {
    bd = n;
}
function Qh(n) {
    if (bd !== void 0) return bd;
    if (n || k2()) {
        if ((n || (n = navigator), n.product === "ReactNative")) return !0;
        const t =
            n.userAgent ||
            n.vendor || // tslint:disable-next-line:no-any
            (typeof window < "u" ? window.opera : "");
        if (!t) {
            const e = n;
            return e.userAgentData && e.userAgentData.mobile;
        }
        return (
            /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                t
            ) || // tslint:disable-next-line:max-line-length
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                t.substr(0, 4)
            )
        );
    }
    return !1;
}
function Jh() {
    return (
        (typeof window < "u" && window.document != null) || //@ts-ignore
        typeof WorkerGlobalScope < "u"
    );
}
const jY = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            isBrowser: Jh,
            isMobile: Qh,
            mockIsMobile: T2,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Be = F();
Be.registerFlag(
    "DEBUG",
    () => !1,
    (n) => {
        n &&
            console.warn(
                "Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance."
            );
    }
);
Be.registerFlag("IS_BROWSER", () => Jh());
Be.registerFlag(
    "IS_NODE",
    () =>
        typeof process < "u" &&
        typeof process.versions < "u" &&
        typeof process.versions.node < "u"
);
Be.registerFlag(
    "IS_CHROME",
    () =>
        typeof navigator < "u" &&
        navigator != null &&
        navigator.userAgent != null &&
        /Chrome/.test(navigator.userAgent) &&
        /Google Inc/.test(navigator.vendor)
);
Be.registerFlag(
    "IS_SAFARI",
    () =>
        typeof navigator < "u" &&
        navigator != null &&
        navigator.userAgent != null &&
        /Safari/.test(navigator.userAgent) &&
        /Apple/.test(navigator.vendor)
);
Be.registerFlag("PROD", () => !1);
Be.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () =>
    Be.getBool("DEBUG")
);
Be.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => !0);
Be.registerFlag("IS_TEST", () => !1);
Be.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => Be.getBool("DEBUG"));
Be.registerFlag("WRAP_TO_IMAGEBITMAP", () => !1);
Be.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => !1);
Be.registerFlag("USE_SETTIMEOUTCUSTOM", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ya(n, t) {
    let e = n;
    if (qe(n)) return t === "string" ? [] : [n.length];
    if (Wb(n)) {
        const o = n.channels || "RGBA";
        return [n.height, n.width * o.length];
    } else if (Db(n)) return [n.buffer.size / (t == null ? 4 : ri(t))];
    if (!Array.isArray(n)) return [];
    const s = [];
    for (; Array.isArray(e) || (qe(e) && t !== "string"); )
        s.push(e.length), (e = e[0]);
    return (
        Array.isArray(n) &&
            F().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") &&
            zb(n, s, []),
        s
    );
}
function zb(n, t, e) {
    if (((e = e || []), !Array.isArray(n) && !qe(n))) {
        C(
            t.length === 0,
            () =>
                `Element arr[${e.join(
                    "]["
                )}] is a primitive, but should be an array/TypedArray of ${
                    t[0]
                } elements`
        );
        return;
    }
    C(
        t.length > 0,
        () =>
            `Element arr[${e.join(
                "]["
            )}] should be a primitive, but is an array of ${n.length} elements`
    ),
        C(
            n.length === t[0],
            () =>
                `Element arr[${e.join("][")}] should have ${
                    t[0]
                } elements, but has ${n.length} elements`
        );
    const s = t.slice(1);
    for (let o = 0; o < n.length; ++o) zb(n[o], s, e.concat(o));
}
function Im(n, t, e, s) {
    if (n !== "string_or_numeric") {
        if (n == null) throw new Error("Expected dtype cannot be null.");
        if ((n !== "numeric" && n !== t) || (n === "numeric" && t === "string"))
            throw new Error(
                `Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`
            );
    }
}
function T(n, t, e, s = "numeric") {
    if (n instanceof K()) return Im(s, n.dtype, t, e), n;
    let o = Oo(n);
    if (
        (o !== "string" &&
            ["bool", "int32", "float32"].indexOf(s) >= 0 &&
            (o = s),
        Im(s, o, t, e),
        n == null ||
            (!qe(n) &&
                !Array.isArray(n) &&
                typeof n != "number" &&
                typeof n != "boolean" &&
                typeof n != "string"))
    ) {
        const l = n == null ? "null" : n.constructor.name;
        throw new Error(
            `Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`
        );
    }
    const r = ya(n, o);
    !qe(n) && !Array.isArray(n) && (n = [n]);
    const a = o !== "string" ? Qs(n, o) : Ks(n, [], !0);
    return $.makeTensor(a, r, o);
}
function jh(n, t, e, s = "numeric") {
    if (!Array.isArray(n))
        throw new Error(
            `Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``
        );
    return n.map((r, i) => T(r, `${t}[${i}]`, e, s));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const N2 = "__op";
function L(n) {
    const t = Object.keys(n);
    if (t.length !== 1)
        throw new Error(
            `Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`
        );
    let e = t[0];
    const s = n[e];
    e.endsWith("_") && (e = e.substring(0, e.length - 1)), (e = e + N2);
    const o = (...r) => {
        $.startScope(e);
        try {
            const i = s(...r);
            return (
                Ci(i) &&
                    console.error("Cannot return a Promise inside of tidy."),
                $.endScope(i),
                i
            );
        } catch (i) {
            throw ($.endScope(null), i);
        }
    };
    return Object.defineProperty(o, "name", { value: e, configurable: !0 }), o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function R2(n, t) {
    const e = T(n, "real", "complex"),
        s = T(t, "imag", "complex");
    Pe(
        e.shape,
        s.shape,
        `real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`
    );
    const o = { real: e, imag: s };
    return $.runKernel(ih, o);
}
const vo = /* @__PURE__ */ L({ complex_: R2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wa(n, t, e, s) {
    if (s == null) s = Oo(n);
    else if (s === "complex64")
        throw new Error(
            "Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag)."
        );
    if (Db(n) || Wb(n)) {
        if (s !== "float32" && s !== "int32")
            throw new Error(
                `Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`
            );
        return $.backend.createTensorFromGPUData(n, t || e, s);
    }
    if (
        !qe(n) &&
        !Array.isArray(n) &&
        typeof n != "number" &&
        typeof n != "boolean" &&
        typeof n != "string"
    )
        throw new Error(
            "values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray"
        );
    if (t != null) {
        is(t);
        const o = X(t),
            r = X(e);
        C(
            o === r,
            () =>
                `Based on the provided shape, [${t}], the tensor should have ${o} values but has ${r}`
        );
        for (let i = 0; i < e.length; ++i) {
            const a = e[i],
                l = i === e.length - 1 ? a !== X(t.slice(i)) : !0;
            C(
                e[i] === t[i] || !l,
                () =>
                    `Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `
            );
        }
    }
    return (
        !qe(n) && !Array.isArray(n) && (n = [n]),
        (t = t || e),
        (n = s !== "string" ? Qs(n, s) : Ks(n, [], !0)),
        $.makeTensor(n, t, s)
    );
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $e(n, t, e) {
    const s = ya(n, e);
    return wa(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const So = {
    float32: 4,
    float16: 2,
    int32: 4,
    uint16: 2,
    uint8: 1,
    bool: 1,
    complex64: 8,
};
class Cs {
    /**
     * Concatenate a number of ArrayBuffers into one.
     *
     * @param buffers An array of ArrayBuffers to concatenate, or a single
     *     ArrayBuffer.
     * @returns Result of concatenating `buffers` in order.
     */
    static join(t) {
        return new Cs(t).slice();
    }
    constructor(t) {
        if (
            ((this.shards = []),
            (this.previousShardIndex = 0),
            t == null ||
                (t instanceof Array || (t = [t]),
                (t = t.map((s) => (qe(s) ? s.buffer : s))),
                t.length === 0))
        )
            return;
        this.bufferUniformSize = t[0].byteLength;
        let e = 0;
        for (let s = 0; s < t.length; s++) {
            const o = t[s];
            s !== t.length - 1 &&
                o.byteLength !== this.bufferUniformSize &&
                (this.bufferUniformSize = void 0);
            const r = e + o.byteLength;
            this.shards.push({ buffer: o, start: e, end: r }), (e = r);
        }
        this.shards.length === 0 && (this.byteLength = 0),
            (this.byteLength = this.shards[this.shards.length - 1].end);
    }
    slice(t = 0, e = this.byteLength) {
        if (this.shards.length === 0) return new ArrayBuffer(0);
        if (
            ((t = isNaN(Number(t)) ? 0 : t),
            (e = isNaN(Number(e)) ? 0 : e),
            (t = Math.max(0, t)),
            (e = Math.min(this.byteLength, e)),
            e <= t)
        )
            return new ArrayBuffer(0);
        const s = this.findShardForByte(t);
        if (s === -1)
            throw new Error(`Could not find start shard for byte ${t}`);
        const o = e - t,
            r = new ArrayBuffer(o),
            i = new Uint8Array(r);
        let a = 0;
        for (let l = s; l < this.shards.length; l++) {
            const c = this.shards[l],
                d = t + a - c.start,
                h = a,
                f = Math.min(e, c.end) - c.start,
                m = new Uint8Array(c.buffer, d, f - d);
            if ((i.set(m, h), (a += m.length), e < c.end)) break;
        }
        return r;
    }
    /**
     * Get the index of the shard that contains the byte at `byteIndex`.
     */
    findShardForByte(t) {
        if (this.shards.length === 0 || t < 0 || t >= this.byteLength)
            return -1;
        if (this.bufferUniformSize != null)
            return (
                (this.previousShardIndex = Math.floor(
                    t / this.bufferUniformSize
                )),
                this.previousShardIndex
            );
        function e(o) {
            return t < o.start ? -1 : t >= o.end ? 1 : 0;
        }
        if (e(this.shards[this.previousShardIndex]) === 0)
            return this.previousShardIndex;
        const s = $2(this.shards, e);
        return s === -1
            ? -1
            : ((this.previousShardIndex = s), this.previousShardIndex);
    }
}
function $2(n, t) {
    let e = 0,
        s = n.length;
    for (; e <= s; ) {
        const o = Math.floor((s - e) / 2) + e,
            r = t(n[o]);
        if (r === 0) return o;
        r < 0 ? (s = o) : (e = o + 1);
    }
    return -1;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qY() {
    F().set("PROD", !0);
}
function tQ() {
    F().set("DEBUG", !0);
}
function eQ() {
    F().set("DEPRECATION_WARNINGS_ENABLED", !1),
        console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function nQ(n) {
    F().getBool("DEPRECATION_WARNINGS_ENABLED") &&
        console.warn(
            n +
                " You can disable deprecation warnings with tf.disableDeprecationWarnings()."
        );
}
function sQ() {
    $.disposeVariables();
}
function Ot() {
    return $;
}
function wl() {
    return $.memory();
}
function oQ(n) {
    return $.profile(n);
}
function D(n, t) {
    return $.tidy(n, t);
}
function xt(n) {
    bs(n).forEach((e) => e.dispose());
}
function hn(n) {
    return $.keep(n);
}
function rQ(n) {
    return $.time(n);
}
function iQ(n) {
    return $.setBackend(n);
}
function aQ() {
    return $.ready();
}
function G2() {
    return $.backendName;
}
function lQ(n) {
    $.removeBackend(n);
}
function cQ(n) {
    return $.findBackend(n);
}
function uQ(n) {
    return $.findBackendFactory(n);
}
function Pb(n, t, e = 1) {
    return $.registerBackend(n, t, e);
}
function ps() {
    return $.backend;
}
function dQ(n, t) {
    F().setPlatform(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Zs = 4;
async function Cm(n, t) {
    const e = [],
        s = [],
        o = Array.isArray(n) ? n.map((i) => i.name) : Object.keys(n);
    for (let i = 0; i < o.length; ++i) {
        const a = o[i],
            l = Array.isArray(n) ? n[i].tensor : n[a];
        if (
            l.dtype !== "float32" &&
            l.dtype !== "int32" &&
            l.dtype !== "bool" &&
            l.dtype !== "string" &&
            l.dtype !== "complex64"
        )
            throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);
        const c = { name: a, shape: l.shape, dtype: l.dtype };
        if (l.dtype === "string") {
            const u = new Promise(async (d) => {
                const h = await l.bytes(),
                    p = h.reduce((g, b) => g + b.length, 0) + Zs * h.length,
                    f = new Uint8Array(p);
                let m = 0;
                for (let g = 0; g < h.length; g++) {
                    const b = h[g],
                        x = new Uint8Array(new Uint32Array([b.length]).buffer);
                    f.set(x, m), (m += Zs), f.set(b, m), (m += b.length);
                }
                d(f);
            });
            s.push(u);
        } else s.push(l.data());
        t != null && (c.group = t), e.push(c);
    }
    const r = await Promise.all(s);
    return { data: M2(r), specs: e };
}
function Ab(n, t) {
    const e = new Cs(n),
        s = {};
    let o = 0;
    for (const r of t) {
        const i = E2(r, (a, l) => e.slice(o + a, o + l));
        (s[r.name] = Ob(r, e.slice(o, o + i))), (o += i);
    }
    return s;
}
function E2(n, t) {
    const e = X(n.shape);
    let s;
    if ("quantization" in n) {
        const o = n.quantization;
        s = So[o.dtype];
    } else if (n.dtype === "string") {
        let o = 0;
        for (let r = 0; r < e; r++) o += Zs + new Uint32Array(t(o, o + Zs))[0];
        return o;
    } else s = So[n.dtype];
    return e * s;
}
async function L2(n, t) {
    const e = X(n.shape);
    let s;
    if ("quantization" in n) {
        const o = n.quantization;
        s = So[o.dtype];
    } else if (n.dtype === "string") {
        let o = 0;
        for (let r = 0; r < e; r++)
            o += Zs + new Uint32Array(await t(o, o + Zs))[0];
        return o;
    } else s = So[n.dtype];
    return e * s;
}
function Ob(n, t) {
    const e = n.name,
        s = n.dtype,
        o = n.shape,
        r = X(o);
    let i,
        a = 0;
    if ("quantization" in n) {
        const l = n.quantization;
        if (l.dtype === "uint8" || l.dtype === "uint16") {
            if (!("min" in l && "scale" in l))
                throw new Error(
                    `Weight ${n.name} with quantization ${l.dtype} doesn't have corresponding metadata min and scale.`
                );
        } else if (l.dtype === "float16") {
            if (s !== "float32")
                throw new Error(
                    `Weight ${n.name} is quantized with ${l.dtype} which only supports weights of type float32 not ${s}.`
                );
        } else
            throw new Error(
                `Weight ${n.name} has unknown quantization dtype ${l.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`
            );
        const c = So[l.dtype],
            u = l.dtype === "uint8" ? new Uint8Array(t) : new Uint16Array(t);
        if (s === "float32")
            if (l.dtype === "uint8" || l.dtype === "uint16") {
                i = new Float32Array(u.length);
                for (let d = 0; d < u.length; d++) {
                    const h = u[d];
                    i[d] = h * l.scale + l.min;
                }
            } else if (l.dtype === "float16") i = K2()(u);
            else
                throw new Error(
                    `Unsupported quantization type ${l.dtype} for weight type float32.`
                );
        else if (s === "int32") {
            if (l.dtype !== "uint8" && l.dtype !== "uint16")
                throw new Error(
                    `Unsupported quantization type ${l.dtype} for weight type int32.`
                );
            i = new Int32Array(u.length);
            for (let d = 0; d < u.length; d++) {
                const h = u[d];
                i[d] = Math.round(h * l.scale + l.min);
            }
        } else throw new Error(`Unsupported dtype in weight '${e}': ${s}`);
        a += r * c;
    } else if (s === "string") {
        const l = X(n.shape);
        i = [];
        for (let c = 0; c < l; c++) {
            const u = new Uint32Array(t.slice(a, a + Zs))[0];
            a += Zs;
            const d = new Uint8Array(t.slice(a, a + u));
            i.push(d), (a += u);
        }
    } else {
        const l = So[s];
        if (s === "float32") i = new Float32Array(t);
        else if (s === "int32") i = new Int32Array(t);
        else if (s === "bool") i = new Uint8Array(t);
        else if (s === "complex64") {
            i = new Float32Array(t);
            const c = new Float32Array(i.length / 2),
                u = new Float32Array(i.length / 2);
            for (let f = 0; f < c.length; f++)
                (c[f] = i[f * 2]), (u[f] = i[f * 2 + 1]);
            const d = $e(c, o, "float32"),
                h = $e(u, o, "float32"),
                p = vo(d, h);
            return d.dispose(), h.dispose(), p;
        } else throw new Error(`Unsupported dtype in weight '${e}': ${s}`);
        a += r * l;
    }
    return $e(i, o, s);
}
async function vm(n, t, e) {
    let s = new Uint8Array(t);
    for (; s.byteLength < e; ) {
        const { done: o, value: r } = await n.read();
        if (o && r == null) {
            const a = e - s.byteLength;
            throw new Error(`Reader is done but ${a} bytes are still expected`);
        }
        const i = new Uint8Array(s.length + r.byteLength);
        i.set(s, 0), i.set(new Uint8Array(r), s.length), (s = i);
    }
    return s.buffer;
}
async function hQ(n, t) {
    const e = {},
        s = n.getReader();
    let o = new ArrayBuffer(0);
    for (const r of t) {
        const i = await L2(
            r,
            async (c, u) => ((o = await vm(s, o, u)), o.slice(c, u))
        );
        o = await vm(s, o, i);
        const a = o.slice(0, i);
        o = o.slice(i);
        const l = Ob(r, a);
        if (((e[r.name] = l), G2() === "webgpu")) {
            const c = ps();
            "uploadToGPU" in c &&
                X(l.shape) >= F().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD") &&
                c.uploadToGPU(l.dataId);
        }
    }
    return e;
}
function M2(n) {
    if (n === null)
        throw new Error(`Invalid input value: ${JSON.stringify(n)}`);
    let t = 0;
    const e = [];
    n.forEach((r) => {
        if (
            ((t += r.byteLength),
            e.push(
                r.byteLength === r.buffer.byteLength ? r : new r.constructor(r)
            ),
            !(
                r instanceof Float32Array ||
                r instanceof Int32Array ||
                r instanceof Uint8Array
            ))
        )
            throw new Error(
                `Unsupported TypedArray subtype: ${r.constructor.name}`
            );
    });
    const s = new Uint8Array(t);
    let o = 0;
    return (
        e.forEach((r) => {
            s.set(new Uint8Array(r.buffer), o), (o += r.byteLength);
        }),
        s.buffer
    );
}
const qh =
    typeof Buffer < "u" &&
    (typeof Blob > "u" || typeof atob > "u" || typeof btoa > "u");
function Sm(n) {
    return qh ? Buffer.byteLength(n, "utf8") : new Blob([n]).size;
}
function W2(n) {
    if (qh) return Buffer.from(n).toString("base64");
    const t = new Uint8Array(n);
    let e = "";
    for (let s = 0, o = t.length; s < o; s++) e += String.fromCharCode(t[s]);
    return btoa(e);
}
function D2(n) {
    if (qh) {
        const s = Buffer.from(n, "base64");
        return s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength);
    }
    const t = atob(n),
        e = new Uint8Array(t.length);
    for (let s = 0; s < t.length; ++s) e.set([t.charCodeAt(s)], s);
    return e.buffer;
}
function F2(n) {
    return Cs.join(n);
}
function pQ(n) {
    const t = "/";
    for (n = n.trim(); n.endsWith(t); ) n = n.slice(0, n.length - 1);
    const e = n.split(t);
    return e[e.length - 1];
}
function V2(n, t) {
    const e = {
        modelTopology: n.modelTopology,
        format: n.format,
        generatedBy: n.generatedBy,
        convertedBy: n.convertedBy,
        weightsManifest: t,
    };
    return (
        n.signature != null && (e.signature = n.signature),
        n.userDefinedMetadata != null &&
            (e.userDefinedMetadata = n.userDefinedMetadata),
        n.modelInitializer != null && (e.modelInitializer = n.modelInitializer),
        n.initializerSignature != null &&
            (e.initializerSignature = n.initializerSignature),
        n.trainingConfig != null && (e.trainingConfig = n.trainingConfig),
        e
    );
}
function z2(n, t, e) {
    const s = {
        modelTopology: n.modelTopology,
        format: n.format,
        generatedBy: n.generatedBy,
        convertedBy: n.convertedBy,
    };
    if (
        (n.trainingConfig != null && (s.trainingConfig = n.trainingConfig),
        n.weightsManifest != null)
    ) {
        if (!t)
            throw new Error(
                "modelJSON has weightsManifest but weightSpecs is null"
            );
        if (!e)
            throw new Error(
                "modelJSON has weightsManifest but weightData is null"
            );
        (s.weightSpecs = t), (s.weightData = e);
    }
    return (
        n.signature != null && (s.signature = n.signature),
        n.userDefinedMetadata != null &&
            (s.userDefinedMetadata = n.userDefinedMetadata),
        n.modelInitializer != null && (s.modelInitializer = n.modelInitializer),
        n.initializerSignature != null &&
            (s.initializerSignature = n.initializerSignature),
        s
    );
}
async function P2(n, t) {
    let e, s;
    return (
        n.weightsManifest != null && ([e, s] = await t(n.weightsManifest)),
        z2(n, e, s)
    );
}
function tp(n) {
    if (n.modelTopology instanceof ArrayBuffer)
        throw new Error("Expected JSON model topology, received ArrayBuffer.");
    return {
        dateSaved: /* @__PURE__ */ new Date(),
        modelTopologyType: "JSON",
        modelTopologyBytes:
            n.modelTopology == null ? 0 : Sm(JSON.stringify(n.modelTopology)),
        weightSpecsBytes:
            n.weightSpecs == null ? 0 : Sm(JSON.stringify(n.weightSpecs)),
        weightDataBytes:
            n.weightData == null ? 0 : new Cs(n.weightData).byteLength,
    };
}
function km(n) {
    const t = [];
    for (const e of n) t.push(...e.weights);
    return t;
}
function A2() {
    const n = (e) => {
            let s = e << 13,
                o = 0;
            for (; !(s & 8388608); ) (o -= 8388608), (s <<= 1);
            return (s &= -8388609), (o += 947912704), s | o;
        },
        t = new Uint32Array(2048);
    t[0] = 0;
    for (let e = 1; e < 1024; e++) t[e] = n(e);
    for (let e = 1024; e < 2048; e++) t[e] = 939524096 + ((e - 1024) << 13);
    return t;
}
function O2() {
    const n = new Uint32Array(64);
    (n[0] = 0),
        (n[31] = 1199570944),
        (n[32] = 2147483648),
        (n[63] = 3347054592);
    for (let t = 1; t < 31; t++) n[t] = t << 23;
    for (let t = 33; t < 63; t++) n[t] = 2147483648 + ((t - 32) << 23);
    return n;
}
function X2() {
    const n = new Uint32Array(64);
    for (let t = 0; t < 64; t++) n[t] = 1024;
    return (n[0] = n[32] = 0), n;
}
function K2() {
    const n = A2(),
        t = O2(),
        e = X2();
    return (s) => {
        const o = new ArrayBuffer(4 * s.length),
            r = new Uint32Array(o);
        for (let i = 0; i < s.length; i++) {
            const a = s[i],
                l = n[e[a >> 10] + (a & 1023)] + t[a >> 10];
            r[i] = l;
        }
        return new Float32Array(o);
    };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ee {
    constructor() {
        (this.saveRouters = []), (this.loadRouters = []);
    }
    static getInstance() {
        return ee.instance == null && (ee.instance = new ee()), ee.instance;
    }
    /**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */
    static registerSaveRouter(t) {
        ee.getInstance().saveRouters.push(t);
    }
    /**
     * Register a load-handler router.
     *
     * @param loadRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `load` method defined or `null`.
     */
    static registerLoadRouter(t) {
        ee.getInstance().loadRouters.push(t);
    }
    /**
     * Look up IOHandler for saving, given a URL-like string.
     *
     * @param url
     * @returns If only one match is found, an instance of IOHandler with the
     * `save` method defined. If no match is found, `null`.
     * @throws Error, if more than one match is found.
     */
    static getSaveHandlers(t) {
        return ee.getHandlers(t, "save");
    }
    /**
     * Look up IOHandler for loading, given a URL-like string.
     *
     * @param url
     * @param loadOptions Optional, custom load options.
     * @returns All valid handlers for `url`, given the currently registered
     *   handler routers.
     */
    static getLoadHandlers(t, e) {
        return ee.getHandlers(t, "load", e);
    }
    static getHandlers(t, e, s) {
        const o = [];
        return (
            (e === "load"
                ? ee.getInstance().loadRouters
                : ee.getInstance().saveRouters
            ).forEach((i) => {
                const a = i(t, s);
                a !== null && o.push(a);
            }),
            o
        );
    }
}
const fQ = (n) => ee.registerSaveRouter(n),
    mQ = (n) => ee.registerLoadRouter(n),
    Z2 = (n) => ee.getSaveHandlers(n),
    B2 = (n, t) => ee.getLoadHandlers(n, t);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xd = "tensorflowjs",
    yd = 1,
    go = "models_store",
    Ws = "model_info_store";
function Xb() {
    if (!F().getBool("IS_BROWSER"))
        throw new Error(
            "Failed to obtain IndexedDB factory because the current environmentis not a web browser."
        );
    const n = typeof window > "u" ? self : window,
        t =
            n.indexedDB ||
            n.mozIndexedDB ||
            n.webkitIndexedDB ||
            n.msIndexedDB ||
            n.shimIndexedDB;
    if (t == null)
        throw new Error(
            "The current browser does not appear to support IndexedDB."
        );
    return t;
}
function wd(n) {
    const t = n.result;
    t.createObjectStore(go, { keyPath: "modelPath" }),
        t.createObjectStore(Ws, { keyPath: "modelPath" });
}
class ko {
    constructor(t) {
        if (((this.indexedDB = Xb()), t == null || !t))
            throw new Error(
                "For IndexedDB, modelPath must not be null, undefined or empty."
            );
        this.modelPath = t;
    }
    async save(t) {
        if (t.modelTopology instanceof ArrayBuffer)
            throw new Error(
                "BrowserLocalStorage.save() does not support saving model topology in binary formats yet."
            );
        return this.databaseAction(this.modelPath, t);
    }
    async load() {
        return this.databaseAction(this.modelPath);
    }
    /**
     * Perform database action to put model artifacts into or read model artifacts
     * from IndexedDB object store.
     *
     * Whether the action is put or get depends on whether `modelArtifacts` is
     * specified. If it is specified, the action will be put; otherwise the action
     * will be get.
     *
     * @param modelPath A unique string path for the model.
     * @param modelArtifacts If specified, it will be the model artifacts to be
     *   stored in IndexedDB.
     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
     *   of `ModelArtifacts`, if the action is get.
     */
    databaseAction(t, e) {
        return new Promise((s, o) => {
            const r = this.indexedDB.open(xd, yd);
            (r.onupgradeneeded = () => wd(r)),
                (r.onsuccess = () => {
                    const i = r.result;
                    if (e == null) {
                        const a = i.transaction(go, "readonly"),
                            c = a.objectStore(go).get(this.modelPath);
                        (c.onsuccess = () => {
                            if (c.result == null)
                                return (
                                    i.close(),
                                    o(
                                        new Error(
                                            `Cannot find model with path '${this.modelPath}' in IndexedDB.`
                                        )
                                    )
                                );
                            s(c.result.modelArtifacts);
                        }),
                            (c.onerror = (u) => (i.close(), o(c.error))),
                            (a.oncomplete = () => i.close());
                    } else {
                        e.weightData = Cs.join(e.weightData);
                        const a = tp(e),
                            l = i.transaction(Ws, "readwrite");
                        let c = l.objectStore(Ws),
                            u;
                        try {
                            u = c.put({
                                modelPath: this.modelPath,
                                modelArtifactsInfo: a,
                            });
                        } catch (h) {
                            return o(h);
                        }
                        let d;
                        (u.onsuccess = () => {
                            d = i.transaction(go, "readwrite");
                            const h = d.objectStore(go);
                            let p;
                            try {
                                p = h.put({
                                    modelPath: this.modelPath,
                                    modelArtifacts: e,
                                    modelArtifactsInfo: a,
                                });
                            } catch (f) {
                                return o(f);
                            }
                            (p.onsuccess = () => s({ modelArtifactsInfo: a })),
                                (p.onerror = (f) => {
                                    c = l.objectStore(Ws);
                                    const m = c.delete(this.modelPath);
                                    (m.onsuccess = () => (
                                        i.close(), o(p.error)
                                    )),
                                        (m.onerror = (g) => (
                                            i.close(), o(p.error)
                                        ));
                                });
                        }),
                            (u.onerror = (h) => (i.close(), o(u.error))),
                            (l.oncomplete = () => {
                                d == null
                                    ? i.close()
                                    : (d.oncomplete = () => i.close());
                            });
                    }
                }),
                (r.onerror = (i) => o(r.error));
        });
    }
}
ko.URL_SCHEME = "indexeddb://";
const Kb = (n) =>
    F().getBool("IS_BROWSER") &&
    !Array.isArray(n) &&
    n.startsWith(ko.URL_SCHEME)
        ? H2(n.slice(ko.URL_SCHEME.length))
        : null;
ee.registerSaveRouter(Kb);
ee.registerLoadRouter(Kb);
function H2(n) {
    return new ko(n);
}
function _2(n) {
    return n.startsWith(ko.URL_SCHEME) ? n.slice(ko.URL_SCHEME.length) : n;
}
class U2 {
    constructor() {
        this.indexedDB = Xb();
    }
    async listModels() {
        return new Promise((t, e) => {
            const s = this.indexedDB.open(xd, yd);
            (s.onupgradeneeded = () => wd(s)),
                (s.onsuccess = () => {
                    const o = s.result,
                        r = o.transaction(Ws, "readonly"),
                        a = r.objectStore(Ws).getAll();
                    (a.onsuccess = () => {
                        const l = {};
                        for (const c of a.result)
                            l[c.modelPath] = c.modelArtifactsInfo;
                        t(l);
                    }),
                        (a.onerror = (l) => (o.close(), e(a.error))),
                        (r.oncomplete = () => o.close());
                }),
                (s.onerror = (o) => e(s.error));
        });
    }
    async removeModel(t) {
        return (
            (t = _2(t)),
            new Promise((e, s) => {
                const o = this.indexedDB.open(xd, yd);
                (o.onupgradeneeded = () => wd(o)),
                    (o.onsuccess = () => {
                        const r = o.result,
                            i = r.transaction(Ws, "readwrite"),
                            a = i.objectStore(Ws),
                            l = a.get(t);
                        let c;
                        (l.onsuccess = () => {
                            if (l.result == null)
                                return (
                                    r.close(),
                                    s(
                                        new Error(
                                            `Cannot find model with path '${t}' in IndexedDB.`
                                        )
                                    )
                                );
                            {
                                const u = a.delete(t),
                                    d = () => {
                                        c = r.transaction(go, "readwrite");
                                        const p = c.objectStore(go).delete(t);
                                        (p.onsuccess = () =>
                                            e(l.result.modelArtifactsInfo)),
                                            (p.onerror = (f) => s(l.error));
                                    };
                                (u.onsuccess = d),
                                    (u.onerror = (h) => (
                                        d(), r.close(), s(l.error)
                                    ));
                            }
                        }),
                            (l.onerror = (u) => (r.close(), s(l.error))),
                            (i.oncomplete = () => {
                                c == null
                                    ? r.close()
                                    : (c.oncomplete = () => r.close());
                            });
                    }),
                    (o.onerror = (r) => s(o.error));
            })
        );
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hs = "/",
    rr = "tensorflowjs_models",
    Zb = "info",
    Y2 = "model_topology",
    Q2 = "weight_specs",
    J2 = "weight_data",
    j2 = "model_metadata";
function Bb(n) {
    return {
        info: [rr, n, Zb].join(hs),
        topology: [rr, n, Y2].join(hs),
        weightSpecs: [rr, n, Q2].join(hs),
        weightData: [rr, n, J2].join(hs),
        modelMetadata: [rr, n, j2].join(hs),
    };
}
function Hb(n) {
    for (const t of Object.values(n)) window.localStorage.removeItem(t);
}
function q2(n) {
    const t = n.split(hs);
    if (t.length < 3) throw new Error(`Invalid key format: ${n}`);
    return t.slice(1, t.length - 1).join(hs);
}
function tv(n) {
    return n.startsWith(To.URL_SCHEME) ? n.slice(To.URL_SCHEME.length) : n;
}
class To {
    constructor(t) {
        if (
            !F().getBool("IS_BROWSER") ||
            typeof window > "u" ||
            typeof window.localStorage > "u"
        )
            throw new Error(
                "The current environment does not support local storage."
            );
        if (((this.LS = window.localStorage), t == null || !t))
            throw new Error(
                "For local storage, modelPath must not be null, undefined or empty."
            );
        (this.modelPath = t), (this.keys = Bb(this.modelPath));
    }
    /**
     * Save model artifacts to browser local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @param modelArtifacts The model artifacts to be stored.
     * @returns An instance of SaveResult.
     */
    async save(t) {
        if (t.modelTopology instanceof ArrayBuffer)
            throw new Error(
                "BrowserLocalStorage.save() does not support saving model topology in binary formats yet."
            );
        {
            const e = JSON.stringify(t.modelTopology),
                s = JSON.stringify(t.weightSpecs),
                o = tp(t),
                r = Cs.join(t.weightData);
            try {
                this.LS.setItem(this.keys.info, JSON.stringify(o)),
                    this.LS.setItem(this.keys.topology, e),
                    this.LS.setItem(this.keys.weightSpecs, s),
                    this.LS.setItem(this.keys.weightData, W2(r));
                const i = {
                    format: t.format,
                    generatedBy: t.generatedBy,
                    convertedBy: t.convertedBy,
                    signature: t.signature != null ? t.signature : void 0,
                    userDefinedMetadata:
                        t.userDefinedMetadata != null
                            ? t.userDefinedMetadata
                            : void 0,
                    modelInitializer:
                        t.modelInitializer != null
                            ? t.modelInitializer
                            : void 0,
                    initializerSignature:
                        t.initializerSignature != null
                            ? t.initializerSignature
                            : void 0,
                    trainingConfig:
                        t.trainingConfig != null ? t.trainingConfig : void 0,
                };
                return (
                    this.LS.setItem(this.keys.modelMetadata, JSON.stringify(i)),
                    { modelArtifactsInfo: o }
                );
            } catch {
                throw (
                    (Hb(this.keys),
                    new Error(
                        `Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${o.modelTopologyBytes}, weightSpecsBytes=${o.weightSpecsBytes}, weightDataBytes=${o.weightDataBytes}.`
                    ))
                );
            }
        }
    }
    /**
     * Load a model from local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @returns The loaded model (if loading succeeds).
     */
    async load() {
        const t = JSON.parse(this.LS.getItem(this.keys.info));
        if (t == null)
            throw new Error(
                `In local storage, there is no model with name '${this.modelPath}'`
            );
        if (t.modelTopologyType !== "JSON")
            throw new Error(
                "BrowserLocalStorage does not support loading non-JSON model topology yet."
            );
        const e = {},
            s = JSON.parse(this.LS.getItem(this.keys.topology));
        if (s == null)
            throw new Error(
                `In local storage, the topology of model '${this.modelPath}' is missing.`
            );
        e.modelTopology = s;
        const o = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
        if (o == null)
            throw new Error(
                `In local storage, the weight specs of model '${this.modelPath}' are missing.`
            );
        e.weightSpecs = o;
        const r = this.LS.getItem(this.keys.modelMetadata);
        if (r != null) {
            const a = JSON.parse(r);
            (e.format = a.format),
                (e.generatedBy = a.generatedBy),
                (e.convertedBy = a.convertedBy),
                a.signature != null && (e.signature = a.signature),
                a.userDefinedMetadata != null &&
                    (e.userDefinedMetadata = a.userDefinedMetadata),
                a.modelInitializer != null &&
                    (e.modelInitializer = a.modelInitializer),
                a.initializerSignature != null &&
                    (e.initializerSignature = a.initializerSignature),
                a.trainingConfig != null &&
                    (e.trainingConfig = a.trainingConfig);
        }
        const i = this.LS.getItem(this.keys.weightData);
        if (i == null)
            throw new Error(
                `In local storage, the binary weight values of model '${this.modelPath}' are missing.`
            );
        return (e.weightData = D2(i)), e;
    }
}
To.URL_SCHEME = "localstorage://";
const _b = (n) =>
    F().getBool("IS_BROWSER") &&
    !Array.isArray(n) &&
    n.startsWith(To.URL_SCHEME)
        ? ev(n.slice(To.URL_SCHEME.length))
        : null;
ee.registerSaveRouter(_b);
ee.registerLoadRouter(_b);
function ev(n) {
    return new To(n);
}
class nv {
    constructor() {
        C(
            F().getBool("IS_BROWSER"),
            () => "Current environment is not a web browser"
        ),
            C(
                typeof window > "u" || typeof window.localStorage < "u",
                () => "Current browser does not appear to support localStorage"
            ),
            (this.LS = window.localStorage);
    }
    async listModels() {
        const t = {},
            e = rr + hs,
            s = hs + Zb;
        for (let o = 0; o < this.LS.length; ++o) {
            const r = this.LS.key(o);
            if (r.startsWith(e) && r.endsWith(s)) {
                const i = q2(r);
                t[i] = JSON.parse(this.LS.getItem(r));
            }
        }
        return t;
    }
    async removeModel(t) {
        t = tv(t);
        const e = Bb(t);
        if (this.LS.getItem(e.info) == null)
            throw new Error(`Cannot find model at path '${t}'`);
        const s = JSON.parse(this.LS.getItem(e.info));
        return Hb(e), s;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lr = "://";
class We {
    constructor() {
        this.managers = {};
    }
    static getInstance() {
        return We.instance == null && (We.instance = new We()), We.instance;
    }
    /**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */
    static registerManager(t, e) {
        C(t != null, () => "scheme must not be undefined or null."),
            t.endsWith(lr) && (t = t.slice(0, t.indexOf(lr))),
            C(t.length > 0, () => "scheme must not be an empty string.");
        const s = We.getInstance();
        C(
            s.managers[t] == null,
            () =>
                `A model store manager is already registered for scheme '${t}'.`
        ),
            (s.managers[t] = e);
    }
    static getManager(t) {
        const e = We.getInstance().managers[t];
        if (e == null)
            throw new Error(`Cannot find model manager for scheme '${t}'`);
        return e;
    }
    static getSchemes() {
        return Object.keys(We.getInstance().managers);
    }
}
function rl(n) {
    if (n.indexOf(lr) === -1)
        throw new Error(
            `The url string provided does not contain a scheme. Supported schemes are: ${We.getSchemes().join(
                ","
            )}`
        );
    return {
        scheme: n.split(lr)[0],
        path: n.split(lr)[1],
    };
}
async function Ub(n, t, e = !1) {
    C(n !== t, () => `Old path and new path are the same: '${n}'`);
    const s = ee.getLoadHandlers(n);
    C(
        s.length > 0,
        () =>
            `Copying failed because no load handler is found for source URL ${n}.`
    ),
        C(
            s.length < 2,
            () =>
                `Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`
        );
    const o = s[0],
        r = ee.getSaveHandlers(t);
    C(
        r.length > 0,
        () =>
            `Copying failed because no save handler is found for destination URL ${t}.`
    ),
        C(
            r.length < 2,
            () =>
                `Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`
        );
    const i = r[0],
        a = rl(n).scheme,
        l = rl(n).path,
        c = a === rl(n).scheme,
        u = await o.load();
    e && c && (await We.getManager(a).removeModel(l));
    const d = await i.save(u);
    return (
        e && !c && (await We.getManager(a).removeModel(l)), d.modelArtifactsInfo
    );
}
async function gQ() {
    const n = We.getSchemes(),
        t = {};
    for (const e of n) {
        const s = await We.getManager(e).listModels();
        for (const o in s) {
            const r = e + lr + o;
            t[r] = s[o];
        }
    }
    return t;
}
async function bQ(n) {
    const t = rl(n);
    return We.getManager(t.scheme).removeModel(t.path);
}
async function xQ(n, t) {
    return Ub(n, t, !1);
}
async function yQ(n, t) {
    return Ub(n, t, !0);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class sv {
    constructor() {
        (this.messageName = "setTimeoutCustom"),
            (this.functionRefs = []),
            (this.handledMessageCount = 0),
            (this.hasEventListener = !1);
    }
    fetch(t, e) {
        return fetch(t, e);
    }
    now() {
        return performance.now();
    }
    encode(t, e) {
        if (e !== "utf-8" && e !== "utf8")
            throw new Error(
                `Browser's encoder only supports utf-8, but got ${e}`
            );
        return (
            this.textEncoder == null && (this.textEncoder = new TextEncoder()),
            this.textEncoder.encode(t)
        );
    }
    decode(t, e) {
        return new TextDecoder(e).decode(t);
    }
    // If the setTimeout nesting level is greater than 5 and timeout is less
    // than 4ms, timeout will be clamped to 4ms, which hurts the perf.
    // Interleaving window.postMessage and setTimeout will trick the browser and
    // avoid the clamp.
    setTimeoutCustom(t, e) {
        if (typeof window > "u" || !F().getBool("USE_SETTIMEOUTCUSTOM")) {
            setTimeout(t, e);
            return;
        }
        this.functionRefs.push(t),
            setTimeout(() => {
                window.postMessage(
                    {
                        name: this.messageName,
                        index: this.functionRefs.length - 1,
                    },
                    "*"
                );
            }, e),
            this.hasEventListener ||
                ((this.hasEventListener = !0),
                window.addEventListener(
                    "message",
                    (s) => {
                        if (
                            s.source === window &&
                            s.data.name === this.messageName
                        ) {
                            s.stopPropagation();
                            const o = this.functionRefs[s.data.index];
                            o(),
                                this.handledMessageCount++,
                                this.handledMessageCount ===
                                    this.functionRefs.length &&
                                    ((this.functionRefs = []),
                                    (this.handledMessageCount = 0));
                        }
                    },
                    !0
                ));
    }
    isTypedArray(t) {
        return vb(t);
    }
}
if (F().get("IS_BROWSER")) {
    F().setPlatform("browser", new sv());
    try {
        We.registerManager(To.URL_SCHEME, new nv());
    } catch {}
    try {
        We.registerManager(ko.URL_SCHEME, new U2());
    } catch {}
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ov = {
    // tslint:disable-next-line:no-require-imports
    importFetch: () => require("node-fetch"),
};
let Lu;
class rv {
    constructor() {
        (this.util = require("util")),
            (this.textEncoder = new this.util.TextEncoder());
    }
    fetch(t, e) {
        return F().global.fetch != null
            ? F().global.fetch(t, e)
            : (Lu == null && (Lu = ov.importFetch()), Lu(t, e));
    }
    now() {
        const t = process.hrtime();
        return t[0] * 1e3 + t[1] / 1e6;
    }
    encode(t, e) {
        if (e !== "utf-8" && e !== "utf8")
            throw new Error(
                `Node built-in encoder only supports utf-8, but got ${e}`
            );
        return this.textEncoder.encode(t);
    }
    decode(t, e) {
        return t.length === 0 ? "" : new this.util.TextDecoder(e).decode(t);
    }
    isTypedArray(t) {
        return (
            this.util.types.isFloat32Array(t) ||
            this.util.types.isInt32Array(t) ||
            this.util.types.isUint8Array(t) ||
            this.util.types.isUint8ClampedArray(t)
        );
    }
}
F().get("IS_NODE") &&
    !F().get("IS_BROWSER") &&
    F().setPlatform("node", new rv());
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vt(n, t = "float32", e) {
    return (t = t || "float32"), is(n), new ve(n, t, e);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iv(n, t) {
    const e = T(n, "x", "cast");
    if (!nb(t)) throw new Error(`Failed to cast to unknown dtype ${t}`);
    if (
        (t === "string" && e.dtype !== "string") ||
        (t !== "string" && e.dtype === "string")
    )
        throw new Error("Only strings can be casted to strings");
    const s = { x: e },
        o = { dtype: t };
    return $.runKernel(Gi, s, o);
}
const tt = /* @__PURE__ */ L({ cast_: iv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function av(n) {
    const e = { x: T(n, "x", "clone", "string_or_numeric") };
    return $.runKernel(Ki, e);
}
const yo = /* @__PURE__ */ L({ clone_: av });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lv(n, t = !1) {
    console.log(n.toString(t));
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Vb();
const cv = {
    buffer: vt,
    cast: tt,
    clone: yo,
    print: lv,
};
y2(cv);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uv(n, t) {
    let e = T(n, "a", "add"),
        s = T(t, "b", "add");
    [e, s] = se(e, s);
    const o = { a: e, b: s };
    return $.runKernel(Sr, o);
}
const U = /* @__PURE__ */ L({ add_: uv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dv(n, t) {
    let e = T(n, "a", "floorDiv"),
        s = T(t, "b", "floorDiv");
    [e, s] = se(e, s);
    const o = { a: e, b: s };
    return $.runKernel(Oi, o);
}
const Yb = /* @__PURE__ */ L({ floorDiv_: dv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hv(n, t) {
    let e = T(n, "a", "div"),
        s = T(t, "b", "div");
    if ((([e, s] = se(e, s)), e.dtype === "int32" && s.dtype === "int32"))
        return Yb(e, s);
    const o = { a: e, b: s },
        r = {};
    return $.runKernel(Di, o, r);
}
const ut = /* @__PURE__ */ L({ div_: hv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pv(n, t) {
    let e = T(n, "a", "mul"),
        s = T(t, "b", "mul");
    [e, s] = se(e, s);
    const o = { a: e, b: s };
    return $.runKernel(ji, o);
}
const G = /* @__PURE__ */ L({ mul_: pv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fv(n) {
    const t = T(n, "x", "abs");
    if (t.dtype === "complex64") {
        const e = { x: t };
        return $.runKernel(ec, e);
    } else {
        const e = { x: t };
        return $.runKernel(Ul, e);
    }
}
const me = /* @__PURE__ */ L({ abs_: fv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mv(n) {
    const e = { x: T(n, "x", "acos") };
    return $.runKernel(vi, e);
}
const gv = /* @__PURE__ */ L({ acos_: mv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bv(n) {
    const e = { x: T(n, "x", "acosh") };
    return $.runKernel(Si, e);
}
const xv = /* @__PURE__ */ L({ acosh_: bv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yv(n, t = null, e = !1) {
    const o = { x: T(n, "x", "all", "bool") },
        r = { axis: t, keepDims: e };
    return $.runKernel(th, o, r);
}
const Qb = /* @__PURE__ */ L({ all_: yv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wv(n, t = null, e = !1) {
    const o = { x: T(n, "x", "any", "bool") },
        r = { axis: t, keepDims: e };
    return $.runKernel(eh, o, r);
}
const Id = /* @__PURE__ */ L({ any_: wv });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Iv(n, t = 0) {
    const s = { x: T(n, "x", "argMax") },
        o = { axis: t };
    return $.runKernel(Yl, s, o);
}
const ai = /* @__PURE__ */ L({ argMax_: Iv });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Cv(n, t = 0) {
    const s = { x: T(n, "x", "argMin") },
        o = { axis: t };
    return $.runKernel(Ql, s, o);
}
const vv = /* @__PURE__ */ L({ argMin_: Cv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sv(n) {
    const e = { x: T(n, "x", "asin") };
    return $.runKernel(ki, e);
}
const kv = /* @__PURE__ */ L({ asin_: Sv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tv(n) {
    const e = { x: T(n, "x", "asinh") };
    return $.runKernel(Ti, e);
}
const Nv = /* @__PURE__ */ L({ asinh_: Tv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rv(n) {
    const e = { x: T(n, "x", "atan") };
    return $.runKernel(Ni, e);
}
const $v = /* @__PURE__ */ L({ atan_: Rv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Gv(n, t) {
    let e = T(n, "a", "atan2"),
        s = T(t, "b", "atan2");
    [e, s] = se(e, s);
    const o = { a: e, b: s };
    return $.runKernel($i, o);
}
const Ev = /* @__PURE__ */ L({ atan2_: Gv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lv(n) {
    const e = { x: T(n, "x", "atanh") };
    return $.runKernel(Ri, e);
}
const Mv = /* @__PURE__ */ L({ atanh_: Lv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ia(n, t, e, s, o = "NHWC", r) {
    const i = n[3],
        a = [...t, i],
        l = Ss(o);
    return Te(n, a, e, r, s, null, null, l);
}
function $n(n, t, e, s, o, r, i = "channelsLast") {
    const [a, l] = li(t);
    let c;
    if (i === "channelsLast") c = [a, l, n[3], n[3]];
    else if (i === "channelsFirst") c = [a, l, n[1], n[1]];
    else throw new Error(`Unknown dataFormat ${i}`);
    return Te(n, c, e, s, o, r, !1, i);
}
function vs(n, t, e, s, o, r, i = "NDHWC") {
    const [a, l, c] = Cd(t);
    let u, d;
    if (i === "NDHWC") (d = "channelsLast"), (u = [a, l, c, n[4], n[4]]);
    else if (i === "NCDHW") (d = "channelsFirst"), (u = [a, l, c, n[1], n[1]]);
    else throw new Error(`Unknown dataFormat ${i}`);
    return Js(n, u, e, s, o, !1, d, r);
}
function Te(n, t, e, s, o, r, i = !1, a = "channelsLast") {
    let [l, c, u, d] = [-1, -1, -1, -1];
    if (a === "channelsLast") [l, c, u, d] = n;
    else if (a === "channelsFirst") [l, d, c, u] = n;
    else throw new Error(`Unknown dataFormat ${a}`);
    const [h, p, , f] = t,
        [m, g] = li(e),
        [b, x] = li(s),
        w = cr(h, b),
        y = cr(p, x),
        {
            padInfo: I,
            outHeight: v,
            outWidth: k,
        } = Fv(o, c, u, m, g, w, y, r, a),
        S = i ? f * d : f;
    let N;
    return (
        a === "channelsFirst"
            ? (N = [l, S, v, k])
            : a === "channelsLast" && (N = [l, v, k, S]),
        {
            batchSize: l,
            dataFormat: a,
            inHeight: c,
            inWidth: u,
            inChannels: d,
            outHeight: v,
            outWidth: k,
            outChannels: S,
            padInfo: I,
            strideHeight: m,
            strideWidth: g,
            filterHeight: h,
            filterWidth: p,
            effectiveFilterHeight: w,
            effectiveFilterWidth: y,
            dilationHeight: b,
            dilationWidth: x,
            inShape: n,
            outShape: N,
            filterShape: t,
        }
    );
}
function Js(n, t, e, s, o, r = !1, i = "channelsLast", a) {
    let [l, c, u, d, h] = [-1, -1, -1, -1, -1];
    if (i === "channelsLast") [l, c, u, d, h] = n;
    else if (i === "channelsFirst") [l, h, c, u, d] = n;
    else throw new Error(`Unknown dataFormat ${i}`);
    const [p, f, m, , g] = t,
        [b, x, w] = Cd(e),
        [y, I, v] = Cd(s),
        k = cr(p, y),
        S = cr(f, I),
        N = cr(m, v),
        {
            padInfo: R,
            outDepth: M,
            outHeight: V,
            outWidth: z,
        } = Vv(o, c, u, d, b, x, w, k, S, N, a),
        P = r ? g * h : g;
    let A;
    return (
        i === "channelsFirst"
            ? (A = [l, P, M, V, z])
            : i === "channelsLast" && (A = [l, M, V, z, P]),
        {
            batchSize: l,
            dataFormat: i,
            inDepth: c,
            inHeight: u,
            inWidth: d,
            inChannels: h,
            outDepth: M,
            outHeight: V,
            outWidth: z,
            outChannels: P,
            padInfo: R,
            strideDepth: b,
            strideHeight: x,
            strideWidth: w,
            filterDepth: p,
            filterHeight: f,
            filterWidth: m,
            effectiveFilterDepth: k,
            effectiveFilterHeight: S,
            effectiveFilterWidth: N,
            dilationDepth: y,
            dilationHeight: I,
            dilationWidth: v,
            inShape: n,
            outShape: A,
            filterShape: t,
        }
    );
}
function Wv(n, t, e, s, o) {
    s == null && (s = ep(n, t, e));
    const r = n[0],
        i = n[1],
        a = ci((r - t + 2 * s) / e + 1, o),
        l = ci((i - t + 2 * s) / e + 1, o);
    return [a, l];
}
function Dv(n, t, e, s, o, r) {
    o == null && (o = ep(n, t[0], s[0]));
    const i = [0, 0, 0, e];
    for (let a = 0; a < 3; a++)
        n[a] + 2 * o >= t[a] &&
            (i[a] = ci((n[a] - t[a] + 2 * o) / s[a] + 1, r));
    return i;
}
function ep(n, t, e, s = 1) {
    const o = cr(t, s);
    return Math.floor((n[0] * (e - 1) - e + o) / 2);
}
function li(n) {
    return typeof n == "number"
        ? [n, n, n]
        : n.length === 2
        ? [n[0], n[1], 1]
        : n;
}
function Cd(n) {
    return typeof n == "number" ? [n, n, n] : n;
}
function cr(n, t) {
    return t <= 1 ? n : n + (n - 1) * (t - 1);
}
function Fv(n, t, e, s, o, r, i, a, l) {
    let c, u, d;
    if (typeof n == "number") {
        c = {
            top: n,
            bottom: n,
            left: n,
            right: n,
            type: n === 0 ? "VALID" : "NUMBER",
        };
        const p = Wv([t, e], r, s, n, a);
        (u = p[0]), (d = p[1]);
    } else if (n === "same") {
        (u = Math.ceil(t / s)), (d = Math.ceil(e / o));
        const h = Math.max(0, (u - 1) * s + r - t),
            p = Math.max(0, (d - 1) * o + i - e),
            f = Math.floor(h / 2),
            m = h - f,
            g = Math.floor(p / 2),
            b = p - g;
        c = { top: f, bottom: m, left: g, right: b, type: "SAME" };
    } else if (n === "valid")
        (c = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }),
            (u = Math.ceil((t - r + 1) / s)),
            (d = Math.ceil((e - i + 1) / o));
    else if (typeof n == "object") {
        const h = l === "channelsLast" ? n[1][0] : n[2][0],
            p = l === "channelsLast" ? n[1][1] : n[2][1],
            f = l === "channelsLast" ? n[2][0] : n[3][0],
            m = l === "channelsLast" ? n[2][1] : n[3][1];
        (c = {
            top: h,
            bottom: p,
            left: f,
            right: m,
            type:
                h === 0 && p === 0 && f === 0 && m === 0 ? "VALID" : "EXPLICIT",
        }),
            (u = ci((t - r + h + p) / s + 1, a)),
            (d = ci((e - i + f + m) / o + 1, a));
    } else throw Error(`Unknown padding parameter: ${n}`);
    return { padInfo: c, outHeight: u, outWidth: d };
}
function Vv(n, t, e, s, o, r, i, a, l, c, u) {
    let d, h, p, f;
    if ((n === "valid" && (n = 0), typeof n == "number")) {
        d = {
            top: n,
            bottom: n,
            left: n,
            right: n,
            front: n,
            back: n,
            type: n === 0 ? "VALID" : "NUMBER",
        };
        const g = Dv([t, e, s, 1], [a, l, c], 1, [o, r, i], n, u);
        (h = g[0]), (p = g[1]), (f = g[2]);
    } else if (n === "same") {
        (h = Math.ceil(t / o)), (p = Math.ceil(e / r)), (f = Math.ceil(s / i));
        const m = (h - 1) * o + a - t,
            g = (p - 1) * r + l - e,
            b = (f - 1) * i + c - s,
            x = Math.floor(m / 2),
            w = m - x,
            y = Math.floor(g / 2),
            I = g - y,
            v = Math.floor(b / 2),
            k = b - v;
        d = {
            top: y,
            bottom: I,
            left: v,
            right: k,
            front: x,
            back: w,
            type: "SAME",
        };
    } else throw Error(`Unknown padding parameter: ${n}`);
    return { padInfo: d, outDepth: h, outHeight: p, outWidth: f };
}
function ci(n, t) {
    if (!t) return Math.trunc(n);
    switch (t) {
        case "round":
            return Math.round(n);
        case "ceil":
            return Math.ceil(n);
        case "floor":
            return Math.floor(n);
        default:
            throw new Error(`Unknown roundingMode ${t}`);
    }
}
function No(n) {
    const [t, e, s] = li(n);
    return t === 1 && e === 1 && s === 1;
}
function Le(n, t) {
    return No(n) || No(t);
}
function Ro(n) {
    return li(n).every((t) => t > 0);
}
function Ss(n) {
    if (n === "NHWC") return "channelsLast";
    if (n === "NCHW") return "channelsFirst";
    throw new Error(`Unknown dataFormat ${n}`);
}
function Ue(n, t, e) {
    if (e != null) {
        if (typeof t == "string")
            throw Error(
                `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`
            );
        if (typeof t == "number")
            C(
                Co(t),
                () =>
                    `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`
            );
        else if (typeof t == "object")
            t.forEach((s) => {
                s.forEach((o) => {
                    C(
                        Co(o),
                        () =>
                            `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${o}.`
                    );
                });
            });
        else throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zv(n, t) {
    const s = { x: T(n, "x", "reshape", "string_or_numeric") },
        o = { shape: t };
    return $.runKernel(Dc, s, o);
}
const W = /* @__PURE__ */ L({ reshape_: zv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pv(n, t, e, s, o) {
    const r = T(n, "x", "avgPool", "float32"),
        i = 1;
    C(
        Le(e, i),
        () =>
            `Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`
    );
    let a = r,
        l = !1;
    r.rank === 3 &&
        ((l = !0), (a = W(r, [1, r.shape[0], r.shape[1], r.shape[2]]))),
        C(
            a.rank === 4,
            () => `Error in avgPool: x must be rank 4 but got rank ${a.rank}.`
        ),
        Ue("avgPool", s, o);
    const c = { x: a },
        u = { filterSize: t, strides: e, pad: s, dimRoundingMode: o };
    let d = $.runKernel(Jl, c, u);
    return (
        (d = tt(d, r.dtype)), l ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d
    );
}
const np = /* @__PURE__ */ L({ avgPool_: Pv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Av(n, t, e, s, o, r = "NDHWC") {
    const i = T(n, "x", "avgPool3d", "float32");
    let a = i,
        l = !1;
    i.rank === 4 &&
        ((l = !0),
        (a = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]))),
        C(
            a.rank === 5,
            () => `Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`
        ),
        C(
            r === "NDHWC",
            () =>
                `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`
        ),
        C(
            (typeof e == "number" && e > 0) ||
                (Array.isArray(e) && e[0] > 0 && e[1] > 0 && e[2] > 0),
            () => `Error in avgPool3d: Stride must be > 0, but got '${e}'`
        ),
        Ue("avgPool3d", s, o);
    const c = { x: a },
        u = {
            filterSize: t,
            strides: e,
            pad: s,
            dimRoundingMode: o,
            dataFormat: r,
        };
    let d = $.runKernel(jl, c, u);
    return (
        (d = tt(d, a.dtype)),
        l ? W(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d
    );
}
const Ov = /* @__PURE__ */ L({ avgPool3d_: Av });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xv(n, t = 0) {
    C(n.length >= 1, () => "Pass at least one tensor to concat");
    const e = jh(n, "tensors", "concat", "string_or_numeric");
    if (
        (e[0].dtype === "complex64" &&
            e.forEach((r) => {
                if (r.dtype !== "complex64")
                    throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${r.dtype}. `);
            }),
        e.length === 1)
    )
        return yo(e[0]);
    const s = e,
        o = { axis: t };
    return $.runKernel(nc, s, o);
}
const Ge = /* @__PURE__ */ L({ concat_: Xv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kv(n, t, e = !1, s = !1) {
    let o = T(n, "a", "matMul"),
        r = T(t, "b", "matMul");
    [o, r] = se(o, r);
    const i = { a: o, b: r },
        a = { transposeA: e, transposeB: s };
    return $.runKernel(ql, i, a);
}
const Gt = /* @__PURE__ */ L({ matMul_: Kv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zv(n) {
    const e = { x: T(n, "x", "sigmoid", "float32") };
    return $.runKernel(ca, e);
}
const kr = /* @__PURE__ */ L({ sigmoid_: Zv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bv(n, t, e) {
    const s = T(n, "x", "slice", "string_or_numeric");
    if (s.rank === 0) throw new Error("Slicing scalar is not possible");
    const o = { x: s },
        r = { begin: t, size: e };
    return $.runKernel(Ac, o, r);
}
const Ft = /* @__PURE__ */ L({ slice_: Bv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Hv(n) {
    const e = { x: T(n, "x", "tanh", "float32") };
    return $.runKernel(ma, e);
}
const sp = /* @__PURE__ */ L({ tanh_: Hv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _v(n, t, e) {
    const s = T(n, "x", "batchToSpaceND"),
        o = t.reduce((a, l) => a * l);
    C(
        s.rank >= 1 + t.length,
        () =>
            `input rank is ${s.rank} but should be > than blockShape.length ${t.length}`
    ),
        C(
            e.length === t.length,
            () =>
                `crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`
        ),
        C(
            s.shape[0] % o === 0,
            () =>
                `input tensor batch is ${
                    s.shape[0]
                } but is not divisible by the product of the elements of blockShape ${t.join(
                    " * "
                )} === ${o}`
        );
    const r = { x: s },
        i = { blockShape: t, crops: e };
    return $.runKernel(tc, r, i);
}
const op = /* @__PURE__ */ L({ batchToSpaceND_: _v });
function Uv(n) {
    let t;
    return (
        n.rank === 0 || n.rank === 1
            ? (t = W(n, [1, 1, 1, n.size]))
            : n.rank === 2
            ? (t = W(n, [1, 1, n.shape[0], n.shape[1]]))
            : n.rank === 3
            ? (t = W(n, [1, n.shape[0], n.shape[1], n.shape[2]]))
            : (t = n),
        t
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yv(n, t, e, s, o, r) {
    r == null && (r = 1e-3);
    const i = T(n, "x", "batchNorm"),
        a = T(t, "mean", "batchNorm"),
        l = T(e, "variance", "batchNorm");
    let c;
    o != null && (c = T(o, "scale", "batchNorm"));
    let u;
    s != null && (u = T(s, "offset", "batchNorm")),
        C(
            a.rank === l.rank,
            () =>
                "Batch normalization gradient requires mean and variance to have equal ranks."
        ),
        C(
            u == null || a.rank === u.rank,
            () =>
                "Batch normalization gradient requires mean and offset to have equal ranks."
        ),
        C(
            c == null || a.rank === c.rank,
            () =>
                "Batch normalization gradient requires mean and scale to have equal ranks."
        );
    const h = {
            x: Uv(i),
            scale: c,
            offset: u,
            mean: a,
            variance: l,
        },
        p = { varianceEpsilon: r },
        f = $.runKernel(dc, h, p);
    return W(f, i.shape);
}
const Qc = /* @__PURE__ */ L({ batchNorm_: Yv });
function Qv(n, t, e, s, o, r) {
    const i = T(n, "x", "batchNorm"),
        a = T(t, "mean", "batchNorm"),
        l = T(e, "variance", "batchNorm");
    let c;
    o != null && (c = T(o, "scale", "batchNorm"));
    let u;
    return (
        s != null && (u = T(s, "offset", "batchNorm")),
        C(
            i.rank === 2,
            () =>
                `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`
        ),
        C(
            a.rank === 2 || a.rank === 1,
            () =>
                `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`
        ),
        C(
            l.rank === 2 || l.rank === 1,
            () =>
                `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`
        ),
        c != null &&
            C(
                c.rank === 2 || c.rank === 1,
                () =>
                    `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`
            ),
        u != null &&
            C(
                u.rank === 2 || u.rank === 1,
                () =>
                    `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${u.rank}.`
            ),
        Qc(i, a, l, u, c, r)
    );
}
const Jv = /* @__PURE__ */ L({ batchNorm2d_: Qv });
function jv(n, t, e, s, o, r) {
    const i = T(n, "x", "batchNorm"),
        a = T(t, "mean", "batchNorm"),
        l = T(e, "variance", "batchNorm");
    let c;
    o != null && (c = T(o, "scale", "batchNorm"));
    let u;
    return (
        s != null && (u = T(s, "offset", "batchNorm")),
        C(
            i.rank === 3,
            () =>
                `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`
        ),
        C(
            a.rank === 3 || a.rank === 1,
            () =>
                `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`
        ),
        C(
            l.rank === 3 || l.rank === 1,
            () =>
                `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`
        ),
        c != null &&
            C(
                c.rank === 3 || c.rank === 1,
                () =>
                    `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`
            ),
        u != null &&
            C(
                u.rank === 3 || u.rank === 1,
                () =>
                    `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${u.rank}.`
            ),
        Qc(i, a, l, u, c, r)
    );
}
const qv = /* @__PURE__ */ L({ batchNorm3d_: jv });
function tS(n, t, e, s, o, r) {
    const i = T(n, "x", "batchNorm"),
        a = T(t, "mean", "batchNorm"),
        l = T(e, "variance", "batchNorm");
    let c;
    o != null && (c = T(o, "scale", "batchNorm"));
    let u;
    return (
        s != null && (u = T(s, "offset", "batchNorm")),
        C(
            i.rank === 4,
            () =>
                `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`
        ),
        C(
            a.rank === 4 || a.rank === 1,
            () =>
                `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`
        ),
        C(
            l.rank === 4 || l.rank === 1,
            () =>
                `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`
        ),
        c != null &&
            C(
                c.rank === 4 || c.rank === 1,
                () =>
                    `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`
            ),
        u != null &&
            C(
                u.rank === 4 || u.rank === 1,
                () =>
                    `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${u.rank}.`
            ),
        Qc(i, a, l, u, c, r)
    );
}
const eS = /* @__PURE__ */ L({ batchNorm4d_: tS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nS(n, t, e) {
    const s = T(n, "x", "bincount"),
        o = T(t, "weights", "bincount");
    C(
        s.dtype === "int32",
        () => `Error in bincount: input dtype must be int32, but got ${s.dtype}`
    ),
        C(e >= 0, () => `size must be non-negative, but got ${e}.`),
        C(
            o.size === s.size || o.size === 0,
            () =>
                `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${o.shape}.`
        );
    const r = { x: s, weights: o },
        i = { size: e };
    return $.runKernel(oh, r, i);
}
const sS = /* @__PURE__ */ L({ bincount_: nS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oS(n, t) {
    let e = T(n, "broadcastTo", "x");
    const s = e.shape;
    if ((is(t), t.length < e.rank))
        throw new Error(
            `broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`
        );
    if (t.length > e.rank) {
        const c = e.shape.slice();
        for (; c.length < t.length; ) c.unshift(1);
        e = W(e, c);
    }
    const o = e.shape,
        r = Array.from(t);
    for (let c = t.length - 1; c >= 0; c--)
        if (o[c] === t[c]) r[c] = 1;
        else if (e.shape[c] !== 1)
            throw new Error(
                `broadcastTo(): [${s}] cannot be broadcast to [${t}].`
            );
    if (r.map((c, u) => (c > 1 ? u : -1)).filter((c) => c >= 0).length === 0)
        return yo(e);
    const a = { x: e },
        l = { reps: r };
    return $.runKernel(ga, a, l);
}
const ni = /* @__PURE__ */ L({ broadcastTo_: oS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rS(n) {
    const e = { x: T(n, "x", "ceil", "float32") };
    return $.runKernel(Ei, e);
}
const iS = /* @__PURE__ */ L({ ceil_: rS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ca(n, t, e) {
    is(n), (e = e || Oo(t));
    const s = { shape: n, value: t, dtype: e };
    return $.runKernel(wh, {}, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aS(n, t, e) {
    const s = T(n, "x", "clipByValue");
    if (
        (C(
            t <= e,
            () =>
                `Error in clip: min (${t}) must be less than or equal to max (${e}).`
        ),
        t === e)
    )
        return Ca(s.shape, t, s.dtype);
    const o = { x: s },
        r = { clipValueMin: t, clipValueMax: e };
    return $.runKernel(Li, o, r);
}
const fn = /* @__PURE__ */ L({ clipByValue_: aS });
function lS(n) {
    return Ge(
        n,
        0
        /* axis */
    );
}
const cS = /* @__PURE__ */ L({ concat1d_: lS });
function uS(n, t) {
    return Ge(n, t);
}
const dS = /* @__PURE__ */ L({ concat2d_: uS });
function hS(n, t) {
    return Ge(n, t);
}
const pS = /* @__PURE__ */ L({ concat3d_: hS });
function fS(n, t) {
    return Ge(n, t);
}
const mS = /* @__PURE__ */ L({ concat4d_: fS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gS(n, t, e, s, o = "NHWC", r = [1, 1], i) {
    const a = T(n, "x", "conv2d", "float32"),
        l = T(t, "filter", "conv2d", "float32");
    let c = a,
        u = !1;
    a.rank === 3 &&
        ((u = !0), (c = W(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
        C(
            c.rank === 4,
            () =>
                `Error in conv2d: input must be rank 4, but got rank ${c.rank}.`
        ),
        C(
            l.rank === 4,
            () =>
                `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`
        ),
        Ue("conv2d", s, i);
    const d = o === "NHWC" ? c.shape[3] : c.shape[1];
    C(
        d === l.shape[2],
        () =>
            `Error in conv2d: depth of input (${d}) must match input depth for filter ${l.shape[2]}.`
    ),
        C(
            Le(e, r),
            () =>
                `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${r}'`
        ),
        C(
            Ro(r),
            () => "Error in conv2D: Dilated rates should be larger than 0."
        ),
        C(Ro(e), () => "Error in conv2D: Strides should be larger than 0.");
    const h = { x: c, filter: l },
        p = {
            strides: e,
            pad: s,
            dataFormat: o,
            dilations: r,
            dimRoundingMode: i,
        },
        f = $.runKernel(sc, h, p);
    return u ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const $o = /* @__PURE__ */ L({ conv2d_: gS });
function bS(n, t, e, s, o = "NWC", r = 1, i) {
    const a = T(n, "x", "conv1d"),
        l = T(t, "filter", "conv1d");
    let c = a,
        u = !1;
    a.rank === 2 && ((u = !0), (c = W(a, [1, a.shape[0], a.shape[1]]))),
        C(
            c.rank === 3,
            () =>
                `Error in conv1d: input must be rank 3, but got rank ${c.rank}.`
        ),
        C(
            l.rank === 3,
            () =>
                `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`
        ),
        Ue("conv1d", s, i),
        C(
            c.shape[2] === l.shape[1],
            () =>
                `Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`
        ),
        C(
            Le(e, r),
            () =>
                `Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${r}'`
        ),
        C(
            Ro(r),
            () => "Error in conv1D: Dilated rates should be larger than 0."
        ),
        C(Ro(e), () => "Error in conv1D: Stride should be larger than 0."),
        C(
            o === "NWC",
            () =>
                `Error in conv1d: got dataFormat of ${o} but only NWC is currently supported.`
        );
    const d = W(l, [1, l.shape[0], l.shape[1], l.shape[2]]),
        h = W(c, [c.shape[0], 1, c.shape[1], c.shape[2]]),
        g = $o(h, d, [1, e], s, "NHWC", [1, r], i);
    return u
        ? W(g, [g.shape[2], g.shape[3]])
        : W(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
const Jb = /* @__PURE__ */ L({ conv1d_: bS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xS(n, t, e, s, o, r = "NHWC", i) {
    C(
        n.length === t.rank,
        () =>
            `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`
    );
    let a = n,
        l = t,
        c = !1;
    t.rank === 3 &&
        ((c = !0),
        (l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]])),
        (a = [1, n[0], n[1], n[2]])),
        C(
            a.length === 4,
            () =>
                `Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`
        ),
        C(
            l.rank === 4,
            () =>
                `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`
        ),
        C(
            e.rank === 4,
            () =>
                `Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`
        );
    const u = r === "NHWC" ? a[3] : a[1],
        d = r === "NHWC" ? l.shape[3] : l.shape[1];
    C(
        u === e.shape[2],
        () =>
            `Error in conv2dDerInput: depth of input (${u}) must match input depth for filter ${e.shape[2]}.`
    ),
        C(
            d === e.shape[3],
            () =>
                `Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${e.shape[3]}.`
        ),
        Ue("conv2dDerInput", o, i);
    const h = { dy: l, filter: e },
        p = {
            strides: s,
            pad: o,
            dataFormat: r,
            dimRoundingMode: i,
            inputShape: a,
        },
        f = $.runKernel(oc, h, p);
    return c ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const rp = /* @__PURE__ */ L({ conv2DBackpropInput_: xS });
function yS(n, t, e, s, o, r) {
    const i = T(n, "x", "conv2dTranspose"),
        a = T(t, "filter", "conv2dTranspose");
    return rp(e, i, a, s, o, "NHWC", r);
}
const jb = /* @__PURE__ */ L({ conv2dTranspose_: yS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wS(n, t, e, s, o = "NDHWC", r = [1, 1, 1]) {
    const i = T(n, "x", "conv3d"),
        a = T(t, "filter", "conv3d");
    let l = i,
        c = !1;
    i.rank === 4 &&
        ((c = !0),
        (l = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]))),
        C(
            l.rank === 5,
            () =>
                `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`
        ),
        C(
            a.rank === 5,
            () =>
                `Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`
        ),
        C(
            l.shape[4] === a.shape[3],
            () =>
                `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`
        ),
        C(
            Le(e, r),
            () =>
                `Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${r}'`
        ),
        C(
            o === "NDHWC",
            () =>
                `Error in conv3d: got dataFormat of ${o} but only NDHWC is currently supported.`
        ),
        C(
            Ro(r),
            () => "Error in conv3D: Dilated rates should be larger than 0."
        ),
        C(Ro(e), () => "Error in conv3D: Strides should be larger than 0.");
    const u = { x: l, filter: a },
        d = { strides: e, pad: s, dataFormat: o, dilations: r },
        h = $.runKernel(rc, u, d);
    return c ? W(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const IS = /* @__PURE__ */ L({ conv3d_: wS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CS(n, t, e, s, o) {
    C(
        n.length === t.rank,
        () =>
            `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`
    );
    let r = n,
        i = t,
        a = !1;
    t.rank === 4 &&
        ((a = !0),
        (i = W(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])),
        (r = [1, n[0], n[1], n[2], n[3]]));
    const l = r[4],
        c = i.shape[4];
    C(
        r.length === 5,
        () =>
            `Error in conv3dDerInput: inShape must be length 5, but got length ${r.length}.`
    ),
        C(
            i.rank === 5,
            () =>
                `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`
        ),
        C(
            e.rank === 5,
            () =>
                `Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`
        ),
        C(
            l === e.shape[3],
            () =>
                `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`
        ),
        C(
            c === e.shape[4],
            () =>
                `Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${e.shape[4]}.`
        );
    const u = { dy: i, filter: e },
        d = { pad: o, strides: s, inputShape: r },
        h = $.runKernel(ch, u, d);
    return a ? W(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const qb = /* @__PURE__ */ L({ conv3DBackpropInput_: CS });
function vS(n, t, e, s, o) {
    const r = T(n, "x", "conv3dTranspose"),
        i = T(t, "filter", "conv3dTranspose");
    return qb(e, r, i, s, o);
}
const SS = /* @__PURE__ */ L({ conv3dTranspose_: vS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kS(n) {
    const e = { x: T(n, "x", "cos", "float32") };
    return $.runKernel(Mi, e);
}
const ip = /* @__PURE__ */ L({ cos_: kS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TS(n) {
    const e = { x: T(n, "x", "cosh", "float32") };
    return $.runKernel(Wi, e);
}
const t0 = /* @__PURE__ */ L({ cosh_: TS });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NS(n, t = 0, e = !1, s = !1) {
    const r = { x: T(n, "x", "cumprod") },
        i = { axis: t, exclusive: e, reverse: s };
    return $.runKernel(uh, r, i);
}
const vd = /* @__PURE__ */ L({ cumprod_: NS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RS(n, t = 0, e = !1, s = !1) {
    const r = { x: T(n, "x", "cumsum") },
        i = { axis: t, exclusive: e, reverse: s };
    return $.runKernel(ic, r, i);
}
const e0 = /* @__PURE__ */ L({ cumsum_: RS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $S(n, t, e, s = !1) {
    const o = T(n, "x", "denseBincount"),
        r = T(t, "weights", "denseBincount");
    C(
        o.dtype === "int32",
        () =>
            `Error in denseBincount: input dtype must be int32, but got ${o.dtype}`
    ),
        C(
            o.rank <= 2,
            () =>
                `Error in denseBincount: input must be at most rank 2, but got rank ${o.rank}.`
        ),
        C(e >= 0, () => `size must be non-negative, but got ${e}.`),
        C(
            r.size === o.size || r.size === 0,
            () =>
                `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${o.shape}, weights shape: ${r.shape}.`
        );
    const i = { x: o, weights: r },
        a = { size: e, binaryOutput: s };
    return $.runKernel(hh, i, a);
}
const Tm = /* @__PURE__ */ L({ denseBincount_: $S });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GS(n, t, e = "NHWC") {
    const s = T(n, "x", "depthToSpace", "float32"),
        o = e === "NHWC" ? s.shape[1] : s.shape[2],
        r = e === "NHWC" ? s.shape[2] : s.shape[3],
        i = e === "NHWC" ? s.shape[3] : s.shape[1];
    C(t > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t}`),
        C(
            o * t >= 0,
            () => `Negative dimension size caused by overflow when multiplying
    ${o} and ${t}  for depthToSpace with input shape
    ${s.shape}`
        ),
        C(
            r * t >= 0,
            () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${t} for depthToSpace with input shape
        ${s.shape}`
        ),
        C(
            i % (t * t) === 0,
            () =>
                `Dimension size must be evenly divisible by ${
                    t * t
                } but is ${i} for depthToSpace with input shape ${s.shape}`
        );
    const a = { x: s },
        l = { blockSize: t, dataFormat: e };
    return $.runKernel(ph, a, l);
}
const ES = /* @__PURE__ */ L({ depthToSpace_: GS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LS(n, t, e, s, o = "NHWC", r = [1, 1], i) {
    const a = T(n, "x", "depthwiseConv2d", "float32"),
        l = T(t, "filter", "depthwiseConv2d", "float32");
    let c = a,
        u = !1;
    a.rank === 3 &&
        ((u = !0), (c = W(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
        C(
            c.rank === 4,
            () =>
                `Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`
        ),
        C(
            l.rank === 4,
            () =>
                `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`
        );
    const d = o === "NHWC" ? c.shape[3] : c.shape[1];
    C(
        d === l.shape[2],
        () =>
            `Error in depthwiseConv2d: number of input channels (${d}) must match the inChannels dimension in filter ${l.shape[2]}.`
    ),
        Ue("depthwiseConv2d", s, i);
    const h = { x: c, filter: l },
        p = {
            strides: e,
            pad: s,
            dataFormat: o,
            dilations: r,
            dimRoundingMode: i,
        },
        f = $.runKernel(ac, h, p);
    return u ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const ap = /* @__PURE__ */ L({ depthwiseConv2d_: LS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MS(n, t, e, s, o = [1, 1], r = "NHWC") {
    const i = T(n, "x", "dilation2d"),
        a = T(t, "filter", "dilation2d");
    C(
        i.rank === 3 || i.rank === 4,
        () =>
            `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`
    ),
        C(
            a.rank === 3,
            () =>
                `Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`
        ),
        C(
            r === "NHWC",
            () =>
                `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${r}`
        );
    let l = i,
        c = !1;
    i.rank === 3 &&
        ((l = W(i, [1, i.shape[0], i.shape[1], i.shape[2]])), (c = !0)),
        C(
            l.shape[3] === a.shape[2],
            () =>
                `Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${a.shape[2]}`
        );
    const u = { x: l, filter: a },
        d = { strides: e, pad: s, dilations: o },
        h = $.runKernel(lc, u, d);
    return c ? W(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const WS = /* @__PURE__ */ L({ dilation2d_: MS });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Go(n, t) {
    const e = n.length,
        s = [];
    for (let o = 0; o < e; o++) {
        const r = e - 1 - o,
            i = n[r] || 1;
        (t[t.length - 1 - o] || 1) > 1 && i === 1 && s.unshift(r);
    }
    return s;
}
function ce(n, t) {
    const e = [];
    for (let s = 0; s < t.length; s++) {
        const o = n[n.length - s - 1],
            r = t.length - s - 1,
            i = t[r];
        (o == null || (o === 1 && i > 1)) && e.unshift(r);
    }
    return e;
}
function bt(n, t) {
    const e = Math.max(n.length, t.length),
        s = new Array(e);
    for (let o = 0; o < e; o++) {
        let r = n[n.length - o - 1];
        r == null && (r = 1);
        let i = t[t.length - o - 1];
        if ((i == null && (i = 1), r === 1)) s[e - o - 1] = i;
        else if (i === 1) s[e - o - 1] = r;
        else if (r !== i) {
            const a = `Operands could not be broadcast together with shapes ${n} and ${t}.`;
            throw Error(a);
        } else s[e - o - 1] = r;
    }
    return s;
}
const wQ = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            assertAndGetBroadcastShape: bt,
            getBroadcastDims: Go,
            getReductionAxes: ce,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DS(n, t) {
    let e = T(n, "a", "equal", "string_or_numeric"),
        s = T(t, "b", "equal", "string_or_numeric");
    ([e, s] = se(e, s)), bt(e.shape, s.shape);
    const o = { a: e, b: s };
    return $.runKernel(cc, o);
}
const Tn = /* @__PURE__ */ L({ equal_: DS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FS(n, t, e) {
    const s = T(t, "a", "where"),
        o = T(e, "b", "where"),
        r = T(n, "condition", "where", "bool"),
        i = bt(bt(r.shape, s.shape), o.shape),
        a = ni(r, i),
        l = ni(s, i),
        c = ni(o, i),
        u = {
            condition: a,
            t: l,
            e: c,
        };
    return $.runKernel(Pc, u);
}
const Ee = /* @__PURE__ */ L({ where_: FS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VS(n) {
    const e = { x: T(n, "x", "zerosLike") };
    return $.runKernel(Uc, e);
}
const Tt = /* @__PURE__ */ L({ zerosLike_: VS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zS(n, t) {
    let e = T(n, "a", "div"),
        s = T(t, "b", "div");
    [e, s] = se(e, s);
    const o = ut(e, s),
        r = Tt(o),
        i = Tn(s, r);
    return Ee(i, r, o);
}
const PS = /* @__PURE__ */ L({ divNoNan_: zS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AS(n, t) {
    const e = T(n, "t1", "dot"),
        s = T(t, "t2", "dot");
    C(
        (e.rank === 1 || e.rank === 2) && (s.rank === 1 || s.rank === 2),
        () =>
            `Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`
    );
    const o = e.rank === 1 ? e.size : e.shape[1],
        r = s.rank === 1 ? s.size : s.shape[0];
    if (
        (C(
            o === r,
            () =>
                `Error in dot: inner dimensions of inputs must match, but got ${o} and ${r}.`
        ),
        e.rank === 1 && s.rank === 1)
    ) {
        const i = W(e, [1, -1]),
            a = W(s, [-1, 1]),
            l = Gt(i, a);
        return W(l, []);
    } else if (e.rank === 1 && s.rank === 2) {
        const i = W(e, [1, -1]),
            a = W(s, [s.shape[0], s.shape[1]]),
            l = Gt(i, a);
        return W(l, [l.size]);
    } else if (e.rank === 2 && s.rank === 1) {
        const i = W(s, [-1, 1]),
            a = Gt(e, i);
        return W(a, [a.size]);
    } else {
        const i = W(s, [s.shape[0], s.shape[1]]);
        return Gt(e, i);
    }
}
const OS = /* @__PURE__ */ L({ dot_: AS });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XS(n, ...t) {
    const e = t.map((o, r) => T(o, `tensors${r}`, "einsum")),
        s = { equation: n };
    return $.runKernel(bh, e, s);
}
const Or = /* @__PURE__ */ L({ einsum_: XS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KS(n) {
    const e = { x: T(n, "x", "elu", "float32") };
    return $.runKernel(Fi, e);
}
const Jc = /* @__PURE__ */ L({ elu_: KS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZS(n) {
    let t = T(n, "x", "erf");
    C(
        t.dtype === "int32" || t.dtype === "float32",
        () => "Input dtype must be `int32` or `float32`."
    ),
        t.dtype === "int32" && (t = tt(t, "float32"));
    const e = { x: t };
    return $.runKernel(Vi, e);
}
const BS = /* @__PURE__ */ L({ erf_: ZS });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lp(n, t) {
    for (let e = 0; e < n.length; ++e)
        if (n[n.length - e - 1] !== t - 1 - e) return !1;
    return !0;
}
function n0(n, t, e) {
    const s = n.length + t.length,
        o = [];
    let r = 0,
        i = 0;
    for (let a = 0; a < s; a++)
        e.indexOf(a) === -1 ? o.push(n[r++]) : o.push(t[i++]);
    return o;
}
function ye(n, t) {
    const e = [],
        s = n.length;
    for (let r = 0; r < s; r++) t.indexOf(r) === -1 && e.push(n[r]);
    const o = t.map((r) => n[r]);
    return [e, o];
}
function re(n, t) {
    const e = t.map((s) => 1);
    return n0(n, e, t);
}
function Ne(n, t, e) {
    C(
        lp(t, e),
        () =>
            `${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`
    );
}
function qt(n, t) {
    if (lp(n, t)) return null;
    const e = [];
    for (let s = 0; s < t; ++s) n.indexOf(s) === -1 && e.push(s);
    return n.forEach((s) => e.push(s)), e;
}
function js(n) {
    return n
        .map((t, e) => [e, t])
        .sort((t, e) => t[1] - e[1])
        .map((t) => t[0]);
}
function ie(n, t) {
    const e = [];
    for (let s = t - n; s < t; ++s) e.push(s);
    return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HS(n, t = null, e = !1) {
    const o = { x: T(n, "x", "max") },
        r = { reductionIndices: t, keepDims: e };
    return $.runKernel(Ic, o, r);
}
const Pn = /* @__PURE__ */ L({ max_: HS });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _S(n, t = null, e = !1) {
    const o = { x: T(n, "x", "min") },
        r = { axis: t, keepDims: e };
    return $.runKernel(kc, o, r);
}
const Il = /* @__PURE__ */ L({ min_: _S });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function US(n, t) {
    let e = T(n, "base", "pow"),
        s = T(t, "exp", "pow");
    [e, s] = se(e, s);
    const o = { a: e, b: s };
    return $.runKernel(qi, o);
}
const gr = /* @__PURE__ */ L({ pow_: US });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gt(n, t) {
    if (((qe(n) && t !== "string") || Array.isArray(n)) && t !== "complex64")
        throw new Error(
            "Error creating a new Scalar: value must be a primitive (number|boolean|string)"
        );
    if (t === "string" && qe(n) && !(n instanceof Uint8Array))
        throw new Error(
            "When making a scalar from encoded string, the value must be `Uint8Array`."
        );
    return wa(n, [], [], t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YS(n) {
    const e = { x: T(n, "x", "sqrt", "float32") };
    return $.runKernel(da, e);
}
const Ve = /* @__PURE__ */ L({ sqrt_: YS });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QS(n) {
    const t = T(n, "x", "square"),
        e = {};
    return $.runKernel("Square", { x: t }, e);
}
const Kt = /* @__PURE__ */ L({ square_: QS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JS(n, t = null, e = !1) {
    let s = T(n, "x", "sum");
    s.dtype === "bool" && (s = tt(s, "int32"));
    const o = { x: s },
        r = { axis: t, keepDims: e };
    return $.runKernel(Oc, o, r);
}
const at = /* @__PURE__ */ L({ sum_: JS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jS(n, t = "euclidean", e = null, s = !1) {
    n = T(n, "x", "norm");
    const o = s0(n, t, e);
    let r = o.shape;
    if (s) {
        const i = Ct(e, n.shape);
        r = re(o.shape, i);
    }
    return W(o, r);
}
function s0(n, t, e = null) {
    if (n.rank === 0) return me(n);
    if (n.rank !== 1 && e === null) return s0(W(n, [-1]), t, e);
    if (
        n.rank === 1 ||
        typeof e == "number" ||
        (Array.isArray(e) && e.length === 1)
    ) {
        if (t === 1) return at(me(n), e);
        if (t === 1 / 0) return Pn(me(n), e);
        if (t === -1 / 0) return Il(me(n), e);
        if (t === "euclidean" || t === 2)
            return Ve(at(gr(me(n), gt(2, "int32")), e));
        throw new Error(`Error in norm: invalid ord value: ${t}`);
    }
    if (Array.isArray(e) && e.length === 2) {
        if (t === 1) return Pn(at(me(n), e[0]), e[1] - 1);
        if (t === 1 / 0) return Pn(at(me(n), e[1]), e[0]);
        if (t === -1 / 0) return Il(at(me(n), e[1]), e[0]);
        if (t === "fro" || t === "euclidean") return Ve(at(Kt(n), e));
        throw new Error(`Error in norm: invalid ord value: ${t}`);
    }
    throw new Error(`Error in norm: invalid axis: ${e}`);
}
const jc = /* @__PURE__ */ L({ norm_: jS });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qS(n, t = null, e = !1) {
    return jc(n, "euclidean", t, e);
}
const tk = /* @__PURE__ */ L({ euclideanNorm_: qS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ek(n) {
    const e = { x: T(n, "x", "exp") };
    return $.runKernel(zi, e);
}
const mn = /* @__PURE__ */ L({ exp_: ek });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nk(n, t = 0) {
    const e = T(n, "x", "expandDims", "string_or_numeric");
    C(t <= e.rank, () => "Axis must be <= rank of the tensor");
    const s = { input: e },
        o = { dim: t };
    return $.runKernel(uc, s, o);
}
const Oe = /* @__PURE__ */ L({ expandDims_: nk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sk(n) {
    const e = { x: T(n, "x", "expm1") };
    return $.runKernel(Pi, e);
}
const ok = /* @__PURE__ */ L({ expm1_: sk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rk(n, t) {
    const e = T(n, "x", "tile", "string_or_numeric");
    C(
        e.rank === t.length,
        () =>
            `Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`
    );
    const s = { x: e },
        o = { reps: t };
    return $.runKernel(ga, s, o);
}
const Vn = /* @__PURE__ */ L({ tile_: rk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ik(n, t, e, s = "float32") {
    t == null && (t = n);
    const o = vt([n, t], s),
        r = n <= t ? n : t;
    for (let a = 0; a < r; ++a) o.set(1, a, a);
    const i = W(o.toTensor(), [n, t]);
    if (e == null) return i;
    if (e.length === 1) return Vn(Oe(i, 0), [e[0], 1, 1]);
    if (e.length === 2) return Vn(Oe(Oe(i, 0), 0), [e[0], e[1], 1, 1]);
    if (e.length === 3)
        return Vn(Oe(Oe(Oe(i, 0), 0), 0), [e[0], e[1], e[2], 1, 1]);
    throw new Error(
        `eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`
    );
}
const o0 = /* @__PURE__ */ L({ eye_: ik });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ak(n) {
    const e = { x: T(n, "x", "floor", "float32") };
    return $.runKernel(Ai, e);
}
const qc = /* @__PURE__ */ L({ floor_: ak });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lk(n, t, e = 0, s = 0) {
    const o = T(n, "x", "gather"),
        r = T(t, "indices", "gather", "int32"),
        i = { x: o, indices: r },
        a = { axis: e, batchDims: s };
    return $.runKernel(hc, i, a);
}
const cp = /* @__PURE__ */ L({ gather_: lk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ck(n, t) {
    let e = T(n, "a", "greater", "string_or_numeric"),
        s = T(t, "b", "greater", "string_or_numeric");
    ([e, s] = se(e, s)), bt(e.shape, s.shape);
    const o = { a: e, b: s };
    return $.runKernel(pc, o);
}
const rn = /* @__PURE__ */ L({ greater_: ck });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uk(n, t) {
    let e = T(n, "a", "greaterEqual", "string_or_numeric"),
        s = T(t, "b", "greaterEqual", "string_or_numeric");
    ([e, s] = se(e, s)), bt(e.shape, s.shape);
    const o = { a: e, b: s };
    return $.runKernel(Xi, o);
}
const Bo = /* @__PURE__ */ L({ greaterEqual_: uk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dk(n) {
    const e = { input: T(n, "input", "imag") };
    return $.runKernel(vh, e);
}
const up = /* @__PURE__ */ L({ imag_: dk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hk(n) {
    const e = { x: T(n, "x", "isFinite") };
    return $.runKernel(Zi, e);
}
const pk = /* @__PURE__ */ L({ isFinite_: hk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fk(n) {
    const e = { x: T(n, "x", "isInf") };
    return $.runKernel(Bi, e);
}
const mk = /* @__PURE__ */ L({ isInf_: fk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gk(n) {
    const e = { x: T(n, "x", "isNaN") };
    return $.runKernel(Hi, e);
}
const bk = /* @__PURE__ */ L({ isNaN_: gk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xk(n, t = 0.2) {
    const s = { x: T(n, "x", "leakyRelu") },
        o = { alpha: t };
    return $.runKernel(fc, s, o);
}
const dp = /* @__PURE__ */ L({ leakyRelu_: xk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yk(n, t) {
    let e = T(n, "a", "less", "string_or_numeric"),
        s = T(t, "b", "less", "string_or_numeric");
    ([e, s] = se(e, s)), bt(e.shape, s.shape);
    const o = { a: e, b: s };
    return $.runKernel(mc, o);
}
const Cl = /* @__PURE__ */ L({ less_: yk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wk(n, t) {
    let e = T(n, "a", "lessEqual", "string_or_numeric"),
        s = T(t, "b", "lessEqual", "string_or_numeric");
    ([e, s] = se(e, s)), bt(e.shape, s.shape);
    const o = { a: e, b: s };
    return $.runKernel(gc, o);
}
const Tr = /* @__PURE__ */ L({ lessEqual_: wk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ik(n, t = 5, e = 1, s = 1, o = 0.5) {
    const r = T(n, "x", "localResponseNormalization");
    C(
        r.rank === 4 || r.rank === 3,
        () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${r.rank}.`
    ),
        C(
            Co(t),
            () =>
                `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`
        );
    let i = r,
        a = !1;
    r.rank === 3 &&
        ((a = !0), (i = W(r, [1, r.shape[0], r.shape[1], r.shape[2]])));
    const l = { x: i },
        c = { depthRadius: t, bias: e, alpha: s, beta: o },
        u = $.runKernel(wc, l, c);
    return a ? W(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
const Ck = /* @__PURE__ */ L({ localResponseNormalization_: Ik });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vk(n) {
    const e = { x: T(n, "x", "log", "float32") };
    return $.runKernel(_i, e);
}
const Nn = /* @__PURE__ */ L({ log_: vk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sk(n) {
    const e = { x: T(n, "x", "log1p") };
    return $.runKernel(Ui, e);
}
const hp = /* @__PURE__ */ L({ log1p_: Sk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IQ(n) {
    return (
        C(Xs(n), () => "The f passed in grad(f) must be a function"),
        (t, e) => {
            const s = T(t, "x", "tf.grad", "string_or_numeric"),
                o = e != null ? T(e, "dy", "tf.grad") : null;
            return $.tidy(() => {
                const { value: r, grads: i } = $.gradients(() => n(s), [s], o);
                return (
                    o != null &&
                        Pe(
                            r.shape,
                            o.shape,
                            "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"
                        ),
                    tu(i),
                    i[0]
                );
            });
        }
    );
}
function CQ(n) {
    return (
        C(Xs(n), () => "The f passed in grads(f) must be a function"),
        (t, e) => {
            C(
                Array.isArray(t),
                () =>
                    "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"
            );
            const s = jh(t, "args", "tf.grads", "string_or_numeric"),
                o = e != null ? T(e, "dy", "tf.grads") : null;
            return $.tidy(() => {
                const { value: r, grads: i } = $.gradients(() => n(...s), s, o);
                return (
                    o != null &&
                        Pe(
                            r.shape,
                            o.shape,
                            "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"
                        ),
                    tu(i),
                    i
                );
            });
        }
    );
}
function vQ(n) {
    return (
        C(Xs(n), () => "The f passed in valueAndGrad(f) must be a function"),
        (t, e) => {
            C(
                t instanceof Mt,
                () => "The x passed in valueAndGrad(f)(x) must be a tensor"
            ),
                C(
                    e == null || e instanceof Mt,
                    () =>
                        "The dy passed in valueAndGrad(f)(x, dy) must be a tensor"
                );
            const { grads: s, value: o } = $.gradients(() => n(t), [t], e);
            return tu(s), { grad: s[0], value: o };
        }
    );
}
function SQ(n) {
    return (
        C(Xs(n), () => "The f passed in valueAndGrads(f) must be a function"),
        (t, e) => {
            C(
                Array.isArray(t) && t.every((o) => o instanceof Mt),
                () =>
                    "The args passed in valueAndGrads(f)(args) must be array of tensors"
            ),
                C(
                    e == null || e instanceof Mt,
                    () =>
                        "The dy passed in valueAndGrads(f)(args, dy) must be a tensor"
                );
            const s = $.gradients(() => n(...t), t, e);
            return (
                e != null &&
                    Pe(
                        s.value.shape,
                        e.shape,
                        "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"
                    ),
                tu(s.grads),
                s
            );
        }
    );
}
function kk(n, t) {
    C(Xs(n), () => "The f passed in variableGrads(f) must be a function"),
        C(
            t == null || (Array.isArray(t) && t.every((c) => c instanceof yl)),
            () =>
                "The varList passed in variableGrads(f, varList) must be an array of variables"
        );
    const e = t != null;
    if (!e) {
        t = [];
        for (const c in $.registeredVariables) t.push($.registeredVariables[c]);
    }
    const s = e ? t.filter((c) => !c.trainable) : null,
        o = t.length;
    (t = t.filter((c) => c.trainable)),
        C(
            t.length > 0,
            () =>
                `variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`
        );
    const r = !0,
        { value: i, grads: a } = $.gradients(n, t, null, r);
    C(
        a.some((c) => c != null),
        () =>
            "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."
    ),
        C(
            i.rank === 0,
            () =>
                `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`
        );
    const l = {};
    return (
        t.forEach((c, u) => {
            a[u] != null && (l[c.name] = a[u]);
        }),
        s != null && s.forEach((c) => (l[c.name] = null)),
        { value: i, grads: l }
    );
}
function Eo(n) {
    return $.customGrad(n);
}
function tu(n) {
    if (n.filter((e) => e == null).length > 0)
        throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tk(n) {
    const e = { x: T(n, "x", "neg") };
    return $.runKernel(Nc, e);
}
const Yt = /* @__PURE__ */ L({ neg_: Tk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nk(n) {
    const e = { x: T(n, "x", "softplus") };
    return $.runKernel(ua, e);
}
const va = /* @__PURE__ */ L({ softplus_: Nk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rk(n) {
    const t = T(n, "x", "logSigmoid");
    return Eo((s) => ({
        value: Yt(va(Yt(s))),
        gradFunc: (i) => G(i, kr(Yt(s))),
    }))(t);
}
const $k = /* @__PURE__ */ L({ logSigmoid_: Rk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Gk(n, t) {
    let e = T(n, "a", "sub"),
        s = T(t, "b", "sub");
    [e, s] = se(e, s);
    const o = { a: e, b: s };
    return $.runKernel(pa, o);
}
const it = /* @__PURE__ */ L({ sub_: Gk });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ek(n, t = -1) {
    const e = T(n, "logits", "logSoftmax");
    if ((t === -1 && (t = e.rank - 1), t !== e.rank - 1))
        throw Error(
            `Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`
        );
    return Eo((o, r) => {
        const a = Pn(o, t, !0),
            l = it(o, a),
            c = it(tt(l, "float32"), Nn(at(mn(l), t, !0)));
        return (
            r([c]),
            {
                value: c,
                gradFunc: (d, h) => {
                    const [p] = h,
                        f = !0,
                        m = mn(p);
                    return it(d, G(at(d, t, f), m));
                },
            }
        );
    })(e);
}
const r0 = /* @__PURE__ */ L({ logSoftmax_: Ek });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lk(n, t = null, e = !1) {
    const s = T(n, "x", "logSumExp"),
        o = Ct(t, s.shape),
        r = Pn(
            s,
            o,
            !0
            /* keepDims */
        ),
        i = it(s, r),
        a = mn(i),
        l = at(a, o),
        c = Nn(l),
        u = U(W(r, c.shape), c);
    if (e) {
        const d = re(u.shape, o);
        return W(u, d);
    }
    return u;
}
const pp = /* @__PURE__ */ L({ logSumExp_: Lk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Mk(n, t) {
    const e = T(n, "a", "logicalAnd", "bool"),
        s = T(t, "b", "logicalAnd", "bool");
    bt(e.shape, s.shape);
    const o = { a: e, b: s };
    return $.runKernel(bc, o);
}
const ss = /* @__PURE__ */ L({ logicalAnd_: Mk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wk(n) {
    const e = { x: T(n, "x", "logicalNot", "bool") };
    return $.runKernel(xc, e);
}
const fp = /* @__PURE__ */ L({ logicalNot_: Wk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Dk(n, t) {
    const e = T(n, "a", "logicalOr", "bool"),
        s = T(t, "b", "logicalOr", "bool");
    bt(e.shape, s.shape);
    const o = { a: e, b: s };
    return $.runKernel(yc, o);
}
const i0 = /* @__PURE__ */ L({ logicalOr_: Dk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fk(n, t) {
    const e = T(n, "a", "logicalXor", "bool"),
        s = T(t, "b", "logicalXor", "bool");
    return bt(e.shape, s.shape), ss(i0(n, t), fp(ss(n, t)));
}
const Vk = /* @__PURE__ */ L({ logicalXor_: Fk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zk(n, t, e, s, o) {
    const r = T(n, "x", "maxPool"),
        i = 1;
    let a = r,
        l = !1;
    r.rank === 3 &&
        ((l = !0), (a = W(r, [1, r.shape[0], r.shape[1], r.shape[2]]))),
        C(
            a.rank === 4,
            () =>
                `Error in maxPool: input must be rank 4 but got rank ${a.rank}.`
        ),
        C(
            Le(e, i),
            () =>
                `Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`
        ),
        Ue("maxPool", s, o);
    const c = { x: a },
        u = { filterSize: t, strides: e, pad: s, dimRoundingMode: o },
        d = $.runKernel(Cc, c, u);
    return l ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const mp = /* @__PURE__ */ L({ maxPool_: zk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pk(n, t = [1, 1, 1], e, s, o, r = "NDHWC") {
    const i = T(n, "x", "maxPool3d");
    let a = i,
        l = !1;
    i.rank === 4 &&
        ((l = !0),
        (a = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]))),
        C(
            a.rank === 5,
            () => `Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`
        ),
        C(
            r === "NDHWC",
            () =>
                `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`
        ),
        Ue("maxPool3d", s, o);
    const c = { x: a },
        u = {
            filterSize: t,
            strides: e,
            pad: s,
            dimRoundingMode: o,
            dataFormat: r,
        },
        d = $.runKernel(vc, c, u);
    return l ? W(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const Ak = /* @__PURE__ */ L({ maxPool3d_: Pk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ok(n, t) {
    let e = T(n, "a", "maximum"),
        s = T(t, "b", "maximum");
    ([e, s] = se(e, s)),
        e.dtype === "bool" && ((e = tt(e, "int32")), (s = tt(s, "int32"))),
        bt(e.shape, s.shape);
    const o = { a: e, b: s };
    return $.runKernel(Yi, o);
}
const qs = /* @__PURE__ */ L({ maximum_: Ok });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xk(n, t = null, e = !1) {
    const o = { x: T(n, "x", "mean") },
        r = { axis: t, keepDims: e };
    return $.runKernel(Sc, o, r);
}
const oe = /* @__PURE__ */ L({ mean_: Xk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function be(n, t = "float32") {
    if ((is(n), t === "complex64")) {
        const s = be(n, "float32"),
            o = be(n, "float32");
        return vo(s, o);
    }
    const e = ke(X(n), t);
    return $.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ks(n, t = "float32") {
    if ((is(n), t === "complex64")) {
        const s = ks(n, "float32"),
            o = be(n, "float32");
        return vo(s, o);
    }
    const e = _l(X(n), t);
    return $.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kk(n, t) {
    let e = T(n, "a", "minimum"),
        s = T(t, "b", "minimum");
    ([e, s] = se(e, s)),
        e.dtype === "bool" && ((e = tt(e, "int32")), (s = tt(s, "int32"))),
        bt(e.shape, s.shape);
    const o = { a: e, b: s };
    return $.runKernel(Qi, o);
}
const br = /* @__PURE__ */ L({ minimum_: Kk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zk(n, t, e) {
    C(
        e === "reflect" || e === "symmetric",
        () =>
            `Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`
    );
    const s = T(n, "x", "mirrorPad");
    if (s.rank === 0)
        throw new Error(
            "mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad"
        );
    C(
        t.length === s.rank,
        () => `Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`
    );
    const o = e === "reflect" ? 1 : 0;
    for (let a = 0; a < s.rank; a++)
        C(
            t[a].length === 2,
            () => "Invalid number of paddings. Must be length of 2 each."
        ),
            C(
                t[a][0] >= 0 &&
                    t[a][0] <= s.shape[a] - o &&
                    t[a][1] >= 0 &&
                    t[a][1] <= s.shape[a] - o,
                () =>
                    `Padding in dimension ${a} cannot be greater than or equal to ${
                        s.shape[a] - o
                    } or less than 0 for input of shape ${s.shape}`
            );
    const r = { paddings: t, mode: e },
        i = { x: s };
    return $.runKernel(Tc, i, r);
}
const Bk = /* @__PURE__ */ L({ mirrorPad_: Zk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Hk(n, t) {
    let e = T(n, "a", "mod"),
        s = T(t, "b", "mod");
    [e, s] = se(e, s);
    const o = { a: e, b: s };
    return $.runKernel(Ji, o);
}
const _k = /* @__PURE__ */ L({ mod_: Hk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Uk(n, t = null, e = !1) {
    n = T(n, "x", "moments");
    const s = Ct(t, n.shape),
        o = oe(n, s, e);
    let r = o.shape;
    e || (r = re(o.shape, s));
    const i = Kt(it(tt(n, "float32"), W(o, r))),
        a = oe(i, s, e);
    return { mean: o, variance: a };
}
const gp = /* @__PURE__ */ L({ moments_: Uk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yk(n, t) {
    let e = T(n, "a", "notEqual", "string_or_numeric"),
        s = T(t, "b", "notEqual", "string_or_numeric");
    ([e, s] = se(e, s)), bt(e.shape, s.shape);
    const o = { a: e, b: s };
    return $.runKernel(Rc, o);
}
const ui = /* @__PURE__ */ L({ notEqual_: Yk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qk(n, t, e = 1, s = 0, o = "int32") {
    if (t < 2)
        throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);
    const i = { indices: T(n, "indices", "oneHot", "int32") },
        a = { dtype: o, depth: t, onValue: e, offValue: s };
    return $.runKernel(Gc, i, a);
}
const a0 = /* @__PURE__ */ L({ oneHot_: Qk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Jk(n) {
    const e = { x: T(n, "x", "onesLike") };
    return $.runKernel($c, e);
}
const Rn = /* @__PURE__ */ L({ onesLike_: Jk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jk(n, t, e = 0) {
    const s = T(n, "x", "pad");
    if (s.rank === 0)
        throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
    const o = { paddings: t, constantValue: e },
        r = { x: s };
    return $.runKernel(Lc, r, o);
}
const bp = /* @__PURE__ */ L({ pad_: jk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qk(n, t, e) {
    const s = T(n, "x", "spaceToBatchND");
    C(
        s.rank >= 1 + t.length,
        () => `input rank ${s.rank} should be > than [blockShape] ${t.length}`
    ),
        C(
            e.length === t.length,
            () =>
                `paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`
        ),
        C(
            s.shape.reduce(
                (i, a, l) =>
                    l > 0 && l <= t.length
                        ? i && (a + e[l - 1][0] + e[l - 1][1]) % t[l - 1] === 0
                        : i,
                !0
            ),
            () =>
                `input spatial dimensions ${s.shape.slice(
                    1
                )} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`
        );
    const o = { x: s },
        r = { blockShape: t, paddings: e };
    return $.runKernel(Xc, o, r);
}
const xp = /* @__PURE__ */ L({ spaceToBatchND_: qk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tT(n, t, e, s, o, r, i) {
    o == null && (o = [1, 1]), r == null && (r = 1), s === 0 && (s = "valid");
    const a = T(n, "x", "maxPool");
    let l = a,
        c = !1;
    a.rank === 3 &&
        ((c = !0), (l = W(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
        C(
            Le(r, o),
            () =>
                `Error in pool: Either strides or dilations must be 1. Got strides ${r} and dilations '${o}'`
        );
    const u = $n(l.shape, t, r, o, s),
        d = [u.dilationHeight, u.dilationWidth];
    let h;
    s === "same"
        ? (h = nT([u.filterHeight, u.filterWidth], d))
        : (h = [
              [0, 0],
              [0, 0],
          ]);
    const p = d[0] === 1 && d[1] === 1,
        [f, m] = eT([u.inHeight, u.inWidth], d, h),
        g = p ? s : "valid",
        b = p ? l : xp(l, d, f),
        w = (e === "avg" ? () => np(b, t, r, g, i) : () => mp(b, t, r, g, i))(),
        y = p ? w : op(w, d, m);
    return c ? W(y, [y.shape[1], y.shape[2], y.shape[3]]) : y;
}
function eT(n, t, e) {
    const s = e.map((u) => u[0]),
        o = e.map((u) => u[1]),
        r = n.concat(s, o),
        i = t.map((u, d) => (u - (r[d] % u)) % u),
        a = o.map((u, d) => u + i[d]),
        l = t.map((u, d) => [s[d], a[d]]),
        c = t.map((u, d) => [0, i[d]]);
    return [l, c];
}
function nT(n, t) {
    const s = n.map((i, a) => i + (i - 1) * (t[a] - 1)).map((i) => i - 1),
        o = s.map((i) => Math.floor(i / 2)),
        r = s.map((i, a) => i - o[a]);
    return s.map((i, a) => [o[a], r[a]]);
}
const sT = /* @__PURE__ */ L({ pool_: tT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oT(n, t) {
    const e = T(n, "x", "prelu"),
        s = T(t, "alpha", "prelu"),
        o = { x: e, alpha: s };
    return $.runKernel(Mc, o);
}
const yp = /* @__PURE__ */ L({ prelu_: oT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rT(n, t = null, e = !1) {
    let s = T(n, "x", "prod");
    s.dtype === "bool" && (s = tt(s, "int32"));
    const o = { x: s },
        r = { axis: t, keepDims: e };
    return $.runKernel(Wc, o, r);
}
const iT = /* @__PURE__ */ L({ prod_: rT });
var wp = { exports: {} };
wp.exports;
(function (n) {
    (function (t, e, s) {
        function o(l) {
            var c = this,
                u = a();
            (c.next = function () {
                var d = 2091639 * c.s0 + c.c * 23283064365386963e-26;
                return (c.s0 = c.s1), (c.s1 = c.s2), (c.s2 = d - (c.c = d | 0));
            }),
                (c.c = 1),
                (c.s0 = u(" ")),
                (c.s1 = u(" ")),
                (c.s2 = u(" ")),
                (c.s0 -= u(l)),
                c.s0 < 0 && (c.s0 += 1),
                (c.s1 -= u(l)),
                c.s1 < 0 && (c.s1 += 1),
                (c.s2 -= u(l)),
                c.s2 < 0 && (c.s2 += 1),
                (u = null);
        }
        function r(l, c) {
            return (c.c = l.c), (c.s0 = l.s0), (c.s1 = l.s1), (c.s2 = l.s2), c;
        }
        function i(l, c) {
            var u = new o(l),
                d = c && c.state,
                h = u.next;
            return (
                (h.int32 = function () {
                    return (u.next() * 4294967296) | 0;
                }),
                (h.double = function () {
                    return h() + ((h() * 2097152) | 0) * 11102230246251565e-32;
                }),
                (h.quick = h),
                d &&
                    (typeof d == "object" && r(d, u),
                    (h.state = function () {
                        return r(u, {});
                    })),
                h
            );
        }
        function a() {
            var l = 4022871197,
                c = function (u) {
                    u = String(u);
                    for (var d = 0; d < u.length; d++) {
                        l += u.charCodeAt(d);
                        var h = 0.02519603282416938 * l;
                        (l = h >>> 0),
                            (h -= l),
                            (h *= l),
                            (l = h >>> 0),
                            (h -= l),
                            (l += h * 4294967296);
                    }
                    return (l >>> 0) * 23283064365386963e-26;
                };
            return c;
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.alea = i);
    })(
        Ko,
        n,
        // present in node.js
        !1
        // present with an AMD loader
    );
})(wp);
var aT = wp.exports,
    Ip = { exports: {} };
Ip.exports;
(function (n) {
    (function (t, e, s) {
        function o(a) {
            var l = this,
                c = "";
            (l.x = 0),
                (l.y = 0),
                (l.z = 0),
                (l.w = 0),
                (l.next = function () {
                    var d = l.x ^ (l.x << 11);
                    return (
                        (l.x = l.y),
                        (l.y = l.z),
                        (l.z = l.w),
                        (l.w ^= (l.w >>> 19) ^ d ^ (d >>> 8))
                    );
                }),
                a === (a | 0) ? (l.x = a) : (c += a);
            for (var u = 0; u < c.length + 64; u++)
                (l.x ^= c.charCodeAt(u) | 0), l.next();
        }
        function r(a, l) {
            return (l.x = a.x), (l.y = a.y), (l.z = a.z), (l.w = a.w), l;
        }
        function i(a, l) {
            var c = new o(a),
                u = l && l.state,
                d = function () {
                    return (c.next() >>> 0) / 4294967296;
                };
            return (
                (d.double = function () {
                    do
                        var h = c.next() >>> 11,
                            p = (c.next() >>> 0) / 4294967296,
                            f = (h + p) / (1 << 21);
                    while (f === 0);
                    return f;
                }),
                (d.int32 = c.next),
                (d.quick = d),
                u &&
                    (typeof u == "object" && r(u, c),
                    (d.state = function () {
                        return r(c, {});
                    })),
                d
            );
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.xor128 = i);
    })(
        Ko,
        n,
        // present in node.js
        !1
        // present with an AMD loader
    );
})(Ip);
var lT = Ip.exports,
    Cp = { exports: {} };
Cp.exports;
(function (n) {
    (function (t, e, s) {
        function o(a) {
            var l = this,
                c = "";
            (l.next = function () {
                var d = l.x ^ (l.x >>> 2);
                return (
                    (l.x = l.y),
                    (l.y = l.z),
                    (l.z = l.w),
                    (l.w = l.v),
                    ((l.d = (l.d + 362437) | 0) +
                        (l.v = l.v ^ (l.v << 4) ^ (d ^ (d << 1)))) |
                        0
                );
            }),
                (l.x = 0),
                (l.y = 0),
                (l.z = 0),
                (l.w = 0),
                (l.v = 0),
                a === (a | 0) ? (l.x = a) : (c += a);
            for (var u = 0; u < c.length + 64; u++)
                (l.x ^= c.charCodeAt(u) | 0),
                    u == c.length && (l.d = (l.x << 10) ^ (l.x >>> 4)),
                    l.next();
        }
        function r(a, l) {
            return (
                (l.x = a.x),
                (l.y = a.y),
                (l.z = a.z),
                (l.w = a.w),
                (l.v = a.v),
                (l.d = a.d),
                l
            );
        }
        function i(a, l) {
            var c = new o(a),
                u = l && l.state,
                d = function () {
                    return (c.next() >>> 0) / 4294967296;
                };
            return (
                (d.double = function () {
                    do
                        var h = c.next() >>> 11,
                            p = (c.next() >>> 0) / 4294967296,
                            f = (h + p) / (1 << 21);
                    while (f === 0);
                    return f;
                }),
                (d.int32 = c.next),
                (d.quick = d),
                u &&
                    (typeof u == "object" && r(u, c),
                    (d.state = function () {
                        return r(c, {});
                    })),
                d
            );
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.xorwow = i);
    })(
        Ko,
        n,
        // present in node.js
        !1
        // present with an AMD loader
    );
})(Cp);
var cT = Cp.exports,
    vp = { exports: {} };
vp.exports;
(function (n) {
    (function (t, e, s) {
        function o(a) {
            var l = this;
            l.next = function () {
                var u = l.x,
                    d = l.i,
                    h,
                    p;
                return (
                    (h = u[d]),
                    (h ^= h >>> 7),
                    (p = h ^ (h << 24)),
                    (h = u[(d + 1) & 7]),
                    (p ^= h ^ (h >>> 10)),
                    (h = u[(d + 3) & 7]),
                    (p ^= h ^ (h >>> 3)),
                    (h = u[(d + 4) & 7]),
                    (p ^= h ^ (h << 7)),
                    (h = u[(d + 7) & 7]),
                    (h = h ^ (h << 13)),
                    (p ^= h ^ (h << 9)),
                    (u[d] = p),
                    (l.i = (d + 1) & 7),
                    p
                );
            };
            function c(u, d) {
                var h,
                    p = [];
                if (d === (d | 0)) p[0] = d;
                else
                    for (d = "" + d, h = 0; h < d.length; ++h)
                        p[h & 7] =
                            (p[h & 7] << 15) ^
                            ((d.charCodeAt(h) + p[(h + 1) & 7]) << 13);
                for (; p.length < 8; ) p.push(0);
                for (h = 0; h < 8 && p[h] === 0; ++h);
                for (
                    h == 8 ? (p[7] = -1) : p[h], u.x = p, u.i = 0, h = 256;
                    h > 0;
                    --h
                )
                    u.next();
            }
            c(l, a);
        }
        function r(a, l) {
            return (l.x = a.x.slice()), (l.i = a.i), l;
        }
        function i(a, l) {
            a == null && (a = +(/* @__PURE__ */ new Date()));
            var c = new o(a),
                u = l && l.state,
                d = function () {
                    return (c.next() >>> 0) / 4294967296;
                };
            return (
                (d.double = function () {
                    do
                        var h = c.next() >>> 11,
                            p = (c.next() >>> 0) / 4294967296,
                            f = (h + p) / (1 << 21);
                    while (f === 0);
                    return f;
                }),
                (d.int32 = c.next),
                (d.quick = d),
                u &&
                    (u.x && r(u, c),
                    (d.state = function () {
                        return r(c, {});
                    })),
                d
            );
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.xorshift7 = i);
    })(
        Ko,
        n,
        // present in node.js
        !1
        // present with an AMD loader
    );
})(vp);
var uT = vp.exports,
    Sp = { exports: {} };
Sp.exports;
(function (n) {
    (function (t, e, s) {
        function o(a) {
            var l = this;
            l.next = function () {
                var u = l.w,
                    d = l.X,
                    h = l.i,
                    p,
                    f;
                return (
                    (l.w = u = (u + 1640531527) | 0),
                    (f = d[(h + 34) & 127]),
                    (p = d[(h = (h + 1) & 127)]),
                    (f ^= f << 13),
                    (p ^= p << 17),
                    (f ^= f >>> 15),
                    (p ^= p >>> 12),
                    (f = d[h] = f ^ p),
                    (l.i = h),
                    (f + (u ^ (u >>> 16))) | 0
                );
            };
            function c(u, d) {
                var h,
                    p,
                    f,
                    m,
                    g,
                    b = [],
                    x = 128;
                for (
                    d === (d | 0)
                        ? ((p = d), (d = null))
                        : ((d = d + "\0"),
                          (p = 0),
                          (x = Math.max(x, d.length))),
                        f = 0,
                        m = -32;
                    m < x;
                    ++m
                )
                    d && (p ^= d.charCodeAt((m + 32) % d.length)),
                        m === 0 && (g = p),
                        (p ^= p << 10),
                        (p ^= p >>> 15),
                        (p ^= p << 4),
                        (p ^= p >>> 13),
                        m >= 0 &&
                            ((g = (g + 1640531527) | 0),
                            (h = b[m & 127] ^= p + g),
                            (f = h == 0 ? f + 1 : 0));
                for (
                    f >= 128 && (b[((d && d.length) || 0) & 127] = -1),
                        f = 127,
                        m = 4 * 128;
                    m > 0;
                    --m
                )
                    (p = b[(f + 34) & 127]),
                        (h = b[(f = (f + 1) & 127)]),
                        (p ^= p << 13),
                        (h ^= h << 17),
                        (p ^= p >>> 15),
                        (h ^= h >>> 12),
                        (b[f] = p ^ h);
                (u.w = g), (u.X = b), (u.i = f);
            }
            c(l, a);
        }
        function r(a, l) {
            return (l.i = a.i), (l.w = a.w), (l.X = a.X.slice()), l;
        }
        function i(a, l) {
            a == null && (a = +(/* @__PURE__ */ new Date()));
            var c = new o(a),
                u = l && l.state,
                d = function () {
                    return (c.next() >>> 0) / 4294967296;
                };
            return (
                (d.double = function () {
                    do
                        var h = c.next() >>> 11,
                            p = (c.next() >>> 0) / 4294967296,
                            f = (h + p) / (1 << 21);
                    while (f === 0);
                    return f;
                }),
                (d.int32 = c.next),
                (d.quick = d),
                u &&
                    (u.X && r(u, c),
                    (d.state = function () {
                        return r(c, {});
                    })),
                d
            );
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.xor4096 = i);
    })(
        Ko,
        // window object or global
        n,
        // present in node.js
        !1
        // present with an AMD loader
    );
})(Sp);
var dT = Sp.exports,
    kp = { exports: {} };
kp.exports;
(function (n) {
    (function (t, e, s) {
        function o(a) {
            var l = this,
                c = "";
            (l.next = function () {
                var d = l.b,
                    h = l.c,
                    p = l.d,
                    f = l.a;
                return (
                    (d = (d << 25) ^ (d >>> 7) ^ h),
                    (h = (h - p) | 0),
                    (p = (p << 24) ^ (p >>> 8) ^ f),
                    (f = (f - d) | 0),
                    (l.b = d = (d << 20) ^ (d >>> 12) ^ h),
                    (l.c = h = (h - p) | 0),
                    (l.d = (p << 16) ^ (h >>> 16) ^ f),
                    (l.a = (f - d) | 0)
                );
            }),
                (l.a = 0),
                (l.b = 0),
                (l.c = -1640531527),
                (l.d = 1367130551),
                a === Math.floor(a)
                    ? ((l.a = (a / 4294967296) | 0), (l.b = a | 0))
                    : (c += a);
            for (var u = 0; u < c.length + 20; u++)
                (l.b ^= c.charCodeAt(u) | 0), l.next();
        }
        function r(a, l) {
            return (l.a = a.a), (l.b = a.b), (l.c = a.c), (l.d = a.d), l;
        }
        function i(a, l) {
            var c = new o(a),
                u = l && l.state,
                d = function () {
                    return (c.next() >>> 0) / 4294967296;
                };
            return (
                (d.double = function () {
                    do
                        var h = c.next() >>> 11,
                            p = (c.next() >>> 0) / 4294967296,
                            f = (h + p) / (1 << 21);
                    while (f === 0);
                    return f;
                }),
                (d.int32 = c.next),
                (d.quick = d),
                u &&
                    (typeof u == "object" && r(u, c),
                    (d.state = function () {
                        return r(c, {});
                    })),
                d
            );
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.tychei = i);
    })(
        Ko,
        n,
        // present in node.js
        !1
        // present with an AMD loader
    );
})(kp);
var hT = kp.exports,
    l0 = { exports: {} };
const pT = {},
    fT = /* @__PURE__ */ Object.freeze(
        /* @__PURE__ */ Object.defineProperty(
            {
                __proto__: null,
                default: pT,
            },
            Symbol.toStringTag,
            { value: "Module" }
        )
    ),
    mT = /* @__PURE__ */ n2(fT);
(function (n) {
    (function (t, e, s) {
        var o = 256,
            r = 6,
            i = 52,
            a = "random",
            l = s.pow(o, r),
            c = s.pow(2, i),
            u = c * 2,
            d = o - 1,
            h;
        function p(y, I, v) {
            var k = [];
            I = I == !0 ? { entropy: !0 } : I || {};
            var S = b(g(I.entropy ? [y, w(e)] : y ?? x(), 3), k),
                N = new f(k),
                R = function () {
                    for (var M = N.g(r), V = l, z = 0; M < c; )
                        (M = (M + z) * o), (V *= o), (z = N.g(1));
                    for (; M >= u; ) (M /= 2), (V /= 2), (z >>>= 1);
                    return (M + z) / V;
                };
            return (
                (R.int32 = function () {
                    return N.g(4) | 0;
                }),
                (R.quick = function () {
                    return N.g(4) / 4294967296;
                }),
                (R.double = R),
                b(w(N.S), e),
                (
                    I.pass ||
                    v ||
                    function (M, V, z, P) {
                        return (
                            P &&
                                (P.S && m(P, N),
                                (M.state = function () {
                                    return m(N, {});
                                })),
                            z ? ((s[a] = M), V) : M
                        );
                    }
                )(R, S, "global" in I ? I.global : this == s, I.state)
            );
        }
        function f(y) {
            var I,
                v = y.length,
                k = this,
                S = 0,
                N = (k.i = k.j = 0),
                R = (k.S = []);
            for (v || (y = [v++]); S < o; ) R[S] = S++;
            for (S = 0; S < o; S++)
                (R[S] = R[(N = d & (N + y[S % v] + (I = R[S])))]), (R[N] = I);
            (k.g = function (M) {
                for (var V, z = 0, P = k.i, A = k.j, O = k.S; M--; )
                    (V = O[(P = d & (P + 1))]),
                        (z =
                            z * o +
                            O[
                                d & ((O[P] = O[(A = d & (A + V))]) + (O[A] = V))
                            ]);
                return (k.i = P), (k.j = A), z;
            })(o);
        }
        function m(y, I) {
            return (I.i = y.i), (I.j = y.j), (I.S = y.S.slice()), I;
        }
        function g(y, I) {
            var v = [],
                k = typeof y,
                S;
            if (I && k == "object")
                for (S in y)
                    try {
                        v.push(g(y[S], I - 1));
                    } catch {}
            return v.length ? v : k == "string" ? y : y + "\0";
        }
        function b(y, I) {
            for (var v = y + "", k, S = 0; S < v.length; )
                I[d & S] = d & ((k ^= I[d & S] * 19) + v.charCodeAt(S++));
            return w(I);
        }
        function x() {
            try {
                var y;
                return (
                    h && (y = h.randomBytes)
                        ? (y = y(o))
                        : ((y = new Uint8Array(o)),
                          (t.crypto || t.msCrypto).getRandomValues(y)),
                    w(y)
                );
            } catch {
                var I = t.navigator,
                    v = I && I.plugins;
                return [+(/* @__PURE__ */ new Date()), t, v, t.screen, w(e)];
            }
        }
        function w(y) {
            return String.fromCharCode.apply(0, y);
        }
        if ((b(s.random(), e), n.exports)) {
            n.exports = p;
            try {
                h = mT;
            } catch {}
        } else s["seed" + a] = p;
    })(
        // global: `self` in browsers (including strict mode and web workers),
        // otherwise `this` in Node and other environments
        typeof self < "u" ? self : Ko,
        [],
        // pool: entropy pool starts empty
        Math
        // math: package containing random, pow, and seedrandom
    );
})(l0);
var gT = l0.exports,
    bT = aT,
    xT = lT,
    yT = cT,
    wT = uT,
    IT = dT,
    CT = hT,
    Ho = gT;
Ho.alea = bT;
Ho.xor128 = xT;
Ho.xorwow = yT;
Ho.xorshift7 = wT;
Ho.xor4096 = IT;
Ho.tychei = CT;
var Nr = Ho;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Tp {
    constructor(t, e, s, o, r) {
        (this.mean = t),
            (this.stdDev = e),
            (this.dtype = s),
            (this.nextVal = NaN),
            (this.truncated = o),
            this.truncated &&
                ((this.upper = this.mean + this.stdDev * 2),
                (this.lower = this.mean - this.stdDev * 2));
        const i = r || Math.random();
        this.random = Nr.alea(i.toString());
    }
    /** Returns next sample from a Gaussian distribution. */
    nextValue() {
        if (!isNaN(this.nextVal)) {
            const o = this.nextVal;
            return (this.nextVal = NaN), o;
        }
        let t,
            e,
            s = !1;
        for (; !s; ) {
            let o, r, i;
            do
                (o = 2 * this.random() - 1),
                    (r = 2 * this.random() - 1),
                    (i = o * o + r * r);
            while (i >= 1 || i === 0);
            const a = Math.sqrt((-2 * Math.log(i)) / i);
            (t = this.mean + this.stdDev * o * a),
                (e = this.mean + this.stdDev * r * a),
                (!this.truncated || this.isValidTruncated(t)) && (s = !0);
        }
        return (
            (!this.truncated || this.isValidTruncated(e)) &&
                (this.nextVal = this.convertValue(e)),
            this.convertValue(t)
        );
    }
    /** Handles proper rounding for non-floating-point numbers. */
    convertValue(t) {
        return this.dtype == null || this.dtype === "float32"
            ? t
            : Math.round(t);
    }
    /** Returns true if less than 2-standard-deviations from the mean. */
    isValidTruncated(t) {
        return t <= this.upper && t >= this.lower;
    }
}
class kQ {
    constructor(t, e, s, o) {
        (this.alpha = t), (this.beta = 1 / e), (this.dtype = s);
        const r = o || Math.random();
        (this.randu = Nr.alea(r.toString())),
            (this.randn = new Tp(0, 1, s, !1, this.randu())),
            t < 1 ? (this.d = t + 2 / 3) : (this.d = t - 1 / 3),
            (this.c = 1 / Math.sqrt(9 * this.d));
    }
    /** Returns next sample from a gamma distribution. */
    nextValue() {
        let t, e, s, o, r, i;
        for (;;) {
            do (o = this.randn.nextValue()), (i = 1 + this.c * o);
            while (i <= 0);
            if (
                ((i *= i * i),
                (t = o * o),
                (e = 1 - 0.331 * t * t),
                (s = 0.5 * t + this.d * (1 - i + Math.log(i))),
                (r = this.randu()),
                r < e || Math.log(r) < s)
            )
                break;
        }
        return (
            (i = (1 / this.beta) * this.d * i),
            this.alpha < 1 && (i *= Math.pow(this.randu(), 1 / this.alpha)),
            this.convertValue(i)
        );
    }
    /** Handles proper rounding for non-floating-point numbers. */
    convertValue(t) {
        return this.dtype === "float32" ? t : Math.round(t);
    }
}
class vT {
    constructor(t = 0, e = 1, s, o) {
        if (
            ((this.canReturnFloat = () =>
                this.dtype == null || this.dtype === "float32"),
            (this.min = t),
            (this.range = e - t),
            (this.dtype = s),
            o == null && (o = Math.random()),
            typeof o == "number" && (o = o.toString()),
            !this.canReturnFloat() && this.range <= 1)
        )
            throw new Error(
                `The difference between ${t} - ${e} <= 1 and dtype is not float`
            );
        this.random = Nr.alea(o);
    }
    convertValue(t) {
        return this.canReturnFloat() ? t : Math.round(t);
    }
    nextValue() {
        return this.convertValue(this.min + this.range * this.random());
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ST(n, t = 0, e = 1, s, o) {
    if ((is(n), s != null && s === "bool"))
        throw new Error(`Unsupported data type ${s}`);
    const r = new Tp(t, e, s, !1, o),
        i = vt(n, s);
    for (let a = 0; a < i.values.length; a++) i.values[a] = r.nextValue();
    return i.toTensor();
}
const kT = /* @__PURE__ */ L({ randomNormal_: ST });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TT(n, t = 0, e = 1, s = "float32", o) {
    is(n);
    const r = vt(n, s),
        i = new vT(t, e, null, o);
    for (let a = 0; a < r.values.length; a++) r.values[a] = i.nextValue();
    return r.toTensor();
}
const Sa = /* @__PURE__ */ L({ randomUniform_: TT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function di(n, t, e = 1, s = "float32") {
    if (e === 0) throw new Error("Cannot have a step of zero");
    const o = { start: n, stop: t, step: e, dtype: s };
    return $.runKernel(Gh, {}, o);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NT(n) {
    const e = { input: T(n, "input", "real") };
    return $.runKernel(Eh, e);
}
const vl = /* @__PURE__ */ L({ real_: NT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RT(n) {
    const e = { x: T(n, "x", "reciprocal") };
    return $.runKernel(ta, e);
}
const $T = /* @__PURE__ */ L({ reciprocal_: RT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GT(n) {
    const e = { x: T(n, "x", "relu") };
    return $.runKernel(ea, e);
}
const Ts = /* @__PURE__ */ L({ relu_: GT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ET(n) {
    const e = { x: T(n, "x", "relu6") };
    return $.runKernel(na, e);
}
const c0 = /* @__PURE__ */ L({ relu6_: ET });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LT(n, t) {
    const s = { x: T(n, "x", "reverse") },
        o = { dims: t };
    return $.runKernel(zc, s, o);
}
const Lo = /* @__PURE__ */ L({ reverse_: LT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MT(n) {
    const e = { x: T(n, "x", "round") };
    return $.runKernel(sa, e);
}
const u0 = /* @__PURE__ */ L({ round_: MT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WT(n) {
    const e = { x: T(n, "x", "rsqrt", "float32") };
    return $.runKernel(oa, e);
}
const d0 = /* @__PURE__ */ L({ rsqrt_: WT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DT(n) {
    const e = { x: T(n, "x", "selu") };
    return $.runKernel(ra, e);
}
const h0 = /* @__PURE__ */ L({ selu_: DT });
function FT(n, t, e, s, o, r = [1, 1], i = "NHWC") {
    const a = T(n, "x", "separableConv2d"),
        l = T(t, "depthwiseFilter", "separableConv2d"),
        c = T(e, "pointwiseFilter", "separableConv2d");
    let u = a,
        d = !1;
    if (
        (a.rank === 3 &&
            ((d = !0), (u = W(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
        i === "NCHW")
    )
        throw new Error(
            "separableConv2d currently does not support dataFormat NCHW; only NHWC is supported"
        );
    C(
        u.rank === 4,
        () =>
            `Error in separableConv2d: input must be rank 4, but got rank ${u.rank}.`
    ),
        C(
            l.rank === 4,
            () =>
                `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`
        ),
        C(
            c.rank === 4,
            () =>
                `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`
        ),
        C(
            c.shape[0] === 1,
            () =>
                `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`
        ),
        C(
            c.shape[1] === 1,
            () =>
                `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`
        );
    const h = l.shape[2],
        p = l.shape[3];
    C(
        c.shape[2] === h * p,
        () =>
            `Error in separableConv2d: the third dimension of pointwise filter must be ${
                h * p
            }, but got ${c.shape[2]}.`
    );
    const f = ap(u, l, s, o, i, r),
        g = $o(f, c, 1, "valid", i);
    return d ? W(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
const p0 = /* @__PURE__ */ L({ separableConv2d_: FT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VT(n) {
    const e = { x: T(n, "x", "sign") };
    return $.runKernel(la, e);
}
const zT = /* @__PURE__ */ L({ sign_: VT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PT(n) {
    const e = { x: T(n, "x", "sin", "float32") };
    return $.runKernel(ia, e);
}
const f0 = /* @__PURE__ */ L({ sin_: PT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AT(n) {
    const e = { x: T(n, "x", "sinh") };
    return $.runKernel(aa, e);
}
const m0 = /* @__PURE__ */ L({ sinh_: AT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OT(n, t, e) {
    const s = T(n, "x", "slice1d");
    return (
        C(
            s.rank === 1,
            () =>
                `slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`
        ),
        Ft(s, [t], [e])
    );
}
const Np = /* @__PURE__ */ L({ slice1d_: OT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XT(n, t, e) {
    const s = T(n, "x", "slice2d");
    return (
        C(
            s.rank === 2,
            () =>
                `slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`
        ),
        Ft(s, t, e)
    );
}
const g0 = /* @__PURE__ */ L({ slice2d_: XT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KT(n, t, e) {
    const s = T(n, "x", "slice3d");
    return (
        C(
            s.rank === 3,
            () =>
                `slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`
        ),
        Ft(s, t, e)
    );
}
const Rp = /* @__PURE__ */ L({ slice3d_: KT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZT(n, t, e) {
    const s = T(n, "x", "slice4d");
    return (
        C(
            s.rank === 4,
            () =>
                `slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`
        ),
        Ft(s, t, e)
    );
}
const Sl = /* @__PURE__ */ L({ slice4d_: ZT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BT(n, t = -1) {
    const e = T(n, "logits", "softmax", "float32");
    if ((t === -1 && (t = e.rank - 1), t !== e.rank - 1))
        throw Error(
            `Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`
        );
    const s = { logits: e },
        o = { dim: t };
    return $.runKernel(Zc, s, o);
}
const $p = /* @__PURE__ */ L({ softmax_: BT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HT(n) {
    C(
        n.dtype === "complex64",
        () =>
            `The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`
    );
    const t = { input: n };
    return $.runKernel(yh, t);
}
const Gp = /* @__PURE__ */ L({ fft_: HT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _T(n) {
    C(
        n.dtype === "complex64",
        () =>
            `The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`
    );
    const t = { input: n };
    return $.runKernel(Ch, t);
}
const kl = /* @__PURE__ */ L({ ifft_: _T });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UT(n) {
    const t = n.shape[n.shape.length - 1],
        e = n.size / t;
    let s;
    if (t <= 2) {
        const o = W(n, [e, t]);
        s = kl(o);
    } else {
        const o = [e, 2 * (t - 1)],
            r = W(vl(n), [e, t]),
            i = W(up(n), [e, t]),
            a = Lo(Ft(r, [0, 1], [e, t - 2]), 1),
            l = G(Lo(Ft(i, [0, 1], [e, t - 2]), 1), gt(-1)),
            c = Ge([r, a], 1),
            u = Ge([i, l], 1),
            d = W(vo(c, u), [o[0], o[1]]);
        s = kl(d);
    }
    if (((s = vl(s)), n.rank === 3 && n.shape[0] !== 0)) {
        const o = s,
            r = n.shape[0];
        (s = W(s, [r, s.shape[0] / r, s.shape[1]])), o.dispose();
    }
    return s;
}
const b0 = /* @__PURE__ */ L({ irfft_: UT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YT(n, t, e = 0) {
    const o = { x: T(n, "x", "split") },
        r = { numOrSizeSplits: t, axis: e };
    return $.runKernel(Kc, o, r);
}
const pn = /* @__PURE__ */ L({ split_: YT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QT(n, t) {
    C(
        n.dtype === "float32",
        () => `The dtype for rfft() must be real value but got ${n.dtype}`
    );
    let e = n.shape[n.shape.length - 1];
    const s = n.size / e;
    let o;
    if (t != null && t < e) {
        const f = n.shape.map((g) => 0),
            m = n.shape.map((g) => g);
        (m[n.shape.length - 1] = t), (o = Ft(n, f, m)), (e = t);
    } else if (t != null && t > e) {
        const f = n.shape.map((m) => m);
        (f[n.shape.length - 1] = t - e),
            (o = Ge([n, be(f)], n.shape.length - 1)),
            (e = t);
    } else o = n;
    const r = Tt(o),
        i = W(vo(o, r), [s, e]),
        a = Gp(i),
        l = Math.floor(e / 2) + 1,
        c = vl(a),
        u = up(a),
        d = pn(c, [l, e - l], c.shape.length - 1),
        h = pn(u, [l, e - l], u.shape.length - 1),
        p = o.shape.slice();
    return (p[o.shape.length - 1] = l), W(vo(d[0], h[0]), p);
}
const Ep = /* @__PURE__ */ L({ rfft_: QT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JT(n, t) {
    let e = T(n, "a", "squaredDifference"),
        s = T(t, "b", "squaredDifference");
    ([e, s] = se(e, s)), bt(e.shape, s.shape);
    const o = { a: e, b: s },
        r = {};
    return $.runKernel(ha, o, r);
}
const x0 = /* @__PURE__ */ L({ squaredDifference_: JT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jT(n, t) {
    const e = T(n, "x", "squeeze", "string_or_numeric");
    return W(e, ws(e.shape, t).newShape);
}
const ka = /* @__PURE__ */ L({ squeeze_: jT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qT(n, t = 0) {
    const e = jh(n, "tensors", "stack", "string_or_numeric");
    C(e.length >= 1, () => "Pass at least one tensor to tf.stack"),
        e.length > 0 &&
            C(t <= e[0].rank, () => "Axis must be <= rank of the tensor");
    const s = e,
        o = { axis: t };
    return $.runKernel(Ec, s, o);
}
const Xn = /* @__PURE__ */ L({ stack_: qT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tN(n, t = 0) {
    const s = { x: T(n, "x", "step") },
        o = { alpha: t };
    return $.runKernel(ba, s, o);
}
const Ta = /* @__PURE__ */ L({ step_: tN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eN(n, t, e, s, o = 0, r = 0, i = 0, a = 0, l = 0) {
    const u = { x: T(n, "x", "stridedSlice", "string_or_numeric") },
        d = {
            begin: t,
            end: e,
            strides: s,
            beginMask: o,
            endMask: r,
            ellipsisMask: i,
            newAxisMask: a,
            shrinkAxisMask: l,
        };
    return $.runKernel(Ph, u, d);
}
const nN = /* @__PURE__ */ L({ stridedSlice_: eN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sN(n) {
    const e = { x: T(n, "x", "tan", "float32") };
    return $.runKernel(fa, e);
}
const oN = /* @__PURE__ */ L({ tan_: sN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ze(n, t) {
    Hl(n);
    const e = ya(n, t);
    if (e.length !== 1)
        throw new Error("tensor1d() requires values to be a flat/TypedArray");
    return wa(n, null, e, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function il(n, t, e) {
    if ((Hl(n), t != null && t.length !== 2))
        throw new Error("tensor2d() requires shape to have two numbers");
    const s = ya(n, e);
    if (s.length !== 2 && s.length !== 1)
        throw new Error(
            "tensor2d() requires values to be number[][] or flat/TypedArray"
        );
    if (s.length === 1 && t == null)
        throw new Error(
            "tensor2d() requires shape to be provided when `values` are a flat/TypedArray"
        );
    return wa(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rN(n, t, e) {
    if ((Hl(n), t != null && t.length !== 3))
        throw new Error("tensor3d() requires shape to have three numbers");
    const s = ya(n, e);
    if (s.length !== 3 && s.length !== 1)
        throw new Error(
            "tensor3d() requires values to be number[][][] or flat/TypedArray"
        );
    if (s.length === 1 && t == null)
        throw new Error(
            "tensor3d() requires shape to be provided when `values` are a flat array"
        );
    return wa(n, t, s, e);
}
function Lp(n, t, e) {
    const s = t.rank > 1 ? t.shape[t.rank - 1] : 1,
        o = t.rank > 1 ? t.rank - 1 : 1,
        r = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${o}.`;
    if (e.rank < o) throw new Error(r + ` update.rank < ${o}. `);
    if (n.length < s + (e.rank - o))
        throw new Error(r + ` Output shape length < ${s + (e.rank - o)}`);
    if (e.rank !== o + n.length - s)
        throw new Error(r + ` update.rank != ${o + n.length - s}`);
    for (let i = 0; i < o; ++i)
        if (e.shape[i] !== t.shape[i])
            throw new Error(
                r +
                    ` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`
            );
    for (let i = 0; i < e.rank - o; ++i)
        if (e.shape[i + o] !== n[i + s])
            throw new Error(
                r +
                    ` updates.shape[${i + o}] (${e.shape[i + o]}) != shape[${
                        i + o
                    }] (${n[i + o]})`
            );
}
function y0(n, t, e) {
    if (t.rank < 1)
        throw new Error(
            `tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`
        );
    if (n.rank < 1)
        throw new Error(
            `tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`
        );
    if (t.dtype !== "int32")
        throw new Error(
            `The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`
        );
    if (e.length < 1)
        throw new Error(
            `Output rank must be greater or equal to 1, but got shape: ${e}`
        );
    if (e.length === 0) {
        if (t.size === 0)
            throw new Error(
                `Indices specified for empty output. indices shape: ${t.shape}`
            );
        if (n.size === 0)
            throw new Error(
                `Updates specified for empty output. updates shape: ${n.shape}`
            );
    }
    Lp(e, t, n);
}
function to(n, t, e) {
    const s = t.shape.length,
        o = s > 1 ? t.shape[s - 1] : 1,
        r = e.length;
    let i = 1;
    for (let d = o; d < r; ++d) i *= e[d];
    const a = o < 1 ? 1 : o,
        l = X(t.shape) / a,
        c = [...dt(e.slice(0, o)), 1],
        u = X(e);
    return {
        sliceRank: o,
        numUpdates: l,
        sliceSize: i,
        strides: c,
        outputSize: u,
    };
}
const TQ = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            calculateShapes: to,
            validateInput: y0,
            validateUpdateShape: Lp,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iN(n, t = 1, e = !0) {
    const s = T(n, "x", "topk");
    if (s.rank === 0)
        throw new Error("topk() expects the input to be of rank 1 or higher");
    const o = s.shape[s.shape.length - 1];
    if (t < 0)
        throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);
    if (t > o)
        throw new Error(
            `'k' passed to topk() must be <= the last dimension (${o}) but got ${t}`
        );
    const r = { x: s },
        i = { k: t, sorted: e },
        [a, l] = $.runKernel(Kh, r, i);
    return { values: a, indices: l };
}
const aN = /* @__PURE__ */ L({ topk_: iN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lN(n, t = 0, e = 1, s, o) {
    if ((is(n), s != null && s === "bool"))
        throw new Error("Unsupported data type $ { dtype }");
    const r = new Tp(t, e, s, !0, o),
        i = vt(n, s);
    for (let a = 0; a < i.values.length; a++) i.values[a] = r.nextValue();
    return i.toTensor();
}
const w0 = /* @__PURE__ */ L({ truncatedNormal_: lN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cN(n, t = 0) {
    const e = T(n, "x", "unique", "string_or_numeric");
    C(e.rank > 0, () => "The input tensor must be at least 1D");
    const s = { x: e },
        o = { axis: t },
        [r, i] = $.runKernel(Bh, s, o);
    return { values: r, indices: i };
}
const uN = /* @__PURE__ */ L({ unique_: cN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dN(n, t, e) {
    const s = T(n, "x", "unsortedSegmentSum"),
        o = T(t, "segmentIds", "unsortedSegmentSum", "int32");
    C(Co(e), () => "numSegments must be of dtype int");
    const r = { x: s, segmentIds: o },
        i = { numSegments: e };
    return $.runKernel(_c, r, i);
}
const I0 = /* @__PURE__ */ L({ unsortedSegmentSum_: dN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hN(n, t = 0) {
    const e = T(n, "x", "unstack", "string_or_numeric");
    C(
        t >= -e.shape.length && t < e.shape.length,
        () => `Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`
    );
    const s = { value: e },
        o = { axis: t };
    return $.runKernel(Hc, s, o);
}
const Mo = /* @__PURE__ */ L({ unstack_: hN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pN(n, t = !0, e, s) {
    return $.makeVariable(n, t, e, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C0(n, t) {
    const e = [];
    for (let r = 0; r < t.length; r++) t[r] && e.push(r);
    const s = vt(n, "int32"),
        o = vt([e.length, n.length], "int32");
    for (let r = 0; r < e.length; r++) {
        const i = s.indexToLoc(e[r]),
            a = r * n.length;
        o.values.set(i, a);
    }
    return o.toTensor();
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fN(n, t, e) {
    const s = T(n, "x", "transpose");
    if (
        (t == null && (t = s.shape.map((i, a) => a).reverse()),
        C(
            s.rank === t.length,
            () =>
                `Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`
        ),
        t.forEach((i) => {
            C(
                i >= 0 && i < s.rank,
                () =>
                    `All entries in 'perm' must be between 0 and ${
                        s.rank - 1
                    } but got ${t}`
            );
        }),
        s.rank <= 1)
    )
        return s.clone();
    const o = { x: s },
        r = { perm: t };
    return s.dtype === "complex64"
        ? D(() => {
              let i = vl(s),
                  a = up(s);
              return (
                  (i = $.runKernel(ar, { x: i }, r)),
                  (a = $.runKernel(ar, { x: a }, r)),
                  e && (a = Yt(a)),
                  vo(i, a)
              );
          })
        : $.runKernel(ar, o, r);
}
const kt = /* @__PURE__ */ L({ transpose_: fN });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mN(n, t) {
    if (t == null) return n.shape.slice();
    if ($t(n.shape, t)) return t;
    if (n.shape.length === t.length) {
        const e = [];
        for (let s = 0; s < n.shape.length; s++)
            t[s] == null && n.shape[s] != null
                ? e.push(n.shape[s])
                : e.push(t[s]);
        return e;
    }
    return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gN(n, t, e, s) {
    const o = T(n, "x", "dropout");
    if (
        (C(
            o.dtype === "float32",
            () =>
                `x has to be a floating point tensor since it's going to be scaled, but got a ${o.dtype} tensor instead.`
        ),
        C(
            t >= 0 && t < 1,
            () => `rate must be a float in the range [0, 1), but got ${t}.`
        ),
        t === 0)
    )
        return n instanceof Mt ? o.clone() : o;
    const r = mN(o, e),
        i = 1 - t,
        a = ut(qc(U(Sa(r, 0, 1, "float32", s), i)), i);
    return G(o, a);
}
const bN = /* @__PURE__ */ L({ dropout_: gN });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xN(n) {
    return Math.floor(Math.pow(2, Math.ceil(Math.log(n) / Math.log(2))));
}
function v0(n, t, e) {
    const s = 1 - (n % 2),
        o = new Float32Array(n);
    for (let r = 0; r < n; ++r) {
        const i = (2 * Math.PI * r) / (n + s - 1);
        o[r] = t - e * Math.cos(i);
    }
    return Ze(o, "float32");
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yN(n, t, e, s, o, r = "NHWC", i) {
    let a = n;
    n.rank === 3 && (a = W(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
    let l = t;
    l.rank === 3 && (l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]])),
        C(
            a.rank === 4,
            () =>
                `Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`
        ),
        C(
            l.rank === 4,
            () =>
                `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`
        ),
        C(
            e.length === 4,
            () =>
                `Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`
        );
    const c = r === "NHWC" ? a.shape[3] : a.shape[1],
        u = r === "NHWC" ? l.shape[3] : l.shape[1];
    C(
        c === e[2],
        () =>
            `Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${e[2]}.`
    ),
        C(
            u === e[3],
            () =>
                `Error in conv2dDerFilter: depth of dy (${u}) must match output depth for filter (${e[3]}).`
        ),
        Ue("conv2dDerFilter", o, i);
    const d = { x: a, dy: l },
        h = {
            strides: s,
            pad: o,
            dataFormat: r,
            dimRoundingMode: i,
            filterShape: e,
        };
    return $.runKernel(ah, d, h);
}
const Mp = /* @__PURE__ */ L({ conv2DBackpropFilter_: yN });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wp(n, t, e) {
    if (e == null || e === "linear") return n;
    if (e === "relu") return G(n, Ta(t));
    throw new Error(`Cannot compute gradient for fused activation ${e}.`);
}
function Dp(n, t) {
    let e = t;
    const s = ce(n.shape, t.shape);
    return s.length > 0 && (e = at(e, s)), W(e, n.shape);
}
function Fp(n, t, e, s) {
    if (t === "linear") return n;
    if (t === "relu") return Ts(n);
    if (t === "elu") return Jc(n);
    if (t === "relu6") return c0(n);
    if (t === "prelu") return yp(n, e);
    if (t === "leakyrelu") return dp(n, s);
    if (t === "sigmoid") return kr(n);
    throw new Error(`Unknown fused activation ${t}.`);
}
const Vp = (n, t) => !(n > 0) || t === "linear";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wN({
    x: n,
    filter: t,
    strides: e,
    pad: s,
    dataFormat: o = "NHWC",
    dilations: r = [1, 1],
    dimRoundingMode: i,
    bias: a,
    activation: l = "linear",
    preluActivationWeights: c,
    leakyreluAlpha: u,
}) {
    if (((l = l || "linear"), Vp($.state.gradientDepth, l) === !1)) {
        C(
            o === "NHWC",
            () =>
                `Error in fused conv2d: got dataFormat of ${o} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`
        );
        let v = $o(n, t, e, s, o, r, i);
        return a != null && (v = U(v, a)), Fp(v, l, c, u);
    }
    const d = T(n, "x", "conv2d", "float32"),
        h = T(t, "filter", "conv2d", "float32");
    let p = d,
        f = !1;
    d.rank === 3 &&
        ((f = !0), (p = W(d, [1, d.shape[0], d.shape[1], d.shape[2]]))),
        C(
            p.rank === 4,
            () =>
                `Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`
        ),
        C(
            h.rank === 4,
            () =>
                `Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`
        ),
        Ue("fused conv2d", s, i);
    const m = o === "NHWC" ? p.shape[3] : p.shape[1];
    C(
        h.shape[2] === m,
        () =>
            `Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`
    ),
        C(
            Le(e, r),
            () =>
                `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${r}'`
        );
    const g = Te(p.shape, h.shape, e, r, s, i);
    let b;
    a != null &&
        ((b = T(a, "bias", "fused conv2d")),
        ([b] = se(b, d)),
        o === "NHWC"
            ? bt(g.outShape, b.shape)
            : (C(
                  b.shape.length <= 1,
                  () =>
                      `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`
              ),
              C(
                  b.shape.length === 0 ||
                      b.shape[0] === g.outChannels ||
                      b.shape[0] === 1,
                  () =>
                      `Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${g.outChannels})`
              )));
    let x;
    if (c != null) {
        const v = c.shape;
        if (
            (C(
                v.length <= 1 || v.length === 3,
                () =>
                    `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${v.length}.`
            ),
            v.length === 1)
        )
            C(
                v[0] === 1 || v[0] === g.outChannels,
                () =>
                    `Error in fused conv2d: PReLU activation weights (${v}) is not compatible with the number of output channels (${g.outChannels}).`
            );
        else if (v.length === 3)
            try {
                bt(v, g.outShape);
            } catch {
                const S = `Error in fused conv2d: PReLU activation weights (${v}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
                throw Error(S);
            }
        x = T(c, "prelu weights", "fused conv2d");
    }
    const w = (v, k) => {
            C(
                o === "NHWC",
                () =>
                    `Error in gradient of fused conv2D: got dataFormat of ${o} but only NHWC is currently supported.`
            );
            const [S, N, R, M] = k,
                V = Wp(v, R, l);
            C(
                No(r),
                () =>
                    `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`
            );
            const z = rp(N.shape, V, S, e, s),
                P = Mp(N, V, S.shape, e, s),
                A = [z, P];
            if (M != null) {
                const O = Dp(M, V);
                A.push(O);
            }
            return A;
        },
        y = {
            x: p,
            filter: h,
            bias: b,
            preluActivationWeights: x,
        },
        I = {
            strides: e,
            pad: s,
            dataFormat: o,
            dilations: r,
            dimRoundingMode: i,
            activation: l,
            leakyreluAlpha: u,
        };
    return a == null
        ? Eo((k, S, N) => {
              let R =
                  // tslint:disable-next-line: no-unnecessary-type-assertion
                  $.runKernel(gl, y, I);
              return (
                  N([S, k, R]),
                  f && (R = W(R, [R.shape[1], R.shape[2], R.shape[3]])),
                  { value: R, gradFunc: w }
              );
          })(p, h)
        : Eo((k, S, N, R) => {
              let M = $.runKernel(gl, y, I);
              return (
                  R([S, k, M, N]),
                  f && (M = W(M, [M.shape[1], M.shape[2], M.shape[3]])),
                  { value: M, gradFunc: w }
              );
          })(p, h, b);
}
const IN = /* @__PURE__ */ L({ fusedConv2d_: wN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CN(n, t, e, s, o, r = [1, 1], i) {
    let a = n;
    n.rank === 3 && (a = W(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
    let l = t;
    l.rank === 3 && (l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
    const c = { x: a, dy: l },
        u = {
            strides: s,
            pad: o,
            dimRoundingMode: i,
            dilations: r,
            filterShape: e,
        };
    return $.runKernel(fh, c, u);
}
const vN = L({ depthwiseConv2dNativeBackpropFilter_: CN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SN(n, t, e, s, o, r = [1, 1], i) {
    let a = t,
        l = !1;
    t.rank === 3 &&
        ((l = !0), (a = W(t, [1, t.shape[0], t.shape[1], t.shape[2]])));
    const c = { dy: a, filter: e },
        u = {
            strides: s,
            pad: o,
            dimRoundingMode: i,
            dilations: r,
            inputShape: n,
        },
        d =
            // tslint:disable-next-line: no-unnecessary-type-assertion
            $.runKernel(mh, c, u);
    return l ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const kN = L({ depthwiseConv2dNativeBackpropInput_: SN });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TN({
    a: n,
    b: t,
    transposeA: e = !1,
    transposeB: s = !1,
    bias: o,
    activation: r = "linear",
    preluActivationWeights: i,
    leakyreluAlpha: a = 0.2,
}) {
    if (Vp($.state.gradientDepth, r) === !1) {
        let M = Gt(n, t, e, s);
        return o != null && (M = U(M, o)), Fp(M, r, i, a);
    }
    let l = T(n, "a", "fused matMul"),
        c = T(t, "b", "fused matMul");
    [l, c] = se(l, c);
    const u = e ? l.shape[l.rank - 2] : l.shape[l.rank - 1],
        d = s ? c.shape[c.rank - 1] : c.shape[c.rank - 2],
        h = e ? l.shape[l.rank - 1] : l.shape[l.rank - 2],
        p = s ? c.shape[c.rank - 2] : c.shape[c.rank - 1],
        f = l.shape.slice(0, -2),
        m = c.shape.slice(0, -2),
        g = X(f),
        b = X(m);
    C(
        u === d,
        () =>
            `Error in fused matMul: inner shapes (${u}) and (${d}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${e} and transposeB=${s} must match.`
    );
    const w = bt(l.shape.slice(0, -2), c.shape.slice(0, -2)).concat([h, p]),
        y = e ? W(l, [g, u, h]) : W(l, [g, h, u]),
        I = s ? W(c, [b, p, d]) : W(c, [b, d, p]);
    let v;
    o != null &&
        ((v = T(o, "bias", "fused matMul")), ([v] = se(v, l)), bt(w, v.shape));
    let k;
    i != null && (k = T(i, "prelu weights", "fused matMul"));
    const S = (M, V) => {
            const [z, P, A, O] = V,
                B = Wp(W(M, A.shape), A, r);
            let Z, H;
            if (
                (!e && !s
                    ? ((Z = Gt(B, P, !1, !0)), (H = Gt(z, B, !0, !1)))
                    : !e && s
                    ? ((Z = Gt(B, P, !1, !1)), (H = Gt(B, z, !0, !1)))
                    : e && !s
                    ? ((Z = Gt(P, B, !1, !0)), (H = Gt(z, B, !1, !1)))
                    : ((Z = Gt(P, B, !0, !0)), (H = Gt(B, z, !0, !0))),
                o != null)
            ) {
                const Y = Dp(O, B);
                return [Z, H, Y];
            } else return [Z, H];
        },
        N = {
            a: y,
            b: I,
            bias: v,
            preluActivationWeights: k,
        },
        R = { transposeA: e, transposeB: s, activation: r, leakyreluAlpha: a };
    return o == null
        ? Eo((V, z, P) => {
              const A =
                  // tslint:disable-next-line: no-unnecessary-type-assertion
                  $.runKernel(ml, N, R);
              return P([V, z, A]), { value: W(A, w), gradFunc: S };
          })(y, I)
        : Eo((V, z, P, A) => {
              const O =
                  // tslint:disable-next-line: no-unnecessary-type-assertion
                  $.runKernel(ml, N, R);
              return A([V, z, O, P]), { value: W(O, w), gradFunc: S };
          })(y, I, v);
}
const Nm = /* @__PURE__ */ L({ fusedMatMul_: TN });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NN(n) {
    return v0(n, 0.54, 0.46);
}
const RN = /* @__PURE__ */ L({ hammingWindow_: NN });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $N(n) {
    return v0(n, 0.5, 0.5);
}
const S0 = /* @__PURE__ */ L({ hannWindow_: $N });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GN(n, t, e, s = !1, o = 0) {
    let r = 0;
    const i = [];
    for (; r + t <= n.size; ) i.push(Ft(n, r, t)), (r += e);
    if (s)
        for (; r < n.size; ) {
            const a = r + t - n.size,
                l = Ge([Ft(n, r, t - a), Ca([a], o)]);
            i.push(l), (r += e);
        }
    return i.length === 0 ? il([], [0, t]) : W(Ge(i), [i.length, t]);
}
const k0 = /* @__PURE__ */ L({ frame_: GN });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EN(n, t, e, s, o = S0) {
    s == null && (s = xN(t));
    const r = k0(n, t, e),
        i = G(r, o(t));
    return Ep(i, s);
}
const LN = /* @__PURE__ */ L({ stft_: EN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MN(n, t, e, s, o = "bilinear", r = 0) {
    const i = T(n, "image", "cropAndResize"),
        a = T(t, "boxes", "cropAndResize", "float32"),
        l = T(e, "boxInd", "cropAndResize", "int32"),
        c = a.shape[0];
    C(
        i.rank === 4,
        () =>
            `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`
    ),
        C(
            a.rank === 2 && a.shape[1] === 4,
            () =>
                `Error in cropAndResize: boxes must be have size [${c},4] but had shape ${a.shape}.`
        ),
        C(
            l.rank === 1 && l.shape[0] === c,
            () =>
                `Error in cropAndResize: boxInd must be have size [${c}] but had shape ${a.shape}.`
        ),
        C(
            s.length === 2,
            () =>
                `Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`
        ),
        C(
            s[0] >= 1 && s[1] >= 1,
            () => `cropSize must be atleast [1,1], but was ${s}`
        ),
        C(
            o === "bilinear" || o === "nearest",
            () => `method must be bilinear or nearest, but was ${o}`
        );
    const u = { image: i, boxes: a, boxInd: l },
        d = { method: o, extrapolationValue: r, cropSize: s };
    return $.runKernel(dh, u, d);
}
const WN = /* @__PURE__ */ L({ cropAndResize_: MN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DN(n) {
    const t = T(n, "image", "flipLeftRight", "float32");
    C(
        t.rank === 4,
        () =>
            `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`
    );
    const e = { image: t };
    return $.runKernel(Ih, e, {});
}
const FN = /* @__PURE__ */ L({ flipLeftRight_: DN });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VN(n) {
    const t = T(n, "image", "grayscaleToRGB"),
        e = t.rank - 1,
        s = t.shape[e];
    C(
        t.rank >= 2,
        () =>
            `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`
    ),
        C(
            s === 1,
            () =>
                `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`
        );
    const o = new Array(t.rank);
    return o.fill(1, 0, e), (o[e] = 3), Vn(t, o);
}
const zN = /* @__PURE__ */ L({ grayscaleToRGB_: VN });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PN(n) {
    const t = T(n, "image", "RGBToGrayscale"),
        e = t.rank - 1,
        s = t.shape[e];
    C(
        t.rank >= 2,
        () =>
            `Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`
    ),
        C(
            s === 3,
            () =>
                `Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`
        );
    const o = t.dtype,
        r = tt(t, "float32"),
        i = Ze([0.2989, 0.587, 0.114]);
    let a;
    switch (t.rank) {
        case 2:
            a = Or("ij,j->i", r, i);
            break;
        case 3:
            a = Or("ijk,k->ij", r, i);
            break;
        case 4:
            a = Or("ijkl,l->ijk", r, i);
            break;
        case 5:
            a = Or("ijklm,m->ijkl", r, i);
            break;
        case 6:
            a = Or("ijklmn,n->ijklm", r, i);
            break;
        default:
            throw new Error("Not a valid tensor rank.");
    }
    return (a = Oe(a, -1)), tt(a, o);
}
const AN = /* @__PURE__ */ L({ rgbToGrayscale_: PN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ON(n, t, e = 0, s = 0.5) {
    const o = T(n, "image", "rotateWithOffset", "float32");
    C(
        o.rank === 4,
        () =>
            `Error in rotateWithOffset: image must be rank 4,but got rank ${o.rank}.`
    );
    const r = { image: o },
        i = { radians: t, fillValue: e, center: s };
    return $.runKernel(Hh, r, i);
}
const XN = /* @__PURE__ */ L({ rotateWithOffset_: ON });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rr(n, t, e, s, o, r) {
    s == null && (s = 0.5),
        o == null && (o = Number.NEGATIVE_INFINITY),
        r == null && (r = 0);
    const i = n.shape[0];
    return (
        (e = Math.min(e, i)),
        C(
            0 <= s && s <= 1,
            () => `iouThreshold must be in [0, 1], but was '${s}'`
        ),
        C(
            n.rank === 2,
            () => `boxes must be a 2D tensor, but was of rank '${n.rank}'`
        ),
        C(
            n.shape[1] === 4,
            () =>
                `boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`
        ),
        C(t.rank === 1, () => "scores must be a 1D tensor"),
        C(
            t.shape[0] === i,
            () =>
                `scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`
        ),
        C(
            0 <= r && r <= 1,
            () => `softNmsSigma must be in [0, 1], but was '${r}'`
        ),
        {
            maxOutputSize: e,
            iouThreshold: s,
            scoreThreshold: o,
            softNmsSigma: r,
        }
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KN(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY) {
    const r = T(n, "boxes", "nonMaxSuppression", "float32"),
        i = T(t, "scores", "nonMaxSuppression", "float32"),
        a = Rr(r, i, e, s, o);
    (e = a.maxOutputSize), (s = a.iouThreshold), (o = a.scoreThreshold);
    const l = { maxOutputSize: e, iouThreshold: s, scoreThreshold: o };
    return $.runKernel(Nh, { boxes: r, scores: i }, l);
}
const ZN = /* @__PURE__ */ L({ nonMaxSuppression_: KN });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BN(n, t, e) {
    const s = HN(n, t, e),
        o = s < 0 ? -(s + 1) : s;
    n.splice(o, 0, t);
}
function HN(n, t, e) {
    return UN(n, t, e || _N);
}
function _N(n, t) {
    return n > t ? 1 : n < t ? -1 : 0;
}
function UN(n, t, e) {
    let s = 0,
        o = n.length,
        r = 0,
        i = !1;
    for (; s < o; ) {
        r = s + ((o - s) >>> 1);
        const a = e(t, n[r]);
        a > 0 ? (s = r + 1) : ((o = r), (i = !a));
    }
    return i ? s : -s - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zp(n, t, e, s, o) {
    return Op(
        n,
        t,
        e,
        s,
        o,
        0
        /* softNmsSigma */
    );
}
function Pp(n, t, e, s, o, r) {
    return Op(
        n,
        t,
        e,
        s,
        o,
        0,
        !1,
        r,
        !0
        /* returnValidOutputs */
    );
}
function Ap(n, t, e, s, o, r) {
    return Op(
        n,
        t,
        e,
        s,
        o,
        r,
        !0
        /* returnScoresTensor */
    );
}
function Op(n, t, e, s, o, r, i = !1, a = !1, l = !1) {
    const c = [];
    for (let g = 0; g < t.length; g++)
        t[g] > o && c.push({ score: t[g], boxIndex: g, suppressBeginIndex: 0 });
    c.sort(Rm);
    const u = r > 0 ? -0.5 / r : 0,
        d = [],
        h = [];
    for (; d.length < e && c.length > 0; ) {
        const g = c.pop(),
            { score: b, boxIndex: x, suppressBeginIndex: w } = g;
        if (b < o) break;
        let y = !1;
        for (let I = d.length - 1; I >= w; --I) {
            const v = YN(n, x, d[I]);
            if (v >= s) {
                y = !0;
                break;
            }
            if (((g.score = g.score * QN(s, u, v)), g.score <= o)) break;
        }
        (g.suppressBeginIndex = d.length),
            y ||
                (g.score === b
                    ? (d.push(x), h.push(g.score))
                    : g.score > o && BN(c, g, Rm));
    }
    const p = d.length,
        f = e - p;
    a &&
        f > 0 &&
        (d.push(...new Array(f).fill(0)), h.push(...new Array(f).fill(0)));
    const m = { selectedIndices: d };
    return i && (m.selectedScores = h), l && (m.validOutputs = p), m;
}
function YN(n, t, e) {
    const s = n.subarray(t * 4, t * 4 + 4),
        o = n.subarray(e * 4, e * 4 + 4),
        r = Math.min(s[0], s[2]),
        i = Math.min(s[1], s[3]),
        a = Math.max(s[0], s[2]),
        l = Math.max(s[1], s[3]),
        c = Math.min(o[0], o[2]),
        u = Math.min(o[1], o[3]),
        d = Math.max(o[0], o[2]),
        h = Math.max(o[1], o[3]),
        p = (a - r) * (l - i),
        f = (d - c) * (h - u);
    if (p <= 0 || f <= 0) return 0;
    const m = Math.max(r, c),
        g = Math.max(i, u),
        b = Math.min(a, d),
        x = Math.min(l, h),
        w = Math.max(b - m, 0) * Math.max(x - g, 0);
    return w / (p + f - w);
}
function QN(n, t, e) {
    const s = Math.exp(t * e * e);
    return e <= n ? s : 0;
}
function Rm(n, t) {
    return (
        n.score - t.score || (n.score === t.score && t.boxIndex - n.boxIndex)
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function JN(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY) {
    const r = T(n, "boxes", "nonMaxSuppressionAsync"),
        i = T(t, "scores", "nonMaxSuppressionAsync"),
        a = Rr(r, i, e, s, o);
    (e = a.maxOutputSize), (s = a.iouThreshold), (o = a.scoreThreshold);
    const l = await Promise.all([r.data(), i.data()]),
        c = l[0],
        u = l[1],
        { selectedIndices: d } = zp(c, u, e, s, o);
    return r !== n && r.dispose(), i !== t && i.dispose(), Ze(d, "int32");
}
const jN = JN;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qN(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = 0) {
    const i = T(n, "boxes", "nonMaxSuppression"),
        a = T(t, "scores", "nonMaxSuppression"),
        l = Rr(i, a, e, s, o, r);
    (e = l.maxOutputSize),
        (s = l.iouThreshold),
        (o = l.scoreThreshold),
        (r = l.softNmsSigma);
    const c = { boxes: i, scores: a },
        u = {
            maxOutputSize: e,
            iouThreshold: s,
            scoreThreshold: o,
            softNmsSigma: r,
        },
        d = $.runKernel($h, c, u);
    return { selectedIndices: d[0], selectedScores: d[1] };
}
const tR = /* @__PURE__ */ L({ nonMaxSuppressionWithScore_: qN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function eR(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = 0) {
    const i = T(n, "boxes", "nonMaxSuppressionAsync"),
        a = T(t, "scores", "nonMaxSuppressionAsync"),
        l = Rr(i, a, e, s, o, r);
    (e = l.maxOutputSize),
        (s = l.iouThreshold),
        (o = l.scoreThreshold),
        (r = l.softNmsSigma);
    const c = await Promise.all([i.data(), a.data()]),
        u = c[0],
        d = c[1],
        { selectedIndices: h, selectedScores: p } = Ap(u, d, e, s, o, r);
    return (
        i !== n && i.dispose(),
        a !== t && a.dispose(),
        {
            selectedIndices: Ze(h, "int32"),
            selectedScores: Ze(p),
        }
    );
}
const nR = eR;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sR(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = !1) {
    const i = T(n, "boxes", "nonMaxSuppression"),
        a = T(t, "scores", "nonMaxSuppression"),
        l = Rr(
            i,
            a,
            e,
            s,
            o,
            null
            /* softNmsSigma */
        ),
        c = l.maxOutputSize,
        u = l.iouThreshold,
        d = l.scoreThreshold,
        h = { boxes: i, scores: a },
        p = {
            maxOutputSize: c,
            iouThreshold: u,
            scoreThreshold: d,
            padToMaxOutputSize: r,
        },
        f = $.runKernel(Rh, h, p);
    return { selectedIndices: f[0], validOutputs: f[1] };
}
const oR = /* @__PURE__ */ L({ nonMaxSuppressionPadded_: sR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function rR(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = !1) {
    const i = T(n, "boxes", "nonMaxSuppressionAsync"),
        a = T(t, "scores", "nonMaxSuppressionAsync"),
        l = Rr(
            i,
            a,
            e,
            s,
            o,
            null
            /* softNmsSigma */
        ),
        c = l.maxOutputSize,
        u = l.iouThreshold,
        d = l.scoreThreshold,
        [h, p] = await Promise.all([i.data(), a.data()]),
        { selectedIndices: f, validOutputs: m } = Pp(h, p, c, u, d, r);
    return (
        i !== n && i.dispose(),
        a !== t && a.dispose(),
        {
            selectedIndices: Ze(f, "int32"),
            validOutputs: gt(m, "int32"),
        }
    );
}
const iR = rR;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aR(n, t, e = !1, s = !1) {
    const o = T(n, "images", "resizeBilinear");
    C(
        o.rank === 3 || o.rank === 4,
        () =>
            `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${o.rank}.`
    ),
        C(
            t.length === 2,
            () =>
                `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`
        ),
        C(
            s === !1 || e === !1,
            () =>
                "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."
        );
    let r = o,
        i = !1;
    o.rank === 3 &&
        ((i = !0), (r = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])));
    const a = { images: r },
        l = { alignCorners: e, halfPixelCenters: s, size: t },
        c = $.runKernel(Vc, a, l);
    return i ? W(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const T0 = /* @__PURE__ */ L({ resizeBilinear_: aR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lR(n, t, e = !1, s = !1) {
    const o = T(n, "images", "resizeNearestNeighbor");
    C(
        o.rank === 3 || o.rank === 4,
        () =>
            `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${o.rank}.`
    ),
        C(
            t.length === 2,
            () =>
                `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`
        ),
        C(
            o.dtype === "float32" || o.dtype === "int32",
            () => "`images` must have `int32` or `float32` as dtype"
        ),
        C(
            s === !1 || e === !1,
            () =>
                "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."
        );
    let r = o,
        i = !1;
    o.rank === 3 &&
        ((i = !0), (r = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])));
    const a = { images: r },
        l = { alignCorners: e, halfPixelCenters: s, size: t },
        c = $.runKernel(Fc, a, l);
    return i ? W(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const N0 = /* @__PURE__ */ L({ resizeNearestNeighbor_: lR });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cR(n, t = "binary", e = !1, s = 0.5) {
    const o = T(n, "image", "threshold"),
        r = 0.2989,
        i = 0.587,
        a = 0.114,
        l = o.shape[0] * o.shape[1];
    let c = G(Ze([s]), 255),
        u,
        d,
        h,
        p;
    if (
        (C(
            o.rank === 3,
            () =>
                `Error in threshold: image must be rank 3,but got rank ${o.rank}.`
        ),
        C(
            o.shape[2] === 3 || o.shape[2] === 1,
            () =>
                `Error in threshold: image color channel must be equal to 3 or 1but got ${o.shape[2]}.`
        ),
        C(
            o.dtype === "int32" || o.dtype === "float32",
            () =>
                `Error in dtype: image dtype must be int32 or float32,but got dtype ${o.dtype}.`
        ),
        C(
            t === "otsu" || t === "binary",
            () => `Method must be binary or otsu, but was ${t}`
        ),
        o.shape[2] === 3)
    ) {
        [u, d, h] = pn(o, [1, 1, 1], -1);
        const g = G(u, r),
            b = G(d, i),
            x = G(h, a);
        p = U(U(g, b), x);
    } else p = n;
    if (t === "otsu") {
        const g = sS(tt(u0(p), "int32"), $e([]), 256);
        c = uR(g, l);
    }
    const f = e ? Tr(p, c) : rn(p, c);
    return tt(G(f, 255), "int32");
}
function uR(n, t) {
    let e = Ze([-1]),
        s = Ze([0]),
        o = Ze([0]),
        r,
        i,
        a,
        l,
        c,
        u;
    for (let d = 0; d < n.size - 1; d++) {
        (r = Ft(n, 0, d + 1)),
            (i = Ft(n, d + 1)),
            (c = ut(at(r), t)),
            (u = ut(at(i), t));
        const h = at(G(r, di(0, r.size)));
        a = ut(h, at(r));
        const p = Ca(i.shape, r.size),
            f = U(di(0, i.size), p),
            m = G(i, f);
        l = ut(at(m), at(i));
        const g = it(a, l),
            b = it(a, l),
            x = G(c, u);
        o = G(G(x, g), b);
        const w = rn(o, s);
        (s = Ee(w, o, s)), (e = Ee(w, Ze([d]), e));
    }
    return e;
}
const dR = /* @__PURE__ */ L({ threshold_: cR });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hR(n, t, e = "nearest", s = "constant", o = 0, r) {
    const i = T(n, "image", "transform", "float32"),
        a = T(t, "transforms", "transform", "float32");
    C(
        i.rank === 4,
        () => `Error in transform: image must be rank 4,but got rank ${i.rank}.`
    ),
        C(
            a.rank === 2 &&
                (a.shape[0] === i.shape[0] || a.shape[0] === 1) &&
                a.shape[1] === 8,
            () =>
                "Error in transform: Input transform should be batch x 8 or 1 x 8"
        ),
        C(
            r == null || r.length === 2,
            () =>
                `Error in transform: outputShape must be [height, width] or null, but got ${r}.`
        );
    const l = { image: i, transforms: a },
        c = { interpolation: e, fillMode: s, fillValue: o, outputShape: r };
    return $.runKernel(Zh, l, c);
}
const pR = /* @__PURE__ */ L({ transform_: hR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fR(n, t, e) {
    const s = T(n, "a", "bandPart");
    C(s.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${s.rank}.`);
    const o = s.shape,
        [r, i] = s.shape.slice(-2);
    let a, l;
    typeof t == "number"
        ? (C(
              t % 1 === 0,
              () => `bandPart(): numLower must be an integer, got ${t}.`
          ),
          C(
              t <= r,
              () =>
                  `bandPart(): numLower (${t}) must not be greater than the number of rows (${r}).`
          ),
          (a = T(t < 0 ? r : t, "numLower", "bandPart")))
        : (C(
              t.dtype === "int32",
              () => "bandPart(): numLower's dtype must be an int32."
          ),
          (a = Ee(Cl(t, 0), r, br(t, r)))),
        typeof e == "number"
            ? (C(
                  e % 1 === 0,
                  () => `bandPart(): numUpper must be an integer, got ${e}.`
              ),
              C(
                  e <= i,
                  () =>
                      `bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`
              ),
              (l = T(e < 0 ? i : e, "numUpper", "bandPart")))
            : (C(
                  e.dtype === "int32",
                  () => "bandPart(): numUpper's dtype must be an int32."
              ),
              (l = Ee(Cl(e, 0), i, br(e, i))));
    const c = W(di(0, r, 1, "int32"), [-1, 1]),
        u = di(0, i, 1, "int32"),
        d = it(c, u),
        h = ss(Tr(d, a), Bo(d, Yt(l))),
        p = be([r, i], s.dtype);
    return W(Xn(Mo(W(s, [-1, r, i])).map((f) => Ee(h, f, p))), o);
}
const mR = /* @__PURE__ */ L({ bandPart_: fR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gR(n) {
    let t;
    if (Array.isArray(n)) {
        (t = !1),
            C(
                n != null && n.length > 0,
                () =>
                    "Gram-Schmidt process: input must not be null, undefined, or empty"
            );
        const o = n[0].shape[0];
        for (let r = 1; r < n.length; ++r)
            C(
                n[r].shape[0] === o,
                () =>
                    `Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[r].shape[0]} vs. ${o})`
            );
    } else (t = !0), (n = pn(n, n.shape[0], 0).map((o) => ka(o, [0])));
    C(
        n.length <= n[0].shape[0],
        () =>
            `Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`
    );
    const e = [],
        s = n;
    for (let o = 0; o < n.length; ++o)
        e.push(
            $.tidy(() => {
                let r = s[o];
                if (o > 0)
                    for (let i = 0; i < o; ++i) {
                        const a = G(at(G(e[i], r)), e[i]);
                        r = it(r, a);
                    }
                return ut(r, jc(r, "euclidean"));
            })
        );
    return t ? Xn(e, 0) : e;
}
const bR = /* @__PURE__ */ L({ gramSchmidt_: gR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xR(n, t = !1) {
    if (
        (C(
            n.rank >= 2,
            () =>
                `qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`
        ),
        n.rank === 2)
    )
        return $m(n, t);
    {
        const e = n.shape.slice(0, n.shape.length - 2).reduce((l, c) => l * c),
            s = Mo(
                W(n, [
                    e,
                    n.shape[n.shape.length - 2],
                    n.shape[n.shape.length - 1],
                ]),
                0
            ),
            o = [],
            r = [];
        s.forEach((l) => {
            const [c, u] = $m(l, t);
            o.push(c), r.push(u);
        });
        const i = W(Xn(o, 0), n.shape),
            a = W(Xn(r, 0), n.shape);
        return [i, a];
    }
}
function $m(n, t = !1) {
    return $.tidy(() => {
        C(
            n.shape.length === 2,
            () =>
                `qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`
        );
        const e = n.shape[0],
            s = n.shape[1];
        let o = o0(e),
            r = yo(n);
        const i = il([[1]], [1, 1]);
        let a = yo(i);
        const l = e >= s ? s : e;
        for (let c = 0; c < l; ++c) {
            const u = r,
                d = a,
                h = o;
            ([a, r, o] = $.tidy(() => {
                const p = Ft(r, [c, c], [e - c, 1]),
                    f = jc(p),
                    m = Ft(r, [c, c], [1, 1]),
                    g = Ee(rn(m, 0), il([[-1]]), il([[1]])),
                    b = it(m, G(g, f)),
                    x = ut(p, b);
                x.shape[0] === 1
                    ? (a = yo(i))
                    : (a = Ge(
                          [i, Ft(x, [1, 0], [x.shape[0] - 1, x.shape[1]])],
                          0
                      ));
                const w = Yt(ut(Gt(g, b), f)),
                    y = Ft(r, [c, 0], [e - c, s]),
                    I = G(w, a),
                    v = kt(a);
                if (c === 0) r = it(y, Gt(I, Gt(v, y)));
                else {
                    const N = it(y, Gt(I, Gt(v, y)));
                    r = Ge([Ft(r, [0, 0], [c, s]), N], 0);
                }
                const k = kt(I),
                    S = Ft(o, [0, c], [e, o.shape[1] - c]);
                if (c === 0) o = it(S, Gt(Gt(S, a), k));
                else {
                    const N = it(S, Gt(Gt(S, a), k));
                    o = Ge([Ft(o, [0, 0], [e, c]), N], 1);
                }
                return [a, r, o];
            })),
                xt([u, d, h]);
        }
        return (
            !t &&
                e > s &&
                ((o = Ft(o, [0, 0], [e, s])), (r = Ft(r, [0, 0], [s, s]))),
            [o, r]
        );
    });
}
const yR = /* @__PURE__ */ L({ qr_: xR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Ke;
(function (n) {
    (n[(n.NONE = 0)] = "NONE"),
        (n[(n.MEAN = 1)] = "MEAN"),
        (n[(n.SUM = 2)] = "SUM"),
        (n[(n.SUM_BY_NONZERO_WEIGHTS = 3)] = "SUM_BY_NONZERO_WEIGHTS");
})(Ke || (Ke = {}));
function wR(n, t, e = Ke.SUM_BY_NONZERO_WEIGHTS) {
    const s = T(n, "losses", "computeWeightedLoss");
    let o = null;
    t != null && (o = T(t, "weights", "computeWeightedLoss"));
    const r = o == null ? s : G(s, o);
    if (e === Ke.NONE) return r;
    if (e === Ke.SUM) return at(r);
    if (e === Ke.MEAN) {
        if (o == null) return oe(r);
        {
            const i = s.size / o.size,
                a = ut(at(r), at(o));
            return i > 1 ? ut(a, gt(i)) : a;
        }
    }
    if (e === Ke.SUM_BY_NONZERO_WEIGHTS) {
        if (o == null) return ut(at(r), gt(s.size));
        {
            const i = G(o, ks(s.shape)),
                a = tt(at(ui(i, gt(0))), "float32");
            return ut(at(r), a);
        }
    }
    throw Error(`Unknown reduction: ${e}`);
}
const Ns = /* @__PURE__ */ L({ computeWeightedLoss_: wR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IR(n, t, e, s = Ke.SUM_BY_NONZERO_WEIGHTS) {
    const o = T(n, "labels", "absoluteDifference"),
        r = T(t, "predictions", "absoluteDifference");
    let i = null;
    e != null && (i = T(e, "weights", "absoluteDifference")),
        Pe(o.shape, r.shape, "Error in absoluteDifference: ");
    const a = me(it(o, r));
    return Ns(a, i, s);
}
const CR = /* @__PURE__ */ L({ absoluteDifference_: IR });
function vR(n, t, e, s, o = Ke.SUM_BY_NONZERO_WEIGHTS) {
    const r = T(n, "labels", "cosineDistance"),
        i = T(t, "predictions", "cosineDistance");
    let a = null;
    s != null && (a = T(s, "weights", "cosineDistance")),
        Pe(r.shape, i.shape, "Error in cosineDistance: ");
    const l = gt(1),
        c = it(l, at(G(r, i), e, !0));
    return Ns(c, a, o);
}
const SR = /* @__PURE__ */ L({ cosineDistance_: vR });
function kR(n, t, e, s = Ke.SUM_BY_NONZERO_WEIGHTS) {
    let o = T(n, "labels", "hingeLoss");
    const r = T(t, "predictions", "hingeLoss");
    let i = null;
    e != null && (i = T(e, "weights", "hingeLoss")),
        Pe(o.shape, r.shape, "Error in hingeLoss: ");
    const a = gt(1);
    o = it(G(gt(2), o), a);
    const l = Ts(it(a, G(o, r)));
    return Ns(l, i, s);
}
const TR = /* @__PURE__ */ L({ hingeLoss_: kR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NR(n, t, e, s = 1, o = Ke.SUM_BY_NONZERO_WEIGHTS) {
    const r = T(n, "labels", "huberLoss"),
        i = T(t, "predictions", "huberLoss");
    let a = null;
    e != null && (a = T(e, "weights", "huberLoss")),
        Pe(r.shape, i.shape, "Error in huberLoss: ");
    const l = gt(s),
        c = me(it(i, r)),
        u = br(c, l),
        d = it(c, u),
        h = U(G(gt(0.5), Kt(u)), G(l, d));
    return Ns(h, a, o);
}
const RR = /* @__PURE__ */ L({ huberLoss_: NR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $R(n, t, e, s = 1e-7, o = Ke.SUM_BY_NONZERO_WEIGHTS) {
    const r = T(n, "labels", "logLoss"),
        i = T(t, "predictions", "logLoss");
    let a = null;
    e != null && (a = T(e, "weights", "logLoss")),
        Pe(r.shape, i.shape, "Error in logLoss: ");
    const l = gt(1),
        c = gt(s),
        u = Yt(G(r, Nn(U(i, c)))),
        d = G(it(l, r), Nn(U(it(l, i), c))),
        h = it(u, d);
    return Ns(h, a, o);
}
const GR = /* @__PURE__ */ L({ logLoss_: $R });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ER(n, t, e, s = Ke.SUM_BY_NONZERO_WEIGHTS) {
    const o = T(n, "labels", "meanSquaredError"),
        r = T(t, "predictions", "meanSquaredError");
    let i = null;
    e != null && (i = T(e, "weights", "meanSquaredError")),
        Pe(o.shape, r.shape, "Error in meanSquaredError: ");
    const a = x0(o, r);
    return Ns(a, i, s);
}
const LR = /* @__PURE__ */ L({ meanSquaredError_: ER });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MR(n, t) {
    const e = T(n, "labels", "sigmoidCrossEntropyWithLogits"),
        s = T(t, "logits", "sigmoidCrossEntropyWithLogits");
    Pe(e.shape, s.shape, "Error in sigmoidCrossEntropyWithLogits: ");
    const o = Ts(s),
        r = G(s, e),
        i = hp(mn(Yt(me(s))));
    return U(it(o, r), i);
}
function WR(n, t, e, s = 0, o = Ke.SUM_BY_NONZERO_WEIGHTS) {
    let r = T(n, "multiClassLabels", "sigmoidCrossEntropy");
    const i = T(t, "logits", "sigmoidCrossEntropy");
    let a = null;
    if (
        (e != null && (a = T(e, "weights", "sigmoidCrossEntropy")),
        Pe(r.shape, i.shape, "Error in sigmoidCrossEntropy: "),
        s > 0)
    ) {
        const c = gt(s),
            u = gt(1),
            d = gt(0.5);
        r = U(G(r, it(u, c)), G(d, c));
    }
    const l = MR(r, i);
    return Ns(l, a, o);
}
const DR = /* @__PURE__ */ L({ sigmoidCrossEntropy_: WR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FR(n, t, e = -1) {
    if ((e === -1 && (e = t.rank - 1), e !== t.rank - 1))
        throw Error(
            `Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`
        );
    return Eo((o, r, i) => {
        const l = pp(r, [e], !0),
            c = it(tt(r, "float32"), l);
        i([o, c]);
        const u = Yt(G(c, o));
        return {
            value: at(u, [e]),
            gradFunc: (p, f) => {
                const [m, g] = f,
                    b = re(p.shape, [e]);
                return [
                    G(W(p, b), it(tt(m, "float32"), mn(g))),
                    G(W(p, b), it(mn(g), tt(m, "float32"))),
                ];
            },
        };
    })(n, t);
}
function VR(n, t, e, s = 0, o = Ke.SUM_BY_NONZERO_WEIGHTS) {
    let r = T(n, "onehotLabels", "softmaxCrossEntropy");
    const i = T(t, "logits", "softmaxCrossEntropy");
    let a = null;
    if (
        (e != null && (a = T(e, "weights", "softmaxCrossEntropy")),
        Pe(r.shape, i.shape, "Error in softmaxCrossEntropy: "),
        s > 0)
    ) {
        const c = gt(s),
            u = gt(1),
            d = gt(r.shape[1]);
        r = U(G(r, it(u, c)), ut(c, d));
    }
    const l = FR(r, i);
    return Ns(l, a, o);
}
const zR = /* @__PURE__ */ L({ softmaxCrossEntropy_: VR });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PR(n, t, e, s) {
    const o = T(n, "indices", "sparseFillEmptyRows", "int32"),
        r = T(t, "values", "sparseFillEmptyRows"),
        i = T(e, "denseShape", "sparseFillEmptyRows", "int32"),
        a = T(s, "defaultValue", "sparseFillEmptyRows", r.dtype);
    if (o.rank !== 2)
        throw new Error(`Indices should be Tensor2D but received shape
        ${o.shape}`);
    if (r.rank !== 1)
        throw new Error(
            `Values should be Tensor1D but received shape ${r.shape}`
        );
    if (i.rank !== 1)
        throw new Error(
            `Dense shape should be Tensor1D but received shape ${i.shape}`
        );
    if (a.rank !== 0)
        throw new Error(
            `Default value should be a scalar but received shape ${a.shape}`
        );
    const l = {
            indices: o,
            values: r,
            denseShape: i,
            defaultValue: a,
        },
        c = $.runKernel(Wh, l);
    return {
        outputIndices: c[0],
        outputValues: c[1],
        emptyRowIndicator: c[2],
        reverseIndexMap: c[3],
    };
}
const AR = /* @__PURE__ */ L({ sparseFillEmptyRows_: PR });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OR(n, t, e) {
    const s = T(n, "inputIndices", "sparseReshape", "int32"),
        o = T(t, "inputShape", "sparseReshape", "int32"),
        r = T(e, "newShape", "sparseReshape", "int32");
    if (s.rank !== 2)
        throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);
    if (o.rank !== 1)
        throw new Error(
            `Input shape should be Tensor1D but received shape ${o.shape}`
        );
    if (r.rank !== 1)
        throw new Error(
            `New shape should be Tensor1D but received shape ${r.shape}`
        );
    const i = {
            inputIndices: s,
            inputShape: o,
            newShape: r,
        },
        a = $.runKernel(Dh, i);
    return { outputIndices: a[0], outputShape: a[1] };
}
const XR = /* @__PURE__ */ L({ sparseReshape_: OR });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KR(n, t, e) {
    const s = T(n, "data", "sparseSegmentMean"),
        o = T(t, "indices", "sparseSegmentMean", "int32"),
        r = T(e, "segmentIds", "sparseSegmentMean", "int32");
    if (s.rank < 1)
        throw new Error(
            "Data should be at least 1 dimensional but received scalar"
        );
    if (o.rank !== 1)
        throw new Error(`Indices should be Tensor1D but received shape
          ${o.shape}`);
    if (r.rank !== 1)
        throw new Error(`Segment ids should be Tensor1D but received shape
          ${r.shape}`);
    const i = {
        data: s,
        indices: o,
        segmentIds: r,
    };
    return $.runKernel(Fh, i);
}
const ZR = /* @__PURE__ */ L({ sparseSegmentMean_: KR });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BR(n, t, e) {
    const s = T(n, "data", "sparseSegmentSum"),
        o = T(t, "indices", "sparseSegmentSum", "int32"),
        r = T(e, "segmentIds", "sparseSegmentSum", "int32");
    if (s.rank < 1)
        throw new Error(
            "Data should be at least 1 dimensional but received scalar"
        );
    if (o.rank !== 1)
        throw new Error(`Indices should be Tensor1D but received shape
         ${o.shape}`);
    if (r.rank !== 1)
        throw new Error(`Segment ids should be Tensor1D but received shape
         ${r.shape}`);
    const i = {
        data: s,
        indices: o,
        segmentIds: r,
    };
    return $.runKernel(Vh, i);
}
const HR = /* @__PURE__ */ L({ sparseSegmentSum_: BR });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _R(n, t, e, s, o, r, i, a) {
    const l = T(n, "data", "stringNGrams", "string");
    if (l.dtype !== "string")
        throw new Error("Data must be of datatype string");
    if (l.shape.length !== 1)
        throw new Error(`Data must be a vector, saw: ${l.shape}`);
    const c = T(t, "dataSplits", "stringNGrams");
    if (c.dtype !== "int32")
        throw new Error("Data splits must be of datatype int32");
    const u = {
            separator: e,
            nGramWidths: s,
            leftPad: o,
            rightPad: r,
            padWidth: i,
            preserveShortSequences: a,
        },
        d = { data: l, dataSplits: c },
        h = $.runKernel(Ah, d, u);
    return { nGrams: h[0], nGramsSplits: h[1] };
}
const UR = /* @__PURE__ */ L({ stringNGrams_: _R });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YR(n, t, e = !0) {
    const s = T(n, "input", "stringSplit", "string"),
        o = T(t, "delimiter", "stringSplit", "string");
    if (s.rank !== 1)
        throw new Error(
            `Input should be Tensor1D but received shape ${s.shape}`
        );
    if (o.rank !== 0)
        throw new Error(
            `Delimiter should be a scalar but received shape ${o.shape}`
        );
    const r = { skipEmpty: e },
        i = { input: s, delimiter: o },
        a = $.runKernel(Oh, i, r);
    return { indices: a[0], values: a[1], shape: a[2] };
}
const QR = /* @__PURE__ */ L({ stringSplit_: YR });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JR(n, t) {
    const e = T(n, "input", "stringToHashBucketFast", "string"),
        s = { numBuckets: t };
    if (t <= 0) throw new Error("Number of buckets must be at least 1");
    const o = { input: e };
    return $.runKernel(Xh, o, s);
}
const jR = /* @__PURE__ */ L({ stringToHashBucketFast_: JR });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qR(n, t, e, s = !0) {
    const o = T(n, "input", "staticRegexReplace", "string"),
        r = { pattern: t, rewrite: e, replaceGlobal: s };
    return $.runKernel(Bc, { x: o }, r);
}
const t$ = /* @__PURE__ */ L({ staticRegexReplace_: qR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NQ = {
        fft: Gp,
        ifft: kl,
        rfft: Ep,
        irfft: b0,
    },
    RQ = {
        hammingWindow: RN,
        hannWindow: S0,
        frame: k0,
        stft: LN,
    },
    fs = {
        flipLeftRight: FN,
        grayscaleToRGB: zN,
        resizeNearestNeighbor: N0,
        resizeBilinear: T0,
        rgbToGrayscale: AN,
        rotateWithOffset: XN,
        cropAndResize: WN,
        nonMaxSuppression: ZN,
        nonMaxSuppressionAsync: jN,
        nonMaxSuppressionWithScore: tR,
        nonMaxSuppressionWithScoreAsync: nR,
        nonMaxSuppressionPadded: oR,
        nonMaxSuppressionPaddedAsync: iR,
        threshold: dR,
        transform: pR,
    },
    e$ = {
        bandPart: mR,
        gramSchmidt: bR,
        qr: yR,
    },
    $Q = {
        absoluteDifference: CR,
        computeWeightedLoss: Ns,
        cosineDistance: SR,
        hingeLoss: TR,
        huberLoss: RR,
        logLoss: GR,
        meanSquaredError: LR,
        sigmoidCrossEntropy: DR,
        softmaxCrossEntropy: zR,
    },
    GQ = {
        sparseFillEmptyRows: AR,
        sparseReshape: XR,
        sparseSegmentMean: ZR,
        sparseSegmentSum: HR,
    },
    EQ = {
        stringNGrams: UR,
        stringSplit: QR,
        stringToHashBucketFast: jR,
        staticRegexReplace: t$,
    };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const n$ = /* @__PURE__ */ new Map(),
    Sd = /* @__PURE__ */ new Map();
class _o {
    /**
     * Return the class name for this class to use in serialization contexts.
     *
     * Generally speaking this will be the same thing that constructor.name
     * would have returned.  However, the class name needs to be robust
     * against minification for serialization/deserialization to work properly.
     *
     * There's also places such as initializers.VarianceScaling, where
     * implementation details between different languages led to different
     * class hierarchies and a non-leaf node is used for serialization purposes.
     */
    getClassName() {
        return this.constructor.className;
    }
    /**
     * Creates an instance of T from a ConfigDict.
     *
     * This works for most descendants of serializable.  A few need to
     * provide special handling.
     * @param cls A Constructor for the class to instantiate.
     * @param config The Configuration for the object.
     */
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t(e);
    }
}
class cn {
    constructor() {
        this.classNameMap = {};
    }
    /**
     * Returns the singleton instance of the map.
     */
    static getMap() {
        return cn.instance == null && (cn.instance = new cn()), cn.instance;
    }
    /**
     * Registers the class as serializable.
     */
    static register(t) {
        cn.getMap().classNameMap[t.className] = [t, t.fromConfig];
    }
}
function _(n, t, e) {
    C(
        n.className != null,
        () =>
            "Class being registered does not have the static className property defined."
    ),
        C(
            typeof n.className == "string",
            () =>
                "className is required to be a string, but got type " +
                typeof n.className
        ),
        C(
            n.className.length > 0,
            () =>
                "Class being registered has an empty-string as its className, which is disallowed."
        ),
        typeof t > "u" && (t = "Custom"),
        typeof e > "u" && (e = n.className);
    const s = e,
        o = t + ">" + s;
    return cn.register(n), n$.set(o, n), Sd.set(n, o), n;
}
function s$(n) {
    return Sd.has(n) ? Sd.get(n) : n.className;
}
const LQ = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            Serializable: _o,
            SerializationMap: cn,
            getRegisteredName: s$,
            registerClass: _,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class eo extends _o {
    /**
     * Executes `f()` and minimizes the scalar output of `f()` by computing
     * gradients of y with respect to the list of trainable variables provided by
     * `varList`. If no list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to minimize.
     * @param returnCost Whether to return the scalar cost value produced by
     * executing `f()`.
     * @param varList An optional list of variables to update. If specified, only
     * the trainable variables in varList will be updated by minimize. Defaults to
     * all trainable variables.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers'}
     */
    minimize(t, e = !1, s) {
        const { value: o, grads: r } = this.computeGradients(t, s);
        if (s != null) {
            const i = s.map((a) => ({ name: a.name, tensor: r[a.name] }));
            this.applyGradients(i);
        } else this.applyGradients(r);
        return xt(r), e ? o : (o.dispose(), null);
    }
    /**
     * The number of iterations that this optimizer instance has been invoked for.
     */
    get iterations() {
        return (
            this.iterations_ == null && (this.iterations_ = 0), this.iterations_
        );
    }
    incrementIterations() {
        this.iterations_ = this.iterations + 1;
    }
    /**
     * Executes f() and computes the gradient of the scalar output of f() with
     * respect to the list of trainable variables provided by `varList`. If no
     * list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to use for computing
     * gradients with respect to variables.
     * @param varList An optional list of variables to compute gradients with
     * respect to. If specified, only the trainable variables in varList will have
     * gradients computed with respect to. Defaults to all trainable variables.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers'}
     */
    computeGradients(t, e) {
        return kk(t, e);
    }
    /**
     * Dispose the variables (if any) owned by this optimizer instance.
     */
    dispose() {
        this.iterations_ != null && xt(this.iterations_);
    }
    async saveIterations() {
        return (
            this.iterations_ == null && (this.iterations_ = 0),
            {
                name: "iter",
                // TODO(cais): Use 'int64' type when available.
                tensor: gt(this.iterations_, "int32"),
            }
        );
    }
    async getWeights() {
        throw new Error(
            "getWeights() is not implemented for this optimizer yet."
        );
    }
    async setWeights(t) {
        throw new Error(
            `setWeights() is not implemented for this optimizer class ${this.getClassName()}`
        );
    }
    /**
     * Extract the first element of the weight values and set it
     * as the iterations counter variable of this instance of optimizer.
     *
     * @param weightValues
     * @returns Weight values with the first element consumed and excluded.
     */
    async extractIterations(t) {
        return (this.iterations_ = (await t[0].tensor.data())[0]), t.slice(1);
    }
}
Object.defineProperty(eo, Symbol.hasInstance, {
    value: (n) =>
        n.minimize != null &&
        n.computeGradients != null &&
        n.applyGradients != null,
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class R0 extends eo {
    /** @nocollapse */
    static get className() {
        return "Adadelta";
    }
    constructor(t, e, s = null) {
        super(),
            (this.learningRate = t),
            (this.rho = e),
            (this.epsilon = s),
            (this.accumulatedGrads = []),
            (this.accumulatedUpdates = []),
            s == null && (this.epsilon = $.backend.epsilon());
    }
    applyGradients(t) {
        (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach(
            (s, o) => {
                const r = $.registeredVariables[s],
                    i = !1;
                this.accumulatedGrads[o] == null &&
                    (this.accumulatedGrads[o] = {
                        originalName: `${s}/accum_grad`,
                        variable: D(() => Tt(r).variable(i)),
                    }),
                    this.accumulatedUpdates[o] == null &&
                        (this.accumulatedUpdates[o] = {
                            originalName: `${s}/accum_var`,
                            variable: D(() => Tt(r).variable(i)),
                        });
                const a = Array.isArray(t) ? t[o].tensor : t[s];
                if (a == null) return;
                const l = this.accumulatedGrads[o].variable,
                    c = this.accumulatedUpdates[o].variable;
                D(() => {
                    const u = U(G(l, this.rho), G(Kt(a), 1 - this.rho)),
                        d = G(
                            ut(Ve(U(c, this.epsilon)), Ve(U(l, this.epsilon))),
                            a
                        ),
                        h = U(G(c, this.rho), G(Kt(d), 1 - this.rho));
                    l.assign(u), c.assign(h);
                    const p = U(G(d, -this.learningRate), r);
                    r.assign(p);
                });
            }
        ),
            this.incrementIterations();
    }
    dispose() {
        this.accumulatedUpdates != null &&
            (xt(this.accumulatedGrads.map((t) => t.variable)),
            xt(this.accumulatedUpdates.map((t) => t.variable)));
    }
    async getWeights() {
        const t = [...this.accumulatedGrads, ...this.accumulatedUpdates];
        return [await this.saveIterations()].concat(
            t.map((e) => ({ name: e.originalName, tensor: e.variable }))
        );
    }
    async setWeights(t) {
        t = await this.extractIterations(t);
        const e = t.length / 2,
            s = !1;
        (this.accumulatedGrads = t.slice(0, e).map((o) => ({
            originalName: o.name,
            variable: o.tensor.variable(s),
        }))),
            (this.accumulatedUpdates = t.slice(e, e * 2).map((o) => ({
                originalName: o.name,
                variable: o.tensor.variable(s),
            })));
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            rho: this.rho,
            epsilon: this.epsilon,
        };
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t(e.learningRate, e.rho, e.epsilon);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class $0 extends eo {
    /** @nocollapse */
    static get className() {
        return "Adagrad";
    }
    constructor(t, e = 0.1) {
        super(),
            (this.learningRate = t),
            (this.initialAccumulatorValue = e),
            (this.accumulatedGrads = []);
    }
    applyGradients(t) {
        (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach(
            (s, o) => {
                const r = $.registeredVariables[s];
                this.accumulatedGrads[o] == null &&
                    (this.accumulatedGrads[o] = {
                        originalName: `${s}/accumulator`,
                        variable: D(() =>
                            Ca(r.shape, this.initialAccumulatorValue).variable(
                                !1
                            )
                        ),
                    });
                const i = Array.isArray(t) ? t[o].tensor : t[s];
                if (i == null) return;
                const a = this.accumulatedGrads[o].variable;
                D(() => {
                    const l = U(a, Kt(i));
                    a.assign(l);
                    const c = U(
                        G(
                            ut(i, Ve(U(l, $.backend.epsilon()))),
                            -this.learningRate
                        ),
                        r
                    );
                    r.assign(c);
                });
            }
        ),
            this.incrementIterations();
    }
    dispose() {
        this.accumulatedGrads != null &&
            xt(this.accumulatedGrads.map((t) => t.variable));
    }
    async getWeights() {
        return [await this.saveIterations()].concat(
            this.accumulatedGrads.map((t) => ({
                name: t.originalName,
                tensor: t.variable,
            }))
        );
    }
    async setWeights(t) {
        t = await this.extractIterations(t);
        const e = !1;
        this.accumulatedGrads = t.map((s) => ({
            originalName: s.name,
            variable: s.tensor.variable(e),
        }));
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            initialAccumulatorValue: this.initialAccumulatorValue,
        };
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t(e.learningRate, e.initialAccumulatorValue);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class G0 extends eo {
    /** @nocollapse */
    static get className() {
        return "Adam";
    }
    constructor(t, e, s, o = null) {
        super(),
            (this.learningRate = t),
            (this.beta1 = e),
            (this.beta2 = s),
            (this.epsilon = o),
            (this.accumulatedFirstMoment = []),
            (this.accumulatedSecondMoment = []),
            D(() => {
                (this.accBeta1 = gt(e).variable()),
                    (this.accBeta2 = gt(s).variable());
            }),
            o == null && (this.epsilon = $.backend.epsilon());
    }
    applyGradients(t) {
        const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
        D(() => {
            const s = it(1, this.accBeta1),
                o = it(1, this.accBeta2);
            e.forEach((r, i) => {
                const a = $.registeredVariables[r],
                    l = !1;
                this.accumulatedFirstMoment[i] == null &&
                    (this.accumulatedFirstMoment[i] = {
                        originalName: `${r}/m`,
                        variable: D(() => Tt(a).variable(l)),
                    }),
                    this.accumulatedSecondMoment[i] == null &&
                        (this.accumulatedSecondMoment[i] = {
                            originalName: `${r}/v`,
                            variable: D(() => Tt(a).variable(l)),
                        });
                const c = Array.isArray(t) ? t[i].tensor : t[r];
                if (c == null) return;
                const u = this.accumulatedFirstMoment[i].variable,
                    d = this.accumulatedSecondMoment[i].variable,
                    h = U(G(u, this.beta1), G(c, 1 - this.beta1)),
                    p = U(G(d, this.beta2), G(Kt(c), 1 - this.beta2)),
                    f = ut(h, s),
                    m = ut(p, o);
                u.assign(h), d.assign(p);
                const g = U(
                    G(ut(f, U(Ve(m), this.epsilon)), -this.learningRate),
                    a
                );
                a.assign(g);
            }),
                this.accBeta1.assign(G(this.accBeta1, this.beta1)),
                this.accBeta2.assign(G(this.accBeta2, this.beta2));
        }),
            this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose(),
            this.accBeta2.dispose(),
            this.accumulatedFirstMoment != null &&
                xt(this.accumulatedFirstMoment.map((t) => t.variable)),
            this.accumulatedSecondMoment != null &&
                xt(this.accumulatedSecondMoment.map((t) => t.variable));
    }
    async getWeights() {
        const t = [
            ...this.accumulatedFirstMoment,
            ...this.accumulatedSecondMoment,
        ];
        return [await this.saveIterations()].concat(
            t.map((e) => ({ name: e.originalName, tensor: e.variable }))
        );
    }
    async setWeights(t) {
        (t = await this.extractIterations(t)),
            D(() => {
                this.accBeta1.assign(gr(this.beta1, this.iterations_ + 1)),
                    this.accBeta2.assign(gr(this.beta2, this.iterations_ + 1));
            });
        const e = t.length / 2,
            s = !1;
        (this.accumulatedFirstMoment = t.slice(0, e).map((o) => ({
            originalName: o.name,
            variable: o.tensor.variable(s),
        }))),
            (this.accumulatedSecondMoment = t.slice(e, e * 2).map((o) => ({
                originalName: o.name,
                variable: o.tensor.variable(s),
            })));
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            beta1: this.beta1,
            beta2: this.beta2,
            epsilon: this.epsilon,
        };
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class E0 extends eo {
    /** @nocollapse */
    static get className() {
        return "Adamax";
    }
    constructor(t, e, s, o = null, r = 0) {
        super(),
            (this.learningRate = t),
            (this.beta1 = e),
            (this.beta2 = s),
            (this.epsilon = o),
            (this.decay = r),
            (this.accumulatedFirstMoment = []),
            (this.accumulatedWeightedInfNorm = []),
            D(() => {
                (this.iteration = gt(0).variable()),
                    (this.accBeta1 = gt(e).variable());
            }),
            o == null && (this.epsilon = $.backend.epsilon());
    }
    applyGradients(t) {
        const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
        D(() => {
            const s = it(1, this.accBeta1),
                o = ut(-this.learningRate, U(G(this.iteration, this.decay), 1));
            e.forEach((r, i) => {
                const a = $.registeredVariables[r],
                    l = !1;
                this.accumulatedFirstMoment[i] == null &&
                    (this.accumulatedFirstMoment[i] = {
                        originalName: `${r}/m`,
                        variable: Tt(a).variable(l),
                    }),
                    this.accumulatedWeightedInfNorm[i] == null &&
                        (this.accumulatedWeightedInfNorm[i] = {
                            originalName: `${r}/v`,
                            variable: Tt(a).variable(l),
                        });
                const c = Array.isArray(t) ? t[i].tensor : t[r];
                if (c == null) return;
                const u = this.accumulatedFirstMoment[i].variable,
                    d = this.accumulatedWeightedInfNorm[i].variable,
                    h = U(G(u, this.beta1), G(c, 1 - this.beta1)),
                    p = G(d, this.beta2),
                    f = me(c),
                    m = qs(p, f);
                u.assign(h), d.assign(m);
                const g = U(G(ut(o, s), ut(h, U(m, this.epsilon))), a);
                a.assign(g);
            }),
                this.iteration.assign(U(this.iteration, 1)),
                this.accBeta1.assign(G(this.accBeta1, this.beta1));
        }),
            this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose(),
            this.iteration.dispose(),
            this.accumulatedFirstMoment != null &&
                xt(this.accumulatedFirstMoment.map((t) => t.variable)),
            this.accumulatedWeightedInfNorm != null &&
                xt(this.accumulatedWeightedInfNorm.map((t) => t.variable));
    }
    async getWeights() {
        throw new Error("getWeights() is not implemented for Adamax yet.");
    }
    async setWeights(t) {
        throw new Error("setWeights() is not implemented for Adamax yet.");
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            beta1: this.beta1,
            beta2: this.beta2,
            epsilon: this.epsilon,
            decay: this.decay,
        };
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Xp extends eo {
    /** @nocollapse */
    static get className() {
        return "SGD";
    }
    constructor(t) {
        super(), (this.learningRate = t), this.setLearningRate(t);
    }
    applyGradients(t) {
        (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach(
            (s, o) => {
                const r = Array.isArray(t) ? t[o].tensor : t[s];
                if (r == null) return;
                const i = $.registeredVariables[s];
                D(() => {
                    const a = U(G(this.c, r), i);
                    i.assign(a);
                });
            }
        ),
            this.incrementIterations();
    }
    /**
     * Sets the learning rate of the optimizer.
     */
    setLearningRate(t) {
        (this.learningRate = t),
            this.c != null && this.c.dispose(),
            (this.c = hn(gt(-t)));
    }
    dispose() {
        this.c.dispose();
    }
    async getWeights() {
        return [await this.saveIterations()];
    }
    async setWeights(t) {
        if (((t = await this.extractIterations(t)), t.length !== 0))
            throw new Error("SGD optimizer does not have settable weights.");
    }
    getConfig() {
        return { learningRate: this.learningRate };
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t(e.learningRate);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class L0 extends Xp {
    /** @nocollapse */
    // Name matters for Python compatibility.
    static get className() {
        return "Momentum";
    }
    constructor(t, e, s = !1) {
        super(t),
            (this.learningRate = t),
            (this.momentum = e),
            (this.useNesterov = s),
            (this.accumulations = []),
            (this.m = gt(this.momentum));
    }
    applyGradients(t) {
        (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach(
            (s, o) => {
                const r = $.registeredVariables[s];
                this.accumulations[o] == null &&
                    (this.accumulations[o] = {
                        originalName: `${s}/momentum`,
                        variable: D(() => Tt(r).variable(!1)),
                    });
                const i = this.accumulations[o].variable,
                    a = Array.isArray(t) ? t[o].tensor : t[s];
                a != null &&
                    D(() => {
                        let l;
                        const c = U(G(this.m, i), a);
                        this.useNesterov
                            ? (l = U(G(this.c, U(a, G(c, this.m))), r))
                            : (l = U(G(this.c, c), r)),
                            i.assign(c),
                            r.assign(l);
                    });
            }
        ),
            this.incrementIterations();
    }
    dispose() {
        this.m.dispose(),
            this.accumulations != null &&
                xt(this.accumulations.map((t) => t.variable));
    }
    /**
     * Sets the momentum of the optimizer.
     *
     * @param momentum
     */
    setMomentum(t) {
        this.momentum = t;
    }
    async getWeights() {
        return [await this.saveIterations()].concat(
            this.accumulations.map((t) => ({
                name: t.originalName,
                tensor: t.variable,
            }))
        );
    }
    async setWeights(t) {
        t = await this.extractIterations(t);
        const e = !1;
        this.accumulations = t.map((s) => ({
            originalName: s.name,
            variable: s.tensor.variable(e),
        }));
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            momentum: this.momentum,
            useNesterov: this.useNesterov,
        };
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t(e.learningRate, e.momentum, e.useNesterov);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class M0 extends eo {
    /** @nocollapse */
    static get className() {
        return "RMSProp";
    }
    constructor(t, e = 0.9, s = 0, o = null, r = !1) {
        if (
            (super(),
            (this.learningRate = t),
            (this.decay = e),
            (this.momentum = s),
            (this.epsilon = o),
            (this.accumulatedMeanSquares = []),
            (this.accumulatedMoments = []),
            (this.accumulatedMeanGrads = []),
            (this.centered = r),
            o == null && (this.epsilon = $.backend.epsilon()),
            t == null)
        )
            throw new Error(
                "learningRate for RMSPropOptimizer must be defined."
            );
    }
    applyGradients(t) {
        (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach(
            (s, o) => {
                const r = $.registeredVariables[s],
                    i = !1;
                this.accumulatedMeanSquares[o] == null &&
                    (this.accumulatedMeanSquares[o] = {
                        originalName: `${s}/rms`,
                        variable: D(() => Tt(r).variable(i)),
                    }),
                    this.accumulatedMoments[o] == null &&
                        (this.accumulatedMoments[o] = {
                            originalName: `${s}/momentum`,
                            variable: D(() => Tt(r).variable(i)),
                        }),
                    this.accumulatedMeanGrads[o] == null &&
                        this.centered &&
                        (this.accumulatedMeanGrads[o] = {
                            originalName: `${s}/mg`,
                            variable: D(() => Tt(r).variable(i)),
                        });
                const a = Array.isArray(t) ? t[o].tensor : t[s];
                if (a == null) return;
                const l = this.accumulatedMeanSquares[o].variable,
                    c = this.accumulatedMoments[o].variable;
                D(() => {
                    const u = U(G(l, this.decay), G(Kt(a), 1 - this.decay));
                    if (this.centered) {
                        const d = this.accumulatedMeanGrads[o].variable,
                            h = U(G(d, this.decay), G(a, 1 - this.decay)),
                            p = ut(
                                G(a, this.learningRate),
                                Ve(it(u, U(Kt(h), this.epsilon)))
                            ),
                            f = U(G(c, this.momentum), p);
                        l.assign(u), d.assign(h), c.assign(f);
                        const m = it(r, f);
                        r.assign(m);
                    } else {
                        const d = U(G(l, this.decay), G(Kt(a), 1 - this.decay)),
                            h = U(
                                G(c, this.momentum),
                                ut(
                                    G(a, this.learningRate),
                                    Ve(U(d, this.epsilon))
                                )
                            );
                        l.assign(d), c.assign(h);
                        const p = it(r, h);
                        r.assign(p);
                    }
                });
            }
        ),
            this.incrementIterations();
    }
    dispose() {
        this.accumulatedMeanSquares != null &&
            xt(this.accumulatedMeanSquares.map((t) => t.variable)),
            this.accumulatedMeanGrads != null &&
                this.centered &&
                xt(this.accumulatedMeanGrads.map((t) => t.variable)),
            this.accumulatedMoments != null &&
                xt(this.accumulatedMoments.map((t) => t.variable));
    }
    async getWeights() {
        const t = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
        return (
            this.centered && t.push(...this.accumulatedMeanGrads),
            [await this.saveIterations()].concat(
                t.map((e) => ({ name: e.originalName, tensor: e.variable }))
            )
        );
    }
    async setWeights(t) {
        t = await this.extractIterations(t);
        const e = this.centered ? t.length / 3 : t.length / 2,
            s = !1;
        (this.accumulatedMeanSquares = t.slice(0, e).map((o) => ({
            originalName: o.name,
            variable: o.tensor.variable(s),
        }))),
            (this.accumulatedMoments = t.slice(e, e * 2).map((o) => ({
                originalName: o.name,
                variable: o.tensor.variable(s),
            }))),
            this.centered &&
                (this.accumulatedMeanGrads = t.slice(e * 2, e * 3).map((o) => ({
                    originalName: o.name,
                    variable: o.tensor.variable(s),
                })));
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            decay: this.decay,
            momentum: this.momentum,
            epsilon: this.epsilon,
            centered: this.centered,
        };
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t(
            e.learningRate,
            e.decay,
            e.momentum,
            e.epsilon,
            e.centered
        );
    }
}
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const o$ = [R0, $0, G0, E0, L0, M0, Xp];
function r$() {
    for (const n of o$) _(n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Gm(n, t, e, s) {
    i(n), (e = e ?? 0), (s = s ?? 1), a(e, s);
    let o = 0;
    const r = (l) => (
        l.then((c) => {
            const u = e + (++o / n.length) * (s - e);
            return t(u), c;
        }),
        l
    );
    function i(l) {
        C(
            l != null && Array.isArray(l) && l.length > 0,
            () => "promises must be a none empty array"
        );
    }
    function a(l, c) {
        C(
            l >= 0 && l <= 1,
            () =>
                `Progress fraction must be in range [0, 1], but got startFraction ${l}`
        ),
            C(
                c >= 0 && c <= 1,
                () =>
                    `Progress fraction must be in range [0, 1], but got endFraction ${c}`
            ),
            C(
                c >= l,
                () =>
                    `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${c}`
            );
    }
    return Promise.all(n.map(r));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function W0(n, t) {
    t == null && (t = {});
    const e = t.fetchFunc == null ? F().platform.fetch : t.fetchFunc,
        s = n.map((d) => e(d, t.requestInit, { isBinary: !0 })),
        a = (
            t.onProgress == null
                ? await Promise.all(s)
                : await Gm(s, t.onProgress, 0, 0.5)
        ).map((d) => d.arrayBuffer());
    return t.onProgress == null
        ? await Promise.all(a)
        : await Gm(a, t.onProgress, 0.5, 1);
}
function i$(n, t) {
    var e;
    const s = t.fetchFunc == null ? F().platform.fetch : t.fetchFunc;
    let o = 0,
        r;
    return (
        (e = t.onProgress) === null || e === void 0 || e.call(t, 0),
        new ReadableStream({
            pull: async (i) => {
                for (var a; o < n.length; ) {
                    r ||
                        (r = (
                            await s(n[o], t.requestInit, { isBinary: !0 })
                        ).body.getReader());
                    const { done: l, value: c } = await r.read();
                    if (l) {
                        o++,
                            (r = void 0),
                            (a = t.onProgress) === null ||
                                a === void 0 ||
                                a.call(t, o / n.length);
                        continue;
                    }
                    i.enqueue(c);
                    return;
                }
                i.close();
            },
        })
    );
}
async function a$(n, t = "", e, s) {
    return l$((i) => W0(i, { requestInit: s }))(n, t, e);
}
function l$(n) {
    return async (t, e = "", s) => {
        const o = t.map(() => !1),
            r = {},
            i = s != null ? s.map(() => !1) : [],
            a = [];
        if (
            (t.forEach((p, f) => {
                let m = 0;
                p.weights.forEach((g) => {
                    const b =
                            "quantization" in g
                                ? g.quantization.dtype
                                : g.dtype,
                        x = So[b] * X(g.shape),
                        w = () => {
                            (o[f] = !0),
                                r[f] == null && (r[f] = []),
                                r[f].push({
                                    manifestEntry: g,
                                    groupOffset: m,
                                    sizeBytes: x,
                                });
                        };
                    s != null
                        ? s.forEach((y, I) => {
                              y === g.name && (w(), (i[I] = !0));
                          })
                        : w(),
                        a.push(g.name),
                        (m += x);
                });
            }),
            !i.every((p) => p))
        ) {
            const p = s.filter((f, m) => !i[m]);
            throw new Error(`Could not find weights in manifest with names: ${p.join(
                ", "
            )}. 
Manifest JSON has weights with names: ${a.join(", ")}.`);
        }
        const l = o.reduce((p, f, m) => (f && p.push(m), p), []),
            c = [];
        l.forEach((p) => {
            t[p].paths.forEach((f) => {
                const m = e + (e.endsWith("/") ? "" : "/") + f;
                c.push(m);
            });
        });
        const u = await n(c),
            d = {};
        let h = 0;
        return (
            l.forEach((p) => {
                const f = t[p].paths.length,
                    m = new Cs(u.slice(h, h + f));
                r[p].forEach((b) => {
                    const x = m.slice(
                            b.groupOffset,
                            b.groupOffset + b.sizeBytes
                        ),
                        w = Ab(x, [b.manifestEntry]);
                    for (const y in w) d[y] = w[y];
                }),
                    (h += f);
            }),
            d
        );
    };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const c$ = "application/octet-stream",
    u$ = "application/json";
class Kp {
    constructor(t, e) {
        if (
            ((this.DEFAULT_METHOD = "POST"),
            e == null && (e = {}),
            (this.weightPathPrefix = e.weightPathPrefix),
            (this.weightUrlConverter = e.weightUrlConverter),
            e.fetchFunc != null
                ? (C(
                      typeof e.fetchFunc == "function",
                      () =>
                          "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"
                  ),
                  (this.fetch = e.fetchFunc))
                : (this.fetch = F().platform.fetch),
            C(
                t != null && t.length > 0,
                () => "URL path for http must not be null, undefined or empty."
            ),
            Array.isArray(t) &&
                C(
                    t.length === 2,
                    () =>
                        `URL paths for http must have a length of 2, (actual length is ${t.length}).`
                ),
            (this.path = t),
            e.requestInit != null && e.requestInit.body != null)
        )
            throw new Error(
                "requestInit is expected to have no pre-existing body, but has one."
            );
        (this.requestInit = e.requestInit || {}), (this.loadOptions = e);
    }
    async save(t) {
        if (t.modelTopology instanceof ArrayBuffer)
            throw new Error(
                "BrowserHTTPRequest.save() does not support saving model topology in binary formats yet."
            );
        const e = Object.assign(
            { method: this.DEFAULT_METHOD },
            this.requestInit
        );
        e.body = new FormData();
        const s = [
                {
                    paths: ["./model.weights.bin"],
                    weights: t.weightSpecs,
                },
            ],
            o = V2(t, s);
        if (
            (e.body.append(
                "model.json",
                new Blob([JSON.stringify(o)], { type: u$ }),
                "model.json"
            ),
            t.weightData != null)
        ) {
            const i = Cs.join(t.weightData);
            e.body.append(
                "model.weights.bin",
                new Blob([i], { type: c$ }),
                "model.weights.bin"
            );
        }
        const r = await this.fetch(this.path, e);
        if (r.ok)
            return {
                modelArtifactsInfo: tp(t),
                responses: [r],
            };
        throw new Error(
            `BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`
        );
    }
    async loadModelJSON() {
        const t = await this.fetch(this.path, this.requestInit);
        if (!t.ok)
            throw new Error(
                `Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`
            );
        let e;
        try {
            e = await t.json();
        } catch {
            let i = `Failed to parse model JSON of response from ${this.path}.`;
            throw (
                (this.path.endsWith(".pb")
                    ? (i +=
                          " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.")
                    : (i +=
                          " Please make sure the server is serving valid JSON for this request."),
                new Error(i))
            );
        }
        const s = e.modelTopology,
            o = e.weightsManifest;
        if (s == null && o == null)
            throw new Error(
                `The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`
            );
        return e;
    }
    /**
     * Load model artifacts via HTTP request(s).
     *
     * See the documentation to `tf.io.http` for details on the saved
     * artifacts.
     *
     * @returns The loaded model artifacts (if loading succeeds).
     */
    async load() {
        if (this.loadOptions.streamWeights) return this.loadStream();
        const t = await this.loadModelJSON();
        return P2(t, (e) => this.loadWeights(e));
    }
    async loadStream() {
        const t = await this.loadModelJSON(),
            e = await this.getWeightUrls(t.weightsManifest),
            s = km(t.weightsManifest),
            o = () => i$(e, this.loadOptions);
        return Object.assign(Object.assign({}, t), {
            weightSpecs: s,
            getWeightStream: o,
        });
    }
    async getWeightUrls(t) {
        const e = Array.isArray(this.path) ? this.path[1] : this.path,
            [s, o] = d$(e),
            r = this.weightPathPrefix || s,
            i = [],
            a = [];
        for (const l of t)
            for (const c of l.paths)
                this.weightUrlConverter != null
                    ? a.push(this.weightUrlConverter(c))
                    : i.push(r + c + o);
        return this.weightUrlConverter && i.push(...(await Promise.all(a))), i;
    }
    async loadWeights(t) {
        const e = await this.getWeightUrls(t),
            s = km(t),
            o = await W0(e, this.loadOptions);
        return [s, o];
    }
}
Kp.URL_SCHEME_REGEX = /^https?:\/\//;
function d$(n) {
    const t = n.lastIndexOf("/"),
        e = n.lastIndexOf("?"),
        s = n.substring(0, t),
        o = e > t ? n.substring(e) : "";
    return [s + "/", o];
}
function Em(n) {
    return n.match(Kp.URL_SCHEME_REGEX) != null;
}
const D0 = (n, t) => {
    if (typeof fetch > "u" && (t == null || t.fetchFunc == null)) return null;
    {
        let e = !0;
        if ((Array.isArray(n) ? (e = n.every((s) => Em(s))) : (e = Em(n)), e))
            return F0(n, t);
    }
    return null;
};
ee.registerSaveRouter(D0);
ee.registerLoadRouter(D0);
function F0(n, t) {
    return new Kp(n, t);
}
function h$(n, t) {
    return F0(n, t);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let io,
    Lm = !1;
function V0(n, t = 3) {
    if (t > 4)
        throw new Error(
            "Cannot construct Tensor with more than 4 channels from pixels."
        );
    if (n == null)
        throw new Error(
            "pixels passed to tf.browser.fromPixels() can not be null"
        );
    let e = !1,
        s = !1,
        o = !1,
        r = !1,
        i = !1,
        a = !1;
    if (n.data instanceof Uint8Array) e = !0;
    else if (typeof ImageData < "u" && n instanceof ImageData) s = !0;
    else if (typeof HTMLVideoElement < "u" && n instanceof HTMLVideoElement)
        o = !0;
    else if (typeof HTMLImageElement < "u" && n instanceof HTMLImageElement)
        r = !0;
    else if (n.getContext != null) i = !0;
    else if (typeof ImageBitmap < "u" && n instanceof ImageBitmap) a = !0;
    else
        throw new Error(
            `pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`
        );
    if (bl(cd, $.backendName) != null) {
        const f = { pixels: n },
            m = { numChannels: t };
        return $.runKernel(cd, f, m);
    }
    const [c, u] = o ? [n.videoWidth, n.videoHeight] : [n.width, n.height];
    let d;
    if (i)
        d = // tslint:disable-next-line:no-any
            n.getContext("2d").getImageData(0, 0, c, u).data;
    else if (s || e) d = n.data;
    else if (r || o || a) {
        if (io == null)
            if (typeof document > "u")
                if (
                    typeof OffscreenCanvas < "u" &&
                    typeof OffscreenCanvasRenderingContext2D < "u"
                )
                    io = new OffscreenCanvas(1, 1).getContext("2d");
                else
                    throw new Error(
                        "Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported."
                    );
            else
                io = document
                    .createElement("canvas")
                    .getContext("2d", { willReadFrequently: !0 });
        (io.canvas.width = c),
            (io.canvas.height = u),
            io.drawImage(n, 0, 0, c, u),
            (d = io.getImageData(0, 0, c, u).data);
    }
    let h;
    if (t === 4) h = new Int32Array(d);
    else {
        const f = c * u;
        h = new Int32Array(f * t);
        for (let m = 0; m < f; m++)
            for (let g = 0; g < t; ++g) h[m * t + g] = d[m * 4 + g];
    }
    return rN(h, [u, c, t], "int32");
}
function p$(n) {
    return n != null && n.data instanceof Uint8Array;
}
function f$() {
    return (
        typeof window < "u" &&
        typeof ImageBitmap < "u" &&
        window.hasOwnProperty("createImageBitmap")
    );
}
function m$(n) {
    return n != null && n.width !== 0 && n.height !== 0;
}
function g$(n) {
    return f$() && !(n instanceof ImageBitmap) && m$(n) && !p$(n);
}
async function b$(n, t = 3) {
    let e = null;
    if (F().getBool("WRAP_TO_IMAGEBITMAP") && g$(n)) {
        let s;
        try {
            s = await createImageBitmap(n, { premultiplyAlpha: "none" });
        } catch {
            s = null;
        }
        s != null && s.width === n.width && s.height === n.height
            ? (e = s)
            : (e = n);
    } else e = n;
    return V0(e, t);
}
function z0(n) {
    if (n.rank !== 2 && n.rank !== 3)
        throw new Error(
            `toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`
        );
    const t = n.rank === 2 ? 1 : n.shape[2];
    if (t > 4 || t === 2)
        throw new Error(
            `toPixels only supports depth of size 1, 3 or 4 but got ${t}`
        );
    if (n.dtype !== "float32" && n.dtype !== "int32")
        throw new Error(
            `Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`
        );
}
function x$(n) {
    const t = (n == null ? void 0 : n.alpha) || 1;
    if (t > 1 || t < 0)
        throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`);
}
async function y$(n, t) {
    let e = T(n, "img", "toPixels");
    if (!(n instanceof Mt)) {
        const c = e;
        (e = tt(c, "int32")), c.dispose();
    }
    z0(e);
    const [s, o] = e.shape.slice(0, 2),
        r = e.rank === 2 ? 1 : e.shape[2],
        i = await e.data(),
        a = e.dtype === "float32" ? 255 : 1,
        l = new Uint8ClampedArray(o * s * 4);
    for (let c = 0; c < s * o; ++c) {
        const u = [0, 0, 0, 255];
        for (let h = 0; h < r; h++) {
            const p = i[c * r + h];
            if (e.dtype === "float32") {
                if (p < 0 || p > 1)
                    throw new Error(
                        `Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`
                    );
            } else if (e.dtype === "int32" && (p < 0 || p > 255))
                throw new Error(
                    `Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`
                );
            r === 1
                ? ((u[0] = p * a), (u[1] = p * a), (u[2] = p * a))
                : (u[h] = p * a);
        }
        const d = c * 4;
        (l[d + 0] = Math.round(u[0])),
            (l[d + 1] = Math.round(u[1])),
            (l[d + 2] = Math.round(u[2])),
            (l[d + 3] = Math.round(u[3]));
    }
    if (t != null) {
        Lm ||
            (bl(gh, $.backendName) != null &&
                (console.warn(
                    "tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."
                ),
                (Lm = !0))),
            (t.width = o),
            (t.height = s);
        const c = t.getContext("2d"),
            u = new ImageData(l, o, s);
        c.putImageData(u, 0, 0);
    }
    return e !== n && e.dispose(), l;
}
function w$(n, t, e) {
    let s = T(n, "img", "draw");
    if (!(n instanceof Mt)) {
        const i = s;
        (s = tt(i, "int32")), i.dispose();
    }
    z0(s), x$(e == null ? void 0 : e.imageOptions);
    const o = { image: s },
        r = { canvas: t, options: e };
    $.runKernel(gh, o, r);
}
const P0 = /* @__PURE__ */ L({ fromPixels_: V0 }),
    MQ = /* @__PURE__ */ Object.freeze(
        /* @__PURE__ */ Object.defineProperty(
            {
                __proto__: null,
                draw: w$,
                fromPixels: P0,
                fromPixelsAsync: b$,
                toPixels: y$,
            },
            Symbol.toStringTag,
            { value: "Module" }
        )
    );
function eu(n, t) {
    const e = n.shape.length,
        s = t.shape.length;
    if (e < 1)
        throw new Error(
            `tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`
        );
    if (s < 1)
        throw new Error(
            `tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`
        );
    if (t.dtype !== "int32")
        throw new Error(
            `tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`
        );
    if (t.shape[s - 1] > e)
        throw new Error(
            `index innermost dimension length must be <= tensor rank; saw: ${
                t.shape[s - 1]
            } vs. ${e}`
        );
    if (X(n.shape) === 0)
        throw new Error(
            `Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`
        );
    const o = t.shape,
        r = o[o.length - 1];
    let i = 1;
    for (let d = 0; d < o.length - 1; ++d) i *= o[d];
    const a = n.shape,
        l = o.slice();
    l.pop();
    let c = 1;
    for (let d = r; d < e; ++d) (c *= a[d]), l.push(a[d]);
    const u = [...dt(n.shape).map((d) => d / c), 1].slice(0, r);
    return [l, i, c, u];
}
const WQ = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            prepareAndValidate: eu,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kd = -2,
    I$ = -1;
function Zp(n, t, e) {
    const s = n.shape.length;
    C(
        s === t.length,
        () =>
            `Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`
    ),
        C(
            s === e.length,
            () =>
                `Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`
        );
    for (let o = 0; o < s; ++o)
        C(
            t[o] + e[o] <= n.shape[o],
            () =>
                `Error in slice${s}D: begin[${o}] + size[${o}] (${
                    t[o] + e[o]
                }) would overflow input.shape[${o}] (${n.shape[o]})`
        );
}
function C$(n) {
    const t = [];
    let e = 0;
    for (; n > 0; ) n & 1 && t.push(e), (n /= 2), e++;
    return t;
}
function Bp(n, t, e) {
    const s = [];
    for (let o = 0; o < n.length; o++) s[o] = Math.ceil((t[o] - n[o]) / e[o]);
    return s;
}
function A0(n, t, e, s) {
    const o = [...n];
    for (let r = o.length; r < s.length; r++) o.push(1);
    for (let r = 0; r < e; r++)
        r === 0
            ? (o[t] = 1)
            : (o.splice(
                  t,
                  0,
                  1
                  /* element to add */
              ),
              o.pop());
    return o;
}
function O0(n, t, e) {
    return e <= n ? e : e - (t - 1);
}
function X0(n, t) {
    const e = [];
    for (let s = 0; s < n; s++) e.push(t + s);
    return e;
}
function v$(n, t, e, s, o, r, i, a, l) {
    const c = n.length;
    let u = new Array(c),
        d = new Array(c),
        h = new Array(c);
    if (t.length && e > 0) {
        const p = t[0],
            f = e + 1;
        (u = K0(i, p, f, s, n)), (d = Z0(a, p, f, o, n)), (h = A0(r, p, f, n));
    } else
        for (let p = 0; p < c; p++)
            (u[p] = H0(i, s, r, n, p, l)),
                (d[p] = _0(a, o, r, n, p, l)),
                (h[p] = B0(r, p, l));
    return {
        begin: u,
        end: d,
        strides: h,
    };
}
function K0(n, t, e, s, o) {
    const r = [...o],
        i = X0(e, t);
    for (let a = 0; a < r.length; a++)
        if (i.indexOf(a) > -1) r[a] = 0;
        else {
            const l = O0(t, e, a);
            let c = s[l];
            n & (1 << l) && (c = 0), (r[a] = c);
        }
    return r;
}
function Z0(n, t, e, s, o) {
    const r = [...o],
        i = X0(e, t);
    for (let a = 0; a < r.length; a++)
        if (i.indexOf(a) > -1) r[a] = Number.MAX_SAFE_INTEGER;
        else {
            const l = O0(t, e, a);
            let c = s[l];
            n & (1 << l) && (c = Number.MAX_SAFE_INTEGER), (r[a] = c);
        }
    for (let a = 0; a < r.length; a++) {
        const l = o[a];
        r[a] < 0 && (r[a] += l), (r[a] = Os(0, r[a], o[a]));
    }
    return r;
}
function B0(n, t, e) {
    let s = n[t];
    return (e & (1 << t) || s == null) && (s = 1), s;
}
function H0(n, t, e, s, o, r) {
    let i = t[o];
    const a = e[o] || 1;
    (n & (1 << o) || r & (1 << o) || i == null) &&
        (a > 0 ? (i = Number.MIN_SAFE_INTEGER) : (i = Number.MAX_SAFE_INTEGER));
    const l = s[o];
    return i < 0 && (i += l), (i = Os(0, i, l - 1)), i;
}
function _0(n, t, e, s, o, r) {
    let i = t[o];
    const a = e[o] || 1;
    (n & (1 << o) || r & (1 << o) || i == null) &&
        (a > 0 ? (i = Number.MAX_SAFE_INTEGER) : (i = Number.MIN_SAFE_INTEGER));
    const l = s[o];
    return (
        i < 0 && (i += l), a > 0 ? (i = Os(0, i, l)) : (i = Os(-1, i, l - 1)), i
    );
}
function Hp(n, t, e) {
    let s = e.length;
    for (let o = 0; o < e.length; o++)
        if (e[o] > 1) {
            s = o;
            break;
        }
    for (let o = s + 1; o < e.length; o++)
        if (t[o] > 0 || e[o] !== n[o]) return !1;
    return !0;
}
function _p(n, t) {
    let e = n.length > 0 ? n[n.length - 1] : 1;
    for (let s = 0; s < n.length - 1; s++) e += n[s] * t[s];
    return e;
}
function nu(n, t, e) {
    let s;
    const o = n.shape.length;
    typeof t == "number"
        ? (s = [t, ...new Array(o - 1).fill(0)])
        : t.length < o
        ? (s = t.concat(new Array(o - t.length).fill(0)))
        : (s = t.slice()),
        s.forEach((i) => {
            C(
                i !== -1,
                () => "slice() does not support negative begin indexing."
            );
        });
    let r;
    return (
        e == null
            ? (r = new Array(o).fill(-1))
            : typeof e == "number"
            ? (r = [e, ...new Array(o - 1).fill(-1)])
            : e.length < o
            ? (r = e.concat(new Array(o - e.length).fill(-1)))
            : (r = e),
        (r = r.map((i, a) =>
            i >= 0
                ? i
                : (C(
                      i === -1,
                      () =>
                          `Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`
                  ),
                  n.shape[a] - s[a])
        )),
        [s, r]
    );
}
function Up(n, t, e, s, o, r, i, a, l) {
    let c;
    if (
        (s == null ? ((c = new Array(t.length)), c.fill(1)) : (c = s),
        i != null && i & (i - 1))
    )
        throw new Error("Multiple ellipses in slice is not allowed.");
    let u = !1;
    const d = {
        dims: c.length,
        numAddAxisAfterEllipsis: 0,
        begin: t.slice(),
        end: e.slice(),
        strides: c.slice(),
        beginMask: o,
        endMask: r,
        ellipsisMask: i,
        newAxisMask: a,
        shrinkAxisMask: l,
    };
    for (let w = 0; w < d.dims; w++)
        u && (1 << w) & a && d.numAddAxisAfterEllipsis++,
            (1 << w) & i && (u = !0);
    u || ((d.ellipsisMask |= 1 << d.dims), d.dims++);
    const h = {
        dims: n.length,
        beginMask: 0,
        endMask: 0,
        beginValid: !1,
        endValid: !1,
    };
    S$(d, h);
    let p = !0,
        f = !0,
        m = !0;
    const g = [],
        b = [];
    for (let w = 0; w < n.length; ++w) {
        if (h.strides[w] === 0) throw Error(`strides[${w}] must be non-zero`);
        const y = !!(h.shrinkAxisMask & (1 << w)),
            I = n[w];
        if (I === -1) {
            g.push(y ? 1 : -1);
            continue;
        }
        const v = [h.beginMask & (1 << w), h.endMask & (1 << w)],
            k = [h.strides[w] > 0 ? 0 : -1, h.strides[w] > 0 ? I : I - 1];
        if (y && h.strides[w] <= 0)
            throw Error("only stride 1 allowed on non-range indexing.");
        m = m && h.strides[w] === 1;
        const S = !!(h.beginMask & (1 << w) && h.endMask & (1 << w));
        if (h.beginValid && h.endValid) {
            if (y) {
                const V = h.begin[w] < 0 ? I + h.begin[w] : h.begin[w];
                if (
                    ((h.begin[w] = V),
                    (h.end[w] = h.begin[w] + 1),
                    V < 0 || V >= I)
                )
                    throw Error(
                        `slice index ${h.begin[w]} of dimension ${w} out of bounds.`
                    );
            } else
                (h.begin[w] = Mm(h.begin[w], 0, h.strides[w], I, v, k)),
                    (h.end[w] = Mm(h.end[w], 1, h.strides[w], I, v, k));
            const M = h.strides[w] === 1 && h.begin[w] === 0 && h.end[w] === I;
            (p = p && M), (f = f && ((w === 0 && h.strides[w] === 1) || M));
        } else
            (p = p && h.strides[w] === 1 && S),
                (f = f && ((w === 0 && h.strides[w] === 1) || S));
        let N,
            R = !1;
        if (
            (h.beginValid && h.endValid
                ? ((N = h.end[w] - h.begin[w]), (R = !0))
                : y
                ? ((N = 1), (R = !0))
                : S &&
                  I >= 0 &&
                  (h.strides[w] < 0 ? (N = -I) : (N = I), (R = !0)),
            R)
        ) {
            let M;
            N === 0 || N < 0 != h.strides[w] < 0
                ? (M = 0)
                : (M =
                      Math.trunc(N / h.strides[w]) +
                      (N % h.strides[w] !== 0 ? 1 : 0)),
                g.push(M);
        } else g.push(-1);
    }
    for (let w = 0; w < h.finalShapeGatherIndices.length; ++w) {
        const y = h.finalShapeGatherIndices[w];
        y >= 0 ? b.push(g[y]) : y === kd && b.push(1);
    }
    return {
        finalShapeSparse: b.filter(
            (w, y) => h.finalShapeGatherIndices[y] !== kd
        ),
        finalShape: b,
        isIdentity: p,
        sliceDim0: f,
        isSimpleSlice: m,
        begin: h.begin,
        end: h.end,
        strides: h.strides,
    };
}
function S$(n, t) {
    (t.beginMask = 0), (t.endMask = 0), (t.shrinkAxisMask = 0);
    let e = 0;
    (t.beginValid = n.begin != null),
        (t.endValid = n.end != null),
        (t.begin = new Array(t.dims)),
        (t.end = new Array(t.dims)),
        (t.strides = new Array(t.dims)),
        (t.finalShapeGatherIndices = []),
        (t.finalShapeGatherIndicesSparse = []),
        (t.inputShapeGatherIndicesSparse = new Array(t.dims));
    for (let s = 0; s < n.dims; s++)
        if ((1 << s) & n.ellipsisMask) {
            const o = Math.min(
                t.dims - (n.dims - s) + 1 + n.numAddAxisAfterEllipsis,
                t.dims
            );
            for (; e < o; e++)
                (t.begin[e] = 0),
                    (t.end[e] = 0),
                    (t.strides[e] = 1),
                    (t.beginMask |= 1 << e),
                    (t.endMask |= 1 << e),
                    t.finalShapeGatherIndices.push(e),
                    t.finalShapeGatherIndicesSparse.push(-1),
                    (t.inputShapeGatherIndicesSparse[e] = s);
        } else if ((1 << s) & n.newAxisMask)
            t.finalShapeGatherIndices.push(kd),
                t.finalShapeGatherIndicesSparse.push(-1);
        else {
            if (e === t.begin.length)
                throw Error(
                    `Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`
                );
            n.begin != null && (t.begin[e] = n.begin[s]),
                n.end != null && (t.end[e] = n.end[s]),
                (t.strides[e] = n.strides[s]),
                n.beginMask & (1 << s) && (t.beginMask |= 1 << e),
                n.endMask & (1 << s) && (t.endMask |= 1 << e),
                n.shrinkAxisMask & (1 << s)
                    ? (t.finalShapeGatherIndices.push(I$),
                      t.finalShapeGatherIndicesSparse.push(-1),
                      (t.shrinkAxisMask |= 1 << e))
                    : (t.finalShapeGatherIndices.push(e),
                      t.finalShapeGatherIndicesSparse.push(s)),
                (t.inputShapeGatherIndicesSparse[e] = s),
                e++;
        }
}
function Mm(n, t, e, s, o, r) {
    if (o[t]) return e > 0 ? r[t] : r[(t + 1) & 1];
    {
        const i = n < 0 ? s + n : n;
        return i < r[0] ? r[0] : i > r[1] ? r[1] : i;
    }
}
const k$ = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            assertParamsValid: Zp,
            computeFlatOffset: _p,
            computeOutShape: Bp,
            getNormalizedAxes: v$,
            isSliceContinous: Hp,
            maskToAxes: C$,
            parseSliceParams: nu,
            sliceInfo: Up,
            startForAxis: H0,
            startIndicesWithElidedDims: K0,
            stopForAxis: _0,
            stopIndicesWithElidedDims: Z0,
            stridesForAxis: B0,
            stridesWithElidedDims: A0,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class T$ {
    /**
     * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
     *
     * ```js
     * // Fit a quadratic function by learning the coefficients a, b, c.
     * const xs = tf.tensor1d([0, 1, 2, 3]);
     * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
     *
     * const a = tf.scalar(Math.random()).variable();
     * const b = tf.scalar(Math.random()).variable();
     * const c = tf.scalar(Math.random()).variable();
     *
     * // y = a * x^2 + b * x + c.
     * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
     * const loss = (pred, label) => pred.sub(label).square().mean();
     *
     * const learningRate = 0.01;
     * const optimizer = tf.train.sgd(learningRate);
     *
     * // Train the model.
     * for (let i = 0; i < 10; i++) {
     *   optimizer.minimize(() => loss(f(xs), ys));
     * }
     *
     * // Make predictions.
     * console.log(
     *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
     * const preds = f(xs).dataSync();
     * preds.forEach((pred, i) => {
     *   console.log(`x: ${i}, pred: ${pred}`);
     * });
     * ```
     *
     * @param learningRate The learning rate to use for the SGD algorithm.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static sgd(t) {
        return new Xp(t);
    }
    /**
     * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
     * descent.
     *
     * See
     * [http://proceedings.mlr.press/v28/sutskever13.pdf](
     * http://proceedings.mlr.press/v28/sutskever13.pdf)
     *
     * @param learningRate The learning rate to use for the Momentum gradient
     * descent algorithm.
     * @param momentum The momentum to use for the momentum gradient descent
     * algorithm.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static momentum(t, e, s = !1) {
        return new L0(t, e, s);
    }
    /**
     * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
     * descent. This implementation uses plain momentum and is not centered
     * version of RMSProp.
     *
     * See
     * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
     * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
     *
     * @param learningRate The learning rate to use for the RMSProp gradient
     * descent algorithm.
     * @param decay The discounting factor for the history/coming gradient.
     * @param momentum The momentum to use for the RMSProp gradient descent
     * algorithm.
     * @param epsilon Small value to avoid zero denominator.
     * @param centered If true, gradients are normalized by the estimated
     * variance of the gradient.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static rmsprop(t, e = 0.9, s = 0, o = null, r = !1) {
        return new M0(t, e, s, o, r);
    }
    /**
     * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adam gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adam(t = 1e-3, e = 0.9, s = 0.999, o = null) {
        return new G0(t, e, s, o);
    }
    /**
     * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
     * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
     *
     * @param learningRate The learning rate to use for the Adadelta gradient
     * descent algorithm.
     * @param rho The learning rate decay over each update.
     * @param epsilon A constant epsilon used to better condition the grad
     * update.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adadelta(t = 1e-3, e = 0.95, s = null) {
        return new R0(t, e, s);
    }
    /**
     * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adamax gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     * @param decay The learning rate decay over each update.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adamax(t = 2e-3, e = 0.9, s = 0.999, o = null, r = 0) {
        return new E0(t, e, s, o, r);
    }
    /**
     * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
     * See
     * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
     * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
     * or
     * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
     * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
     *
     * @param learningRate The learning rate to use for the Adagrad gradient
     * descent algorithm.
     * @param initialAccumulatorValue Starting value for the accumulators, must be
     * positive.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adagrad(t, e = 0.1) {
        return new $0(t, e);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tr = T$;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const N$ =
    typeof requestAnimationFrame < "u"
        ? requestAnimationFrame
        : typeof setImmediate < "u"
        ? setImmediate
        : (n) => n();
function su() {
    return new Promise((n) => N$(() => n()));
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yp(n, t) {
    const e = n[0].length;
    n.forEach((o, r) => {
        C(
            o.length === e,
            () =>
                `Error in concat${e}D: rank of tensors[${r}] must be the same as the rank of the rest (${e})`
        );
    }),
        C(
            t >= 0 && t < e,
            () => `Error in concat${e}D: axis must be between 0 and ${e - 1}.`
        );
    const s = n[0];
    n.forEach((o, r) => {
        for (let i = 0; i < e; i++)
            C(
                i === t || o[i] === s[i],
                () =>
                    `Error in concat${e}D: Shape of tensors[${r}] (${o}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`
            );
    });
}
function ts(n, t) {
    const e = n[0].slice();
    for (let s = 1; s < n.length; s++) e[t] += n[s][t];
    return e;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Fn;
(function (n) {
    (n[(n.FIRST_DIM_SIZE = 0)] = "FIRST_DIM_SIZE"),
        (n[(n.VALUE_ROWIDS = 1)] = "VALUE_ROWIDS"),
        (n[(n.ROW_LENGTHS = 2)] = "ROW_LENGTHS"),
        (n[(n.ROW_SPLITS = 3)] = "ROW_SPLITS"),
        (n[(n.ROW_LIMITS = 4)] = "ROW_LIMITS"),
        (n[(n.ROW_STARTS = 5)] = "ROW_STARTS");
})(Fn || (Fn = {}));
function U0(n, t, e) {
    let s = new Array();
    if (e == null && t == null) return s;
    if (t == null) for (; s.length < n + e.length; ) s.push(-1);
    else s = t.slice();
    if (e == null) return s;
    if (n + e.length !== s.length)
        throw new Error(
            `rt input.shape and shape=${t} are incompatible: rt input.rank = ${
                n + e.length
            }, but shape.rank = ${s.length}`
        );
    for (let o = 1; o < e.length; ++o) {
        const r = e[o],
            i = s[s.length - e.length + o],
            a = s[i];
        if (r >= 0)
            if (a >= 0) {
                if (a !== r)
                    throw new Error(
                        `rt input.shape and shape=${t} are incompatible: rt input.shape[${
                            o + n
                        }] = ${r} but shape[${o + n}] = ${a}`
                    );
            } else s[i] = r;
    }
    return s;
}
function Y0(n) {
    const t = {
            FIRST_DIM_SIZE: Fn.FIRST_DIM_SIZE,
            VALUE_ROWIDS: Fn.VALUE_ROWIDS,
            ROW_LENGTHS: Fn.ROW_LENGTHS,
            ROW_SPLITS: Fn.ROW_SPLITS,
            ROW_LIMITS: Fn.ROW_LIMITS,
            ROW_STARTS: Fn.ROW_STARTS,
        },
        e = [];
    for (const s of n)
        if (s in t) e.push(t[s]);
        else break;
    return e;
}
function Q0(n) {
    return n.length === 0
        ? 0
        : n[0] === Fn.FIRST_DIM_SIZE
        ? n.length - 1
        : n.length;
}
function J0(n, t) {
    if (n == null || t == null) return;
    const e = n.length,
        s = t.length;
    if (e >= s)
        throw new Error(
            `defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`
        );
    for (let o = 0; o < Math.min(e, s - 1); ++o) {
        const r = n[o],
            i = t[o + 1];
        if (r >= 0 && i >= 0 && r !== 1 && r !== i)
            throw new Error(
                `defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${
                    o - n.length
                }] = ${r} but ragged tensor input.flatValues.shape[${
                    o - n.length
                }] = ${i}`
            );
    }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Qp = 30;
function ou(n) {
    return n <= Qp ? n : fl(n, Math.floor(Math.sqrt(n)));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Jp(n, t, e) {
    const s = e * (typeof n == "number" ? n : n[0]),
        o = t * (typeof n == "number" ? n : n[1]);
    return [s, o];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Na(n, t, e, s = !0) {
    let o = [];
    if (s)
        (o = o.concat(t.slice(0))),
            o.push(n[0] / e),
            (o = o.concat(n.slice(1)));
    else {
        o = o.concat(n[0]);
        const r = t.length;
        for (let i = 0; i < r; ++i) o = o.concat([n[i + 1] / t[i], t[i]]);
        o = o.concat(n.slice(r + 1));
    }
    return o;
}
function Ra(n, t, e = !0) {
    const s = [];
    if (e) {
        s.push(t);
        for (let o = t + 1; o < n; ++o)
            o <= 2 * t ? (s.push(o), s.push(o - (t + 1))) : s.push(o);
    } else {
        const o = [],
            r = [];
        for (let i = 1; i < n; ++i)
            i >= t * 2 + 1 || i % 2 === 1 ? r.push(i) : o.push(i);
        s.push(...o), s.push(0), s.push(...r);
    }
    return s;
}
function $a(n, t, e, s = !0) {
    const o = [];
    s ? o.push(n[0] / e) : o.push(n[0] * e);
    for (let r = 1; r < n.length; ++r)
        r <= t.length
            ? s
                ? o.push(t[r - 1] * n[r])
                : o.push(n[r] / t[r - 1])
            : o.push(n[r]);
    return o;
}
function jp(n, t) {
    const e = [0];
    for (let s = 0; s < t; ++s) e.push(n[s][0]);
    return e;
}
function qp(n, t, e) {
    const s = n.slice(0, 1);
    for (let o = 0; o < e; ++o) s.push(n[o + 1] - t[o][0] - t[o][1]);
    return s;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ru = 1.7580993408473768,
    iu = 1.0507009873554805;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tf = 0.3275911,
    ef = 0.254829592,
    nf = -0.284496736,
    sf = 1.421413741,
    of = -1.453152027,
    rf = 1.061405429;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xs(n, t) {
    if (n.length !== t.length)
        throw new Error(
            `Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`
        );
    const e = new Float32Array(n.length * 2);
    for (let s = 0; s < e.length; s += 2)
        (e[s] = n[s / 2]), (e[s + 1] = t[s / 2]);
    return e;
}
function j0(n) {
    const t = new Float32Array(n.length / 2),
        e = new Float32Array(n.length / 2);
    for (let s = 0; s < n.length; s += 2)
        (t[s / 2] = n[s]), (e[s / 2] = n[s + 1]);
    return { real: t, imag: e };
}
function q0(n) {
    const t = Math.ceil(n.length / 4),
        e = new Float32Array(t),
        s = new Float32Array(t);
    for (let o = 0; o < n.length; o += 4)
        (e[Math.floor(o / 4)] = n[o]), (s[Math.floor(o / 4)] = n[o + 1]);
    return { real: e, imag: s };
}
function tx(n) {
    const t = Math.floor(n.length / 4),
        e = new Float32Array(t),
        s = new Float32Array(t);
    for (let o = 2; o < n.length; o += 4)
        (e[Math.floor(o / 4)] = n[o]), (s[Math.floor(o / 4)] = n[o + 1]);
    return { real: e, imag: s };
}
function af(n, t) {
    const e = n[t * 2],
        s = n[t * 2 + 1];
    return { real: e, imag: s };
}
function ex(n, t, e, s) {
    (n[s * 2] = t), (n[s * 2 + 1] = e);
}
function nx(n, t) {
    const e = new Float32Array(n / 2),
        s = new Float32Array(n / 2);
    for (let o = 0; o < Math.ceil(n / 2); o++) {
        const r = (t ? 2 : -2) * Math.PI * (o / n);
        (e[o] = Math.cos(r)), (s[o] = Math.sin(r));
    }
    return { real: e, imag: s };
}
function sx(n, t, e) {
    const s = (e ? 2 : -2) * Math.PI * (n / t),
        o = Math.cos(s),
        r = Math.sin(s);
    return { real: o, imag: r };
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Mu = "->",
    R$ = /->/g,
    Wm = ",",
    Dm = "...";
function lf(n, t) {
    n = n.replace(/\s/g, "");
    const e = (n.length - n.replace(R$, "").length) / Mu.length;
    if (e < 1) throw new Error("Equations without an arrow are not supported.");
    if (e > 1)
        throw new Error(`Equation must contain exactly one arrow ("${Mu}").`);
    const [s, o] = n.split(Mu);
    C(
        s.indexOf(Dm) === -1,
        () => `The ellipsis notation ("${Dm}") is not supported yet.`
    );
    const r = s.split(Wm),
        i = r.length;
    if (t !== i) throw new Error(`Expected ${i} input tensors, received ${t}`);
    if (i > 2)
        throw new Error(
            "Support for more than 2 input tensors is not implemented yet."
        );
    const a = [];
    for (let h = 0; h < o.length; ++h) {
        const p = o[h];
        if (!r.some((f) => f.indexOf(p) !== -1))
            throw new Error(
                `Output subscripts contain the label ${p} not present in the input subscripts.`
            );
        a.indexOf(p) === -1 && a.push(p);
    }
    for (let h = 0; h < s.length; ++h) {
        const p = s[h];
        a.indexOf(p) === -1 && p !== Wm && a.push(p);
    }
    const l = new Array(r.length);
    for (let h = 0; h < i; ++h) {
        if (new Set(r[h].split("")).size !== r[h].length)
            throw new Error(
                `Found duplicate axes in input component ${r[h]}. Support for duplicate axes in input is not implemented yet.`
            );
        l[h] = [];
        for (let p = 0; p < r[h].length; ++p) l[h].push(a.indexOf(r[h][p]));
    }
    const c = a.length,
        u = o.length,
        d = [];
    for (let h = u; h < c; ++h) d.push(h);
    return { allDims: a, summedDims: d, idDims: l };
}
function cf(n, t) {
    let e = new Array(n);
    e.fill(-1);
    for (let o = 0; o < t.length; ++o) e[t[o]] = o;
    const s = [];
    for (let o = 0; o < n; ++o) e[o] === -1 && s.push(o);
    return (
        (e = e.filter((o) => o !== -1)),
        { permutationIndices: e, expandDims: s }
    );
}
function uf(n, t, e) {
    const s = new Array(n);
    for (let o = 0; o < e.length; ++o) {
        const r = e[o].shape;
        for (let i = 0; i < t[o].length; ++i)
            s[t[o][i]] === void 0
                ? (s[t[o][i]] = r[i])
                : C(
                      s[t[o][i]] === r[i],
                      () =>
                          `Expected dimension ${
                              s[t[o][i]]
                          } at axis ${i} of input shaped ${JSON.stringify(
                              r
                          )}, but got dimension ${r[i]}`
                  );
    }
}
function df(n, t) {
    const e = n,
        s = [];
    let o = 0;
    n.length === 0 && e.push(-1), (o = n.length + 1);
    for (let i = 0; i < o; ++i) s.push([]);
    const r = [];
    for (let i = 0; i < e.length; ++i) {
        const a = e[i],
            l = $$(t, a);
        for (const c of l) r.indexOf(c) === -1 && (s[i].push(c), r.push(c));
    }
    return { path: e, steps: s };
}
function hf(n) {
    return n.every((t, e) => t === e);
}
function $$(n, t) {
    const e = [];
    for (let s = 0; s < n.length; ++s)
        (n[s].length === 0 || n[s].indexOf(t) !== -1 || t === -1) && e.push(s);
    return e;
}
function pf(n, t, e = 0) {
    let s = [];
    if (typeof t == "number")
        C(
            n.shape[e] % t === 0,
            () => "Number of splits must evenly divide the axis."
        ),
            (s = new Array(t).fill(n.shape[e] / t));
    else {
        const o = t.reduce((i, a) => (a === -1 && (i += 1), i), 0);
        C(
            o <= 1,
            () => "There should be only one negative value in split array."
        );
        const r = t.indexOf(-1);
        if (r !== -1) {
            const i = t.reduce((a, l) => (l > 0 ? a + l : a));
            t[r] = n.shape[e] - i;
        }
        C(
            n.shape[e] === t.reduce((i, a) => i + a),
            () => "The sum of sizes must match the size of the axis dimension."
        ),
            (s = t);
    }
    return s;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ox(n) {
    return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`;
}
function rx(n, t) {
    return `indices(${n}, 0) is invalid: ${t} < 0`;
}
function ix(n, t, e) {
    return `indices(${n}, 0) is invalid: ${t} >= ${e}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ax(n, t) {
    return `only one output dimension may be -1, not both ${n} and ${t}`;
}
function lx(n, t) {
    return `size ${n} must be non-negative, not ${t}`;
}
function cx() {
    return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function ux(n, t) {
    const e = X(n),
        s = X(t);
    return `Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${n} outputShape= ${t}`;
}
function dx(n, t) {
    const e = X(n),
        s = X(t);
    return `Input to reshape is a tensor with ${e} dense values, but the requested shape has ${s}. inputShape=${n} outputShape=${t}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Td() {
    return "segment ids must be >= 0";
}
function hx() {
    return "segment ids are not increasing";
}
function px(n, t) {
    return `Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`;
}
function fx(n, t, e) {
    return `Bad: indices[${n}] == ${t} out of range [0, ${e})`;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mx(n, t) {
    let e = !1,
        s;
    for (
        n <= Qp ? ((s = n), (e = !0)) : (s = fl(n, Math.floor(Math.sqrt(n))));
        !e;

    )
        s > t || s === n ? (e = !0) : (s = fl(n, s + 1));
    return s;
}
function gx(n, t, e) {
    const s = [],
        o = n.length;
    for (let r = 0; r < o; r++) r !== t ? s.push(n[r]) : s.push(e);
    return s;
}
function ff(n, t, e, s) {
    const o = t.shape.length,
        r = n.shape.length;
    if (s !== 0 && (s < -o || s > o))
        throw new Error(
            `Expect batchDims in the range of [-${o}, ${o}], but got ${s}`
        );
    if ((s < 0 && (s += o), s > r))
        throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${r}).`);
    if (e < s)
        throw new Error(
            `batchDims (${s}) must be less than or equal to axis (${e}).`
        );
    for (let d = 0; d < s; ++d)
        if (n.shape[d] !== t.shape[d])
            throw new Error(
                `x.shape[${d}]: ${n.shape[d]} should be equal to indices.shape[${d}]: ${t.shape[d]}.`
            );
    const i = n.shape[e],
        a = [];
    let l = 1,
        c = 1,
        u = 1;
    for (let d = 0; d < s; ++d) a.push(n.shape[d]), (l *= n.shape[d]);
    for (let d = s; d < e; d++) a.push(n.shape[d]), (c *= n.shape[d]);
    for (let d = s; d < o; d++) a.push(t.shape[d]);
    for (let d = e + 1; d < r; d++) a.push(n.shape[d]), (u *= n.shape[d]);
    return {
        batchSize: l,
        sliceSize: u,
        outerSize: c,
        dimSize: i,
        outputShape: a,
    };
}
const G$ = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            collectGatherOpShapeInfo: ff,
            computeOutShape: gx,
            segOpComputeOptimalWindowSize: mx,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ys(n) {
    try {
        return n.map((t) => gs(t));
    } catch (t) {
        throw new Error(
            `Failed to decode encoded string bytes into utf-8, error: ${t}`
        );
    }
}
function bx(n) {
    return n.map((t) => ms(t));
}
const E$ = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            ERF_A1: ef,
            ERF_A2: nf,
            ERF_A3: sf,
            ERF_A4: of,
            ERF_A5: rf,
            ERF_P: tf,
            PARALLELIZE_THRESHOLD: Qp,
            get RowPartitionType() {
                return Fn;
            },
            SELU_SCALE: iu,
            SELU_SCALEALPHA: ru,
            applyActivation: Fp,
            assertAndGetBroadcastShape: bt,
            assertAxesAreInnerMostDims: Ne,
            assertParamsConsistent: Yp,
            assignToTypedArray: ex,
            axesAreInnerMostDims: lp,
            calculateShapes: to,
            checkEinsumDimSizes: uf,
            checkPadOnDimRoundingMode: Ue,
            combineLocations: n0,
            combineRaggedTensorToTensorShapes: U0,
            complexWithEvenIndex: q0,
            complexWithOddIndex: tx,
            computeConv2DInfo: Te,
            computeConv3DInfo: Js,
            computeDefaultPad: ep,
            computeDilation2DInfo: Ia,
            computeOptimalWindowSize: ou,
            computeOutAndReduceShapes: ye,
            computeOutShape: ts,
            computePool2DInfo: $n,
            computePool3DInfo: vs,
            convertConv2DDataFormat: Ss,
            decodeEinsumEquation: lf,
            eitherStridesOrDilationsAreOne: Le,
            expandShapeToKeepDim: re,
            exponent: sx,
            exponents: nx,
            fromStringArrayToUint8: bx,
            fromUint8ToStringArray: ys,
            getAxesPermutation: qt,
            getBroadcastDims: Go,
            getComplexWithIndex: af,
            getEinsumComputePath: df,
            getEinsumPermutation: cf,
            getFusedBiasGradient: Dp,
            getFusedDyActivation: Wp,
            getImageCenter: Jp,
            getInnerMostAxes: ie,
            getPermuted: Ra,
            getRaggedRank: Q0,
            getReductionAxes: ce,
            getReshaped: Na,
            getReshapedPermuted: $a,
            getRowPartitionTypesHelper: Y0,
            getSliceBeginCoords: jp,
            getSliceSize: qp,
            getSparseFillEmptyRowsIndicesDenseShapeMismatch: ox,
            getSparseFillEmptyRowsNegativeIndexErrorMessage: rx,
            getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: ix,
            getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: cx,
            getSparseReshapeInputOutputMismatchErrorMessage: dx,
            getSparseReshapeInputOutputMultipleErrorMessage: ux,
            getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: ax,
            getSparseReshapeNegativeOutputDimErrorMessage: lx,
            getSparseSegmentReductionIndicesOutOfRangeErrorMessage: fx,
            getSparseSegmentReductionNegativeSegmentIdsErrorMessage: Td,
            getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: hx,
            getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: px,
            getUndoAxesPermutation: js,
            isIdentityPermutation: hf,
            log: qC,
            mergeRealAndImagArrays: xs,
            prepareAndValidate: eu,
            prepareSplitSize: pf,
            segment_util: G$,
            shouldFuse: Vp,
            slice_util: k$,
            splitRealAndImagArrays: j0,
            stridesOrDilationsArePositive: Ro,
            tupleValuesAreOne: No,
            upcastType: tn,
            validateDefaultValueShape: J0,
            validateInput: y0,
            validateUpdateShape: Lp,
            warn: ln,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
r$();
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xx = {
    kernelName: Ul,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(n, Ta(tt(e, "float32"), -1)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const L$ = {
    kernelName: vi,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return {
            x: () => {
                const s = Kt(tt(e, "float32")),
                    o = Ve(it(gt(1), s));
                return Yt(ut(n, o));
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const M$ = {
    kernelName: Si,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return {
            x: () => {
                const s = Ve(it(Kt(tt(e, "float32")), 1));
                return ut(n, s);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const W$ = {
    kernelName: Sr,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t,
            o = bt(e.shape, s.shape);
        return {
            a: () => {
                let a = n;
                const l = ce(e.shape, o);
                return l.length > 0 && (a = at(a, l)), W(a, e.shape);
            },
            b: () => {
                let a = n;
                const l = ce(s.shape, o);
                return l.length > 0 && (a = at(a, l)), W(a, s.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const D$ = {
    kernelName: qd,
    saveAllInputs: !0,
    gradFunc: (n, t) => {
        const e = {};
        return (
            t.forEach((s, o) => {
                e[o] = () => n.clone();
            }),
            e
        );
    },
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F$ = {
    kernelName: Yl,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Tt(e) };
    },
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const V$ = {
    kernelName: Ql,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Tt(e) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const z$ = {
    kernelName: ki,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => ut(n, Ve(it(gt(1), Kt(tt(e, "float32"))))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P$ = {
    kernelName: Ti,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return {
            x: () => {
                const s = Ve(U(gt(1), Kt(tt(e, "float32"))));
                return ut(n, s);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const A$ = {
    kernelName: $i,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t,
            o = bt(e.shape, s.shape);
        return {
            a: () => {
                const a = U(Kt(e), Kt(s));
                let l = G(n, ut(s, a));
                const c = ce(e.shape, o);
                return c.length > 0 && (l = at(l, c)), W(l, e.shape);
            },
            b: () => {
                const a = U(Kt(e), Kt(s));
                let l = Yt(G(n, ut(e, a)));
                const c = ce(s.shape, o);
                return c.length > 0 && (l = at(l, c)), W(l, s.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const O$ = {
    kernelName: Ni,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => ut(n, U(Kt(tt(e, "float32")), 1)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const X$ = {
    kernelName: Ri,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => ut(n, it(gt(1), Kt(tt(e, "float32")))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K$(n, t, e, s, o, r) {
    const i = T(n, "dy", "avgPool3dGrad"),
        a = T(t, "input", "avgPool3dGrad");
    let l = i,
        c = a,
        u = !1;
    a.rank === 4 &&
        ((u = !0),
        (l = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])),
        (c = W(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]]))),
        C(
            l.rank === 5,
            () =>
                `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`
        ),
        C(
            c.rank === 5,
            () =>
                `Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`
        ),
        Ue("avgPool3dGrad", o, r);
    const d = { dy: l, input: c },
        h = { filterSize: e, strides: s, pad: o, dimRoundingMode: r },
        p = $.runKernel(sh, d, h);
    return u ? W(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
const Z$ = /* @__PURE__ */ L({ avgPool3dGrad_: K$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const B$ = {
    kernelName: jl,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { filterSize: o, strides: r, pad: i, dimRoundingMode: a } = e;
        return {
            x: () => Z$(n, s, o, r, i, a),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H$(n, t, e, s, o) {
    const r = T(n, "dy", "avgPoolGrad"),
        i = T(t, "input", "avgPoolGrad");
    C(
        i.rank === r.rank,
        () => `Rank of input (${i.rank}) does not match rank of dy (${r.rank})`
    );
    let a = i,
        l = r,
        c = !1;
    i.rank === 3 &&
        ((c = !0),
        (a = W(i, [1, i.shape[0], i.shape[1], i.shape[2]])),
        (l = W(r, [1, r.shape[0], r.shape[1], r.shape[2]]))),
        C(
            l.rank === 4,
            () =>
                `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`
        ),
        C(
            a.rank === 4,
            () =>
                `Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`
        );
    const u = { dy: l, input: a },
        d = { filterSize: e, strides: s, pad: o },
        h = $.runKernel(nh, u, d);
    return c ? W(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const _$ = /* @__PURE__ */ L({ avgPoolGrad_: H$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const U$ = {
    kernelName: Jl,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { filterSize: o, strides: r, pad: i } = e;
        return { x: () => _$(n, s, o, r, i) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Y$ = {
    kernelName: ql,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t, e) => {
        const [s, o] = t,
            { transposeA: r, transposeB: i } = e;
        return !r && !i
            ? {
                  a: () => Gt(n, o, !1, !0),
                  b: () => Gt(s, n, !0, !1),
              }
            : !r && i
            ? {
                  a: () => Gt(n, o, !1, !1),
                  b: () => Gt(n, s, !0, !1),
              }
            : r && !i
            ? {
                  a: () => Gt(o, n, !1, !0),
                  b: () => Gt(s, n, !1, !1),
              }
            : {
                  a: () => Gt(o, n, !0, !0),
                  b: () => Gt(n, s, !0, !0),
              };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Q$ = {
    kernelName: tc,
    gradFunc: (n, t, e) => {
        const { blockShape: s, crops: o } = e;
        return { x: () => xp(n, s, o) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const J$ = {
    kernelName: JC,
    gradFunc: (n, t, e) => {
        const s = e,
            o = s.inputShape,
            r = s.shape,
            i = Array.from(r);
        for (let l = o.length - 1; l >= 0; l--)
            if (o[l] === r[l]) i[l] = 1;
            else if (o[l] !== 1)
                throw new Error(
                    `broadcastTo(): [${o}] cannot be broadcast to [${r}].`
                );
        const a = [];
        for (let l = 0; l < i.length; l++) i[l] > 1 && a.push(l);
        return {
            x: () =>
                at(
                    n,
                    a,
                    !0
                    /* keepDims */
                ),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j$ = {
    kernelName: Gi,
    gradFunc: (n) => ({ x: () => n.clone() }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const q$ = {
    kernelName: Ei,
    gradFunc: (n) => ({ x: () => Tt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tG = {
    kernelName: Li,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { clipValueMin: o, clipValueMax: r } = e;
        return {
            x: () => Ee(ss(Bo(s, o), Tr(s, r)), n, Tt(n)),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eG = {
    kernelName: ec,
    inputsToSave: ["x"],
    gradFunc: xx.gradFunc,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nG = {
    kernelName: nc,
    saveAllInputs: !0,
    gradFunc: (n, t, e) => {
        const s = t.map((l) => l.shape),
            { axis: o } = e,
            r = Ct(o, t[0].shape)[0],
            i = s.map((l) => l[r]);
        return pn(n, i, r).map((l) => () => l);
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sG = {
    kernelName: sc,
    inputsToSave: ["x", "filter"],
    gradFunc: (n, t, e) => {
        const [s, o] = t,
            { dilations: r, strides: i, pad: a, dataFormat: l } = e;
        return (
            C(
                No(r),
                () =>
                    `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`
            ),
            {
                x: () => rp(s.shape, n, o, i, a, l),
                filter: () => Mp(s, n, o.shape, i, a, l),
            }
        );
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oG = {
    kernelName: oc,
    inputsToSave: ["dy", "filter"],
    gradFunc: (n, t, e) => {
        const [s, o] = t,
            { strides: r, pad: i, dataFormat: a, dimRoundingMode: l } = e;
        return {
            dy: () => $o(n, o, r, i, a, 1, l),
            filter: () => Mp(n, s, o.shape, r, i, a, l),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rG(n, t, e, s, o) {
    let r = n;
    n.rank === 4 &&
        (r = W(n, [1, n.shape[0], n.shape[1], n.shape[2], n.shape[3]]));
    let i = t;
    i.rank === 4 &&
        (i = W(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])),
        C(
            r.rank === 5,
            () =>
                `Error in conv3dDerFilter: input must be rank 5, but got shape ${r.shape}.`
        ),
        C(
            i.rank === 5,
            () =>
                `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`
        ),
        C(
            e.length === 5,
            () =>
                `Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`
        ),
        C(
            r.shape[4] === e[3],
            () =>
                `Error in conv3dDerFilter: depth of input ${r.shape[4]}) must match input depth in filter (${e[3]}.`
        ),
        C(
            i.shape[4] === e[4],
            () =>
                `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`
        );
    const a = { x: r, dy: i },
        l = { strides: s, pad: o, filterShape: e };
    return $.runKernel(lh, a, l);
}
const iG = /* @__PURE__ */ L({ conv3DBackpropFilter_: rG });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aG = {
    kernelName: rc,
    inputsToSave: ["x", "filter"],
    gradFunc: (n, t, e) => {
        const { dilations: s, strides: o, pad: r } = e;
        C(
            No(s),
            () =>
                `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`
        );
        const [i, a] = t;
        return {
            x: () => qb(i.shape, n, a, o, r),
            filter: () => iG(i, n, a.shape, o, r),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lG = {
    kernelName: Mi,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(Yt(f0(tt(e, "float32"))), n) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cG = {
    kernelName: Wi,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(m0(tt(e, "float32")), n) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uG = {
    kernelName: ic,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { axis: o, exclusive: r, reverse: i } = e;
        return {
            x: () => {
                const a = qt([o], s.rank);
                let l = e0(n, o, r, !i);
                return a != null && (l = kt(l, a)), l;
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dG = {
    kernelName: ac,
    inputsToSave: ["x", "filter"],
    gradFunc: (n, t, e) => {
        const { dilations: s, strides: o, pad: r, dimRoundingMode: i } = e,
            a = s ?? [1, 1];
        C(
            No(a),
            () =>
                `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`
        );
        const [l, c] = t;
        return (
            C(
                l.rank === 4,
                () =>
                    `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`
            ),
            C(
                c.rank === 4,
                () =>
                    `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`
            ),
            C(
                l.shape[3] === c.shape[2],
                () =>
                    `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`
            ),
            C(
                Le(o, a),
                () =>
                    `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${o} and dilations '${a}'.`
            ),
            Ue("depthwiseConv2d", r, i),
            {
                x: () => kN(l.shape, n, c, o, r, a, i),
                filter: () => vN(l, n, c.shape, o, r, a, i),
            }
        );
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hG = {
    kernelName: lc,
    inputsToSave: ["x", "filter"],
    gradFunc: (n, t, e) => {
        const [s, o] = t,
            r = { x: s, filter: o, dy: n },
            i = { x: s, filter: o, dy: n };
        return {
            x: () => $.runKernel(ad, r, e),
            filter: () => $.runKernel(ld, i, e),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pG = {
    kernelName: Fi,
    outputsToSave: [!0],
    gradFunc: (n, t) => {
        const [e] = t,
            s = { dy: n, y: e };
        return { x: () => $.runKernel(xh, s) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fG = {
    kernelName: Vi,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t,
            s = G(mn(Yt(Kt(e))), 2 / Math.sqrt(Math.PI));
        return { x: () => G(n, s) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mG = {
    kernelName: zi,
    outputsToSave: [!0],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(n, e) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gG = {
    kernelName: uc,
    inputsToSave: ["input"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { input: () => W(n, e.shape) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bG = {
    kernelName: Pi,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(n, mn(e)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xG = {
    kernelName: Ai,
    gradFunc: (n) => ({ x: () => Tt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yG = {
    kernelName: Oi,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t,
            o = bt(e.shape, s.shape);
        return {
            a: () => {
                const a = ut(n, tt(s, "float32")),
                    l = ce(e.shape, o);
                return l.length > 0 ? W(at(a, l), e.shape) : a;
            },
            b: () => {
                let a = G(n, tt(e, "float32"));
                const l = ce(s.shape, o);
                l.length > 0 && (a = W(at(a, l), s.shape));
                const c = Kt(s);
                return Yt(ut(a, tt(c, "float32")));
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wG = {
    kernelName: dc,
    inputsToSave: ["x", "mean", "variance", "scale"],
    gradFunc: (n, t, e) => {
        const { varianceEpsilon: s } = e,
            [o, r, i, a] = t,
            l = a ?? gt(1),
            c = ce(r.shape, o.shape),
            u = [];
        if (r.rank === 1) {
            for (let y = 0; y < o.shape.length - 1; ++y) u.push(o.shape[y]);
            u.push(1);
        }
        const d = it(o, r),
            h = G(n, l),
            p = d0(U(i, gt(s))),
            f = G(G(G(p, p), p), gt(-0.5));
        return {
            x: () =>
                r.rank === 1
                    ? W(G(G(n, Vn(W(p, [1, 1, 1, r.shape[0]]), u)), l), o.shape)
                    : W(G(G(n, p), l), o.shape),
            mean: () => {
                let y = G(G(p, gt(-1)), h);
                return r.rank === 1 && (y = at(y, c)), W(y, r.shape);
            },
            variance: () => {
                let y = G(G(f, d), h);
                return r.rank === 1 && (y = at(y, c)), W(y, r.shape);
            },
            scale: () => {
                const y = G(d, p);
                let I = G(n, y);
                return r.rank === 1 && (I = at(I, c)), W(I, r.shape);
            },
            offset: () => {
                let y = n;
                return r.rank === 1 && (y = at(y, c)), W(y, r.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IG = {
    kernelName: hc,
    inputsToSave: ["x", "indices"],
    gradFunc: (n, t, e) => {
        const [s, o] = t,
            { axis: r, batchDims: i } = e,
            a = Ct(r, s.shape)[0],
            l = (c, u, d) => () => {
                const h = c.shape,
                    p = u.size,
                    f = h.slice(0, a),
                    m = f.length,
                    g = h.slice(r, h.length).slice(1),
                    b = g.length,
                    x = Fm(0, m),
                    w = Fm(m + 1, m + 1 + b),
                    y = Vm([f, [p], g]),
                    I = W(d, y),
                    v = W(u, [p]),
                    k = Vm([[m], x, w]),
                    S = kt(I, k);
                let N = I0(S, v, c.shape[a]);
                const R = js(k);
                return (N = kt(N, R)), N;
            };
        if (i === 1) {
            const c = s.shape[0],
                u = s.split(c, 0);
            return {
                x: () =>
                    Xn(
                        u.map((p, f) => l(p, o.slice(f, 1), n.slice(f, 1))())
                    ).reshape(s.shape),
                indices: () => o,
            };
        } else return { x: l(s, o, n), indices: () => o };
    },
};
function Fm(n, t) {
    const e = [];
    for (let s = n; s < t; ++s) e.push(s);
    return e;
}
function Vm(n) {
    const t = [];
    for (let e = 0; e < n.length; ++e)
        for (let s = 0; s < n[e].length; ++s) t.push(n[e][s]);
    return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CG = {
    kernelName: Xi,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t;
        return { a: () => Tt(e), b: () => Tt(s) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vG = {
    kernelName: Ki,
    gradFunc: (n) => ({ x: () => tt(n, "float32") }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SG = {
    kernelName: Zi,
    gradFunc: (n) => ({ x: () => Tt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kG = {
    kernelName: Bi,
    gradFunc: (n) => ({ x: () => Tt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TG = {
    kernelName: Hi,
    gradFunc: (n) => ({ x: () => Tt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NG = {
    kernelName: fc,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { alpha: o } = e,
            r = rn(s, 0);
        return { x: () => Ee(r, n, G(n, o)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RG = {
    kernelName: Ui,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => ut(n, U(e, 1)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $G = {
    kernelName: _i,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => ut(n, tt(e, "float32")) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GG = {
    kernelName: jC,
    inputsToSave: [],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { axis: o } = e;
        return {
            logits: () => {
                const i = mn(s);
                return it(n, G(at(n, o, !0), i));
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EG(n, t, e, s = 5, o = 1, r = 1, i = 0.5) {
    const a = { x: n, y: t, dy: e },
        l = { depthRadius: s, bias: o, alpha: r, beta: i };
    return $.runKernel(Sh, a, l);
}
const LG = L({ localResponseNormalizationBackprop_: EG });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MG = {
    kernelName: wc,
    inputsToSave: ["x"],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const [s, o] = t,
            { depthRadius: r, bias: i, alpha: a, beta: l } = e;
        return {
            x: () => LG(s, o, n, r, i, a, l),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yx(n, t, e, s) {
    return (
        t.rank < e.rank && (t = W(t, re(t.shape, s))),
        n.rank < e.rank && (n = W(n, re(n.shape, s))),
        {
            x: () => G(n, tt(Tn(e, t), n.dtype)),
        }
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zm = {
    kernelName: Ic,
    inputsToSave: ["x"],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const s = e,
            { reductionIndices: o } = s,
            r = t[0],
            i = t[1],
            a = Ct(o, r.shape),
            l = yx(n, i, r, a);
        return {
            x: () => l.x(),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WG = {
    kernelName: Yi,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t;
        return {
            a: () => G(n, tt(Bo(e, s), "float32")),
            b: () => G(n, tt(Cl(e, s), "float32")),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DG(n, t, e, s, o, r, i) {
    const a = T(n, "dy", "maxPool3dGrad"),
        l = T(t, "input", "maxPool3dGrad"),
        c = T(e, "output", "maxPool3dGrad");
    let u = a,
        d = l,
        h = c,
        p = !1;
    l.rank === 4 &&
        ((p = !0),
        (u = W(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])),
        (d = W(l, [1, l.shape[0], l.shape[1], l.shape[2], l.shape[3]])),
        (h = W(c, [1, c.shape[0], c.shape[1], c.shape[2], c.shape[3]]))),
        C(
            u.rank === 5,
            () =>
                `Error in maxPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`
        ),
        C(
            d.rank === 5,
            () =>
                `Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`
        ),
        C(
            h.rank === 5,
            () =>
                `Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`
        ),
        Ue("maxPool3dGrad", r, i);
    const f = { dy: u, input: d, output: h },
        m = { filterSize: s, strides: o, pad: r, dimRoundingMode: i },
        g = $.runKernel(Th, f, m);
    return p ? W(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g;
}
const FG = /* @__PURE__ */ L({ maxPool3dGrad_: DG });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VG = {
    kernelName: vc,
    inputsToSave: ["x"],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const [s, o] = t,
            { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = e;
        return {
            x: () => FG(n, s, o, r, i, a, l),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zG(n, t, e, s, o, r, i) {
    const a = T(n, "dy", "maxPoolGrad"),
        l = T(t, "input", "maxPoolGrad"),
        c = T(e, "output", "maxPoolGrad");
    C(
        l.rank === a.rank,
        () => `Rank of input (${l.rank}) does not match rank of dy (${a.rank})`
    ),
        C(
            a.rank === 4,
            () =>
                `Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`
        ),
        C(
            l.rank === 4,
            () =>
                `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`
        ),
        Ue("maxPoolGrad", r, i);
    const u = { dy: a, input: l, output: c },
        d = { filterSize: s, strides: o, pad: r, dimRoundingMode: i };
    return $.runKernel(kh, u, d);
}
const PG = /* @__PURE__ */ L({ maxPoolGrad_: zG });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AG = {
    kernelName: Cc,
    inputsToSave: ["x"],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const [s, o] = t,
            { filterSize: r, strides: i, pad: a } = e;
        return {
            x: () => PG(n, s, o, r, i, a),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OG = {
    kernelName: Sc,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { axis: o } = e,
            r = Ct(o, s.shape),
            a = ye(s.shape, r)[1],
            l = X(a);
        return {
            x: () => {
                const u = s.shape.slice();
                r.forEach((p) => {
                    u[p] = 1;
                });
                const d = W(n, u);
                return ut(G(d, ks(s.shape, "float32")), l);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XG = {
    kernelName: kc,
    inputsToSave: ["x"],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const s = e,
            { axis: o } = s,
            [r, i] = t,
            a = Ct(o, r.shape),
            l = yx(n, i, r, a);
        return {
            x: () => l.x(),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KG = {
    kernelName: Qi,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t;
        return {
            a: () => G(n, tt(Tr(e, s), "float32")),
            b: () => G(n, tt(rn(e, s), "float32")),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZG = {
    kernelName: Tc,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const s = t[0],
            { paddings: o } = e,
            r = o.map((i) => i[0]);
        return { x: () => Ft(n, r, s.shape) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BG = {
    kernelName: Ji,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t,
            o = bt(e.shape, s.shape);
        return {
            a: () => {
                const a = ce(e.shape, o);
                return a.length > 0 ? W(at(n, a), e.shape) : n;
            },
            b: () => {
                const a = G(n, Yt(qc(ut(e, s)))),
                    l = ce(s.shape, o);
                return l.length > 0 ? W(at(a, l), s.shape) : a;
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HG = {
    kernelName: ji,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t,
            o = bt(e.shape, s.shape);
        return {
            a: () => {
                const a = G(n, tt(s, "float32")),
                    l = ce(e.shape, o);
                return l.length > 0 ? W(at(a, l), e.shape) : a;
            },
            b: () => {
                const a = G(n, tt(e, "float32")),
                    l = ce(s.shape, o);
                return l.length > 0 ? W(at(a, l), s.shape) : a;
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _G = {
    kernelName: Nc,
    gradFunc: (n) => ({ x: () => Yt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UG = {
    kernelName: Gc,
    inputsToSave: ["indices"],
    gradFunc: (n, t) => {
        const e = t[0];
        return { indices: () => be(e.shape, "float32") };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YG = {
    kernelName: $c,
    gradFunc: (n) => ({ x: () => Tt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QG = {
    kernelName: Ec,
    saveAllInputs: !0,
    gradFunc: (n, t, e) => {
        const { axis: s } = e;
        return Mo(n, s).map((r) => () => r);
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Pm = {
    kernelName: Lc,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const s = t[0],
            { paddings: o } = e,
            r = o.map((i) => i[0]);
        return { x: () => Ft(n, r, s.shape) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JG = {
    kernelName: qi,
    inputsToSave: ["a", "b"],
    outputsToSave: [!0],
    gradFunc: (n, t) => {
        const [e, s, o] = t,
            r = e,
            i = s,
            a = bt(r.shape, i.shape);
        return {
            a: () => {
                const u = tt(i, "float32");
                let d = G(n, G(u, gr(r, it(u, gt(1)))));
                const h = ce(r.shape, a);
                return h.length > 0 && (d = at(d, h)), W(d, r.shape);
            },
            b: () => {
                const u = rn(r, 0),
                    d = Ee(u, Nn(r), Tt(r));
                let h = G(n, G(o, d));
                const p = ce(i.shape, a);
                return p.length > 0 && (h = at(h, p)), W(h, i.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jG = {
    kernelName: Mc,
    inputsToSave: ["x", "alpha"],
    gradFunc: (n, t) => {
        const [e, s] = t,
            o = rn(e, 0);
        return {
            x: () => Ee(o, n, G(n, s)),
            alpha: () => {
                let r = Ee(o, Tt(n), G(n, e));
                const i = ce(s.shape, n.shape);
                return i.length > 0 && (r = at(r, i)), W(r, s.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qG(n, t, e) {
    const s = n.shape.slice();
    s[e] = 1;
    const o = W(t, s),
        r = vd(n, e, !0, !1),
        i = vd(n, e, !0, !0),
        a = G(r, i);
    return G(o, a);
}
function tE(n, t, e) {
    const s = n.shape.length,
        o = s - e.length,
        r = qt(e, s);
    let i = n;
    r != null && (i = kt(n, r));
    const a = i.shape.slice(),
        c = a.splice(s - e.length, e.length).reduce((h, p) => h * p, 1);
    a.push(c);
    const u = i.reshape(a);
    let d = qG(u, t, o);
    if (((d = d.reshape(i.shape)), r != null)) {
        const h = js(r);
        d = kt(d, h);
    }
    return d;
}
const eE = {
    kernelName: Wc,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { axis: o } = e;
        let r = [];
        return (
            o == null
                ? (r = s.shape.map((i, a) => a))
                : typeof o == "number"
                ? (r = [o])
                : (r = o),
            { x: () => tE(s, n, r) }
        );
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nE = {
    kernelName: Di,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t,
            o = bt(e.shape, s.shape);
        return {
            a: () => {
                const a = ut(n, tt(s, "float32")),
                    l = ce(e.shape, o);
                return l.length > 0 ? W(at(a, l), e.shape) : a;
            },
            b: () => {
                let a = G(n, tt(e, "float32"));
                const l = ce(s.shape, o);
                l.length > 0 && (a = W(at(a, l), s.shape));
                const c = Kt(s);
                return Yt(ut(a, tt(c, "float32")));
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sE = {
    kernelName: ta,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => ut(n, Yt(Kt(e))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oE = {
    kernelName: na,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t,
            s = G(Tr(e, 6), Ta(e));
        return { x: () => G(n, tt(s, "float32")) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rE = {
    kernelName: ea,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(n, tt(Ta(e), "float32")) };
    },
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iE = {
    kernelName: Dc,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => W(n, e.shape) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aE = {
    kernelName: Vc,
    inputsToSave: ["images"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            o = { dy: n, images: s };
        return {
            images: () =>
                // tslint:disable-next-line: no-unnecessary-type-assertion
                $.runKernel(Mh, o, e),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lE = {
    kernelName: Fc,
    inputsToSave: ["images"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            o = { dy: n, images: s };
        return {
            images: () =>
                // tslint:disable-next-line: no-unnecessary-type-assertion
                $.runKernel(Lh, o, e),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cE = {
    kernelName: zc,
    gradFunc: (n, t, e) => {
        const { dims: s } = e,
            o = Ct(s, n.shape);
        return { x: () => Lo(n, o) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uE = {
    kernelName: sa,
    gradFunc: (n) => ({ x: () => Tt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dE = {
    kernelName: oa,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Yt(ut(n, G(gr(e, 1.5), 2))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hE = {
    kernelName: Pc,
    inputsToSave: ["condition"],
    gradFunc: (n, t) => {
        const [e] = t;
        return {
            // TODO(julianoks): Return null for condition gradient
            // when backprop supports it.
            condition: () => tt(Tt(e), "float32"),
            t: () => G(n, tt(e, n.dtype)),
            e: () => G(n, tt(fp(e), n.dtype)),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pE = {
    kernelName: ra,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return {
            x: () => {
                const s = rn(e, gt(0)),
                    o = gt(ru),
                    r = gt(iu),
                    i = G(n, r),
                    a = G(G(n, o), mn(tt(e, "float32")));
                return Ee(s, i, a);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fE = {
    kernelName: ca,
    outputsToSave: [!0],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(n, G(e, it(gt(1), e))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mE = {
    kernelName: la,
    gradFunc: (n) => ({ x: () => Tt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gE = {
    kernelName: ia,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(ip(tt(e, "float32")), n) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bE = {
    kernelName: aa,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(t0(tt(e, "float32")), n) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xE = {
    kernelName: Ac,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { begin: o, size: r } = e,
            i = s.shape,
            [a, l] = nu(s, o, r),
            c = [];
        for (let u = 0; u < n.rank; u++) c.push([a[u], i[u] - a[u] - l[u]]);
        return { x: () => bp(n, c) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yE = {
    kernelName: Zc,
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { dim: o } = e,
            r = !0,
            i = G(n, s);
        return {
            logits: () => it(i, G(at(i, [o], r), s)),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wE = {
    kernelName: ua,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(n, kr(e)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Am = {
    kernelName: Xc,
    gradFunc: (n, t, e) => {
        const { blockShape: s, paddings: o } = e;
        return { x: () => op(n, s, o) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Om = {
    kernelName: Kc,
    gradFunc: (n, t, e) => {
        const { axis: s } = e;
        return { x: () => Ge(n, s) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IE = {
    kernelName: da,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => ut(n, G(Ve(tt(e, "float32")), 2)) };
    },
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CE = {
    kernelName: zh,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(n, G(tt(e, "float32"), 2)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vE = {
    kernelName: ha,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t,
            o = gt(2);
        return { a: () => G(n, G(o, it(e, s))), b: () => G(n, G(o, it(s, e))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SE = {
    kernelName: ba,
    gradFunc: (n) => ({ x: () => Tt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kE = {
    kernelName: pa,
    inputsToSave: ["a", "b"],
    gradFunc: (n, t) => {
        const [e, s] = t,
            o = bt(e.shape, s.shape);
        return {
            a: () => {
                let a = n;
                const l = ce(e.shape, o);
                return l.length > 0 && (a = at(a, l)), W(a, e.shape);
            },
            b: () => {
                let a = n;
                const l = ce(s.shape, o);
                return l.length > 0 && (a = at(a, l)), W(Yt(a), s.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TE = {
    kernelName: Oc,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            o = s.shape.slice(),
            { axis: r } = e;
        Ct(r, s.shape).forEach((c) => {
            o[c] = 1;
        });
        const a = W(n, o),
            l = G(a, ks(s.shape, "float32"));
        return { x: () => l };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NE = {
    kernelName: fa,
    inputsToSave: ["x"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => ut(n, Kt(ip(e))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RE = {
    kernelName: ma,
    outputsToSave: [!0],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => G(it(gt(1), Kt(e)), n) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $E = {
    kernelName: ga,
    inputsToSave: ["x"],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { reps: o } = e;
        return {
            x: () => {
                let i = Tt(s);
                if (s.rank === 1)
                    for (let a = 0; a < o[0]; ++a)
                        i = U(i, Ft(n, [a * s.shape[0]], [s.shape[0]]));
                else if (s.rank === 2)
                    for (let a = 0; a < o[0]; ++a)
                        for (let l = 0; l < o[1]; ++l)
                            i = U(
                                i,
                                Ft(
                                    n,
                                    [a * s.shape[0], l * s.shape[1]],
                                    [s.shape[0], s.shape[1]]
                                )
                            );
                else if (s.rank === 3)
                    for (let a = 0; a < o[0]; ++a)
                        for (let l = 0; l < o[1]; ++l)
                            for (let c = 0; c < o[2]; ++c)
                                i = U(
                                    i,
                                    Ft(
                                        n,
                                        [
                                            a * s.shape[0],
                                            l * s.shape[1],
                                            c * s.shape[2],
                                        ],
                                        [s.shape[0], s.shape[1], s.shape[2]]
                                    )
                                );
                else if (s.rank === 4)
                    for (let a = 0; a < o[0]; ++a)
                        for (let l = 0; l < o[1]; ++l)
                            for (let c = 0; c < o[2]; ++c)
                                for (let u = 0; u < o[3]; ++u)
                                    i = U(
                                        i,
                                        Ft(
                                            n,
                                            [
                                                a * s.shape[0],
                                                l * s.shape[1],
                                                c * s.shape[2],
                                                u * s.shape[3],
                                            ],
                                            [
                                                s.shape[0],
                                                s.shape[1],
                                                s.shape[2],
                                                s.shape[3],
                                            ]
                                        )
                                    );
                else
                    throw new Error(
                        `Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`
                    );
                return i;
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GE = {
    kernelName: ar,
    gradFunc: (n, t, e) => {
        const s = e,
            { perm: o } = s,
            r = js(o);
        return { x: () => kt(n, r) };
    },
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EE = {
    kernelName: Hc,
    gradFunc: (n, t, e) => {
        const s = e,
            { axis: o } = s;
        return { value: () => Xn(n, o) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LE = {
    kernelName: _c,
    inputsToSave: ["segmentIds"],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => ME(n, e) };
    },
};
function ME(n, t) {
    const e = qs(t, Tt(t)),
        s = cp(n, e);
    let o = Bo(t, gt(0, "int32"));
    const r = s.rank - o.rank;
    for (let a = 0; a < r; ++a) o = Oe(o, a + 1);
    o = ss(o, ks(s.shape, "bool"));
    const i = Tt(s);
    return Ee(o, s, i);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WE = {
    kernelName: Uc,
    gradFunc: (n) => ({ x: () => Tt(n) }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DE = [
    xx,
    L$,
    M$,
    W$,
    D$,
    F$,
    V$,
    z$,
    P$,
    A$,
    O$,
    X$,
    B$,
    U$,
    Y$,
    Q$,
    J$,
    j$,
    q$,
    tG,
    eG,
    nG,
    oG,
    sG,
    aG,
    lG,
    cG,
    uG,
    dG,
    hG,
    nE,
    pG,
    fG,
    mG,
    gG,
    bG,
    yG,
    xG,
    wG,
    IG,
    CG,
    vG,
    SG,
    kG,
    TG,
    NG,
    RG,
    $G,
    GG,
    MG,
    zm,
    zm,
    WG,
    VG,
    AG,
    OG,
    XG,
    KG,
    ZG,
    BG,
    HG,
    _G,
    UG,
    YG,
    QG,
    Pm,
    Pm,
    JG,
    jG,
    eE,
    sE,
    oE,
    rE,
    iE,
    aE,
    lE,
    cE,
    uE,
    dE,
    hE,
    pE,
    fE,
    mE,
    gE,
    bE,
    xE,
    yE,
    wE,
    Am,
    Am,
    Om,
    Om,
    IE,
    vE,
    CE,
    SE,
    kE,
    TE,
    NE,
    RE,
    $E,
    GE,
    EE,
    LE,
    WE,
];
for (const n of DE) t2(n);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.abs = function () {
    return this.throwIfDisposed(), me(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.acos = function () {
    return this.throwIfDisposed(), gv(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.acosh = function () {
    return this.throwIfDisposed(), xv(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.add = function (n) {
    return this.throwIfDisposed(), U(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.all = function (n, t) {
    return this.throwIfDisposed(), Qb(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.any = function (n, t) {
    return this.throwIfDisposed(), Id(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.argMax = function (n) {
    return this.throwIfDisposed(), ai(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.argMin = function (n) {
    return this.throwIfDisposed(), vv(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.asScalar = function () {
    return (
        this.throwIfDisposed(),
        C(this.size === 1, () => "The array must have only 1 element."),
        W(this, [])
    );
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.asType = function (n) {
    return this.throwIfDisposed(), tt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.as1D = function () {
    return this.throwIfDisposed(), W(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.as2D = function (n, t) {
    return this.throwIfDisposed(), W(this, [n, t]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.as3D = function (n, t, e) {
    return this.throwIfDisposed(), W(this, [n, t, e]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.as4D = function (n, t, e, s) {
    return this.throwIfDisposed(), W(this, [n, t, e, s]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.as5D = function (n, t, e, s, o) {
    return this.throwIfDisposed(), W(this, [n, t, e, s, o]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.asin = function () {
    return this.throwIfDisposed(), kv(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.asinh = function () {
    return this.throwIfDisposed(), Nv(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.atan = function () {
    return this.throwIfDisposed(), $v(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.atan2 = function (n) {
    return this.throwIfDisposed(), Ev(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.atanh = function () {
    return this.throwIfDisposed(), Mv(this);
};
K().prototype.avgPool = function (n, t, e, s) {
    return this.throwIfDisposed(), np(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.batchToSpaceND = function (n, t) {
    return this.throwIfDisposed(), op(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.batchNorm = function (n, t, e, s, o) {
    return this.throwIfDisposed(), Qc(this, n, t, e, s, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.broadcastTo = function (n) {
    return this.throwIfDisposed(), ni(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.cast = function (n) {
    return this.throwIfDisposed(), tt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.ceil = function () {
    return this.throwIfDisposed(), iS(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.clipByValue = function (n, t) {
    return this.throwIfDisposed(), fn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.concat = function (n, t) {
    return (
        this.throwIfDisposed(),
        n instanceof Mt && (n = [n]),
        Ge([this, ...n], t)
    );
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.conv1d = function (n, t, e, s, o, r) {
    return this.throwIfDisposed(), Jb(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.conv2dTranspose = function (n, t, e, s, o) {
    return this.throwIfDisposed(), jb(this, n, t, e, s, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.conv2d = function (n, t, e, s, o, r) {
    return this.throwIfDisposed(), $o(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.cos = function () {
    return this.throwIfDisposed(), ip(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.cosh = function () {
    return this.throwIfDisposed(), t0(this);
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.cumprod = function (n, t, e) {
    return this.throwIfDisposed(), vd(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.cumsum = function (n, t, e) {
    return this.throwIfDisposed(), e0(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.depthToSpace = function (n, t) {
    return this.throwIfDisposed(), ES(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.depthwiseConv2d = function (n, t, e, s, o, r) {
    return this.throwIfDisposed(), ap(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.dilation2d = function (n, t, e, s, o) {
    return this.throwIfDisposed(), WS(this, n, t, e, s, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.divNoNan = function (n) {
    return this.throwIfDisposed(), PS(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.div = function (n) {
    return this.throwIfDisposed(), ut(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.dot = function (n) {
    return this.throwIfDisposed(), OS(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.elu = function () {
    return this.throwIfDisposed(), Jc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.equal = function (n) {
    return this.throwIfDisposed(), Tn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.erf = function () {
    return this.throwIfDisposed(), BS(this);
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.euclideanNorm = function (n, t) {
    return this.throwIfDisposed(), tk(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.exp = function () {
    return this.throwIfDisposed(), mn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.expandDims = function (n) {
    return this.throwIfDisposed(), Oe(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.expm1 = function () {
    return this.throwIfDisposed(), ok(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.fft = function () {
    return this.throwIfDisposed(), Gp(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.flatten = function () {
    return this.throwIfDisposed(), W(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.floor = function () {
    return this.throwIfDisposed(), qc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.floorDiv = function (n) {
    return this.throwIfDisposed(), Yb(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.gather = function (n, t, e) {
    return this.throwIfDisposed(), cp(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.greaterEqual = function (n) {
    return this.throwIfDisposed(), Bo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.greater = function (n) {
    return this.throwIfDisposed(), rn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.ifft = function () {
    return this.throwIfDisposed(), kl(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.irfft = function () {
    return this.throwIfDisposed(), b0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.isFinite = function () {
    return this.throwIfDisposed(), pk(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.isInf = function () {
    return this.throwIfDisposed(), mk(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.isNaN = function () {
    return this.throwIfDisposed(), bk(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.leakyRelu = function (n) {
    return this.throwIfDisposed(), dp(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.lessEqual = function (n) {
    return this.throwIfDisposed(), Tr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.less = function (n) {
    return this.throwIfDisposed(), Cl(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.localResponseNormalization = function (n, t, e, s) {
    return this.throwIfDisposed(), Ck(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logSigmoid = function () {
    return this.throwIfDisposed(), $k(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logSoftmax = function (n) {
    return this.throwIfDisposed(), r0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logSumExp = function (n, t) {
    return this.throwIfDisposed(), pp(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.log = function () {
    return this.throwIfDisposed(), Nn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.log1p = function () {
    return this.throwIfDisposed(), hp(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logicalAnd = function (n) {
    return this.throwIfDisposed(), ss(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logicalNot = function () {
    return this.throwIfDisposed(), fp(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logicalOr = function (n) {
    return this.throwIfDisposed(), i0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logicalXor = function (n) {
    return this.throwIfDisposed(), Vk(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.matMul = function (n, t, e) {
    return this.throwIfDisposed(), Gt(this, n, t, e);
};
K().prototype.maxPool = function (n, t, e, s) {
    return this.throwIfDisposed(), mp(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.max = function (n, t) {
    return this.throwIfDisposed(), Pn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.maximum = function (n) {
    return this.throwIfDisposed(), qs(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.mean = function (n, t) {
    return this.throwIfDisposed(), oe(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.min = function (n, t) {
    return this.throwIfDisposed(), Il(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.minimum = function (n) {
    return this.throwIfDisposed(), br(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.mirrorPad = function (n, t) {
    return this.throwIfDisposed(), Bk(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.mod = function (n) {
    return this.throwIfDisposed(), _k(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.mul = function (n) {
    return this.throwIfDisposed(), G(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.neg = function () {
    return this.throwIfDisposed(), Yt(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.norm = function (n, t, e) {
    return this.throwIfDisposed(), jc(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.notEqual = function (n) {
    return this.throwIfDisposed(), ui(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.oneHot = function (n, t = 1, e = 0) {
    return this.throwIfDisposed(), a0(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.onesLike = function () {
    return this.throwIfDisposed(), Rn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.pad = function (n, t) {
    return this.throwIfDisposed(), bp(this, n, t);
};
K().prototype.pool = function (n, t, e, s, o, r) {
    return this.throwIfDisposed(), sT(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.pow = function (n) {
    return this.throwIfDisposed(), gr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.prelu = function (n) {
    return this.throwIfDisposed(), yp(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.prod = function (n, t) {
    return this.throwIfDisposed(), iT(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.reciprocal = function () {
    return this.throwIfDisposed(), $T(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.relu = function () {
    return this.throwIfDisposed(), Ts(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.relu6 = function () {
    return this.throwIfDisposed(), c0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.reshapeAs = function (n) {
    return this.throwIfDisposed(), W(this, n.shape);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.reshape = function (n) {
    return this.throwIfDisposed(), W(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.resizeBilinear = function (n, t, e) {
    return this.throwIfDisposed(), T0(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.resizeNearestNeighbor = function (n, t, e) {
    return this.throwIfDisposed(), N0(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.reverse = function (n) {
    return this.throwIfDisposed(), Lo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.rfft = function () {
    return this.throwIfDisposed(), Ep(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.round = function () {
    return this.throwIfDisposed(), u0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.rsqrt = function () {
    return this.throwIfDisposed(), d0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.selu = function () {
    return this.throwIfDisposed(), h0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.separableConv2d = function (n, t, e, s, o, r) {
    return this.throwIfDisposed(), p0(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sigmoid = function () {
    return this.throwIfDisposed(), kr(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sign = function () {
    return this.throwIfDisposed(), zT(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sin = function () {
    return this.throwIfDisposed(), f0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sinh = function () {
    return this.throwIfDisposed(), m0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.slice = function (n, t) {
    return this.throwIfDisposed(), Ft(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.softmax = function (n) {
    return this.throwIfDisposed(), $p(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.softplus = function () {
    return this.throwIfDisposed(), va(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.spaceToBatchND = function (n, t) {
    return this.throwIfDisposed(), xp(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.split = function (n, t) {
    return this.throwIfDisposed(), pn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sqrt = function () {
    return this.throwIfDisposed(), Ve(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.square = function () {
    return this.throwIfDisposed(), Kt(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.squaredDifference = function (n) {
    return this.throwIfDisposed(), x0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.squeeze = function (n) {
    return this.throwIfDisposed(), ka(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.stack = function (n, t) {
    this.throwIfDisposed();
    const e = n instanceof Mt ? [this, n] : [this, ...n];
    return Xn(e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.step = function (n) {
    return this.throwIfDisposed(), Ta(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.stridedSlice = function (n, t, e, s, o, r, i, a) {
    return this.throwIfDisposed(), nN(this, n, t, e, s, o, r, i, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sub = function (n) {
    return this.throwIfDisposed(), it(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sum = function (n, t) {
    return this.throwIfDisposed(), at(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.tan = function () {
    return this.throwIfDisposed(), oN(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.tanh = function () {
    return this.throwIfDisposed(), sp(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.tile = function (n) {
    return this.throwIfDisposed(), Vn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.toBool = function () {
    return this.throwIfDisposed(), tt(this, "bool");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.toFloat = function () {
    return this.throwIfDisposed(), tt(this, "float32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.toInt = function () {
    return this.throwIfDisposed(), tt(this, "int32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.topk = function (n, t) {
    return this.throwIfDisposed(), aN(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.transpose = function (n) {
    return this.throwIfDisposed(), kt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.unique = function (n) {
    return this.throwIfDisposed(), uN(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.unsortedSegmentSum = function (n, t) {
    return this.throwIfDisposed(), I0(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.unstack = function (n) {
    return this.throwIfDisposed(), Mo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.where = function (n, t) {
    return this.throwIfDisposed(), Ee(n, this, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.zerosLike = function () {
    return this.throwIfDisposed(), Tt(this);
};
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Qn extends Error {
    constructor(t) {
        super(t), Object.setPrototypeOf(this, Qn.prototype);
    }
}
class Sn extends Error {
    constructor(t) {
        super(t), Object.setPrototypeOf(this, Sn.prototype);
    }
}
class E extends Error {
    constructor(t) {
        super(t), Object.setPrototypeOf(this, E.prototype);
    }
}
class yt extends Error {
    constructor(t) {
        super(t), Object.setPrototypeOf(this, yt.prototype);
    }
}
class mf extends Error {
    constructor(t) {
        super(t), Object.setPrototypeOf(this, mf.prototype);
    }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class wx {
    constructor(t) {
        (this.maxEntries = t || 100), (this.cache = /* @__PURE__ */ new Map());
    }
    /**
     * Get the entry for the key and mark it as used recently.
     */
    get(t) {
        let e;
        return (
            this.cache.has(t) &&
                ((e = this.cache.get(t)),
                this.cache.delete(t),
                this.cache.set(t, e)),
            e
        );
    }
    /**
     * Put the entry into the cache. If the key already existed, mark the key as
     * used recently.
     */
    put(t, e) {
        if (this.cache.has(t)) this.cache.delete(t);
        else if (this.cache.size >= this.maxEntries) {
            const s = this.cache.keys().next().value;
            this.cache.delete(s);
        }
        this.cache.set(t, e);
    }
    /**
     * Get the MaxEntries of the cache.
     */
    getMaxEntries() {
        return this.maxEntries;
    }
    /**
     * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce
     * entries in the cache.
     */
    setMaxEntries(t) {
        if (t < 0)
            throw new Error(
                `The maxEntries of LRU caches must be at least 0, but got ${t}.`
            );
        if (this.maxEntries > t)
            for (let e = 0; e < this.maxEntries - t; e++) {
                const s = this.cache.keys().next().value;
                this.cache.delete(s);
            }
        this.maxEntries = t;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Wo(n, t) {
    if (Array.isArray(n)) {
        let e = [];
        for (let s = 0; s < t; s++) e = e.concat(n);
        return e;
    } else {
        const e = new Array(t);
        return e.fill(n), e;
    }
}
function Jn(n, t) {
    if (!n) throw new mf(t);
}
function Xm(n, t) {
    let e = 0;
    for (const s of n) s === t && e++;
    return e;
}
function Xe(n) {
    return n.length === 1 ? n[0] : n;
}
function Lt(n) {
    return Array.isArray(n) ? n : [n];
}
function us(n) {
    const e = n
        .replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2")
        .replace(/([a-z])([A-Z])/g, "$1_$2")
        .toLowerCase();
    return e[0] !== "_" ? e : "private" + e;
}
function ho(n) {
    return n.length <= 1 || n.indexOf("_") === -1
        ? n
        : n.replace(/[_]+(\w|$)/g, (t, e) => e.toUpperCase());
}
let bn = {};
function gf(n) {
    if (n == null) return null;
    const t = {};
    return (t.className = n.getClassName()), (t.config = n.getConfig()), t;
}
function Nd(n) {
    if (!(n == null || typeof n != "object"))
        if (Array.isArray(n)) n.forEach((t) => Nd(t));
        else {
            const t = Object.keys(n);
            for (const e of t) {
                const s = n[e];
                s != null &&
                    typeof s == "object" &&
                    (!Array.isArray(s) &&
                    s.type === "ndarray" &&
                    typeof s.value == "number"
                        ? (n[e] = s.value)
                        : Nd(s));
            }
        }
}
function Ga(n, t = {}, e = {}, s = "object", o = !1) {
    if (typeof n == "string") {
        const r = n;
        let i;
        if (r in e) i = e[r];
        else if (r in bn) i = bn[r];
        else if (((i = t[r]), i == null))
            throw new E(`Unknown ${s}: ${n}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
        return i;
    } else {
        const r = n;
        if (r.className == null || r.config == null)
            throw new E(`${s}: Improper config format: ${JSON.stringify(r)}.
'className' and 'config' must set.`);
        const i = r.className;
        let a, l;
        if (
            (i in e
                ? ([a, l] = e[i])
                : i in bn
                ? ([a, l] = bn.className)
                : i in t && ([a, l] = t[i]),
            a == null)
        )
            throw new E(`Unknown ${s}: ${i}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
        if (l != null) {
            const c = {};
            for (const p of Object.keys(bn)) c[p] = bn[p];
            for (const p of Object.keys(e)) c[p] = e[p];
            const u = r.config;
            u.customObjects = c;
            const d = Object.assign({}, bn);
            for (const p of Object.keys(e)) bn[p] = e[p];
            Nd(r.config);
            const h = l(a, r.config, e, o);
            return (bn = Object.assign({}, d)), h;
        } else {
            const c = Object.assign({}, bn);
            for (const d of Object.keys(e)) bn[d] = e[d];
            const u = new a(r.config);
            return (bn = Object.assign({}, c)), u;
        }
    }
}
function FE(n, t) {
    return n < t ? -1 : n > t ? 1 : 0;
}
function Ba(n, t) {
    return -1 * FE(n, t);
}
function Ps(n) {
    if (n == null) return n;
    const t = [];
    for (const e of n) t.indexOf(e) === -1 && t.push(e);
    return t;
}
function VE(n) {
    if (n == null) throw new E(`Invalid value in obj: ${JSON.stringify(n)}`);
    for (const t in n) if (n.hasOwnProperty(t)) return !1;
    return !0;
}
function Uo(n, t, e) {
    if (e != null && n.indexOf(e) < 0)
        throw new E(
            `${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`
        );
}
function bf(n, t, e = 0, s = 1 / 0) {
    return (
        Jn(e >= 0),
        Jn(s >= e),
        Array.isArray(n) &&
            n.length >= e &&
            n.length <= s &&
            n.every((o) => typeof o === t)
    );
}
function xe(n, t) {
    Array.isArray(n)
        ? (C(n.length > 0, () => `${t} is unexpectedly an empty array.`),
          n.forEach((e, s) => xe(e, `element ${s + 1} of ${t}`)))
        : C(
              Number.isInteger(n) && n > 0,
              () => `Expected ${t} to be a positive integer, but got ${Ix(n)}.`
          );
}
function Ix(n) {
    return n === null
        ? "null"
        : Array.isArray(n)
        ? "[" + n.map((t) => Ix(t)).join(",") + "]"
        : typeof n == "string"
        ? `"${n}"`
        : `${n}`;
}
function zE(n, t, e) {
    let s = e != null ? e() : Ie(),
        o;
    return (...i) => {
        const a = e != null ? e() : Ie();
        return a - s < t || ((s = a), (o = n(...i))), o;
    };
}
function Cx(n) {
    return n === "relu"
        ? "relu"
        : n === "linear"
        ? "linear"
        : n === "elu"
        ? "elu"
        : null;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let PE = 0;
function vx() {
    return PE++;
}
const Ha = {};
function au(n = "") {
    return n in Ha || (Ha[n] = 0), (Ha[n] += 1), n + Ha[n].toString();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const AE = ["channelsFirst", "channelsLast"],
    OE = ["nearest", "bilinear"],
    XE = ["valid", "same", "causal"],
    KE = ["max", "avg"],
    ZE = ["sum", "mul", "concat", "ave"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const er = /* @__PURE__ */ new Map();
function ae(n) {
    Uo(AE, "DataFormat", n);
}
function BE(n) {
    Uo(OE, "InterpolationFormat", n);
}
function gn(n) {
    Uo(XE, "PaddingMode", n);
}
function Sx(n) {
    Uo(KE, "PoolMode", n);
}
const si = [],
    Km = "/";
function wo(n, t) {
    si.push(n);
    try {
        const e = t();
        return si.pop(), e;
    } catch (e) {
        throw (si.pop(), e);
    }
}
function HE() {
    return si.length === 0 ? "" : si.join(Km) + Km;
}
function kx(n) {
    if (!Nx(n)) throw new Error("Not a valid tensor name: '" + n + "'");
    return HE() + n;
}
function Tx(n) {
    if (!Nx(n)) throw new Error("Not a valid tensor name: '" + n + "'");
    er.has(n) || er.set(n, 0);
    const t = er.get(n);
    if ((er.set(n, er.get(n) + 1), t > 0)) {
        const e = `${n}_${t}`;
        return er.set(e, 1), e;
    } else return n;
}
const _E = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function Nx(n) {
    return !!n.match(_E);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function UE(n) {
    return n === parseInt(n.toString(), 10);
}
function As(n, t, e) {
    t == null && (t = 0), e == null && (e = n.length);
    let s = 1;
    for (let o = t; o < e; ++o) s *= n[o];
    return s;
}
function xr(n) {
    if (n.length === 0) return Number.NaN;
    let t = Number.POSITIVE_INFINITY;
    for (let e = 0; e < n.length; e++) {
        const s = n[e];
        s < t && (t = s);
    }
    return t;
}
function Bs(n) {
    if (n.length === 0) return Number.NaN;
    let t = Number.NEGATIVE_INFINITY;
    for (let e = 0; e < n.length; e++) {
        const s = n[e];
        s > t && (t = s);
    }
    return t;
}
function Kn(n, t) {
    if (t < n) throw new E(`end (${t}) < begin (${n}) is forbidden.`);
    const e = [];
    for (let s = n; s < t; ++s) e.push(s);
    return e;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Wu;
function ue() {
    return Wu == null && (Wu = ps().epsilon()), Wu;
}
function Zn() {
    return "channelsLast";
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function es(n, t) {
    return tt(n, t);
}
function Ea(n, t = -1) {
    const e = n.shape.slice();
    return t < 0 && (t = e.length + t + 1), e.splice(t, 0, 1), W(n, e);
}
function YE(n, t) {
    return D(() => {
        if (n.shape.length !== 2)
            throw new E(
                `repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`
            );
        const e = Ea(n, 1);
        return Rd(e, [1, t, 1]);
    });
}
function QE(n) {
    const t = [As(n.shape)];
    return W(n, t);
}
function JE(n) {
    if (n.rank <= 1)
        throw new E(
            `batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`
        );
    const t = [n.shape[0], As(n.shape, 1)];
    return W(n, t);
}
function Io(n, t, e) {
    return D(() => {
        switch (n.rank) {
            case 1:
                return Np(n, t, e);
            case 2:
                return g0(n, [t, 0], [e, n.shape[1]]);
            case 3:
                return Rp(n, [t, 0, 0], [e, n.shape[1], n.shape[2]]);
            case 4:
                return Sl(
                    n,
                    [t, 0, 0, 0],
                    [e, n.shape[1], n.shape[2], n.shape[3]]
                );
            case 5:
                return Ft(
                    n,
                    [t, 0, 0, 0, 0],
                    [e, n.shape[1], n.shape[2], n.shape[3], n.shape[4]]
                );
            case 6:
                return Ft(
                    n,
                    [t, 0, 0, 0, 0, 0],
                    [
                        e,
                        n.shape[1],
                        n.shape[2],
                        n.shape[3],
                        n.shape[4],
                        n.shape[5],
                    ]
                );
            default:
                throw new E(
                    `sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`
                );
        }
    });
}
function Du(n, t, e) {
    return D(() => {
        switch (n.rank) {
            case 1:
                return Np(n, t, e);
            case 2:
                return g0(n, [0, t], [n.shape[0], e]);
            case 3:
                return Rp(n, [0, 0, t], [n.shape[0], n.shape[1], e]);
            case 4:
                return Sl(
                    n,
                    [0, 0, 0, t],
                    [n.shape[0], n.shape[1], n.shape[2], e]
                );
            default:
                throw new E(
                    `sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`
                );
        }
    });
}
function _a(n, t, e, s) {
    return D(() => {
        switch (n.rank) {
            case 1:
                return Np(n, t, e);
            case 2:
                switch (s) {
                    case 1:
                        return Io(n, t, e);
                    case 2:
                        return Du(n, t, e);
                    default:
                        throw new E(
                            `The axis is not within the rank of the tensor ${s}`
                        );
                }
            case 3:
                switch (s) {
                    case 1:
                        return Io(n, t, e);
                    case 2:
                        return Rp(n, [0, t, 0], [n.shape[0], e, n.shape[2]]);
                    case 3:
                        return Du(n, t, e);
                    default:
                        throw new E(
                            `The axis is not within the rank of the tensor ${s}`
                        );
                }
            case 4:
                switch (s) {
                    case 1:
                        return Io(n, t, e);
                    case 2:
                        return Sl(
                            n,
                            [0, t, 0, 0],
                            [n.shape[0], e, n.shape[2], n.shape[3]]
                        );
                    case 3:
                        return Sl(
                            n,
                            [0, 0, t, 0],
                            [n.shape[0], n.shape[1], e, n.shape[3]]
                        );
                    case 4:
                        return Du(n, t, e);
                    default:
                        throw new E(
                            `The axis is not within the rank of the tensor ${s}`
                        );
                }
            default:
                throw new E(
                    `sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`
                );
        }
    });
}
function xf(n, t = -1) {
    let e;
    return (
        t < 0 && ((e = n[0].rank), e !== 0 ? (t = e) : (t = 0)),
        t === n[0].rank && (t = -1),
        Ge(n, t)
    );
}
function Zm(n, t) {
    switch (n.rank) {
        case 1:
            return cS([n, t]);
        case 2:
            return dS([n, t], 0);
        case 3:
            return pS([n, t], 0);
        case 4:
            return mS([n, t], 0);
        default:
            throw new E(
                `concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`
            );
    }
}
function Rd(n, t) {
    if ((Array.isArray(t) || (t = [t]), n.rank !== t.length))
        throw new E(
            `The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`
        );
    return Vn(n, t);
}
function lu(n, t = 0, e = 1, s, o) {
    return kT(n, t, e, s, o);
}
function ns(n, t, e, s) {
    if (n.rank < 2 || t.rank < 2)
        throw new yt(
            `dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`
        );
    if (t.rank >= 3) {
        const o = n.shape.slice(-1)[0],
            r = t.shape.slice(-2)[0];
        if (o !== r)
            throw new yt(
                `If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`
            );
    }
    if (n.rank === 2 && t.rank === 2)
        return Nm({
            a: n,
            b: t,
            transposeA: !1,
            transposeB: !1,
            bias: s ? $d(n.rank, s, Zn()) : null,
            activation: e,
        });
    {
        const o = n.shape.slice(),
            r = o.pop();
        n = W(n, [-1, r]);
        const i = t.shape.slice(),
            a = i.pop(),
            l = i.pop(),
            c = [...i, a],
            u = Array.from({ length: t.rank }, (f, m) =>
                m === 0 ? t.rank - 2 : m <= t.rank - 2 ? m - 1 : m
            );
        t = W(kt(t, u), [l, -1]);
        const d = [...o, ...c];
        return W(
            Nm({
                a: n,
                b: t,
                transposeA: !1,
                transposeB: !1,
                bias: s ? $d(n.rank, s, Zn()) : null,
                activation: e,
            }),
            d
        );
    }
}
function Rx(n, t, e) {
    return D(
        () => (
            Array.isArray(t) ? (t = Ze(t, "int32")) : (t = tt(t, "int32")),
            cp(n, t, e)
        )
    );
}
function La(n) {
    return G(n, n);
}
function $d(n, t, e) {
    const s = t.shape;
    if (t.rank !== 1 && t.rank !== n)
        throw new E(
            `Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`
        );
    if (n === 5) {
        if (e === "channelsFirst")
            return s.length === 1
                ? W(t, [1, s[0], 1, 1, 1])
                : W(t, [1, s[3], s[0], s[1], s[2]]);
        if (e === "channelsLast")
            return s.length === 1
                ? W(t, [1, 1, 1, 1, s[0]])
                : W(t, [1].concat(s));
    } else if (n === 4) {
        if (e === "channelsFirst")
            return s.length === 1
                ? W(t, [1, s[0], 1, 1])
                : W(t, [1, s[2], s[0], s[1]]);
        if (e === "channelsLast")
            return s.length === 1 ? W(t, [1, 1, 1, s[0]]) : W(t, [1].concat(s));
    } else if (n === 3) {
        if (e === "channelsFirst")
            return s.length === 1 ? W(t, [1, s[0], 1]) : W(t, [1, s[1], s[0]]);
        if (e === "channelsLast")
            return s.length === 1 ? W(t, [1, 1, s[0]]) : W(t, [1].concat(s));
    } else if (n < 3) return t;
    throw new E(`Unsupported input rank by biasAdd: ${t.rank}`);
}
function _n(n, t, e) {
    return D(() => (e == null && (e = Zn()), ae(e), U(n, $d(n.rank, t, e))));
}
function jE(n, t = 1) {
    if (t !== 1)
        throw new yt(
            `Support for alpha values other than 1 (${t}) is not implemented yet.`
        );
    return Jc(n);
}
function qE(n) {
    return D(() => ut(n, U(me(n), 1)));
}
function $x(n, t, e, s) {
    return D(() => bN(n, t, e, s));
}
function tL(n) {
    return D(() => {
        const t = U(0.5, G(0.2, n));
        return fn(t, 0, 1);
    });
}
function Ma(n, t, e = !1) {
    return e ? n() : t();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const eL = ["fanIn", "fanOut", "fanAvg"],
    nL = ["normal", "uniform", "truncatedNormal"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function sL(n) {
    Uo(eL, "FanMode", n);
}
function oL(n) {
    Uo(nL, "Distribution", n);
}
class Gn extends _o {
    fromConfigUsesCustomObjects() {
        return !1;
    }
    getConfig() {
        return {};
    }
}
class Gx extends Gn {
    apply(t, e) {
        return be(t, e);
    }
}
Gx.className = "Zeros";
_(Gx);
class yf extends Gn {
    apply(t, e) {
        return ks(t, e);
    }
}
yf.className = "Ones";
_(yf);
class Ex extends Gn {
    constructor(t) {
        if ((super(), typeof t != "object"))
            throw new E(
                `Expected argument of type ConstantConfig but got ${t}`
            );
        if (t.value === void 0)
            throw new E(`config must have value set but got ${t}`);
        this.value = t.value;
    }
    apply(t, e) {
        return D(() => G(gt(this.value), ks(t, e)));
    }
    getConfig() {
        return {
            value: this.value,
        };
    }
}
Ex.className = "Constant";
_(Ex);
class Lx extends Gn {
    constructor(t) {
        super(),
            (this.DEFAULT_MINVAL = -0.05),
            (this.DEFAULT_MAXVAL = 0.05),
            (this.minval = t.minval || this.DEFAULT_MINVAL),
            (this.maxval = t.maxval || this.DEFAULT_MAXVAL),
            (this.seed = t.seed);
    }
    apply(t, e) {
        return Sa(t, this.minval, this.maxval, e, this.seed);
    }
    getConfig() {
        return { minval: this.minval, maxval: this.maxval, seed: this.seed };
    }
}
Lx.className = "RandomUniform";
_(Lx);
class Mx extends Gn {
    constructor(t) {
        super(),
            (this.DEFAULT_MEAN = 0),
            (this.DEFAULT_STDDEV = 0.05),
            (this.mean = t.mean || this.DEFAULT_MEAN),
            (this.stddev = t.stddev || this.DEFAULT_STDDEV),
            (this.seed = t.seed);
    }
    apply(t, e) {
        if (((e = e || "float32"), e !== "float32" && e !== "int32"))
            throw new yt(`randomNormal does not support dType ${e}.`);
        return lu(t, this.mean, this.stddev, e, this.seed);
    }
    getConfig() {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
    }
}
Mx.className = "RandomNormal";
_(Mx);
class Wx extends Gn {
    constructor(t) {
        super(),
            (this.DEFAULT_MEAN = 0),
            (this.DEFAULT_STDDEV = 0.05),
            (this.mean = t.mean || this.DEFAULT_MEAN),
            (this.stddev = t.stddev || this.DEFAULT_STDDEV),
            (this.seed = t.seed);
    }
    apply(t, e) {
        if (((e = e || "float32"), e !== "float32" && e !== "int32"))
            throw new yt(`truncatedNormal does not support dType ${e}.`);
        return w0(t, this.mean, this.stddev, e, this.seed);
    }
    getConfig() {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
    }
}
Wx.className = "TruncatedNormal";
_(Wx);
class Dx extends Gn {
    constructor(t) {
        super(), (this.gain = t.gain != null ? t.gain : 1);
    }
    apply(t, e) {
        return D(() => {
            if (t.length !== 2 || t[0] !== t[1])
                throw new E(
                    "Identity matrix initializer can only be used for 2D square matrices."
                );
            return G(this.gain, o0(t[0]));
        });
    }
    getConfig() {
        return { gain: this.gain };
    }
}
Dx.className = "Identity";
_(Dx);
function rL(n, t = "channelsLast") {
    let e, s;
    if ((ae(t), n.length === 2)) (e = n[0]), (s = n[1]);
    else if ([3, 4, 5].indexOf(n.length) !== -1) {
        if (t === "channelsFirst") {
            const o = As(n, 2);
            (e = n[1] * o), (s = n[0] * o);
        } else if (t === "channelsLast") {
            const o = As(n, 0, n.length - 2);
            (e = n[n.length - 2] * o), (s = n[n.length - 1] * o);
        }
    } else {
        const o = As(n);
        (e = Math.sqrt(o)), (s = Math.sqrt(o));
    }
    return [e, s];
}
class en extends Gn {
    /**
     * Constructor of VarianceScaling.
     * @throws ValueError for invalid value in scale.
     */
    constructor(t) {
        if ((super(), t.scale < 0))
            throw new E(`scale must be a positive float. Got: ${t.scale}`);
        (this.scale = t.scale == null ? 1 : t.scale),
            (this.mode = t.mode == null ? "fanIn" : t.mode),
            sL(this.mode),
            (this.distribution =
                t.distribution == null ? "normal" : t.distribution),
            oL(this.distribution),
            (this.seed = t.seed);
    }
    apply(t, e) {
        const s = rL(t),
            o = s[0],
            r = s[1];
        let i = this.scale;
        if (
            (this.mode === "fanIn"
                ? (i /= Math.max(1, o))
                : this.mode === "fanOut"
                ? (i /= Math.max(1, r))
                : (i /= Math.max(1, (o + r) / 2)),
            this.distribution === "normal")
        ) {
            const a = Math.sqrt(i);
            if (((e = e || "float32"), e !== "float32" && e !== "int32"))
                throw new yt(
                    `${this.getClassName()} does not support dType ${e}.`
                );
            return w0(t, 0, a, e, this.seed);
        } else {
            const a = Math.sqrt(3 * i);
            return Sa(t, -a, a, e, this.seed);
        }
    }
    getConfig() {
        return {
            scale: this.scale,
            mode: this.mode,
            distribution: this.distribution,
            seed: this.seed,
        };
    }
}
en.className = "VarianceScaling";
_(en);
class wf extends en {
    /**
     * Constructor of GlorotUniform
     * @param scale
     * @param mode
     * @param distribution
     * @param seed
     */
    constructor(t) {
        super({
            scale: 1,
            mode: "fanAvg",
            distribution: "uniform",
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return en.className;
    }
}
wf.className = "GlorotUniform";
_(wf);
class If extends en {
    /**
     * Constructor of GlorotNormal.
     * @param scale
     * @param mode
     * @param distribution
     * @param seed
     */
    constructor(t) {
        super({
            scale: 1,
            mode: "fanAvg",
            distribution: "normal",
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return en.className;
    }
}
If.className = "GlorotNormal";
_(If);
class Cf extends en {
    constructor(t) {
        super({
            scale: 2,
            mode: "fanIn",
            distribution: "normal",
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return en.className;
    }
}
Cf.className = "HeNormal";
_(Cf);
class vf extends en {
    constructor(t) {
        super({
            scale: 2,
            mode: "fanIn",
            distribution: "uniform",
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return en.className;
    }
}
vf.className = "HeUniform";
_(vf);
class Sf extends en {
    constructor(t) {
        super({
            scale: 1,
            mode: "fanIn",
            distribution: "normal",
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return en.className;
    }
}
Sf.className = "LeCunNormal";
_(Sf);
class kf extends en {
    constructor(t) {
        super({
            scale: 1,
            mode: "fanIn",
            distribution: "uniform",
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return en.className;
    }
}
kf.className = "LeCunUniform";
_(kf);
class Fx extends Gn {
    constructor(t) {
        super(),
            (this.DEFAULT_GAIN = 1),
            (this.ELEMENTS_WARN_SLOW = 2e3),
            (this.gain = t.gain == null ? this.DEFAULT_GAIN : t.gain),
            (this.seed = t.seed);
    }
    apply(t, e) {
        return D(() => {
            if (t.length < 2) throw new yt("Shape must be at least 2D.");
            if (e !== "int32" && e !== "float32" && e !== void 0)
                throw new TypeError(`Unsupported data type ${e}.`);
            e = e;
            const s = X(t.slice(0, -1)),
                o = t[t.length - 1],
                r = s * o;
            r > this.ELEMENTS_WARN_SLOW &&
                console.warn(
                    `Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${r}) elements: Slowness may result.`
                );
            const i = [Math.max(o, s), Math.min(o, s)],
                a = lu(i, 0, 1, e, this.seed),
                l = e$.qr(a, !1);
            let c = l[0];
            const d = l[1]
                .flatten()
                .stridedSlice(
                    [0],
                    [Math.min(o, s) * Math.min(o, s)],
                    [Math.min(o, s) + 1]
                );
            return (
                (c = G(c, d.sign())),
                s < o && (c = c.transpose()),
                G(gt(this.gain), c.reshape(t))
            );
        });
    }
    getConfig() {
        return {
            gain: this.gain,
            seed: this.seed,
        };
    }
}
Fx.className = "Orthogonal";
_(Fx);
const Bm = {
    constant: "Constant",
    glorotNormal: "GlorotNormal",
    glorotUniform: "GlorotUniform",
    heNormal: "HeNormal",
    heUniform: "HeUniform",
    identity: "Identity",
    leCunNormal: "LeCunNormal",
    leCunUniform: "LeCunUniform",
    ones: "Ones",
    orthogonal: "Orthogonal",
    randomNormal: "RandomNormal",
    randomUniform: "RandomUniform",
    truncatedNormal: "TruncatedNormal",
    varianceScaling: "VarianceScaling",
    zeros: "Zeros",
};
function Hm(n, t = {}) {
    return Ga(n, cn.getMap().classNameMap, t, "initializer");
}
function jt(n) {
    return gf(n);
}
function Ut(n) {
    if (typeof n == "string") {
        const t = n in Bm ? Bm[n] : n;
        if (t === "GlorotNormal") return new If();
        if (t === "GlorotUniform") return new wf();
        if (t === "HeNormal") return new Cf();
        if (t === "HeUniform") return new vf();
        if (t === "LeCunNormal") return new Sf();
        if (t === "LeCunUniform") return new kf();
        {
            const e = {};
            return (e.className = t), (e.config = {}), Hm(e);
        }
    } else return n instanceof Gn ? n : Hm(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Gd(n) {
    return Array.isArray(n) && Array.isArray(n[0]);
}
function Tl(n) {
    return n.length === 0 ? [] : Array.isArray(n[0]) ? n : [n];
}
function mt(n) {
    let t;
    if (Array.isArray(n)) {
        if (n.length !== 1)
            throw new E(`Expected Tensor length to be 1; got ${n.length}`);
        t = n[0];
    } else t = n;
    return t;
}
function Rt(n) {
    if (Array.isArray(n) && Array.isArray(n[0])) {
        if (n.length === 1) return (n = n), n[0];
        throw new E(`Expected exactly 1 Shape; got ${n.length}`);
    } else return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Nl(n) {
    let t = 0;
    for (const e of n)
        e.shape.length === 0
            ? (t += 1)
            : (t += e.shape.reduce((s, o) => s * o));
    return t;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const _m = "Variable";
class iL {
    /**
     * Construct Variable from a `tf.Tensor`.
     *
     * If not explicitly named, the Variable will be given a name with the
     * prefix 'Variable'. Variable names are unique. In the case of name
     * collision, suffixies '_<num>' will be added to the name.
     *
     * @param val Initial value of the Variable.
     * @param name Name of the variable. If `null` or `undefined` is provided, it
     *   will default a name with the prefix 'Variable'.
     * @param constraint Optional, projection function to be applied to the
     * variable after optimize updates
     * @throws ValueError if `name` is `null` or `undefined`.
     */
    constructor(t, e = "float32", s = _m, o = !0, r = null) {
        (this.dtype = e ?? "float32"),
            (this.shape = t.shape),
            (this.id = vx()),
            (s = s ?? _m),
            (this.originalName = kx(s)),
            (this.name = Tx(this.originalName)),
            (this.trainable_ = o),
            (this.constraint = r),
            (this.val = pN(t, this.trainable_, this.name, this.dtype));
    }
    /**
     * Get a snapshot of the Variable's value.
     *
     * The returned value is a snapshot of the Variable's value at the time of
     * the invocation. Future mutations in the value of the tensor will only
     * be reflected by future calls to this method.
     */
    read() {
        return this.assertNotDisposed(), this.val;
    }
    /**
     * Update the value of the Variable.
     *
     * @param newVal: The new value to update to. Must be consistent with the
     *   dtype and shape of the Variable.
     * @return This Variable.
     */
    write(t) {
        return (
            this.assertNotDisposed(),
            aL(this.val, t),
            this.val.id !== t.id &&
                (this.val.assign(t),
                this.constraint != null &&
                    this.val.assign(this.constraint.apply(this.val))),
            this
        );
    }
    /**
     * Dispose this LayersVariable instance from memory.
     */
    dispose() {
        this.assertNotDisposed(), this.val.dispose();
    }
    assertNotDisposed() {
        if (this.val.isDisposed)
            throw new Error(`LayersVariable ${this.name} is already disposed.`);
    }
    get trainable() {
        return this.trainable_;
    }
    set trainable(t) {
        (this.trainable_ = t), (this.val.trainable = t);
    }
}
function aL(n, t) {
    if (n.shape.toString() !== t.shape.toString())
        throw new Error(
            "Shape mismatch: " +
                JSON.stringify(n.shape) +
                " vs. " +
                JSON.stringify(t.shape)
        );
}
function Ed(n) {
    return n.map((t) => t.read());
}
function Tf(n) {
    n.forEach((t) => {
        t[0].write(t[1]);
    });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class de {
    constructor(t) {
        (this.dtype = t.dtype),
            (this.shape = t.shape),
            t.shape != null
                ? (this.ndim = t.shape.length)
                : (this.ndim = t.ndim),
            (this.maxNDim = t.maxNDim),
            (this.minNDim = t.minNDim),
            (this.axes = t.axes || {});
    }
}
class os {
    /**
     *
     * @param dtype
     * @param shape
     * @param sourceLayer The Layer that produced this symbolic tensor.
     * @param inputs The inputs passed to sourceLayer's __call__() method.
     * @param nodeIndex
     * @param tensorIndex
     * @param callArgs The keyword arguments passed to the __call__() method.
     * @param name
     * @param outputTensorIndex The index of this tensor in the list of outputs
     *   returned by apply().
     */
    constructor(t, e, s, o, r, i, a) {
        (this.dtype = t),
            (this.shape = e),
            (this.sourceLayer = s),
            (this.inputs = o),
            (this.callArgs = r),
            (this.outputTensorIndex = a),
            (this.id = vx()),
            i != null &&
                ((this.originalName = kx(i)),
                (this.name = Tx(this.originalName))),
            (this.rank = e.length);
    }
}
let lL = 0;
class cu {
    constructor(t, e) {
        (this.callArgs = e),
            (this.id = lL++),
            (this.outboundLayer = t.outboundLayer),
            (this.inboundLayers = t.inboundLayers),
            (this.nodeIndices = t.nodeIndices),
            (this.tensorIndices = t.tensorIndices),
            (this.inputTensors = t.inputTensors),
            (this.outputTensors = t.outputTensors),
            (this.inputMasks = t.inputMasks),
            (this.outputMasks = t.outputMasks),
            (this.inputShapes = t.inputShapes),
            (this.outputShapes = t.outputShapes);
        for (const s of t.inboundLayers)
            s != null && s.outboundNodes.push(this);
        t.outboundLayer.inboundNodes.push(this);
    }
    getConfig() {
        const t = [];
        for (const e of this.inboundLayers)
            e != null ? t.push(e.name) : t.push(null);
        return {
            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
            inboundLayers: t,
            nodeIndices: this.nodeIndices,
            tensorIndices: this.tensorIndices,
        };
    }
}
let cL = 0;
class St extends _o {
    constructor(t = {}) {
        super(),
            (this._callHook = null),
            (this._addedWeightNames = []),
            (this._stateful = !1),
            (this.id = cL++),
            (this.activityRegularizer = null),
            (this.inputSpec = null),
            (this.supportsMasking = !1),
            (this._trainableWeights = []),
            (this._nonTrainableWeights = []),
            (this._losses = []),
            (this._updates = []),
            (this._built = !1),
            (this.inboundNodes = []),
            (this.outboundNodes = []);
        let e = t.name;
        if (!e) {
            const s = this.getClassName();
            e = us(s) + "_" + au(s);
        }
        if (
            ((this.name = e),
            (this.trainable_ = t.trainable == null ? !0 : t.trainable),
            t.inputShape != null || t.batchInputShape != null)
        ) {
            let s;
            if (t.batchInputShape != null) s = t.batchInputShape;
            else if (t.inputShape != null) {
                let r = null;
                t.batchSize != null && (r = t.batchSize),
                    (s = [r].concat(t.inputShape));
            }
            this.batchInputShape = s;
            let o = t.dtype;
            o == null && (o = t.inputDType),
                o == null && (o = "float32"),
                (this.dtype = o);
        }
        t.weights != null
            ? (this.initialWeights = t.weights)
            : (this.initialWeights = null),
            (this._refCount = null),
            (this.fastWeightInitDuringBuild = !1);
    }
    /**
     * Converts a layer and its index to a unique (immutable type) name.
     * This function is used internally with `this.containerNodes`.
     * @param layer The layer.
     * @param nodeIndex The layer's position (e.g. via enumerate) in a list of
     *   nodes.
     *
     * @returns The unique name.
     */
    static nodeKey(t, e) {
        return t.name + "_ib-" + e.toString();
    }
    /**
     * Returns this.inboundNode at index nodeIndex.
     *
     * Porting note: This is a replacement for _get_node_attribute_at_index()
     * @param nodeIndex
     * @param attrName The name of the attribute related to request for this node.
     */
    getNodeAtIndex(t, e) {
        if (this.inboundNodes.length === 0)
            throw new Sn(
                `The layer has never been called and thus has no defined ${e}.`
            );
        if (this.inboundNodes.length <= t)
            throw new E(
                `Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`
            );
        return this.inboundNodes[t];
    }
    /**
     * Retrieves the input tensor(s) of a layer at a given node.
     *
     * @param nodeIndex Integer, index of the node from which to retrieve the
     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
     *   was called.
     *
     * @return A tensor (or list of tensors if the layer has multiple inputs).
     */
    getInputAt(t) {
        return Xe(this.getNodeAtIndex(t, "input").inputTensors);
    }
    /**
     * Retrieves the output tensor(s) of a layer at a given node.
     *
     * @param nodeIndex Integer, index of the node from which to retrieve the
     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
     *   was called.
     *
     * @return A tensor (or list of tensors if the layer has multiple outputs).
     */
    getOutputAt(t) {
        return Xe(this.getNodeAtIndex(t, "output").outputTensors);
    }
    // Properties
    /**
     * Retrieves the input tensor(s) of a layer.
     *
     * Only applicable if the layer has exactly one inbound node,
     * i.e. if it is connected to one incoming layer.
     *
     * @return Input tensor or list of input tensors.
     *
     * @exception AttributeError if the layer is connected to more than one
     *   incoming layers.
     */
    get input() {
        if (this.inboundNodes.length > 1)
            throw new Qn(
                `Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`
            );
        if (this.inboundNodes.length === 0)
            throw new Qn(
                `Layer ${this.name} is not connected, no input to return.`
            );
        return Xe(this.getNodeAtIndex(0, "input").inputTensors);
    }
    /**
     * Retrieves the output tensor(s) of a layer.
     *
     * Only applicable if the layer has exactly one inbound node,
     * i.e. if it is connected to one incoming layer.
     *
     * @return Output tensor or list of output tensors.
     *
     * @exception AttributeError if the layer is connected to more than one
     *   incoming layers.
     */
    get output() {
        if (this.inboundNodes.length === 0)
            throw new Qn(`Layer ${this.name} has no inbound nodes.`);
        if (this.inboundNodes.length > 1)
            throw new Qn(
                `Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`
            );
        return Xe(this.getNodeAtIndex(0, "output").outputTensors);
    }
    get losses() {
        return this._losses;
    }
    /**
     * Retrieves the Layer's current loss values.
     *
     * Used for regularizers during training.
     */
    calculateLosses() {
        return this.losses.map((t) => t());
    }
    get updates() {
        return this._updates;
    }
    get built() {
        return this._built;
    }
    set built(t) {
        this._built = t;
    }
    get trainable() {
        return this.trainable_;
    }
    set trainable(t) {
        this._trainableWeights.forEach((e) => (e.trainable = t)),
            (this.trainable_ = t);
    }
    get trainableWeights() {
        return this.trainable_
            ? this._trainableWeights.filter((t) => t.trainable)
            : [];
    }
    set trainableWeights(t) {
        this._trainableWeights = t;
    }
    get nonTrainableWeights() {
        return this.trainable
            ? this._trainableWeights
                  .filter((t) => !t.trainable)
                  .concat(this._nonTrainableWeights)
            : this._trainableWeights.concat(this._nonTrainableWeights);
    }
    set nonTrainableWeights(t) {
        this._nonTrainableWeights = t;
    }
    /**
     * The concatenation of the lists trainableWeights and nonTrainableWeights
     * (in this order).
     */
    get weights() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
    }
    get stateful() {
        return this._stateful;
    }
    /**
     * Reset the states of the layer.
     *
     * This method of the base Layer class is essentially a no-op.
     * Subclasses that are stateful (e.g., stateful RNNs) should override this
     * method.
     */
    resetStates() {
        if (!this.stateful)
            throw new Error(
                "Cannot call the resetStates() method of a non-stateful Layer object."
            );
    }
    /**
     * Checks compatibility between the layer and provided inputs.
     *
     * This checks that the tensor(s) `input`
     * verify the input assumptions of the layer
     * (if any). If not, exceptions are raised.
     *
     * @param inputs Input tensor or list of input tensors.
     *
     * @exception ValueError in case of mismatch between
     *   the provided inputs and the expectations of the layer.
     */
    assertInputCompatibility(t) {
        const e = Lt(t);
        if (this.inputSpec == null || this.inputSpec.length === 0) return;
        const s = Lt(this.inputSpec);
        if (e.length !== s.length)
            throw new E(
                `Layer ${this.name} expects ${s.length} inputs, but it received ${e.length} input tensors. Input received: ${t}`
            );
        for (let o = 0; o < e.length; o++) {
            const r = e[o],
                i = s[o];
            if (i == null) continue;
            const a = r.rank;
            if (i.ndim != null && a !== i.ndim)
                throw new E(
                    `Input ${o} is incompatible with layer ${this.name}: expected ndim=${i.ndim}, found ndim=${a}`
                );
            if (i.maxNDim != null && a > i.maxNDim)
                throw new E(
                    `Input ${o} is incompatible with layer ${this.name}: expected max_ndim=${i.maxNDim}, found ndim=${a}`
                );
            if (i.minNDim != null && a < i.minNDim)
                throw new E(
                    `Input ${o} is incompatible with layer ${this.name}: expected min_ndim=${i.minNDim}, found ndim=${a}.`
                );
            if (i.dtype != null && r.dtype !== i.dtype)
                throw new E(
                    `Input ${o} is incompatible with layer ${this.name} : expected dtype=${i.dtype}, found dtype=${r.dtype}.`
                );
            if (i.axes) {
                const l = r.shape;
                for (const c in i.axes) {
                    const u = Number(c),
                        d = i.axes[c],
                        h = u >= 0 ? l[u] : l[l.length + u];
                    if (d != null && [d, null].indexOf(h) === -1)
                        throw new E(
                            `Input ${o} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${d} but got shape ${l}.`
                        );
                }
            }
            if (i.shape != null)
                for (let l = 0; l < i.shape.length; ++l) {
                    const c = i.shape[l],
                        u = r.shape[l];
                    if (c != null && u != null && c !== u)
                        throw new E(
                            `Input ${o} is incompatible with layer ${this.name}: expected shape=${i.shape}, found shape=${r.shape}.`
                        );
                }
        }
    }
    /**
     * This is where the layer's logic lives.
     *
     * @param inputs Input tensor, or list/tuple of input tensors.
     * @param kwargs Additional keyword arguments.
     *
     * @return A tensor or list/tuple of tensors.
     */
    call(t, e) {
        return t;
    }
    invokeCallHook(t, e) {
        this._callHook != null && this._callHook(t, e);
    }
    /**
     * Set call hook.
     * This is currently used for testing only.
     * @param callHook
     */
    setCallHook(t) {
        this._callHook = t;
    }
    /**
     * Clear call hook.
     * This is currently used for testing only.
     */
    clearCallHook() {
        this._callHook = null;
    }
    /**
     * Builds or executes a `Layer`'s logic.
     *
     * When called with `tf.Tensor`(s), execute the `Layer`'s computation and
     * return Tensor(s). For example:
     *
     * ```js
     * const denseLayer = tf.layers.dense({
     *   units: 1,
     *   kernelInitializer: 'zeros',
     *   useBias: false
     * });
     *
     * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete
     * // numeric values).
     * const input = tf.ones([2, 2]);
     * const output = denseLayer.apply(input);
     *
     * // The output's value is expected to be [[0], [0]], due to the fact that
     * // the dense layer has a kernel initialized to all-zeros and does not have
     * // a bias.
     * output.print();
     * ```
     *
     * When called with `tf.SymbolicTensor`(s), this will prepare the layer for
     * future execution.  This entails internal book-keeping on shapes of
     * expected Tensors, wiring layers together, and initializing weights.
     *
     * Calling `apply` with `tf.SymbolicTensor`s are typically used during the
     * building of non-`tf.Sequential` models. For example:
     *
     * ```js
     * const flattenLayer = tf.layers.flatten();
     * const denseLayer = tf.layers.dense({units: 1});
     *
     * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().
     * const input = tf.input({shape: [2, 2]});
     * const output1 = flattenLayer.apply(input);
     *
     * // output1.shape is [null, 4]. The first dimension is the undetermined
     * // batch size. The second dimension comes from flattening the [2, 2]
     * // shape.
     * console.log(JSON.stringify(output1.shape));
     *
     * // The output SymbolicTensor of the flatten layer can be used to call
     * // the apply() of the dense layer:
     * const output2 = denseLayer.apply(output1);
     *
     * // output2.shape is [null, 1]. The first dimension is the undetermined
     * // batch size. The second dimension matches the number of units of the
     * // dense layer.
     * console.log(JSON.stringify(output2.shape));
     *
     * // The input and output can be used to construct a model that consists
     * // of the flatten and dense layers.
     * const model = tf.model({inputs: input, outputs: output2});
     * ```
     *
     * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.
     * @param kwargs Additional keyword arguments to be passed to `call()`.
     *
     * @return Output of the layer's `call` method.
     *
     * @exception ValueError error in case the layer is missing shape information
     *   for its `build` call.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    // Porting Note: This is a replacement for __call__() in Python.
    apply(t, e) {
        (e = e || {}), this.assertNotDisposed();
        const s = Lt(t),
            o = hL(t),
            r = pL(t);
        if (o === r)
            throw new E(
                "Arguments to apply() must be all SymbolicTensors or all Tensors"
            );
        return wo(this.name, () => {
            if (!this.built) {
                this.assertInputCompatibility(t);
                const i = [];
                for (const a of Lt(t)) i.push(a.shape);
                this.build(Xe(i)),
                    (this.built = !0),
                    this.initialWeights && this.setWeights(this.initialWeights),
                    this._refCount === null && r && (this._refCount = 1);
            }
            if ((this.assertInputCompatibility(t), r)) {
                let i = this.call(t, e);
                this.supportsMasking && this.setMaskMetadata(t, i);
                const a = Lt(i),
                    l = [];
                for (let c of a)
                    s.indexOf(c) !== -1 && (c = c.clone()), l.push(c);
                if (((i = Xe(l)), this.activityRegularizer != null))
                    throw new yt(
                        "Layer invocation in the presence of activity regularizer(s) is not supported yet."
                    );
                return i;
            } else {
                const i = uL(t),
                    a = this.computeOutputShape(i);
                let l;
                const c = dL(t);
                if (
                    (this.warnOnIncompatibleInputShape(
                        Array.isArray(t) ? i[0] : i
                    ),
                    a != null && a.length > 0 && Array.isArray(a[0])
                        ? (l = a.map(
                              (u, d) =>
                                  new os(c, u, this, Lt(t), e, this.name, d)
                          ))
                        : (l = new os(c, a, this, Lt(t), e, this.name)),
                    this.addInboundNode(t, l, null, null, i, a, e),
                    this._refCount++,
                    this.activityRegularizer != null)
                )
                    throw new yt(
                        "Layer invocation in the presence of activity regularizer(s) is not supported yet."
                    );
                return l;
            }
        });
    }
    /**
     * Check compatibility between input shape and this layer's batchInputShape.
     *
     * Print warning if any incompatibility is found.
     *
     * @param inputShape Input shape to be checked.
     */
    warnOnIncompatibleInputShape(t) {
        if (this.batchInputShape != null)
            if (t.length !== this.batchInputShape.length)
                console.warn(
                    `The rank of the input tensor provided (shape: ${JSON.stringify(
                        t
                    )}) does not match that of the batchInputShape (${JSON.stringify(
                        this.batchInputShape
                    )}) of the layer ${this.name}`
                );
            else {
                let e = !1;
                this.batchInputShape.forEach((s, o) => {
                    s != null && t[o] != null && t[o] !== s && (e = !0);
                }),
                    e &&
                        console.warn(
                            `The shape of the input tensor (${JSON.stringify(
                                t
                            )}) does not match the expectation of layer ${
                                this.name
                            }: ${JSON.stringify(this.batchInputShape)}`
                        );
            }
    }
    /**
     * Retrieves the output shape(s) of a layer.
     *
     * Only applicable if the layer has only one inbound node, or if all inbound
     * nodes have the same output shape.
     *
     * @returns Output shape or shapes.
     * @throws AttributeError: if the layer is connected to more than one incoming
     *   nodes.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    get outputShape() {
        if (this.inboundNodes == null || this.inboundNodes.length === 0)
            throw new Qn(
                `The layer ${this.name} has never been called and thus has no defined output shape.`
            );
        const t = [];
        for (const e of this.inboundNodes) {
            const s = JSON.stringify(e.outputShapes);
            t.indexOf(s) === -1 && t.push(s);
        }
        if (t.length === 1) {
            const e = this.inboundNodes[0].outputShapes;
            return Array.isArray(e) && Array.isArray(e[0]) && e.length === 1
                ? e[0]
                : e;
        } else
            throw new Qn(
                `The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`
            );
    }
    /**
     * Counts the total number of numbers (e.g., float32, int32) in the
     * weights.
     *
     * @returns An integer count.
     * @throws RuntimeError: If the layer is not built yet (in which case its
     *   weights are not defined yet.)
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    countParams() {
        if (!this.built)
            throw new Sn(
                `You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`
            );
        return Nl(this.weights);
    }
    /**
     * Creates the layer weights.
     *
     * Must be implemented on all layers that have weights.
     *
     * Called when apply() is called to construct the weights.
     *
     * @param inputShape A `Shape` or array of `Shape` (unused).
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    build(t) {
        this.built = !0;
    }
    /**
     * Returns the current values of the weights of the layer.
     *
     * @param trainableOnly Whether to get the values of only trainable weights.
     * @returns Weight values as an `Array` of `tf.Tensor`s.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    getWeights(t = !1) {
        return Ed(t ? this.trainableWeights : this.weights);
    }
    /**
     * Sets the weights of the layer, from Tensors.
     *
     * @param weights a list of Tensors. The number of arrays and their shape
     *   must match number of the dimensions of the weights of the layer (i.e.
     *   it should match the output of `getWeights`).
     *
     * @exception ValueError If the provided weights list does not match the
     *   layer's specifications.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    setWeights(t) {
        D(() => {
            const e = this.weights;
            if (e.length !== t.length)
                throw new E(
                    `You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`
                );
            if (e.length === 0) return;
            const s = [],
                o = Ed(e);
            for (let r = 0; r < o.length; ++r) {
                const i = o[r],
                    a = e[r],
                    l = t[r];
                if (!$t(i.shape, l.shape))
                    throw new E(
                        `Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`
                    );
                s.push([a, l]);
            }
            Tf(s);
        });
    }
    /**
     * Adds a weight variable to the layer.
     *
     * @param name Name of the new weight variable.
     * @param shape The shape of the weight.
     * @param dtype The dtype of the weight.
     * @param initializer An initializer instance.
     * @param regularizer A regularizer instance.
     * @param trainable Whether the weight should be trained via backprop or not
     *   (assuming that the layer itself is also trainable).
     * @param constraint An optional trainable.
     * @return The created weight variable.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    addWeight(t, e, s, o, r, i, a, l) {
        if (this._addedWeightNames.indexOf(t) !== -1)
            throw new E(`Duplicate weight name ${t} for layer ${this.name}`);
        this._addedWeightNames.push(t),
            s == null && (s = "float32"),
            this.fastWeightInitDuringBuild &&
                (o = l != null ? l() : Ut("zeros"));
        const c = o.apply(e, s),
            u = new iL(c, s, t, i, a);
        return (
            c.dispose(),
            r != null && this.addLoss(() => r.apply(u.read())),
            i == null && (i = !0),
            i
                ? this._trainableWeights.push(u)
                : this._nonTrainableWeights.push(u),
            u
        );
    }
    /**
     * Set the fast-weight-initialization flag.
     *
     * In cases where the initialized weight values will be immediately
     * overwritten by loaded weight values during model loading, setting
     * the flag to `true` saves unnecessary calls to potentially expensive
     * initializers and speeds up the loading process.
     *
     * @param value Target value of the flag.
     */
    setFastWeightInitDuringBuild(t) {
        this.fastWeightInitDuringBuild = t;
    }
    /**
     * Add losses to the layer.
     *
     * The loss may potentially be conditional on some inputs tensors,
     * for instance activity losses are conditional on the layer's inputs.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    addLoss(t) {
        t == null ||
            (Array.isArray(t) && t.length === 0) ||
            ((t = Lt(t)),
            this._losses !== void 0 &&
                this._losses !== null &&
                this.losses.push(...t));
    }
    /**
     * Computes the output shape of the layer.
     *
     * Assumes that the layer will be built to match that input shape provided.
     *
     * @param inputShape A shape (tuple of integers) or a list of shape tuples
     *   (one per output tensor of the layer). Shape tuples can include null for
     *   free dimensions, instead of an integer.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    computeOutputShape(t) {
        return t;
    }
    /**
     * Computes an output mask tensor.
     *
     * @param inputs Tensor or list of tensors.
     * @param mask Tensor or list of tensors.
     *
     * @return null or a tensor (or list of tensors, one per output tensor of the
     * layer).
     */
    computeMask(t, e) {
        if (!this.supportsMasking) {
            if (e != null)
                if (Array.isArray(e))
                    e.forEach((s) => {
                        if (s != null)
                            throw new TypeError(
                                `Layer ${this.name} does not support masking, but was passed an inputMask.`
                            );
                    });
                else
                    throw new TypeError(
                        `Layer ${this.name} does not support masking, but was passed an inputMask.`
                    );
            return null;
        }
        return e;
    }
    setMaskMetadata(t, e, s) {
        if (!this.supportsMasking) return;
        const o = this.computeMask(t, s),
            r = Lt(e),
            i = Lt(o);
        if (r.length !== i.length)
            throw new Error(
                `${this.name} outputs ${r.length} tensors but ${r.length} masks for those tensors`
            );
        for (let a = 0; a < r.length; a++) r[a].kerasMask = i[a];
    }
    /**
     * Internal method to create an inbound node for the layer.
     *
     * @param inputTensors List of input tensors.
     * @param outputTensors List of output tensors.
     * @param inputMasks List of input masks (a mask can be a tensor, or null).
     * @param outputMasks List of output masks (a mask can be a tensor, or null).
     * @param inputShapes List of input shape tuples.
     * @param outputShapes List of output shape tuples.
     * @param kwargs Dictionary of keyword arguments that were passed to the
     *   `call` method of the layer at the call that created the node.
     */
    addInboundNode(t, e, s, o, r, i, a = null) {
        const l = Lt(t);
        (e = Lt(e)), (s = Lt(s)), (o = Lt(o)), (r = Tl(r)), (i = Tl(i));
        const c = [],
            u = [],
            d = [];
        for (const h of l)
            c.push(h.sourceLayer), u.push(h.nodeIndex), d.push(h.tensorIndex);
        new cu(
            {
                outboundLayer: this,
                inboundLayers: c,
                nodeIndices: u,
                tensorIndices: d,
                inputTensors: l,
                outputTensors: e,
                inputMasks: s,
                outputMasks: o,
                inputShapes: r,
                outputShapes: i,
            },
            a
        );
        for (let h = 0; h < e.length; h++)
            (e[h].sourceLayer = this),
                (e[h].nodeIndex = this.inboundNodes.length - 1),
                (e[h].tensorIndex = h);
    }
    /**
     * Returns the config of the layer.
     *
     * A layer config is a TS dictionary (serializable)
     * containing the configuration of a layer.
     * The same layer can be reinstantiated later
     * (without its trained weights) from this configuration.
     *
     * The config of a layer does not include connectivity
     * information, nor the layer class name.  These are handled
     * by 'Container' (one layer of abstraction above).
     *
     * Porting Note: The TS dictionary follows TS naming standards for
     * keys, and uses tfjs-layers type-safe Enums.  Serialization methods
     * should use a helper function to convert to the pythonic storage
     * standard. (see serialization_utils.convertTsToPythonic)
     *
     * @returns TS dictionary of configuration.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    getConfig() {
        const t = { name: this.name, trainable: this.trainable };
        return (
            this.batchInputShape != null &&
                (t.batchInputShape = this.batchInputShape),
            this.dtype != null && (t.dtype = this.dtype),
            t
        );
    }
    /**
     * Dispose the weight variables that this Layer instance holds.
     *
     * @returns {number} Number of disposed variables.
     */
    disposeWeights() {
        return this.weights.forEach((t) => t.dispose()), this.weights.length;
    }
    assertNotDisposed() {
        if (this._refCount === 0)
            throw new Error(`Layer '${this.name}' is already disposed.`);
    }
    /**
     * Attempt to dispose layer's weights.
     *
     * This method decreases the reference count of the Layer object by 1.
     *
     * A Layer is reference-counted. Its reference count is incremented by 1
     * the first item its `apply()` method is called and when it becomes a part
     * of a new `Node` (through calling the `apply()` method on a
     * `tf.SymbolicTensor`).
     *
     * If the reference count of a Layer becomes 0, all the weights will be
     * disposed and the underlying memory (e.g., the textures allocated in WebGL)
     * will be freed.
     *
     * Note: If the reference count is greater than 0 after the decrement, the
     * weights of the Layer will *not* be disposed.
     *
     * After a Layer is disposed, it cannot be used in calls such as `apply()`,
     * `getWeights()` or `setWeights()` anymore.
     *
     * @returns A DisposeResult Object with the following fields:
     *   - refCountAfterDispose: The reference count of the Container after this
     *     `dispose()` call.
     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
     *     during this `dispose()` call.
     * @throws {Error} If the layer is not built yet, or if the layer has already
     *   been disposed.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */
    dispose() {
        if (!this.built)
            throw new Error(
                `Cannot dispose Layer ${this.name} because it has not been built yet.`
            );
        if (this._refCount === null)
            throw new Error(
                `Cannot dispose Layer ${this.name} because it has not been used yet.`
            );
        this.assertNotDisposed();
        let t = 0;
        return (
            --this._refCount === 0 && (t = this.disposeWeights()),
            { refCountAfterDispose: this._refCount, numDisposedVariables: t }
        );
    }
}
function uL(n) {
    n = Lt(n);
    const t = [];
    for (const e of n) t.push(e.shape);
    return Xe(t);
}
function dL(n) {
    return "float32";
}
function Vx(n, t, e) {
    if (
        ((t == null || (e != null && e > 0)) &&
            ((t = n.sourceLayer), (e = n.nodeIndex)),
        t.inboundNodes.length === 0)
    )
        return [n];
    {
        const s = t.inboundNodes[e];
        if (s.inboundLayers.length === 0) return s.inputTensors;
        {
            const o = [];
            for (let r = 0; r < s.inboundLayers.length; r++) {
                const i = s.inputTensors[r],
                    a = s.inboundLayers[r],
                    l = s.nodeIndices[r],
                    c = Vx(i, a, l);
                for (const u of c) o.indexOf(u) === -1 && o.push(u);
            }
            return o;
        }
    }
}
function hL(n) {
    let t = !0;
    for (const e of Lt(n))
        if (!(e instanceof os)) {
            t = !1;
            break;
        }
    return t;
}
function pL(n) {
    let t = !0;
    for (const e of Lt(n))
        if (e instanceof os) {
            t = !1;
            break;
        }
    return t;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Wa extends St {
    constructor(t) {
        if (
            (super({
                dtype: t.dtype,
                name: t.name != null ? t.name : au("input").toString(),
            }),
            t.batchSize == null && (t.batchSize = null),
            t.sparse == null && (t.sparse = !1),
            (this.trainable = !1),
            (this.built = !0),
            (this.sparse = t.sparse),
            t.inputShape != null && t.batchInputShape != null)
        )
            throw new E(
                "Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time."
            );
        let e = t.batchInputShape;
        if (e == null) {
            if (t.inputShape == null)
                throw new E(
                    "An InputLayer should be passed either a `batchInputShape` or an `inputShape`."
                );
            e = [t.batchSize].concat(t.inputShape);
        } else if (t.batchSize != null)
            throw new E(
                "Cannot specify batchSize if batchInputShape is specified when creating an InputLayer."
            );
        const s = t.dtype || "float32";
        (this.batchInputShape = e),
            (this.dtype = s),
            (this.inputSpec = [{ shape: e }]);
        const o = new os(
            this.dtype,
            this.batchInputShape,
            this,
            [],
            {},
            this.name
        );
        (o.nodeIndex = 0),
            (o.tensorIndex = 0),
            new cu({
                outboundLayer: this,
                inboundLayers: [],
                nodeIndices: [],
                tensorIndices: [],
                inputTensors: [o],
                outputTensors: [o],
                inputMasks: [null],
                outputMasks: [null],
                inputShapes: [e],
                outputShapes: [e],
            });
    }
    apply(t, e) {
        throw new E(
            `Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`
        );
    }
    dispose() {
        return {
            refCountAfterDispose: this._refCount,
            numDisposedVariables: 0,
        };
    }
    getConfig() {
        return {
            batchInputShape: this.batchInputShape,
            dtype: this.dtype,
            sparse: this.sparse,
            name: this.name,
        };
    }
}
Wa.className = "InputLayer";
_(Wa);
function fL(n) {
    if (n.batchShape == null && n.shape == null)
        throw new Error(
            "Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension."
        );
    if (n.batchShape != null && n.shape != null)
        throw new E(
            "Please provide either a `shape` or `batchShape` argument to Input, but not both."
        );
    let t = n.batchShape;
    n.shape != null && t == null && (t = [null].concat(n.shape));
    let e = n.dtype;
    return (
        e == null && (e = "float32"),
        new Wa({
            batchInputShape: t,
            name: n.name,
            dtype: e,
            sparse: n.sparse,
        }).inboundNodes[0].outputTensors[0]
    );
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function mL(n, t) {
    if (n.dtype == null || n.dtype === t.dtype) return t;
    try {
        return tt(t, n.dtype);
    } catch {
        throw new E(
            `The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`
        );
    }
}
class Ds {
    /**
     * Constructor, optionally does copy-construction.
     * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case
     *   copy-construction will be performed.
     */
    constructor(t) {
        if (
            ((this.id2Value = {}),
            (this.id2Mask = {}),
            (this.name2Id = {}),
            t instanceof Ds)
        )
            for (const e in t.id2Value)
                (this.id2Value[e] = t.id2Value[e]),
                    e in t.id2Mask && (this.id2Mask[e] = t.id2Mask[e]);
        else {
            if (t == null) return;
            for (const e of t) this.add(e.key, e.value);
        }
    }
    /**
     * Add a key-value pair to the FeedDict.
     *
     * @param key The key of the feed.
     * @param value The value of the tensor feed.
     * @param mask The value of the mask feed (optional).
     * @returns This `FeedDict`.
     * @throws ValueError: If the key `SymbolicTensor` already exists in the
     *   `FeedDict`.
     */
    add(t, e, s) {
        if (this.id2Value[t.id] == null)
            (this.id2Value[t.id] = mL(t, e)),
                (this.name2Id[t.name] = t.id),
                s != null && (this.id2Mask[t.id] = s);
        else throw new E(`Duplicate key: name=${t.name}, id=${t.id}`);
        return this;
    }
    /**
     * Add a Feed to the FeedDict.
     * @param feed The new `Feed` to add.
     * @returns This `FeedDict`.
     */
    addFeed(t) {
        this.add(t.key, t.value);
    }
    /**
     * Probe whether a key already exists in the FeedDict.
     * @param key
     */
    hasKey(t) {
        return this.id2Value[t.id] != null;
    }
    /**
     * Get all the SymbolicTensor available in this FeedDict.
     */
    names() {
        return Object.keys(this.name2Id);
    }
    /**
     * Get the feed value for given key.
     * @param key The SymbolicTensor, or its name (as a string), of which the
     *     value is sought.
     * @returns If `key` exists, the corresponding feed value.
     * @throws ValueError: If `key` does not exist in this `FeedDict`.
     */
    getValue(t) {
        if (t instanceof os) {
            if (this.id2Value[t.id] == null)
                throw new E(`Nonexistent key: ${t.name}`);
            return this.id2Value[t.id];
        } else {
            const e = this.name2Id[t];
            if (e == null)
                throw new E(`Feed dict has no SymbolicTensor name: ${t}`);
            return this.id2Value[e];
        }
    }
    /**
     * Get the feed mask for given key.
     * @param key The SymbolicTensor, or its name (as a string), of which the
     *     value is sought.
     * @returns If `key` exists, the corresponding feed mask.
     * @throws ValueError: If `key` does not exist in this `FeedDict`.
     */
    getMask(t) {
        if (t instanceof os) {
            if (this.id2Value[t.id] == null)
                throw new E(`Nonexistent key: ${t.name}`);
            return this.id2Mask[t.id];
        } else {
            const e = this.name2Id[t];
            if (e == null)
                throw new E(`Feed dict has no SymbolicTensor name: ${t}`);
            return this.id2Mask[e];
        }
    }
    /** Dispose all mask Tensors held by this object. */
    disposeMasks() {
        this.id2Mask != null && xt(this.id2Mask);
    }
}
const Rl = new wx(),
    $l = new wx();
function gL(n) {
    Rl != null && Rl.setMaxEntries(n), $l != null && $l.setMaxEntries(n);
}
function Yr(n, t, e, s) {
    const o = e == null ? !1 : e.training,
        r = Array.isArray(n),
        i = r ? n : [n],
        a = i.map((f) => f.name),
        l = [],
        c = t.names();
    for (const f of a)
        c.indexOf(f) !== -1 ? l.push(t.getValue(f)) : l.push(null);
    s != null && ((s.maxNumTensors = -1 / 0), (s.minNumTensors = 1 / 0));
    const u = a.join(",") + "|" + t.names().sort().join(",");
    let d = Rl.get(u),
        h;
    if (d == null) {
        const f = bL(i, t);
        (d = f.sorted), (h = f.recipientCounts), Rl.put(u, d), $l.put(u, h);
    }
    (h = {}), o || Object.assign(h, $l.get(u));
    const p = new Ds(t);
    for (let f = 0; f < d.length; ++f) {
        if (s != null) {
            const N = wl().numTensors;
            N > s.maxNumTensors && (s.maxNumTensors = N),
                N < s.minNumTensors && (s.minNumTensors = N);
        }
        const m = d[f],
            g = m.sourceLayer;
        if (g instanceof Wa) continue;
        const b = [],
            x = [],
            w = [];
        let y = !1;
        for (const N of m.inputs) {
            const R = p.getValue(N),
                M = p.getMask(N);
            b.push(R),
                x.push(M),
                M != null && (y = !0),
                o ||
                    (h[N.name]--,
                    h[N.name] === 0 &&
                        !t.hasKey(N) &&
                        a.indexOf(N.name) === -1 &&
                        !R.isDisposed &&
                        N.sourceLayer.stateful !== !0 &&
                        w.push(R));
        }
        y && ((e = e || {}), (e.mask = x[0]));
        const I = Lt(g.apply(b, e));
        let v = null;
        g.supportsMasking && (v = g.computeMask(b, x));
        const k = yL(m),
            S = Array.isArray(k) ? k : [k];
        for (let N = 0; N < S.length; ++N) {
            p.hasKey(S[N]) || p.add(S[N], I[N], Array.isArray(v) ? v[0] : v);
            const R = a.indexOf(S[N].name);
            R !== -1 && (l[R] = I[N]);
        }
        o || xt(w);
    }
    return p.disposeMasks(), r ? l : l[0];
}
function bL(n, t) {
    C(n != null && n.length > 0, () => "Expected at least one fetch, got none");
    let e = [],
        s = {};
    if (n.length === 1) {
        const o = Um(n[0], t);
        (e = o.sorted), (s = o.recipientMap);
    } else {
        const o = /* @__PURE__ */ new Set();
        for (const r of n) {
            const { sorted: i, recipientMap: a } = Um(r, t);
            for (const l of i) o.has(l.name) || (e.push(l), o.add(l.name));
            for (const l in a)
                s[l] == null && (s[l] = /* @__PURE__ */ new Set()),
                    a[l].forEach((c) => s[l].add(c));
        }
    }
    return {
        sorted: e,
        recipientCounts: xL(s),
    };
}
function xL(n) {
    const t = {};
    for (const e in n) t[e] = n[e].size;
    return t;
}
function Um(n, t) {
    const e = /* @__PURE__ */ new Set(),
        s = [],
        o = {};
    for (const a of t.names()) e.add(a);
    const r = [],
        i = [];
    for (r.push(n); r.length > 0; ) {
        const a = r[r.length - 1];
        if (e.has(a.name)) {
            r.pop();
            continue;
        }
        const l = i[i.length - 1] === r.length - 1;
        if (a.inputs.length === 0 || l)
            r.pop(), s.push(a), e.add(a.name), l && i.pop();
        else {
            i.push(r.length - 1);
            for (const c of a.inputs)
                o[c.name] == null && (o[c.name] = /* @__PURE__ */ new Set()),
                    o[c.name].add(a.name),
                    !e.has(c.name) && r.push(c);
        }
    }
    return { sorted: s, recipientMap: o };
}
function yL(n) {
    let t;
    if (n.sourceLayer.inboundNodes.length === 1) t = n.sourceLayer.output;
    else {
        let e = null;
        for (let s = 0; s < n.sourceLayer.inboundNodes.length; ++s)
            for (const o of n.sourceLayer.inboundNodes[s].outputTensors)
                if (o.id === n.id) {
                    e = s;
                    break;
                }
        t = n.sourceLayer.getOutputAt(e);
    }
    return t;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wL = F();
wL.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, gL);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Nf(n, t) {
    return D(() => Ve(at(G(n, n), t, !0)));
}
class Da extends _o {
    getConfig() {
        return {};
    }
}
class zx extends Da {
    constructor(t) {
        super(),
            (this.defaultMaxValue = 2),
            (this.defaultAxis = 0),
            (this.maxValue =
                t.maxValue != null ? t.maxValue : this.defaultMaxValue),
            (this.axis = t.axis != null ? t.axis : this.defaultAxis);
    }
    apply(t) {
        return D(() => {
            const e = Nf(t, this.axis),
                s = fn(e, 0, this.maxValue);
            return G(t, ut(s, U(ue(), e)));
        });
    }
    getConfig() {
        return { maxValue: this.maxValue, axis: this.axis };
    }
}
zx.className = "MaxNorm";
_(zx);
class Px extends Da {
    constructor(t) {
        super(),
            (this.defaultAxis = 0),
            (this.axis = t.axis != null ? t.axis : this.defaultAxis);
    }
    apply(t) {
        return D(() => ut(t, U(ue(), Nf(t, this.axis))));
    }
    getConfig() {
        return { axis: this.axis };
    }
}
Px.className = "UnitNorm";
_(Px);
class Ax extends Da {
    apply(t) {
        return Ts(t);
    }
}
Ax.className = "NonNeg";
_(Ax);
class Ox extends Da {
    constructor(t) {
        super(),
            (this.defaultMinValue = 0),
            (this.defaultMaxValue = 1),
            (this.defaultRate = 1),
            (this.defaultAxis = 0),
            (this.minValue =
                t.minValue != null ? t.minValue : this.defaultMinValue),
            (this.maxValue =
                t.maxValue != null ? t.maxValue : this.defaultMaxValue),
            (this.rate = t.rate != null ? t.rate : this.defaultRate),
            (this.axis = t.axis != null ? t.axis : this.defaultAxis);
    }
    apply(t) {
        return D(() => {
            const e = Nf(t, this.axis),
                s = U(
                    G(this.rate, fn(e, this.minValue, this.maxValue)),
                    G(1 - this.rate, e)
                );
            return G(t, ut(s, U(ue(), e)));
        });
    }
    getConfig() {
        return {
            minValue: this.minValue,
            maxValue: this.maxValue,
            rate: this.rate,
            axis: this.axis,
        };
    }
}
Ox.className = "MinMaxNorm";
_(Ox);
const Ym = {
    maxNorm: "MaxNorm",
    minMaxNorm: "MinMaxNorm",
    nonNeg: "NonNeg",
    unitNorm: "UnitNorm",
};
function he(n) {
    return gf(n);
}
function Qm(n, t = {}) {
    return Ga(n, cn.getMap().classNameMap, t, "constraint");
}
function pe(n) {
    if (n == null) return null;
    if (typeof n == "string") {
        const e = { className: n in Ym ? Ym[n] : n, config: {} };
        return Qm(e);
    } else return n instanceof Da ? n : Qm(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function ao(n) {
    if (n == null) return;
    const t = [],
        e = [],
        s = [];
    for (const o in n) {
        const r = n[o];
        if (typeof r != "number") {
            const i = r;
            t.push(i.data()), e.push(o), s.push(i);
        }
    }
    if (t.length > 0) {
        const o = await Promise.all(t);
        for (let r = 0; r < o.length; ++r) n[e[r]] = o[r][0];
        xt(s);
    }
}
function Xx(n) {
    if (n != null)
        for (const t in n) {
            const e = n[t];
            typeof e != "number" && e.dispose();
        }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var Jm;
(function (n) {
    (n[(n.SILENT = 0)] = "SILENT"), (n[(n.VERBOSE = 1)] = "VERBOSE");
})(Jm || (Jm = {}));
const IL = 125;
class hi {
    constructor() {
        this.validationData = null;
    }
    setParams(t) {
        this.params = t;
    }
    async onEpochBegin(t, e) {}
    async onEpochEnd(t, e) {}
    async onBatchBegin(t, e) {}
    async onBatchEnd(t, e) {}
    async onTrainBegin(t) {}
    async onTrainEnd(t) {}
    // LayersModel needs to call Callback.setModel(), but cannot actually depend
    // on Callback because that creates a cyclic dependency.  Providing this no-op
    // method on BaseCallback breaks the cycle: this way LayersModel can depend on
    // BaseCallback but not on Callback.  The argument is typed as `Container`
    // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback
    // overrides this method and enforces that the argument is really a
    // LayersModel.
    setModel(t) {}
}
class CL {
    // TODO(cais): When the need arises, uncomment the following lines and
    // implement the queue for time values.
    // private deltaTBatch: number;
    // private deltaTsBatchBegin: Array<number>;
    // private deltaTsBatchEnd: Array<number>;
    /**
     * Constructor of CallbackList.
     * @param callbacks Array of `Callback` instances.
     * @param queueLength Queue length for keeping running statistics over
     *   callback execution time.
     */
    constructor(t, e = 10) {
        t == null && (t = []), (this.callbacks = t), (this.queueLength = e);
    }
    append(t) {
        this.callbacks.push(t);
    }
    setParams(t) {
        for (const e of this.callbacks) e.setParams(t);
    }
    setModel(t) {
        for (const e of this.callbacks) e.setModel(t);
    }
    /**
     * Called at the start of an epoch.
     * @param epoch Index of epoch.
     * @param logs Dictionary of logs.
     */
    async onEpochBegin(t, e) {
        e == null && (e = {});
        for (const s of this.callbacks) await s.onEpochBegin(t, e);
    }
    /**
     * Called at the end of an epoch.
     * @param epoch Index of epoch.
     * @param logs Dictionary of logs.
     */
    async onEpochEnd(t, e) {
        e == null && (e = {});
        for (const s of this.callbacks) await s.onEpochEnd(t, e);
    }
    /**
     * Called  right before processing a batch.
     * @param batch Index of batch within the current epoch.
     * @param logs Dictionary of logs.
     */
    async onBatchBegin(t, e) {
        e == null && (e = {});
        for (const s of this.callbacks) await s.onBatchBegin(t, e);
    }
    /**
     * Called at the end of a batch.
     * @param batch Index of batch within the current epoch.
     * @param logs Dictionary of logs.
     */
    async onBatchEnd(t, e) {
        e == null && (e = {});
        for (const s of this.callbacks) await s.onBatchEnd(t, e);
    }
    /**
     * Called at the beginning of training.
     * @param logs Dictionary of logs.
     */
    async onTrainBegin(t) {
        t == null && (t = {});
        for (const e of this.callbacks) await e.onTrainBegin(t);
    }
    /**
     * Called at the end of training.
     * @param logs Dictionary of logs.
     */
    async onTrainEnd(t) {
        t == null && (t = {});
        for (const e of this.callbacks) await e.onTrainEnd(t);
    }
}
class vL extends hi {
    constructor() {
        super();
    }
    async onEpochBegin(t) {
        (this.seen = 0), (this.totals = {});
    }
    async onBatchEnd(t, e) {
        e == null && (e = {});
        const s = e.size == null ? 0 : e.size;
        this.seen += s;
        for (const o in e) {
            const r = e[o];
            if (typeof r == "number")
                this.totals.hasOwnProperty(o) || (this.totals[o] = 0),
                    (this.totals[o] = this.totals[o] + r * s);
            else {
                let i;
                o in this.totals ? (i = this.totals[o]) : (this.totals[o] = 0);
                const a = D(() => U(this.totals[o], G(r, s)));
                (this.totals[o] = a), i != null && i.dispose();
            }
        }
    }
    async onEpochEnd(t, e) {
        if (e != null)
            for (const s of this.params.metrics)
                this.totals[s] != null &&
                    (typeof this.totals[s] == "number"
                        ? (e[s] = this.totals[s] / this.seen)
                        : D(() => {
                              const o = G(ut(1, this.seen), this.totals[s]);
                              (e[s] = o), this.totals[s].dispose(), hn(e[s]);
                          }));
    }
}
class SL extends hi {
    async onTrainBegin(t) {
        (this.epoch = []), (this.history = {});
    }
    async onEpochEnd(t, e) {
        e == null && (e = {}), this.epoch.push(t);
        for (const s in e)
            this.history[s] == null && (this.history[s] = []),
                this.history[s].push(e[s]);
    }
    /**
     * Await the values of all losses and metrics.
     */
    async syncData() {
        const t = [],
            e = [],
            s = [];
        for (const r in this.history) {
            const i = this.history[r];
            for (let a = 0; a < i.length; ++a)
                if (typeof i[a] != "number") {
                    const l = i[a];
                    t.push(l.data()), e.push(r), s.push(a);
                }
        }
        const o = await Promise.all(t);
        for (let r = 0; r < o.length; ++r)
            this.history[e[r]][s[r]].dispose(),
                (this.history[e[r]][s[r]] = o[r][0]);
    }
}
class kL extends hi {
    constructor(t, e) {
        if (
            (super(),
            (this.currentEpoch = 0),
            (this.nowFunc = t.nowFunc),
            (this.nextFrameFunc = t.nextFrameFunc || su),
            (this.yieldEvery = e || "auto"),
            this.yieldEvery === "auto" && (this.yieldEvery = IL),
            this.yieldEvery === "never" && t.onYield != null)
        )
            throw new Error(
                "yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback"
            );
        pl(this.yieldEvery) &&
            (this.maybeWait = zE(
                this.maybeWait.bind(this),
                this.yieldEvery,
                this.nowFunc
            )),
            (this.trainBegin = t.onTrainBegin),
            (this.trainEnd = t.onTrainEnd),
            (this.epochBegin = t.onEpochBegin),
            (this.epochEnd = t.onEpochEnd),
            (this.batchBegin = t.onBatchBegin),
            (this.batchEnd = t.onBatchEnd),
            (this.yield = t.onYield);
    }
    async maybeWait(t, e, s) {
        const o = [];
        this.yield != null && (await ao(s), o.push(this.yield(t, e, s))),
            o.push(this.nextFrameFunc()),
            await Promise.all(o);
    }
    async onEpochBegin(t, e) {
        (this.currentEpoch = t),
            this.epochBegin != null &&
                (await ao(e), await this.epochBegin(t, e));
    }
    async onEpochEnd(t, e) {
        const s = [];
        this.epochEnd != null && (await ao(e), s.push(this.epochEnd(t, e))),
            this.yieldEvery === "epoch" && s.push(this.nextFrameFunc()),
            await Promise.all(s);
    }
    async onBatchBegin(t, e) {
        this.batchBegin != null && (await ao(e), await this.batchBegin(t, e));
    }
    async onBatchEnd(t, e) {
        const s = [];
        this.batchEnd != null && (await ao(e), s.push(this.batchEnd(t, e))),
            this.yieldEvery === "batch"
                ? s.push(this.nextFrameFunc())
                : pl(this.yieldEvery) &&
                  s.push(this.maybeWait(this.currentEpoch, t, e)),
            await Promise.all(s);
    }
    async onTrainBegin(t) {
        this.trainBegin != null && (await ao(t), await this.trainBegin(t));
    }
    async onTrainEnd(t) {
        this.trainEnd != null && (await ao(t), await this.trainEnd(t));
    }
}
function Kx(n, t) {
    return (
        n == null && (n = {}),
        n instanceof hi
            ? [n]
            : Array.isArray(n) && n[0] instanceof hi
            ? n
            : Lt(n).map((s) => new kL(s, t))
    );
}
class wn {
    /**
     * Blocks public access to constructor.
     */
    constructor() {}
    /**
     * Register a tf.LayersModel.fit() callback constructor.
     *
     * The registered callback constructor will be used to instantiate
     * callbacks for every tf.LayersModel.fit() call afterwards.
     *
     * @param verbosityLevel Level of verbosity at which the `callbackConstructor`
     *   is to be reigstered.
     * @param callbackConstructor A no-arg constructor for `tf.Callback`.
     * @throws Error, if the same callbackConstructor has been registered before,
     *   either at the same or a different `verbosityLevel`.
     */
    static registerCallbackConstructor(t, e) {
        C(
            t >= 0 && Number.isInteger(t),
            () =>
                `Verbosity level is expected to be an integer >= 0, but got ${t}`
        ),
            wn.checkForDuplicate(e),
            wn.constructors[t] == null && (wn.constructors[t] = []),
            wn.constructors[t].push(e);
    }
    static checkForDuplicate(t) {
        for (const e in wn.constructors)
            wn.constructors[+e].forEach((o) => {
                if (o === t) throw new E("Duplicate callback constructor.");
            });
    }
    /**
     * Clear all registered callback constructors.
     */
    static clear() {
        wn.constructors = {};
    }
    /**
     * Create callbacks using the registered callback constructors.
     *
     * Given `verbosityLevel`, all constructors registered at that level or above
     * will be called and the instantiated callbacks will be used.
     *
     * @param verbosityLevel: Level of verbosity.
     */
    static createCallbacks(t) {
        const e = [];
        for (const s in wn.constructors) {
            const o = +s;
            t >= o && e.push(...wn.constructors[o]);
        }
        return e.map((s) => new s());
    }
}
wn.constructors = {};
function Zx(n, t, e, s, o, r, i, a, l) {
    const c = new SL(),
        u = [new vL(), ...wn.createCallbacks(t)];
    n != null && u.push(...n), u.push(c);
    const d = new CL(u);
    return (
        d.setParams({
            epochs: e,
            initialEpoch: s,
            samples: o,
            steps: r,
            batchSize: i,
            verbose: t,
            doValidation: a,
            metrics: l,
        }),
        { callbackList: d, history: c }
    );
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function An(n, t = {}, e = !1) {
    return Ga(n, cn.getMap().classNameMap, t, "layer", e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Gl(n, t) {
    return D(() => {
        n.dtype !== "float32" && (n = tt(n, "float32"));
        const e = at(La(n), t, !0),
            s = Ca(e.shape, ue()),
            o = Ve(qs(e, s));
        return ut(n, o);
    });
}
function uu(n, t) {
    return D(() => oe(La(it(t, n)), -1));
}
function Rf(n, t) {
    return D(() => oe(me(it(t, n)), -1));
}
function $f(n, t) {
    return D(() => {
        const e = it(n, t),
            s = fn(me(n), ue(), Number.MAX_VALUE),
            o = me(ut(e, s));
        return G(100, oe(o, -1));
    });
}
function TL(n, t) {
    return D(() => {
        const e = fn(t, ue(), Number.MAX_VALUE),
            s = Nn(U(1, e)),
            o = fn(n, ue(), Number.MAX_VALUE),
            r = Nn(U(1, o));
        return oe(La(it(s, r)), -1);
    });
}
function NL(n, t) {
    return D(() => {
        const e = qs(0, it(1, G(n, t)));
        return oe(La(e), -1);
    });
}
function RL(n, t) {
    return D(() => {
        const e = qs(0, it(1, G(n, t)));
        return oe(e, -1);
    });
}
function $L(n, t) {
    return D(() => {
        const e = at(G(n, t), -1),
            s = Pn(G(it(1, n), t), -1);
        return qs(0, U(1, it(s, e)));
    });
}
function GL(n, t) {
    return D(() => {
        const e = Math.log(2),
            s = it(t, n),
            o = it(U(s, va(G(-2, s))), e);
        return oe(o, -1);
    });
}
function pi(n, t, e = !1) {
    return D(() => {
        if (e) t = $p(t);
        else {
            const s = at(t, t.shape.length - 1, !0);
            t = ut(t, s);
        }
        return (
            (t = fn(t, ue(), 1 - ue())),
            Yt(at(G(tt(n, "float32"), Nn(t)), t.shape.length - 1))
        );
    });
}
function El(n, t, e = !1) {
    return D(() => {
        const s = tt(qc(QE(n)), "int32");
        t = fn(t, ue(), 1 - ue());
        const o = t.shape,
            r = W(a0(s, o[o.length - 1]), o);
        return pi(r, t, e);
    });
}
function EL(n, t) {
    if (!$t(n.shape, t.shape))
        throw new E(
            `logits and labels must have the same shape, but got shapes ${JSON.stringify(
                n.shape
            )} and ${JSON.stringify(t.shape)}`
        );
    return D(() => {
        const e = Ts(t),
            s = Yt(me(t));
        return U(it(e, G(t, n)), hp(mn(s)));
    });
}
function du(n, t) {
    return D(() => {
        let e;
        return (
            (e = fn(t, ue(), 1 - ue())),
            (e = Nn(ut(e, it(1, e)))),
            oe(EL(n, e), -1)
        );
    });
}
function LL(n, t) {
    return D(() => {
        const e = fn(n, ue(), 1),
            s = fn(t, ue(), 1);
        return at(G(n, Nn(ut(e, s))), -1);
    });
}
function ML(n, t) {
    return D(() => {
        const e = Nn(U(ue(), t));
        return oe(it(t, G(n, e)), -1);
    });
}
function Bx(n, t) {
    return D(() => {
        const e = Gl(n, -1),
            s = Gl(t, -1),
            o = G(e, s);
        return Yt(at(o, -1));
    });
}
const Ll = {
    meanSquaredError: uu,
    meanAbsoluteError: Rf,
    meanAbsolutePercentageError: $f,
    meanSquaredLogarithmicError: TL,
    squaredHinge: NL,
    hinge: RL,
    categoricalHinge: $L,
    logcosh: GL,
    categoricalCrossentropy: pi,
    sparseCategoricalCrossentropy: El,
    binaryCrossentropy: du,
    kullbackLeiblerDivergence: LL,
    poisson: ML,
    cosineProximity: Bx,
};
function Fu(n) {
    if (typeof n == "string") {
        if (n in Ll) return Ll[n];
        let t = `Unknown loss ${n}`;
        throw (
            (n.toLowerCase().includes("softmaxcrossentropy") &&
                (t = `Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),
            new E(t))
        );
    } else return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Hx(n, t) {
    return D(() => {
        const e = G(0.5, Rn(t)),
            s = es(rn(t, e), n.dtype);
        return oe(Tn(n, s), -1);
    });
}
function _x(n, t) {
    return D(() => es(Tn(ai(n, -1), ai(t, -1)), "float32"));
}
function Ux(n, t) {
    return D(() => tt(at(ss(Tn(n, 1), Tn(t, 1))), "float32"));
}
function WL(n, t) {
    return D(() => tt(at(ss(Tn(n, 1), Tn(t, 0))), "float32"));
}
function DL(n, t) {
    return D(() => tt(at(ss(Tn(n, 0), Tn(t, 1))), "float32"));
}
function FL(n, t) {
    return D(() => {
        const e = Ux(n, t),
            s = DL(n, t),
            o = U(e, s);
        return tt(Ee(rn(o, 0), ut(e, o), 0), "float32");
    });
}
function DQ(n, t) {
    return D(() => {
        const e = Ux(n, t),
            s = WL(n, t),
            o = U(e, s);
        return tt(Ee(rn(o, 0), ut(e, o), 0), "float32");
    });
}
function VL(n, t) {
    return du(n, t);
}
function zL(n, t) {
    return (
        n.rank === t.rank && (n = ka(n, [n.rank - 1])),
        (t = ai(t, -1)),
        t.dtype !== n.dtype && (t = tt(t, n.dtype)),
        tt(Tn(n, t), "float32")
    );
}
const PL = uu,
    AL = uu,
    OL = Rf,
    XL = Rf,
    KL = $f,
    ZL = $f,
    Yx = pi,
    BL = Bx,
    Qx = El,
    Ml = {
        binaryAccuracy: Hx,
        categoricalAccuracy: _x,
        precision: FL,
        categoricalCrossentropy: Yx,
        sparseCategoricalCrossentropy: Qx,
        mse: PL,
        MSE: AL,
        mae: OL,
        MAE: XL,
        mape: KL,
        MAPE: ZL,
        cosine: BL,
    };
function HL(n) {
    if (typeof n == "string" && n in Ml) return Ml[n];
    if (typeof n != "string" && n != null) return n;
    throw new E(`Unknown metric ${n}`);
}
function Ua(n) {
    if ((Jn(n !== null, `Unknown LossOrMetricFn ${n}`), typeof n == "string"))
        return n;
    {
        let t;
        for (const e of Object.keys(Ll))
            if (Ll[e] === n) {
                t = e;
                break;
            }
        if (t !== void 0) return t;
        for (const e of Object.keys(Ml))
            if (Ml[e] === n) {
                t = e;
                break;
            }
        return t !== void 0 ? t : n.name;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function _L(n) {
    const t = {
        Adagrad: () => tr.adagrad(0.01),
        Adadelta: () => tr.adadelta(1, 0.95, ue()),
        Adam: () => tr.adam(1e-3, 0.9, 0.999, ue()),
        Adamax: () => tr.adamax(2e-3, 0.9, 0.999, ue(), 0),
        RMSProp: () => tr.rmsprop(1e-3, 0.9, 0, ue()),
        SGD: () => tr.sgd(0.01),
    };
    if (
        ((t.adagrad = t.Adagrad),
        (t.adadelta = t.Adadelta),
        (t.adam = t.Adam),
        (t.adamax = t.Adamax),
        (t.rmsprop = t.RMSProp),
        (t.sgd = t.SGD),
        n in t)
    )
        return t[n]();
    throw new E(`Unknown Optimizer ${n}`);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const jm = 1 * 1024 * 1024;
function qm(n, t, e = !1) {
    if (
        n == null ||
        typeof n != "object" ||
        Object.getPrototypeOf(n) !== Object.prototype ||
        !Ld(n)
    )
        throw new Error(
            "User-defined metadata is expected to be a JSON object, but is not."
        );
    if (e) {
        const s = JSON.stringify(n);
        s.length > jm &&
            console.warn(
                `User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${jm}.`
            );
    }
}
function Ld(n) {
    if (n === null) return !0;
    if (typeof n == "object")
        if (Object.getPrototypeOf(n) === Object.prototype) {
            const t = Object.keys(n);
            for (const e of t) if (typeof e != "string" || !Ld(n[e])) return !1;
            return !0;
        } else if (Array.isArray(n)) {
            for (const t of n) if (!Ld(t)) return !1;
            return !0;
        } else return !1;
    else {
        const t = typeof n;
        return t === "string" || t === "number" || t === "boolean";
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function UL(n, t, e, s = console.log) {
    const o = QL(n),
        r = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
    o
        ? ((t = t || 90), (e = e || [0.32, 0.61, 0.89, 1]))
        : ((t = t || 115), (e = e || [0.24, 0.48, 0.7, 0.8, 1])),
        e[e.length - 1] <= 1 && (e = e.map((u) => Math.floor(t * u)));
    let i;
    if (!o) {
        r.push("Receives inputs"), (i = []);
        for (const u in n.nodesByDepth) i.push(...n.nodesByDepth[u]);
    }
    s("_".repeat(t)), Wl(r, e, s), s("=".repeat(t));
    const a = n.layers;
    for (let u = 0; u < a.length; ++u)
        o ? JL(a[u], e, s) : jL(a[u], e, i, s),
            s((u === a.length - 1 ? "=" : "_").repeat(t));
    n.checkTrainableWeightsConsistency();
    const l = YL(n),
        c = Nl(n.nonTrainableWeights);
    s(`Total params: ${l + c}`),
        s(`Trainable params: ${l}`),
        s(`Non-trainable params: ${c}`),
        s("_".repeat(t));
}
function YL(n) {
    let t;
    return (
        n.collectedTrainableWeights != null
            ? (t = Nl(n.collectedTrainableWeights))
            : (t = Nl(n.trainableWeights)),
        t
    );
}
function QL(n) {
    let t = !0;
    const e = [],
        s = [];
    for (const o in n.nodesByDepth) e.push(n.nodesByDepth[o]);
    for (const o of e) {
        if (o.length > 1 || (o.length === 1 && o[0].inboundLayers.length > 1)) {
            t = !1;
            break;
        }
        s.push(...o);
    }
    if (t)
        for (const o of n.layers) {
            let r = !1;
            for (const i of o.inboundNodes)
                if (s.indexOf(i) !== -1)
                    if (r) {
                        t = !1;
                        break;
                    } else r = !0;
            if (!t) break;
        }
    return t;
}
function Wl(n, t, e = console.log) {
    let s = "";
    for (let o = 0; o < n.length; ++o)
        o > 0 && (s = s.slice(0, s.length - 1) + " "),
            (s += n[o]),
            (s = s.slice(0, t[o])),
            (s += " ".repeat(t[o] - s.length));
    e(s);
}
function JL(n, t, e) {
    let s, o;
    try {
        o = n.inboundNodes.map((l) => JSON.stringify(l.inputShapes)).join(",");
    } catch {
        o = "multiple";
    }
    try {
        s = JSON.stringify(n.outputShape);
    } catch {
        s = "multiple";
    }
    const r = n.name,
        i = n.getClassName(),
        a = [`${r} (${i})`, o, s, n.countParams().toString()];
    Wl(a, t, e);
}
function jL(n, t, e, s) {
    let o, r;
    try {
        r = n.inboundNodes.map((d) => JSON.stringify(d.inputShapes)).join(",");
    } catch {
        r = "multiple";
    }
    try {
        o = JSON.stringify(n.outputShape);
    } catch {
        o = "multiple";
    }
    const i = [];
    for (const d of n.inboundNodes)
        if (!(e != null && e.length > 0 && e.indexOf(d) === -1))
            for (let h = 0; h < d.inboundLayers.length; ++h) {
                const p = d.inboundLayers[h].name,
                    f = d.nodeIndices[h],
                    m = d.tensorIndices[h];
                i.push(`${p}[${f}][${m}]`);
            }
    const a = n.name,
        l = n.getClassName(),
        c = i.length === 0 ? "" : i[0],
        u = [`${a} (${l})`, r, o, n.countParams().toString(), c];
    Wl(u, t, s);
    for (let d = 1; d < i.length; ++d) Wl(["", "", "", "", i[d]], t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Jx(n, t, e) {
    return (
        (n === "inboundNodes" || n === "outputLayers" || n === "inputLayers") &&
        t === 0 &&
        typeof e == "string"
    );
}
function fi(n, t) {
    if (n === null) return null;
    if (typeof n == "string") return ho(n);
    if (typeof n == "number" || typeof n == "boolean") return n;
    if (n instanceof Array) {
        const e = [],
            s = n.length;
        for (let o = 0; o < s; ++o) {
            const r = n[o];
            Jx(t, o, r) ? e.push(r) : e.push(fi(r, t));
        }
        return e;
    } else {
        const e = {};
        for (const s of Object.keys(n)) {
            const o = n[s];
            if (s === "name" && typeof o == "string") e[s] = o;
            else {
                const r = ho(s);
                e[r] = fi(o, r);
            }
        }
        return e;
    }
}
function Md(n, t) {
    if (n == null) return null;
    if (typeof n == "string") return us(n);
    if (typeof n == "number" || typeof n == "boolean") return n;
    if (n instanceof Array) {
        const e = [],
            s = n.length;
        for (let o = 0; o < s; ++o) {
            const r = n[o];
            Jx(t, o, r) ? e.push(r) : e.push(Md(r, t));
        }
        return e;
    } else {
        const e = {};
        for (const s of Object.keys(n)) {
            const o = n[s],
                r = us(s);
            (s === "name" || s === "className") && typeof o == "string"
                ? (e[r] = o)
                : (e[r] = Md(o, s));
        }
        return e;
    }
}
/** @license See the LICENSE file. */
const jx = "4.16.0";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const qL = (n) => {
    const t = Object.keys(n);
    if (t.length === 0) return !1;
    const e = t[0].split("/");
    return !isNaN(parseInt(e[e.length - 1], 10));
};
class Wn extends St {
    constructor(t) {
        if (
            (super({}),
            (this.containerNodes = /* @__PURE__ */ new Set()),
            (this.name = t.name),
            this.name == null)
        ) {
            const x = this.getClassName().toLowerCase();
            this.name = au(x);
        }
        if (
            ((this.supportsMasking = !1),
            (this.trainable_ = !0),
            Array.isArray(t.inputs)
                ? (this.inputs = t.inputs.slice())
                : (this.inputs = [t.inputs]),
            Array.isArray(t.outputs)
                ? (this.outputs = t.outputs.slice())
                : (this.outputs = [t.outputs]),
            Ps(this.inputs).length !== this.inputs.length)
        )
            throw new E(
                `The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(
                    (x) => x.name
                )}`
            );
        Ps(this.outputs).length !== this.outputs.length &&
            console.warn(
                `The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(
                    (x) => x.name
                )}`
            ),
            (this.inputLayers = []),
            (this.inputLayersNodeIndices = []),
            (this.inputLayersTensorIndices = []),
            (this.outputLayers = []),
            (this.outputLayersNodeIndices = []),
            (this.outputLayersTensorIndices = []),
            (this.layers = []),
            (this.internalContainerRefs = []);
        for (const x of this.outputs) {
            const w = x.sourceLayer,
                y = x.nodeIndex,
                I = x.tensorIndex;
            this.outputLayers.push(w),
                this.outputLayersNodeIndices.push(y),
                this.outputLayersTensorIndices.push(I);
        }
        for (const x of this.inputs) {
            const w = x.sourceLayer,
                y = x.nodeIndex,
                I = x.tensorIndex;
            Jn(y === 0, "input layer has >1 nodes"),
                Jn(I === 0, "input layer has >1 tensors"),
                this.inputLayers.push(w),
                this.inputLayersNodeIndices.push(y),
                this.inputLayersTensorIndices.push(I);
        }
        (this.inputNames = []),
            (this.outputNames = []),
            (this.feedInputShapes = []),
            (this.feedInputNames = []),
            (this.feedOutputNames = []);
        for (let x = 0; x < this.inputLayers.length; x++) {
            const w = this.inputLayers[x];
            if (!(w instanceof Wa))
                throw new TypeError(
                    `Input layers to a LayersModel must be InputLayer objects. Received inputs: ${
                        t.inputs
                    }. Input ${x} (0-based) originates from layer type ${w.getClassName()}.`
                );
            this.inputNames.push(w.name),
                this.feedInputShapes.push(w.batchInputShape),
                this.feedInputNames.push(w.name);
        }
        for (const x of this.outputLayers) this.outputNames.push(x.name);
        (this.internalInputShapes = this.inputs.map((x) => x.shape)),
            (this.internalOutputShapes = this.outputs.map((x) => x.shape));
        const e = {},
            s = {},
            o = {},
            r = {},
            i = {},
            a = [],
            l = (x, w, y, I, v, k) => {
                (I == null || v == null || k == null) &&
                    ((I = x.sourceLayer),
                    (v = x.nodeIndex),
                    (k = x.tensorIndex));
                const S = I.inboundNodes[v];
                if (y.indexOf(S) !== -1)
                    throw new Sn(
                        `The tensor ${x.name} at layer "${I.name}" is part of a cycle.`
                    );
                if (w.indexOf(S) !== -1) return;
                this.containerNodes.add(Wn.nodeKey(I, v)),
                    I.id in i || (i[I.id] = Object.keys(i).length),
                    y.indexOf(S) === -1 && y.push(S);
                const N = S.inboundLayers.length;
                for (let R = 0; R < N; R++) {
                    const M = S.inputTensors[R],
                        V = S.inboundLayers[R],
                        z = S.nodeIndices[R],
                        P = S.tensorIndices[R];
                    l(M, w, y, V, z, P);
                }
                for (w.push(S); y.indexOf(S) >= 0; ) y.splice(y.indexOf(S), 1);
                a.push(S);
            },
            c = [],
            u = [];
        for (const x of this.outputs) l(x, c, u);
        const d = a.slice().reverse();
        for (const x of d) {
            (s[x.id] = x), x.id in e || (e[x.id] = 0);
            let w = e[x.id];
            const y = o[x.outboundLayer.id] == null ? 0 : o[x.outboundLayer.id];
            (w = Math.max(w, y)),
                (o[x.outboundLayer.id] = w),
                (r[x.outboundLayer.id] = x.outboundLayer),
                (e[x.id] = w);
            for (let I = 0; I < x.inboundLayers.length; I++) {
                const v = x.inboundLayers[I],
                    k = x.nodeIndices[I],
                    S = v.inboundNodes[k],
                    N = e[S.id] == null ? 0 : e[S.id];
                (e[S.id] = Math.max(w + 1, N)), (s[S.id] = S);
            }
        }
        const h = {};
        for (const x in e) {
            const w = e[x];
            w in h || (h[w] = []), h[w].push(s[x]);
        }
        const p = {};
        for (const x in o) {
            const w = o[x];
            w in p || (p[w] = []), p[w].push(r[x]);
        }
        let f = Object.keys(p)
            .map((x) => parseInt(x, 10))
            .sort(Ba);
        this.layers = [];
        for (const x of f) {
            const w = p[x];
            w.sort((y, I) => {
                const v = i[y.id],
                    k = i[I.id];
                return v < k ? -1 : v > k ? 1 : 0;
            });
            for (const y of w)
                y instanceof Wn && this.internalContainerRefs.push(y),
                    this.layers.push(y);
        }
        (this.layersByDepth = p),
            (f = Object.keys(h)
                .map((x) => parseInt(x, 10))
                .sort(Ba));
        const m = this.inputs.slice(),
            g = [];
        for (const x of f)
            for (const w of h[x]) {
                const y = w.outboundLayer;
                if (y != null) {
                    for (const I of w.inputTensors)
                        if (m.indexOf(I) === -1)
                            throw new Sn(
                                `Graph disconnected: cannot obtain value for tensor ${I} at layer "${y.name}". The following previous layers were accessed without issue: ${g}`
                            );
                    for (const I of w.outputTensors) m.push(I);
                    g.push(y.name);
                }
            }
        this.nodesByDepth = h;
        const b = this.layers.map((x) => x.name);
        for (const x of b) {
            const w = b.filter((y) => y === x).length;
            if (w !== 1)
                throw new Sn(
                    `The name "${x}" is used ${w} times in the model. All layer names should be unique. Layer names: ` +
                        JSON.stringify(b)
                );
        }
        (this.outboundNodes = []),
            (this.inboundNodes = []),
            new cu({
                outboundLayer: this,
                inboundLayers: [],
                nodeIndices: [],
                tensorIndices: [],
                inputTensors: this.inputs,
                outputTensors: this.outputs,
                inputMasks: this.inputs.map((x) => null),
                outputMasks: this.outputs.map((x) => null),
                inputShapes: this.inputs.map((x) => x.shape),
                outputShapes: this.outputs.map((x) => x.shape),
            }),
            (this.built = !0),
            (this._refCount = 1);
    }
    assertNotDisposed() {
        if (this._refCount === 0)
            throw new Error(`Container '${this.name}' is already disposed.`);
    }
    /**
     * Attempt to dispose a LayersModel's weights.
     *
     * This method decrease the reference count of the LayersModel object by 1.
     *
     * A LayersModel is reference-counted. Its reference count is incremented by 1
     * when it is first constructed and when it is used as a Layer of another
     * LayersModel.
     *
     * If the reference count of a LayersModel becomes 0, the `dispose` method of
     * all its constituent `Layer`s will be called.
     *
     * Note: If the reference count is greater than 0 after the decrement, the
     * `dispose` method of its constituent `Layer`s will *not* be called.
     *
     * After a LayersModel is disposed, it cannot be used in calls such as
     * 'predict`, `evaluate` or `fit` anymore.
     *
     * @returns A DisposeResult Object with the following fields:
     *   - refCountAfterDispose: The reference count of the LayersModel after this
     *     `dispose()` call.
     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
     *     during this `dispose()` call.
     * @throws {Error} If the layer is not built yet, or if the LayersModel has
     *   already been disposed.
     */
    dispose() {
        this.assertNotDisposed();
        const t = { refCountAfterDispose: null, numDisposedVariables: 0 };
        if (--this._refCount === 0) {
            for (const e of this.layers)
                t.numDisposedVariables += e.dispose().numDisposedVariables;
            for (const e of this.internalContainerRefs)
                t.numDisposedVariables += e.dispose().numDisposedVariables;
        }
        return (t.refCountAfterDispose = this._refCount), t;
    }
    get trainable() {
        return this.trainable_;
    }
    set trainable(t) {
        this.layers.forEach((e) => {
            e._trainableWeights.forEach((s) => (s.trainable = t));
        }),
            (this.trainable_ = t);
    }
    get trainableWeights() {
        if (this._trainableWeights.length > 0)
            throw new E(
                "Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array."
            );
        if (!this.trainable) return [];
        let t = [];
        for (const e of this.layers) t = t.concat(e.trainableWeights);
        return t;
    }
    get nonTrainableWeights() {
        const t = [];
        for (const e of this.layers) t.push(...e.nonTrainableWeights);
        if (!this.trainable) {
            const e = [];
            for (const s of this.layers) e.push(...s.trainableWeights);
            return e.concat(t);
        }
        return t;
    }
    get weights() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
    }
    /**
     * Loads all layer weights from a JSON object.
     *
     * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /
     *   TypeScript. The utility script at `scripts/pykeras.py` offers means
     *   to convert them into JSON strings compatible with this method.
     * Porting Note: TensorFlow.js Layers supports only loading by name currently.
     *
     * @param weights A JSON mapping weight names to weight values as nested
     *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight
     *   names to `tf.Tensor` objects.
     * @param strict Require that the provided weights exactly match those
     *   required by the container.  Default: `true`.  Passing `false` means that
     *   extra weights and missing weights will be silently ignored.
     */
    loadWeights(t, e = !0) {
        const s = {};
        let o = 0;
        const r = qL(t);
        r && this.parseWeights(t);
        for (const a of this.layers)
            for (const [l, c] of a.weights.entries()) {
                const u = r
                    ? `${c.name.split("/").slice(0, -1).join("/") + "/"}${l}`
                    : c.originalName;
                if (s[u] != null) throw new E(`Duplicate weight name: ${u}`);
                (s[u] = c), o++;
            }
        const i = [];
        for (const a in t) {
            let l = a;
            if (s[a] == null) {
                const c = a.split("/");
                l = c
                    .slice(0, -2)
                    .concat([c[c.length - 1]])
                    .join("/");
            }
            if (s[l] != null) i.push([s[l], t[a]]);
            else if (e)
                throw new E(
                    `Provided weight data has no target variable: ${a}`
                );
            delete s[l];
        }
        if (e) {
            const a = [];
            for (const l in s) a.push(l);
            if (a.length > 0)
                throw new E(`${a.length} of ${o} weights are not set: ${a}`);
        }
        Tf(i);
    }
    parseWeights(t) {
        for (const e in Object.keys(t)) {
            const s = e.split("/"),
                o = ["vars", "layer_checkpoint_dependencies"],
                r = s
                    .map((i) => (i.startsWith("_") ? i.slice(1) : i))
                    .filter((i) => !o.includes(i))
                    .join("/");
            r !== e && ((t[r] = t[e]), delete t[e]);
        }
    }
    /**
     * Util shared between different serialization methods.
     * @returns LayersModel config with Keras version information added.
     */
    updatedConfig() {
        const t = this.getConfig(),
            e = {};
        return (
            (e.className = this.getClassName()),
            (e.config = t),
            (e.kerasVersion = `tfjs-layers ${jx}`),
            (e.backend = "TensorFlow.js"),
            e
        );
    }
    /**
     * Returns a JSON string containing the network configuration.
     *
     * To load a network from a JSON save file, use
     * models.modelFromJSON(jsonString);
     * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras
     * @param returnString Whether the return value should be stringified
     *    (default: `true`).
     * @returns a JSON string if `returnString` (default), or a JSON object if
     *   `!returnString`.
     */
    // tslint:disable-next-line:no-any
    toJSON(t, e = !0) {
        const s = Md(this.updatedConfig());
        return e ? JSON.stringify(s) : s;
    }
    /**
     * Call the model on new inputs.
     *
     * In this case `call` just reapplies all ops in the graph to the new inputs
     * (e.g. build a new computational graph from the provided inputs).
     *
     * @param inputs A tensor or list of tensors.
     * @param mask A mask or list of masks. A mask can be either a tensor or null
     *   (no mask).
     *
     * @return A tensor if there is a single output, or a list of tensors if there
     *   are more than one outputs.
     */
    call(t, e) {
        return D(() => {
            t = Lt(t);
            const s = new Ds();
            for (let o = 0; o < this.inputs.length; ++o)
                s.add(this.inputs[o], t[o]);
            return Yr(this.outputs, s, e);
        });
    }
    /**
     * Computes an output mask tensor.
     *
     * @param inputs Tensor or list of tensors.
     * @param mask Tensor or list of tensors.
     *
     * @return null or a tensor (or list of tensors, one per output tensor of the
     * layer).
     */
    computeMask(t, e) {
        return D(() => {
            t = Lt(t);
            let s;
            return (
                e == null ? (s = Wo(null, t.length)) : (s = Lt(e)),
                this.runInternalGraph(t, s)[1]
            );
        });
    }
    /**
     * Computes the output shape of the layer.
     *
     * Assumes that the layer will be built to match that input shape provided.
     *
     * @param inputShape A shape (tuple of integers) or a list of shape tuples
     *   (one per output tensor of the layer). Shape tuples can include null for
     *   free dimensions, instead of an integer.
     */
    computeOutputShape(t) {
        const e = Tl(t);
        if (e.length !== this.inputLayers.length)
            throw new E(
                `Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`
            );
        const s = {};
        for (let a = 0; a < e.length; a++) {
            const l = this.inputLayers[a],
                c = e[a],
                u = l.name + "_0_0";
            s[u] = c;
        }
        const o = Object.keys(this.nodesByDepth)
            .map((a) => parseInt(a, 10))
            .sort(Ba);
        if (o.length > 1)
            for (const a of o) {
                const l = this.nodesByDepth[a];
                for (const c of l) {
                    const u = c.outboundLayer;
                    if (this.inputLayers.map((m) => m.id).indexOf(u.id) !== -1)
                        continue;
                    const d = [];
                    for (let m = 0; m < c.inboundLayers.length; m++) {
                        const g = c.inboundLayers[m],
                            b = c.nodeIndices[m],
                            x = c.tensorIndices[m],
                            w = `${g.name}_${b}_${x}`,
                            y = s[w];
                        d.push(y);
                    }
                    const h = u.computeOutputShape(Xe(d)),
                        p = Tl(h),
                        f = u.inboundNodes.indexOf(c);
                    for (let m = 0; m < p.length; m++) {
                        const g = `${u.name}_${f}_${m}`;
                        s[g] = p[m];
                    }
                }
            }
        const r = [],
            i = [];
        for (let a = 0; a < this.outputLayers.length; a++) {
            const l = this.outputLayers[a],
                c = this.outputLayersNodeIndices[a],
                u = this.outputLayersTensorIndices[a],
                d = `${l.name}_${c}_${u}`;
            i.push(d);
        }
        for (let a = 0; a < i.length; a++) {
            const l = i[a];
            Jn(l in s), r.push(s[l]);
        }
        return Xe(r);
    }
    /**
     * Computes output tensors for new inputs.
     *
     * Note:
     *   - Expects `inputs` to be a list (potentially with 1 element).
     *
     * @param inputs List of tensors
     * @param masks List of masks (tensors or null).
     * @return Three lists: outputTensors, outputMasks, outputShapes
     */
    runInternalGraph(t, e) {
        e == null && (e = Wo(null, t.length));
        const s = {};
        for (let l = 0; l < this.inputs.length; ++l) {
            const c = this.inputs[l],
                u = t[l],
                d = e[l];
            s[c.id] = [u, d];
        }
        const o = Object.keys(this.nodesByDepth)
            .map((l) => parseInt(l, 10))
            .sort(Ba);
        for (const l of o) {
            const c = this.nodesByDepth[l];
            for (const u of c) {
                const d = u.outboundLayer,
                    h = u.inputTensors,
                    p = u.outputTensors,
                    f = new Array();
                for (const m of h) m.id in s && f.push(s[m.id]);
                if (f.length === h.length) {
                    let m = {},
                        g,
                        b,
                        x,
                        w;
                    if (
                        (u.callArgs != null && (m = u.callArgs), f.length === 1)
                    ) {
                        const [y, I] = f[0];
                        m.mask == null && (m.mask = I),
                            (x = Lt(d.call(y, m))),
                            (w = Lt(d.computeMask(y, I))),
                            (g = [y]),
                            (b = [I]);
                    } else
                        (g = f.map((y) => y[0])),
                            (b = f.map((y) => y[1])),
                            m.mask == null && (m.mask = b),
                            (x = Lt(d.call(g, m))),
                            (w = Lt(d.computeMask(g, b)));
                    if (d.activityRegularizer)
                        throw new yt(
                            "LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet."
                        );
                    for (let y = 0; y < p.length; ++y) {
                        const I = p[y],
                            v = x[y],
                            k = w[y];
                        s[I.id] = [v, k];
                    }
                }
            }
        }
        const r = [],
            i = [],
            a = [];
        for (const l of this.outputs) {
            Jn(l.id in s, `Could not compute output ${l.name} : ${l.id}`);
            const [c, u] = s[l.id];
            a.push(c.shape), r.push(c), i.push(u);
        }
        return [r, i, a];
    }
    /**
     * Builds a map of internal node keys to node ordering.
     * Used in serializaion a node orderings may change as unused nodes are
     * dropped. Porting Note:  This helper method was pulled out of getConfig to
     * improve readability.
     * @param layers An array of Layers in the model.
     * @returns Map of Node Keys to index order within the layer.
     */
    buildNodeConversionMap(t) {
        const e = {};
        let s;
        for (const o of this.layers) {
            s = o instanceof Wn ? 1 : 0;
            for (let r = 0; r < o.inboundNodes.length; r++) {
                const i = Wn.nodeKey(o, r);
                this.containerNodes.has(i) && ((e[i] = s), (s += 1));
            }
        }
        return e;
    }
    getLayer(t, e) {
        if (e != null) return this.findLayer(e);
        if (t == null)
            throw new E("Provide either a layer name or layer index");
        if (typeof t == "number") return this.findLayer(t);
        for (const s of this.layers) if (s.name === t) return s;
        throw new E(`No such layer: ${t}`);
    }
    findLayer(t) {
        if (this.layers.length <= t)
            throw new E(
                `Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`
            );
        return this.layers[t];
    }
    /**
     * Retrieves the Container's current loss values.
     *
     * Used for regularizers during training.
     */
    calculateLosses() {
        return D(() => {
            const t = [];
            for (const e of this.layers)
                for (let s = 0; s < e.inboundNodes.length; ++s) {
                    const o = Wn.nodeKey(e, s);
                    this.containerNodes.has(o) &&
                        t.push(...e.calculateLosses());
                }
            return t;
        });
    }
    getConfig() {
        const t = { name: this.name },
            e = this.buildNodeConversionMap(this.layers),
            s = [];
        for (const i of this.layers) {
            const a = i.getClassName(),
                l = i.getConfig(),
                c = [];
            for (let d = 0; d < i.inboundNodes.length; d++) {
                const h = i.inboundNodes[d],
                    p = Wn.nodeKey(i, d);
                let f = {};
                if (this.containerNodes.has(p)) {
                    if (h.callArgs)
                        try {
                            JSON.stringify(h.callArgs), (f = h.callArgs);
                        } catch {
                            console.warn(
                                `Layer ${i.name} was passed non-serializable keyword arguments: ${h.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`
                            ),
                                (f = {});
                        }
                    if (h.inboundLayers.length > 0) {
                        const m = [];
                        for (let g = 0; g < h.inboundLayers.length; g++) {
                            const b = h.inboundLayers[g],
                                x = h.nodeIndices[g],
                                w = h.tensorIndices[g],
                                y = Wn.nodeKey(b, x);
                            let I = e[y];
                            I == null && (I = 0), m.push([b.name, I, w, f]);
                        }
                        c.push(m);
                    }
                }
            }
            const u = {};
            (u.name = i.name),
                (u.className = a),
                (u.config = l),
                (u.inboundNodes = c),
                s.push(u);
        }
        t.layers = s;
        const o = [];
        for (let i = 0; i < this.inputLayers.length; i++) {
            const a = this.inputLayers[i],
                l = this.inputLayersNodeIndices[i],
                c = Wn.nodeKey(a, l);
            if (!this.containerNodes.has(c)) continue;
            let u = e[c];
            u == null && (u = 0);
            const d = this.inputLayersTensorIndices[i];
            o.push([a.name, u, d]);
        }
        t.inputLayers = o;
        const r = [];
        for (let i = 0; i < this.outputLayers.length; i++) {
            const a = this.outputLayers[i],
                l = this.outputLayersNodeIndices[i],
                c = Wn.nodeKey(a, l);
            if (!this.containerNodes.has(c)) continue;
            let u = e[c];
            u == null && (u = 0);
            const d = this.outputLayersTensorIndices[i];
            r.push([a.name, u, d]);
        }
        return (t.outputLayers = r), t;
    }
    /**
     * Instantiates a LayersModel from its config (output of `get_config()`).
     * @param cls the class to create
     * @param config LayersModel config dictionary.
     * @param customObjects An optional dictionary of custom objects.
     * @param fastWeightInit Optional flag to use fast weight initialization
     *   during deserialization. This is applicable to cases in which
     *   the initialization will be immediately overwritten by loaded weight
     *   values. Default: `false`.
     * @returns A LayersModel instance.
     * @throws ValueError: In case of improperly formatted config dict.
     */
    /** @nocollapse */
    static fromConfig(t, e, s = {}, o = !1) {
        const r = {},
            i = {};
        function a(g, b) {
            g.name in i ? i[g.name].push(b) : (i[g.name] = [b]);
        }
        function l(g, b) {
            const x = [];
            let w;
            for (const y of b) {
                const I = y[0],
                    v = y[1],
                    k = y[2];
                if (((w = y[3] == null ? {} : y[3]), !(I in r))) {
                    a(g, b);
                    return;
                }
                const S = r[I];
                if (S.inboundNodes.length <= v) {
                    a(g, b);
                    return;
                }
                const N = S.inboundNodes[v];
                x.push(N.outputTensors[k]);
            }
            x.length > 0 && g.apply(Xe(x), w);
        }
        function c(g) {
            const b = g.name,
                x = An(g, e.customObjects != null ? e.customObjects : {});
            x.setFastWeightInitDuringBuild(o),
                (r[b] = x),
                g.inboundNodes.forEach((y) => {
                    if (!(y instanceof Array))
                        throw new E(
                            `Corrupted configuration, expected array for nodeData: ${y}`
                        );
                    a(x, y);
                });
        }
        const u = e.name,
            d = e.layers;
        for (const g of d) c(g);
        for (; !VE(i); )
            for (const g of d) {
                const b = r[g.name];
                if (b.name in i) {
                    const x = i[b.name];
                    delete i[b.name];
                    for (const w of x) l(b, w);
                }
            }
        const h = [],
            p = [],
            f = e.inputLayers;
        for (const g of f) {
            const b = g[0],
                x = g[1],
                w = g[2];
            Jn(b in r);
            const I = r[b].inboundNodes[x].outputTensors;
            h.push(I[w]);
        }
        const m = e.outputLayers;
        for (const g of m) {
            const b = g[0],
                x = g[1],
                w = g[2];
            Jn(b in r);
            const I = r[b].inboundNodes[x].outputTensors;
            p.push(I[w]);
        }
        return new t({ inputs: h, outputs: p, name: u });
    }
    /**
     * Determine whether the container is stateful.
     *
     * Porting Note: this is the equivalent of the stateful @property of
     *   the Container class in PyKeras.
     */
    get stateful() {
        if (this._stateful)
            throw new E(
                "Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false."
            );
        for (const t of this.layers) if (t.stateful) return !0;
        return !1;
    }
    /**
     * Reset the state of all stateful constituent layers (if any).
     *
     * Examples of stateful layers include RNN layers whose `stateful` property
     * is set as `true`.
     */
    resetStates() {
        D(() => {
            this.layers.forEach((t) => {
                t.stateful && t.resetStates();
            });
        });
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function t3(n, t, e) {
    const s = t.length;
    if (n == null || (Array.isArray(n) && n.length === 0))
        return t.map((o) => null);
    if (s === 1)
        return Array.isArray(n) && n.length === 1
            ? n
            : typeof n == "object" && t[0] in n
            ? [n[t[0]]]
            : [n];
    if (Array.isArray(n)) {
        if (n.length !== s)
            throw new Error(
                `Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`
            );
        return n;
    } else if (
        typeof n == "object" &&
        Object.keys(n).length > 0 &&
        typeof n[Object.keys(n)[0]] == "object"
    ) {
        const o = [];
        return (
            t.forEach((r) => {
                r in n ? o.push(n[r]) : o.push(null);
            }),
            o
        );
    } else
        throw new Error(
            `The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(
                n
            )}`
        );
}
function qx(n, t) {
    return t3(n, t, "classWeight");
}
async function ty(n, t, e, s) {
    if (t != null || s != null)
        throw new Error("Support sampleWeight is not implemented yet");
    if (e != null) {
        const o = D(() => {
                if (n.shape.length === 1) return yo(n);
                if (n.shape.length === 2) {
                    if (n.shape[1] > 1) return ai(n, 1);
                    if (n.shape[1] === 1) return W(n, [n.shape[0]]);
                    throw new Error(
                        `Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`
                    );
                } else
                    throw new Error(
                        `Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`
                    );
            }),
            r = Array.from(await o.data());
        xt(o);
        const i = [];
        return (
            r.forEach((a) => {
                if (e[a] == null)
                    throw new Error(
                        `classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`
                    );
                i.push(e[a]);
            }),
            Ze(i, "float32")
        );
    } else return null;
}
function e3(n, t) {
    return G(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const n3 = 32;
function ey(n, t) {
    let e, s;
    const o = t;
    (e = o.xs),
        (s = o.ys),
        C(
            e != null && s != null,
            () =>
                `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`
        );
    const r = tg("input", n.inputNames, e),
        i = tg("output", n.outputNames, s),
        a = r[0].shape[0];
    C(
        r.length === n.inputs.length,
        () =>
            `LayersModel has ${
                n.inputs.length
            } inputs, but the dataset provides ${
                r.length
            } inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`
    ),
        C(
            i.length === n.outputs.length,
            () =>
                `LayersModel has ${
                    n.outputs.length
                } outputs, but the dataset provides ${
                    i.length
                } outputs.  (Expected output keys: ${JSON.stringify(
                    n.outputNames
                )})`
        );
    for (let l = 0; l < r.length; l++)
        C(
            r[l].shape[0] === a,
            () =>
                `Batch size mismatch: input ${n.inputNames[l]} has ${r[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`
        );
    for (let l = 0; l < i.length; l++)
        C(
            i[l].shape[0] === a,
            () =>
                `Batch size mismatch: output ${n.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`
        );
    return { xs: r, ys: i };
}
function tg(n, t, e) {
    if (e instanceof Mt) return [e];
    if (Array.isArray(e))
        return (
            C(
                e.length === t.length,
                () =>
                    `Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`
            ),
            e
        );
    {
        const s = [];
        for (const o of t) {
            if (e[o] == null)
                throw new E(
                    `The feature data generated by the dataset lacks the required ${n} key '${o}'.`
                );
            s.push(e[o]);
        }
        return s;
    }
}
function s3(n) {
    if (n.length === 3)
        throw new yt("Validation with sample weights is not implemented yet.");
    return { xs: n[0], ys: n[1] };
}
async function o3(n, t, e) {
    const s = e.batchesPerEpoch != null;
    if (
        (C(
            n.optimizer != null,
            () =>
                "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."
        ),
        C(
            e != null,
            () =>
                "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."
        ),
        C(
            e.epochs != null && e.epochs > 0 && Number.isInteger(e.epochs),
            () =>
                `For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`
        ),
        C(
            !s ||
                (e.batchesPerEpoch > 0 && Number.isInteger(e.batchesPerEpoch)),
            () =>
                `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`
        ),
        C(
            // tslint:disable-next-line:no-any
            e.validationSplit == null,
            () =>
                "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."
        ),
        n.isTraining)
    )
        throw new Error(
            "Cannot start training because another fit() call is ongoing."
        );
    n.isTraining = !0;
    try {
        const o = e.validationData != null;
        let r, i;
        if (o)
            if (eg(e.validationData))
                C(
                    e.validationBatches == null ||
                        (e.validationBatches > 0 &&
                            Number.isInteger(e.validationBatches)),
                    () =>
                        `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`
                );
            else {
                const g = s3(e.validationData);
                (r = g.xs), (i = g.ys);
            }
        const a = n.makeTrainFunction(),
            l = n.getDedupedMetricsNames();
        let c;
        o ? (c = l.slice().concat(l.map((g) => "val_" + g))) : (c = l.slice());
        const u = Kx(e.callbacks, e.yieldEvery),
            d = e.verbose == null ? 1 : e.verbose,
            { callbackList: h, history: p } = Zx(
                u,
                d,
                e.epochs,
                null,
                null,
                r3(t, e),
                null,
                // Batch size determined by the dataset itself.
                o,
                c
            );
        h.setModel(n),
            (n.history = p),
            await h.onTrainBegin(),
            (n.stopTraining_ = !1);
        let f = e.initialEpoch == null ? 0 : e.initialEpoch,
            m = await t.iterator();
        for (; f < e.epochs; ) {
            const g = {};
            await h.onEpochBegin(f);
            let b = 0,
                x = 0;
            for (s || (m = await t.iterator()); !s || b < e.batchesPerEpoch; ) {
                const w = await m.next();
                if (s && w.done) {
                    console.warn(
                        `You provided \`batchesPerEpoch\` as ${
                            e.batchesPerEpoch
                        }, but your dataset iterator ran out of data after ${b} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${
                            e.batchesPerEpoch * e.epochs
                        } batches). You may need to use the repeat() function when building your dataset.`
                    );
                    break;
                }
                if (w.value != null) {
                    const { xs: y, ys: I } = ey(n, w.value),
                        v = {};
                    (v.batch = x),
                        (v.size = y[0].shape[0]),
                        await h.onBatchBegin(x, v);
                    const k = [];
                    if (e.classWeight != null) {
                        const R = qx(e.classWeight, n.outputNames);
                        for (let M = 0; M < R.length; ++M)
                            k.push(await ty(I[M], null, R[M]));
                    }
                    const S = y.concat(I).concat(k),
                        N = a(S);
                    xt(S);
                    for (let R = 0; R < l.length; ++R) {
                        const M = l[R],
                            V = N[R];
                        (v[M] = V), hn(V);
                    }
                    await h.onBatchEnd(x, v), Xx(v), x++, b++;
                }
                if (s ? b >= e.batchesPerEpoch : w.done) {
                    if (o) {
                        let y;
                        eg(e.validationData)
                            ? (y = Lt(
                                  await n.evaluateDataset(e.validationData, {
                                      batches: e.validationBatches,
                                  })
                              ))
                            : (y = Lt(
                                  n.evaluate(r, i, {
                                      batchSize:
                                          e.validationBatchSize == null
                                              ? n3
                                              : e.validationBatchSize,
                                      verbose: 0,
                                  })
                              ));
                        for (let I = 0; I < n.metricsNames.length; ++I)
                            g[`val_${n.metricsNames[I]}`] = y[I];
                    }
                    break;
                }
                if (n.stopTraining_) break;
            }
            if ((await h.onEpochEnd(f, g), f++, n.stopTraining_)) break;
        }
        return await h.onTrainEnd(), await n.history.syncData(), n.history;
    } finally {
        n.isTraining = !1;
    }
}
function r3(n, t) {
    let e = null;
    return (
        t.batchesPerEpoch != null
            ? (e = t.batchesPerEpoch)
            : Number.isFinite(n.size) && (e = n.size),
        e
    );
}
function eg(n) {
    return typeof n.iterator == "function";
}
function i3(n) {
    return typeof n.next == "function";
}
async function a3(n, t, e) {
    e = e || {};
    const s = e.batches != null,
        o = n.testFunction;
    let r = [];
    if (e.verbose > 0) throw new yt("Verbose mode is not implemented yet.");
    C(
        !s || (e.batches > 0 && Number.isInteger(e.batches)),
        () =>
            `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(
                e.batches
            )}`
    );
    const i = i3(t) ? t : await t.iterator();
    let a = 0,
        l = 0;
    for (; !s || l < e.batches; ) {
        const c = await i.next();
        if (
            ((r = D(() => {
                if (c.value) {
                    const { xs: u, ys: d } = ey(n, c.value),
                        h = u.concat(d),
                        p = D(() => o(h));
                    if ((xt(h), l === 0))
                        for (let m = 0; m < p.length; ++m) r.push(gt(0));
                    const f = h[0].shape[0];
                    for (let m = 0; m < p.length; ++m) {
                        const g = p[m],
                            b = r[m];
                        (r[m] = D(() => U(r[m], G(f, g)))), l > 0 && xt(b);
                    }
                    xt(p), (a += f), ++l;
                }
                return r;
            })),
            c.done)
        ) {
            s &&
                console.warn(
                    `Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`
                );
            break;
        }
    }
    for (let c = 0; c < r.length; ++c) {
        const u = r[c];
        (r[c] = ut(r[c], a)), xt(u);
    }
    return Xe(r);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Vu(n) {
    C(
        n > 0 && Number.isInteger(n),
        () => `batchSize is required to be a positive integer, but got ${n}`
    );
}
function Xr(n, t, e) {
    return n == null
        ? [null]
        : Array.isArray(n)
        ? n.map((s) => Io(s, t, e - t))
        : Io(n, t, e - t);
}
function Wd(n, t) {
    return D(() =>
        n == null
            ? null
            : Array.isArray(n)
            ? n.map((e) => Wd(e, t))
            : Rx(n, t.dtype === "int32" ? t : tt(t, "int32"))
    );
}
function zu(n, t) {
    const e = [];
    let s = 0,
        o = null;
    for (; s < n; ) (o = s + t), o >= n && (o = n), e.push([s, o]), (s = o);
    return e;
}
function ny(n) {
    const t = [];
    n instanceof Mt && (n = [n]);
    for (let e = 0; e < n.length; ++e) {
        const s = n[e];
        if (s.rank === 1) t.push(Ea(s, 1));
        else {
            if (s.rank === 0)
                throw new Error(
                    "Expected tensor to be at least 1D, but received a 0D tensor (scalar)."
                );
            t.push(s);
        }
    }
    return t;
}
function Mn(n, t) {
    if (n == null) return;
    const e = [];
    if (t instanceof Mt) e.push(t.id);
    else if (Array.isArray(t)) t.forEach((o) => e.push(o.id));
    else if (t != null)
        for (const o in t) {
            const r = t[o];
            e.push(r.id);
        }
    const s = [];
    if (n instanceof Mt) e.indexOf(n.id) === -1 && s.push(n);
    else if (Array.isArray(n))
        n.forEach((o) => {
            e.indexOf(o.id) === -1 && s.push(o);
        });
    else if (n != null)
        for (const o in n) {
            const r = n[o];
            e.indexOf(r.id) === -1 && s.push(r);
        }
    s.forEach((o) => {
        o.isDisposed || o.dispose();
    });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function l3(n) {
    return n instanceof Mt;
}
function Dd(n) {
    return Array.isArray(n);
}
function ng(n) {
    return !l3(n) && !Dd(n);
}
function sg(n, t, e, s = !0, o = "") {
    if (t == null || t.length === 0) {
        if (n != null) {
            let i = !1;
            if (Dd(n) && n.length > 0) i = !0;
            else if (ng(n)) {
                for (const a in n)
                    if (n.hasOwnProperty(a)) {
                        i = !0;
                        break;
                    }
            } else i = !0;
            if (i)
                throw new E(
                    `Error when checking model ${o} expected no data, but got ${n}`
                );
        }
        return [];
    }
    if (n == null) return t.map((i) => null);
    let r;
    if (ng(n)) {
        (n = n), (r = []);
        for (const i of t) {
            if (n[i] == null)
                throw new E(
                    `No data provided for "${i}". Need data for each key in: ${t}`
                );
            r.push(n[i]);
        }
    } else if (Dd(n)) {
        if (((n = n), n.length !== t.length))
            throw new E(
                `Error when checking model ${o}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`
            );
        r = n;
    } else {
        if (((n = n), t.length > 1))
            throw new E(
                `The model ${o} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`
            );
        r = [n];
    }
    if (((r = ny(r)), e != null))
        for (let i = 0; i < t.length; ++i) {
            if (e[i] == null) continue;
            const a = r[i];
            if (a.shape.length !== e[i].length)
                throw new E(
                    `Error when checking ${o}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`
                );
            for (let l = 0; l < e[i].length; ++l) {
                if (l === 0 && !s) continue;
                const c = a.shape[l],
                    u = e[i][l];
                if (u != null && u >= 0 && c !== u)
                    throw new E(
                        `${o} expected a batch of elements where each example has shape [${e[
                            i
                        ].slice(1, e[i].length)}] (i.e.,tensor shape [*,${e[
                            i
                        ].slice(
                            1,
                            e[i].length
                        )}]) but the ${o} received an input with ${
                            a.shape[0]
                        } examples, each with shape [${a.shape.slice(
                            1,
                            a.shape.length
                        )}] (tensor shape [${a.shape}])`
                    );
            }
        }
    return r;
}
function c3(n, t, e) {
    const s = Ps(n.map((r) => r.shape[0]));
    s.sort();
    const o = Ps(t.map((r) => r.shape[0]));
    if ((o.sort(), s.length > 1))
        throw new E(
            `All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(
                n.map((r) => r.shape)
            )}`
        );
    if (o.length > 1)
        throw new E(
            `All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(
                t.map((r) => r.shape)
            )}`
        );
    if (s.length > 0 && o.length > 0 && !$t(s, o))
        throw new E(
            `Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${o[0]} target sample(s).`
        );
}
function u3(n, t, e) {
    const s = [uu, du, pi];
    for (let o = 0; o < n.length; ++o) {
        const r = n[o],
            i = t[o],
            a = e[o];
        if (i != null) {
            if (i === pi && r.shape[r.shape.length - 1] === 1)
                throw new E(
                    `You are passing a target array of shape ${r.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`
                );
            if (s.indexOf(i) !== -1) {
                const l = r.shape.slice(1),
                    c = a.slice(1);
                for (let u = 0; u < l.length; ++u) {
                    const d = l[u],
                        h = c[u];
                    if (h != null && d !== h)
                        throw new E(
                            `A target Tensor with shape ${r.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`
                        );
                }
            }
        }
    }
}
function og(n, t, e, s = !0, o = "") {
    let r;
    if (Array.isArray(n)) {
        if (n.length !== t.length)
            throw new E(
                `Error when checking model ${o}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`
            );
        r = n;
    } else {
        if (t.length > 1)
            throw new E(
                `The model expects ${
                    t.length
                } ${o} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(
                    n.shape
                )}.`
            );
        r = [n];
    }
    if (e != null)
        for (let i = 0; i < t.length; ++i) {
            if (e[i] == null) continue;
            const a = r[i];
            if (a.shape.length !== e[i].length)
                throw new E(
                    `Error when checking ${o}: expected ${t[i]} to have ${
                        e[i].length
                    } dimension(s), but got array with shape ${JSON.stringify(
                        a.shape
                    )}`
                );
            for (let l = 0; l < e[i].length; ++l) {
                if (l === 0 && !s) continue;
                const c = a.shape[l],
                    u = e[i][l];
                if (u != null && u !== c)
                    throw new E(
                        `Error when checking ${o}: expected ${
                            t[i]
                        } to have shape ${JSON.stringify(
                            e[i]
                        )} but got array with shape ${JSON.stringify(a.shape)}.`
                    );
            }
        }
}
function d3(n, t) {
    if (n == null || (Array.isArray(n) && n.length === 0))
        return t.map((s) => []);
    let e;
    if (typeof n == "string" || typeof n == "function") e = [n];
    else if (Array.isArray(n) || typeof n == "object") e = n;
    else
        throw new TypeError(
            `Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`
        );
    if (Array.isArray(e)) return t.map((s) => e);
    {
        const s = [];
        for (const o of t) {
            let r = e.hasOwnProperty(o) ? e[o] : [];
            Array.isArray(r) || (r = [r]), s.push(r);
        }
        return s;
    }
}
const h3 = "layers-model";
class ur extends Wn {
    constructor(t) {
        super(t), (this.isTraining = !1);
    }
    /**
     * Print a text summary of the model's layers.
     *
     * The summary includes
     * - Name and type of all layers that comprise the model.
     * - Output shape(s) of the layers
     * - Number of weight parameters of each layer
     * - If the model has non-sequential-like topology, the inputs each layer
     *   receives
     * - The total number of trainable and non-trainable parameters of the model.
     *
     * ```js
     * const input1 = tf.input({shape: [10]});
     * const input2 = tf.input({shape: [20]});
     * const dense1 = tf.layers.dense({units: 4}).apply(input1);
     * const dense2 = tf.layers.dense({units: 8}).apply(input2);
     * const concat = tf.layers.concatenate().apply([dense1, dense2]);
     * const output =
     *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);
     *
     * const model = tf.model({inputs: [input1, input2], outputs: output});
     * model.summary();
     * ```
     *
     * @param lineLength Custom line length, in number of characters.
     * @param positions Custom widths of each of the columns, as either
     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
     *   right-most (i.e., ending) position of a column.
     * @param printFn Custom print function. Can be used to replace the default
     *   `console.log`. For example, you can use `x => {}` to mute the printed
     *   messages in the console.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    summary(t, e, s = console.log) {
        if (!this.built)
            throw new E(
                "This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data)."
            );
        UL(this, t, e, s);
    }
    /**
     * Configures and prepares the model for training and evaluation.  Compiling
     * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`
     * or `evaluate` on an un-compiled model will throw an error.
     *
     * @param args a `ModelCompileArgs` specifying the loss, optimizer, and
     * metrics to be used for fitting and evaluating this model.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    compile(t) {
        if (
            (t.loss == null && (t.loss = []),
            (this.loss = t.loss),
            typeof t.optimizer == "string")
        )
            (this.optimizer_ = _L(t.optimizer)), (this.isOptimizerOwned = !0);
        else {
            if (!(t.optimizer instanceof eo))
                throw new E(
                    "User-defined optimizer must be an instance of tf.Optimizer."
                );
            (this.optimizer_ = t.optimizer), (this.isOptimizerOwned = !1);
        }
        let e = [];
        if (
            !Array.isArray(t.loss) &&
            typeof t.loss != "string" &&
            typeof t.loss != "function"
        ) {
            t.loss = t.loss;
            for (const i in t.loss)
                if (this.outputNames.indexOf(i) === -1)
                    throw new E(
                        `Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`
                    );
            for (const i of this.outputNames)
                t.loss[i] == null &&
                    console.warn(
                        `Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`
                    ),
                    e.push(Fu(t.loss[i]));
        } else if (Array.isArray(t.loss)) {
            if (t.loss.length !== this.outputs.length)
                throw new E(
                    `When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`
                );
            e = t.loss.map((a) => Fu(a));
        } else {
            const i = Fu(t.loss);
            this.outputs.forEach((a) => {
                e.push(i);
            });
        }
        (this.lossFunctions = e),
            (this.feedOutputNames = []),
            (this.feedOutputShapes = []),
            (this.feedLossFns = []);
        for (let i = 0; i < this.outputs.length; ++i) {
            const a = this.internalOutputShapes[i],
                l = this.outputNames[i];
            this.feedOutputNames.push(l),
                this.feedOutputShapes.push(a),
                this.feedLossFns.push(this.lossFunctions[i]);
        }
        const s = [];
        (this.metrics = t.metrics),
            (this.metricsNames = ["loss"]),
            (this.metricsTensors = []),
            wo("loss", () => {
                for (let i = 0; i < this.outputs.length; ++i) {
                    if (s.indexOf(i) !== -1) continue;
                    const a = this.lossFunctions[i];
                    this.outputs.length > 1 &&
                        (this.metricsTensors.push([a, i]),
                        this.metricsNames.push(this.outputNames[i] + "_loss"));
                }
            });
        const o = d3(t.metrics, this.outputNames),
            r = (i, a, l) => {
                this.outputNames.length > 1 &&
                    (a = this.outputNames[i] + "_" + a),
                    this.metricsNames.push(a),
                    this.metricsTensors.push([l, i]);
            };
        wo("metric", () => {
            for (let i = 0; i < this.outputs.length; ++i) {
                if (s.indexOf(i) !== -1) continue;
                const a = o[i];
                ((c) => {
                    const u = "";
                    let d, h, p;
                    for (const f of c) {
                        if (
                            typeof f == "string" &&
                            ["accuracy", "acc", "crossentropy", "ce"].indexOf(
                                f
                            ) !== -1
                        ) {
                            const g = this.internalOutputShapes[i];
                            g[g.length - 1] === 1 ||
                            this.lossFunctions[i] === du
                                ? ["accuracy", "acc"].indexOf(f) !== -1
                                    ? (h = Hx)
                                    : ["crossentropy", "ce"].indexOf(f) !==
                                          -1 && (h = VL)
                                : this.lossFunctions[i] === El
                                ? ["accuracy", "acc"].indexOf(f) !== -1
                                    ? (h = zL)
                                    : ["crossentropy", "ce"].indexOf(f) !==
                                          -1 && (h = Qx)
                                : ["accuracy", "acc"].indexOf(f) !== -1
                                ? (h = _x)
                                : ["crossentropy", "ce"].indexOf(f) !== -1 &&
                                  (h = Yx);
                            let b;
                            ["accuracy", "acc"].indexOf(f) !== -1
                                ? (b = "acc")
                                : ["crossentropy", "ce"].indexOf(f) !== -1 &&
                                  (b = "ce"),
                                (p = h),
                                (d = u + b);
                        } else (p = HL(f)), (d = u + Ua(f));
                        let m;
                        wo(d, () => {
                            m = p;
                        }),
                            r(i, d, m);
                    }
                })(a);
            }
        }),
            (this.collectedTrainableWeights = this.trainableWeights);
    }
    /**
     * Check trainable weights count consistency.
     *
     * This will raise a warning if `this.trainableWeights` and
     * `this.collectedTrainableWeights` are inconsistent (i.e., have different
     * numbers of parameters).
     * Inconsistency will typically arise when one modifies `model.trainable`
     * without calling `model.compile()` again.
     */
    checkTrainableWeightsConsistency() {
        this.collectedTrainableWeights != null &&
            this.trainableWeights.length !==
                this.collectedTrainableWeights.length &&
            console.warn(
                "Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?"
            );
    }
    /**
     * Returns the loss value & metrics values for the model in test mode.
     *
     * Loss and metrics are specified during `compile()`, which needs to happen
     * before calls to `evaluate()`.
     *
     * Computation is done in batches.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const result = model.evaluate(
     *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});
     * result.print();
     * ```
     *
     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
     * model has multiple inputs.
     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
     * model has multiple outputs.
     * @param args A `ModelEvaluateArgs`, containing optional fields.
     *
     * @return `Scalar` test loss (if the model has a single output and no
     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
     *   and/or metrics). The attribute `model.metricsNames`
     *   will give you the display labels for the scalar outputs.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    evaluate(t, e, s = {}) {
        const o = s.batchSize == null ? 32 : s.batchSize;
        Vu(o);
        const i = this.standardizeUserDataXY(t, e, !0, o);
        try {
            const a = i[0].concat(i[1]);
            this.makeTestFunction();
            const l = this.testFunction,
                c = this.testLoop(l, a, o, s.verbose, s.steps);
            return Xe(c);
        } finally {
            Mn(i[0], t), Mn(i[1], e);
        }
    }
    // TODO(cais): Add code snippet below once real dataset objects are
    //   available.
    /**
     * Evaluate model using a dataset object.
     *
     * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
     *
     * @param dataset A dataset object. Its `iterator()` method is expected
     *   to generate a dataset iterator object, the `next()` method of which
     *   is expected to produce data batches for evaluation. The return value
     *   of the `next()` call ought to contain a boolean `done` field and a
     *   `value` field. The `value` field is expected to be an array of two
     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
     *   case is for models with exactly one input and one output (e.g.
     *   a sequential model). The latter case is for models with multiple
     *   inputs and/or multiple outputs. Of the two items in the array, the
     *   first is the input feature(s) and the second is the output target(s).
     * @param args A configuration object for the dataset-based evaluation.
     * @returns Loss and metric values as an Array of `Scalar` objects.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    async evaluateDataset(t, e) {
        return this.makeTestFunction(), a3(this, t, e);
    }
    /**
     * Get number of samples provided for training, evaluation or prediction.
     *
     * @param ins Input `tf.Tensor`.
     * @param batchSize Integer batch size, optional.
     * @param steps Total number of steps (batches of samples) before
     * declaring loop finished. Optional.
     * @param stepsName The public API's parameter name for `steps`.
     * @returns Number of samples provided.
     */
    checkNumSamples(t, e, s, o = "steps") {
        let r;
        if (s != null) {
            if (((r = null), e != null))
                throw new E(
                    `If ${o} is set, batchSize must be null or undefined.Got batchSize = ${e}`
                );
        } else if (t != null)
            Array.isArray(t) ? (r = t[0].shape[0]) : (r = t.shape[0]);
        else
            throw new E(
                `Either the input data should have a defined shape, or ${o} shoud be specified.`
            );
        return r;
    }
    /**
     * Execute internal tensors of the model with input data feed.
     * @param inputs Input data feed. Must match the inputs of the model.
     * @param outputs Names of the output tensors to be fetched. Must match
     *   names of the SymbolicTensors that belong to the graph.
     * @returns Fetched values for `outputs`.
     */
    execute(t, e) {
        if (Array.isArray(e) && e.length === 0)
            throw new E("`outputs` is an empty Array, which is not allowed.");
        const s = Array.isArray(e),
            o = s ? e : [e],
            r = this.retrieveSymbolicTensors(o),
            i = new Ds();
        if ((t instanceof Mt && (t = [t]), Array.isArray(t))) {
            if (t.length !== this.inputs.length)
                throw new E(
                    `The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`
                );
            for (let l = 0; l < this.inputs.length; ++l)
                i.add(this.inputs[l], t[l]);
        } else
            for (const l of this.inputs) {
                const c = t[l.name];
                if (c == null)
                    throw new E(
                        `No value is provided for the model's input ${l.name}`
                    );
                i.add(l, c);
            }
        const a = Yr(r, i);
        return s ? a : a[0];
    }
    /**
     * Retrieve the model's internal symbolic tensors from symbolic-tensor names.
     */
    retrieveSymbolicTensors(t) {
        const e = Wo(null, t.length);
        let s = t.length;
        for (const o of this.layers) {
            const r = Array.isArray(o.output) ? o.output : [o.output],
                i = r.map((a) => a.name);
            for (let a = 0; a < t.length; ++a) {
                const l = i.indexOf(t[a]);
                if ((l !== -1 && ((e[a] = r[l]), s--), s === 0)) break;
            }
            if (s === 0) break;
        }
        if (s > 0) {
            const o = [];
            throw (
                (e.forEach((r, i) => {
                    r == null && o.push(t[i]);
                }),
                new E(
                    `Cannot find SymbolicTensors for output name(s): ${JSON.stringify(
                        o
                    )}`
                ))
            );
        }
        return e;
    }
    /**
     * Helper method to loop over some data in batches.
     *
     * Porting Note: Not using the functional approach in the Python equivalent
     *   due to the imperative backend.
     * Porting Note: Does not support step mode currently.
     *
     * @param ins: input data
     * @param batchSize: integer batch size.
     * @param verbose: verbosity model
     * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of
     *   `tf.Tensor` (if multipe outputs).
     */
    predictLoop(t, e = 32, s = !1) {
        return D(() => {
            const o = this.checkNumSamples(t);
            if (s)
                throw new yt("Verbose predictLoop() is not implemented yet.");
            const r = zu(o, e),
                i = this.outputs.map((a) => []);
            for (let a = 0; a < r.length; ++a)
                D(() => {
                    const c = r[a][0],
                        u = r[a][1],
                        d = Xr(t, c, u),
                        h = [];
                    if (Array.isArray(d))
                        for (let f = 0; f < d.length; ++f)
                            h.push({ key: this.inputs[f], value: d[f] });
                    else h.push({ key: this.inputs[0], value: d });
                    const p = new Ds(h);
                    return Yr(this.outputs, p);
                }).forEach((c, u) => i[u].push(c));
            return Xe(i.map((a) => Ge(a, 0)));
        });
    }
    /**
     * Generates output predictions for the input samples.
     *
     * Computation is done in batches.
     *
     * Note: the "step" mode of predict() is currently not supported.
     *   This is because the TensorFlow.js core backend is imperative only.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();
     * ```
     *
     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
     *   the model has multiple inputs.
     * @param args A `ModelPredictArgs` object containing optional fields.
     *
     * @return Prediction results as a `tf.Tensor`(s).
     *
     * @exception ValueError In case of mismatch between the provided input data
     *   and the model's expectations, or in case a stateful model receives a
     *   number of samples that is not a multiple of the batch size.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    predict(t, e = {}) {
        const s = ny(t);
        og(s, this.inputNames, this.feedInputShapes, !1);
        try {
            const o = e.batchSize == null ? 32 : e.batchSize;
            return Vu(o), this.predictLoop(s, o);
        } finally {
            Mn(s, t);
        }
    }
    /**
     * Returns predictions for a single batch of samples.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.predictOnBatch(tf.ones([8, 10])).print();
     * ```
     * @param x: Input samples, as a Tensor (for models with exactly one
     *   input) or an array of Tensors (for models with more than one input).
     * @return Tensor(s) of predictions
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    predictOnBatch(t) {
        og(t, this.inputNames, this.feedInputShapes, !0);
        const e = (Array.isArray(t) ? t[0] : t).shape[0];
        return this.predictLoop(t, e);
    }
    standardizeUserDataXY(t, e, s = !0, o) {
        if (this.optimizer_ == null)
            throw new Sn(
                "You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs)."
            );
        const r = [];
        for (let i = 0; i < this.feedOutputShapes.length; ++i) {
            const a = this.feedOutputShapes[i];
            this.feedLossFns[i] === El
                ? r.push(a.slice(0, a.length - 1).concat([1]))
                : r.push(a);
        }
        if (
            ((t = sg(
                t,
                this.feedInputNames,
                this.feedInputShapes,
                !1,
                "input"
            )),
            (e = sg(e, this.feedOutputNames, r, !1, "target")),
            c3(t, e),
            u3(e, this.feedLossFns, this.feedOutputShapes),
            this.stateful && o != null && o > 0 && t[0].shape[0] % o !== 0)
        )
            throw new E(
                `In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${t[0].shape[0]} sample(s).`
            );
        return [t, e];
    }
    async standardizeUserData(t, e, s, o, r = !0, i) {
        const [a, l] = this.standardizeUserDataXY(t, e, r, i);
        if (s != null) throw new Error("sample weight is not supported yet.");
        let c = null;
        if (o != null) {
            const u = qx(o, this.outputNames);
            c = [];
            for (let d = 0; d < u.length; ++d)
                c.push(await ty(l[d], null, u[d]));
        }
        return [a, l, c];
    }
    /**
     * Loop over some test data in batches.
     * @param f A Function returning a list of tensors.
     * @param ins Array of tensors to be fed to `f`.
     * @param batchSize Integer batch size or `null` / `undefined`.
     * @param verbose verbosity mode.
     * @param steps Total number of steps (batches of samples) before
     * declaring test finished. Ignored with the default value of `null` /
     * `undefined`.
     * @returns Array of Scalars.
     */
    testLoop(t, e, s, o = 0, r) {
        return D(() => {
            const i = this.checkNumSamples(e, s, r, "steps"),
                a = [];
            if (o > 0) throw new yt("Verbose mode is not implemented yet.");
            if (r != null)
                throw new yt("steps mode in testLoop() is not implemented yet");
            {
                const l = zu(i, s),
                    c = Ze(Kn(0, i));
                for (let u = 0; u < l.length; ++u) {
                    const d = l[u][0],
                        h = l[u][1],
                        p = Io(c, d, h - d),
                        f = Wd(e, p),
                        m = t(f);
                    if (u === 0)
                        for (let g = 0; g < m.length; ++g) a.push(gt(0));
                    for (let g = 0; g < m.length; ++g) {
                        const b = m[g];
                        a[g] = U(a[g], G(h - d, b));
                    }
                }
                for (let u = 0; u < a.length; ++u) a[u] = ut(a[u], i);
            }
            return a;
        });
    }
    getDedupedMetricsNames() {
        const t = this.metricsNames,
            e = [];
        for (let s = 0; s < t.length; ++s) {
            const o = t[s];
            let r = o;
            if (Xm(t, o) > 1) {
                const i = Xm(t.slice(0, s), o);
                r += `_${i}`;
            }
            e.push(r);
        }
        return e;
    }
    /**
     * Creates a function that performs the following actions:
     *
     * 1. computes the losses
     * 2. sums them to get the total loss
     * 3. call the optimizer computes the gradients of the LayersModel's
     *    trainable weights w.r.t. the total loss and update the variables
     * 4. calculates the metrics
     * 5. returns the values of the losses and metrics.
     */
    makeTrainFunction() {
        return (t) => {
            const e = [],
                s = t.slice(0, this.inputs.length),
                o = t.slice(
                    this.inputs.length,
                    this.inputs.length + this.outputs.length
                ),
                r = t.slice(
                    this.inputs.length + this.outputs.length,
                    this.inputs.length + this.outputs.length * 2
                ),
                i = [],
                a = () => {
                    const d = [];
                    for (let m = 0; m < this.inputs.length; ++m)
                        d.push({ key: this.inputs[m], value: s[m] });
                    const h = new Ds(d),
                        p = Yr(this.outputs, h, { training: !0 });
                    let f;
                    for (let m = 0; m < this.lossFunctions.length; ++m) {
                        const g = this.lossFunctions[m];
                        let b = g(o[m], p[m]);
                        r[m] != null && (b = e3(b, r[m]));
                        const x = oe(b);
                        e.push(x), m === 0 ? (f = b) : (f = U(f, b));
                    }
                    for (let m = 0; m < this.metricsTensors.length; ++m) {
                        let g;
                        if (this.outputs.length > 1 && m < this.outputs.length)
                            g = e[m];
                        else {
                            const b = this.metricsTensors[m][0],
                                x = this.metricsTensors[m][1];
                            g = oe(b(o[x], p[x]));
                        }
                        hn(g), i.push(g);
                    }
                    return (
                        (f = oe(f)),
                        this.calculateLosses().forEach((m) => {
                            f = U(f, m);
                        }),
                        f
                    );
                },
                l = this.collectedTrainableWeights.map((d) => d.read());
            return [this.optimizer_.minimize(a, !0, l)].concat(i);
        };
    }
    /**
     * Create a function which, when invoked with an array of `tf.Tensor`s as a
     * batch of inputs, returns the prespecified loss and metrics of the model
     * under the batch of input data.
     */
    makeTestFunction() {
        this.testFunction = (t) =>
            D(() => {
                const e = [];
                let s;
                const o = t.slice(0, this.inputs.length),
                    r = t.slice(
                        this.inputs.length,
                        this.inputs.length + this.outputs.length
                    ),
                    i = [];
                for (let c = 0; c < this.inputs.length; ++c)
                    i.push({ key: this.inputs[c], value: o[c] });
                const a = new Ds(i),
                    l = Yr(this.outputs, a);
                for (let c = 0; c < this.lossFunctions.length; ++c) {
                    const u = this.lossFunctions[c],
                        d = oe(u(r[c], l[c]));
                    c === 0 ? (s = d) : (s = U(s, d)), e.push(s);
                }
                for (let c = 0; c < this.metricsTensors.length; ++c) {
                    const u = this.metricsTensors[c][0],
                        d = this.metricsTensors[c][1],
                        h = oe(u(r[d], l[d]));
                    e.push(h);
                }
                return e;
            });
    }
    /**
     * Trains the model for a fixed number of epochs (iterations on a
     * dataset).
     *
     * ```js
     * const model = tf.sequential({
     *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * for (let i = 1; i < 5 ; ++i) {
     *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
     *       batchSize: 4,
     *       epochs: 3
     *   });
     *   console.log("Loss after Epoch " + i + " : " + h.history.loss[0]);
     * }
     * ```
     *
     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
     * model has multiple inputs. If all inputs in the model are named, you
     * can also pass a dictionary mapping input names to `tf.Tensor`s.
     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
     * the model has multiple outputs. If all outputs in the model are named,
     * you can also pass a dictionary mapping output names to `tf.Tensor`s.
     * @param args A `ModelFitArgs`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     *
     * @exception ValueError In case of mismatch between the provided input
     * data and what the model expects.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    async fit(t, e, s = {}) {
        if (this.isTraining)
            throw new Error(
                "Cannot start training because another fit() call is ongoing."
            );
        this.isTraining = !0;
        let o, r, i, a, l, c, u, d, h;
        try {
            const p = s.batchSize == null ? 32 : s.batchSize;
            Vu(p);
            const m = await this.standardizeUserData(
                t,
                e,
                s.sampleWeight,
                s.classWeight,
                !1,
                p
            );
            (o = m[0]), (r = m[1]), (h = m[2]);
            let g = !1,
                b;
            if (s.validationData != null && s.validationData.length > 0) {
                if (((g = !0), s.validationData.length === 2))
                    (l = s.validationData[0]), (c = s.validationData[1]);
                else
                    throw s.validationData.length === 3
                        ? new yt(
                              "validationData including sample weights is not supported yet."
                          )
                        : new E(
                              `When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`
                          );
                const R = await this.standardizeUserData(
                    l,
                    c,
                    null,
                    /** Unused sample weights. */
                    null,
                    !0,
                    p
                );
                (u = R[0]), (d = R[1]), (b = u.concat(d));
            } else if (
                s.validationSplit != null &&
                s.validationSplit > 0 &&
                s.validationSplit < 1
            ) {
                g = !0;
                const N = Math.floor(o[0].shape[0] * (1 - s.validationSplit)),
                    R = o[0].shape[0];
                (u = Xr(o, N, R)),
                    (i = o),
                    (o = Xr(o, 0, N)),
                    (d = Xr(r, N, R)),
                    (a = r),
                    (r = Xr(r, 0, N)),
                    (b = u.concat(d));
            } else s.validationSteps != null && (g = !0);
            const x = o.concat(r).concat(h);
            this.checkTrainableWeightsConsistency();
            const w = this.makeTrainFunction(),
                y = this.getDedupedMetricsNames();
            let I, v;
            g
                ? (this.makeTestFunction(),
                  (I = this.testFunction),
                  (v = y.slice().concat(y.map((N) => "val_" + N))))
                : ((I = null), (b = []), (v = y.slice()));
            const k = Kx(s.callbacks, s.yieldEvery);
            return await this.fitLoop(
                w,
                x,
                y,
                p,
                s.epochs,
                s.verbose,
                k,
                I,
                b,
                s.shuffle,
                v,
                s.initialEpoch,
                null,
                null
            );
        } finally {
            (this.isTraining = !1),
                Mn(o, t),
                Mn(r, e),
                Mn(i, t),
                Mn(a, e),
                Mn(u, l),
                Mn(d, c),
                h != null && xt(h);
        }
    }
    /**
     * Abstract fit function for `f(ins)`.
     * @param f A Function returning a list of tensors. For training, this
     *   function is expected to perform the updates to the variables.
     * @param ins List of tensors to be fed to `f`.
     * @param outLabels List of strings, display names of the outputs of `f`.
     * @param batchSize Integer batch size or `== null` if unknown. Default : 32.
     * @param epochs Number of times to iterate over the data. Default : 1.
     * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.
     * @param callbacks List of callbacks to be called during training.
     * @param valF Function to call for validation.
     * @param valIns List of tensors to be fed to `valF`.
     * @param shuffle Whether to shuffle the data at the beginning of every
     * epoch. Default : true.
     * @param callbackMetrics List of strings, the display names of the metrics
     *   passed to the callbacks. They should be the concatenation of the
     *   display names of the outputs of `f` and the list of display names
     *   of the outputs of `valF`.
     * @param initialEpoch Epoch at which to start training (useful for
     *   resuming a previous training run). Default : 0.
     * @param stepsPerEpoch Total number of steps (batches on samples) before
     *   declaring one epoch finished and starting the next epoch. Ignored with
     *   the default value of `undefined` or `null`.
     * @param validationSteps Number of steps to run validation for (only if
     *   doing validation from data tensors). Not applicable for tfjs-layers.
     * @returns A `History` object.
     */
    async fitLoop(t, e, s, o, r, i, a, l, c, u, d, h, p, f) {
        o == null && (o = 32),
            r == null && (r = 1),
            u == null && (u = !0),
            h == null && (h = 0);
        let m = !1;
        if (
            (l != null && c != null && (m = !0),
            f != null && ((m = !0), p == null))
        )
            throw new E(
                "Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set."
            );
        const g = this.checkNumSamples(e, o, p, "steps_per_epoch");
        let b;
        g != null && (b = Kn(0, g)), i == null && (i = 1);
        const { callbackList: x, history: w } = Zx(a, i, r, h, g, p, o, m, d);
        x.setModel(this),
            (this.history = w),
            await x.onTrainBegin(),
            (this.stopTraining_ = !1);
        for (let y = h; y < r; ++y) {
            await x.onEpochBegin(y);
            const I = {};
            if (p != null)
                throw new yt("stepsPerEpoch mode is not implemented yet.");
            {
                if (u === "batch")
                    throw new yt("batch shuffling is not implemneted yet");
                u && Ud(b);
                const v = Ze(b),
                    k = zu(g, o);
                for (let S = 0; S < k.length; ++S) {
                    const N = {};
                    if (
                        (await x.onBatchBegin(S, N),
                        D(() => {
                            const R = k[S][0],
                                M = k[S][1],
                                V = Io(v, R, M - R);
                            (N.batch = S), (N.size = M - R);
                            const z = Wd(e, V),
                                P = t(z);
                            for (let A = 0; A < s.length; ++A) {
                                const O = s[A],
                                    B = P[A];
                                (N[O] = B), hn(B);
                            }
                            if (S === k.length - 1 && m) {
                                const A = this.testLoop(l, c, o);
                                for (let O = 0; O < s.length; ++O) {
                                    const B = s[O],
                                        Z = A[O];
                                    hn(Z), (I["val_" + B] = Z);
                                }
                            }
                        }),
                        await x.onBatchEnd(S, N),
                        Xx(N),
                        this.stopTraining_)
                    )
                        break;
                }
                v.dispose();
            }
            if ((await x.onEpochEnd(y, I), this.stopTraining_)) break;
        }
        return (
            await x.onTrainEnd(), await this.history.syncData(), this.history
        );
    }
    // TODO(cais): Add code snippet below when it's possible to instantiate
    //   actual dataset objects.
    /**
     * Trains the model using a dataset object.
     *
     * @param dataset A dataset object. Its `iterator()` method is expected
     *   to generate a dataset iterator object, the `next()` method of which
     *   is expected to produce data batches for training. The return value
     *   of the `next()` call ought to contain a boolean `done` field and a
     *   `value` field. The `value` field is expected to be an array of two
     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
     *   case is for models with exactly one input and one output (e.g.
     *   a sequential model). The latter case is for models with multiple
     *   inputs and/or multiple outputs.
     *   Of the two items in the array, the first is the input feature(s) and
     *   the second is the output target(s).
     * @param args A `ModelFitDatasetArgs`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    async fitDataset(t, e) {
        return o3(this, t, e);
    }
    /**
     * Runs a single gradient update on a single batch of data.
     *
     * This method differs from `fit()` and `fitDataset()` in the following
     * regards:
     *   - It operates on exactly one batch of data.
     *   - It returns only the loss and metric values, instead of
     *     returning the batch-by-batch loss and metric values.
     *   - It doesn't support fine-grained options such as verbosity and
     *     callbacks.
     *
     * @param x Input data. It could be one of the following:
     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
     *     multiple inputs).
     *   - An Object mapping input names to corresponding `tf.Tensor` (if the
     *     model has named inputs).
     * @param y Target data. It could be either a `tf.Tensor` or multiple
     *   `tf.Tensor`s. It should be consistent with `x`.
     * @returns Training loss or losses (in case the model has
     *   multiple outputs), along with metrics (if any), as numbers.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    async trainOnBatch(t, e) {
        const s = await this.standardizeUserData(t, e),
            o = s[0],
            r = s[1],
            a = this.makeTrainFunction()(o.concat(r)),
            l = [];
        for (const c of a) {
            const u = await c.data();
            l.push(u[0]);
        }
        return xt(a), Mn(s[0], t), Mn(s[1], e), Xe(l);
    }
    /**
     * Extract weight values of the model.
     *
     * @param config: An instance of `io.SaveConfig`, which specifies
     * model-saving options such as whether only trainable weights are to be
     * saved.
     * @returns A `NamedTensorMap` mapping original weight names (i.e.,
     *   non-uniqueified weight names) to their values.
     */
    getNamedWeights(t) {
        const e = [],
            s = t != null && t.trainableOnly,
            o = s ? this.trainableWeights : this.weights,
            r = this.getWeights(s);
        for (let i = 0; i < o.length; ++i)
            (s && !o[i].trainable) ||
                e.push({ name: o[i].originalName, tensor: r[i] });
        return e;
    }
    /**
     * Setter used for force stopping of LayersModel.fit() (i.e., training).
     *
     * Example:
     *
     * ```js
     * const input = tf.input({shape: [10]});
     * const output = tf.layers.dense({units: 1}).apply(input);
     * const model = tf.model({inputs: [input], outputs: [output]});
     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
     * const xs = tf.ones([8, 10]);
     * const ys = tf.zeros([8, 1]);
     *
     * const history = await model.fit(xs, ys, {
     *   epochs: 10,
     *   callbacks: {
     *     onEpochEnd: async (epoch, logs) => {
     *       if (epoch === 2) {
     *         model.stopTraining = true;
     *       }
     *     }
     *   }
     * });
     *
     * // There should be only 3 values in the loss array, instead of 10
     * values,
     * // due to the stopping after 3 epochs.
     * console.log(history.history.loss);
     * ```
     */
    set stopTraining(t) {
        this.stopTraining_ = t;
    }
    get stopTraining() {
        return this.stopTraining_;
    }
    get optimizer() {
        return this.optimizer_;
    }
    set optimizer(t) {
        this.optimizer_ !== t &&
            ((this.optimizer_ = t), (this.isOptimizerOwned = !1));
    }
    dispose() {
        const t = super.dispose();
        if (
            t.refCountAfterDispose === 0 &&
            this.optimizer != null &&
            this.isOptimizerOwned
        ) {
            const e = wl().numTensors;
            this.optimizer_.dispose(),
                (t.numDisposedVariables += e - wl().numTensors);
        }
        return t;
    }
    getLossIdentifiers() {
        let t;
        if (typeof this.loss == "string") t = us(this.loss);
        else if (Array.isArray(this.loss)) {
            for (const e of this.loss)
                if (typeof e != "string")
                    throw new Error(
                        "Serialization of non-string loss is not supported."
                    );
            t = this.loss.map((e) => us(e));
        } else {
            const e = Object.keys(this.loss);
            t = {};
            const s = this.loss;
            for (const o of e)
                if (typeof s[o] == "string") t[o] = us(s[o]);
                else
                    throw new Error(
                        "Serialization of non-string loss is not supported."
                    );
        }
        return t;
    }
    getMetricIdentifiers() {
        if (
            typeof this.metrics == "string" ||
            typeof this.metrics == "function"
        )
            return [us(Ua(this.metrics))];
        if (Array.isArray(this.metrics))
            return this.metrics.map((t) => us(Ua(t)));
        {
            const t = {};
            for (const e in this.metrics) t[e] = us(Ua(this.metrics[e]));
            return t;
        }
    }
    getTrainingConfig() {
        return {
            loss: this.getLossIdentifiers(),
            metrics: this.getMetricIdentifiers(),
            optimizer_config: {
                class_name: this.optimizer.getClassName(),
                config: this.optimizer.getConfig(),
            },
        };
    }
    loadTrainingConfig(t) {
        if (t.weighted_metrics != null)
            throw new Error("Loading weight_metrics is not supported yet.");
        if (t.loss_weights != null)
            throw new Error("Loading loss_weights is not supported yet.");
        if (t.sample_weight_mode != null)
            throw new Error("Loading sample_weight_mode is not supported yet.");
        const e = fi(t.optimizer_config),
            s = An(e);
        let o;
        if (typeof t.loss == "string") o = ho(t.loss);
        else if (Array.isArray(t.loss)) o = t.loss.map((i) => ho(i));
        else if (t.loss != null) {
            o = {};
            for (const i in t.loss) o[i] = ho(t.loss[i]);
        }
        let r;
        if (Array.isArray(t.metrics)) r = t.metrics.map((i) => ho(i));
        else if (t.metrics != null) {
            r = {};
            for (const i in t.metrics) r[i] = ho(t.metrics[i]);
        }
        this.compile({ loss: o, metrics: r, optimizer: s });
    }
    /**
     * Save the configuration and/or weights of the LayersModel.
     *
     * An `IOHandler` is an object that has a `save` method of the proper
     * signature defined. The `save` method manages the storing or
     * transmission of serialized data ("artifacts") that represent the
     * model's topology and weights onto or via a specific medium, such as
     * file downloads, local storage, IndexedDB in the web browser and HTTP
     * requests to a server. TensorFlow.js provides `IOHandler`
     * implementations for a number of frequently used saving mediums, such as
     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
     * for more details.
     *
     * This method also allows you to refer to certain types of `IOHandler`s
     * as URL-like string shortcuts, such as 'localstorage://' and
     * 'indexeddb://'.
     *
     * Example 1: Save `model`'s topology and weights to browser [local
     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
     * then load it back.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * console.log('Prediction from original model:');
     * model.predict(tf.ones([1, 3])).print();
     *
     * const saveResults = await model.save('localstorage://my-model-1');
     *
     * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
     * console.log('Prediction from loaded model:');
     * loadedModel.predict(tf.ones([1, 3])).print();
     * ```
     *
     * Example 2. Saving `model`'s topology and weights to browser
     * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
     * then load it back.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * console.log('Prediction from original model:');
     * model.predict(tf.ones([1, 3])).print();
     *
     * const saveResults = await model.save('indexeddb://my-model-1');
     *
     * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
     * console.log('Prediction from loaded model:');
     * loadedModel.predict(tf.ones([1, 3])).print();
     * ```
     *
     * Example 3. Saving `model`'s topology and weights as two files
     * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from
     * browser.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * const saveResults = await model.save('downloads://my-model-1');
     * ```
     *
     * Example 4. Send  `model`'s topology and weights to an HTTP server.
     * See the documentation of `tf.io.http` for more details
     * including specifying request parameters and implementation of the
     * server.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * const saveResults = await model.save('http://my-server/model/upload');
     * ```
     *
     * @param handlerOrURL An instance of `IOHandler` or a URL-like,
     * scheme-based string shortcut for `IOHandler`.
     * @param config Options for saving the model.
     * @returns A `Promise` of `SaveResult`, which summarizes the result of
     * the saving, such as byte sizes of the saved artifacts for the model's
     *   topology and weight values.
     *
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */
    async save(t, e) {
        if (typeof t == "string") {
            const c = Z2(t);
            if (c.length === 0)
                throw new E(`Cannot find any save handlers for URL '${t}'`);
            if (c.length > 1)
                throw new E(
                    `Found more than one (${c.length}) save handlers for URL '${t}'`
                );
            t = c[0];
        }
        if (t.save == null)
            throw new E(
                "LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined."
            );
        const s = await Cm(this.getNamedWeights(e)),
            a = {
                modelTopology: this.toJSON(null, !1),
                format: h3,
                generatedBy: `TensorFlow.js tfjs-layers v${jx}`,
                convertedBy: null,
            };
        if ((e == null ? !1 : e.includeOptimizer) && this.optimizer != null) {
            a.trainingConfig = this.getTrainingConfig();
            const c = "optimizer",
                { data: u, specs: d } = await Cm(
                    await this.optimizer.getWeights(),
                    c
                );
            s.specs.push(...d), (s.data = F2([s.data, u]));
        }
        return (
            this.userDefinedMetadata != null &&
                (qm(this.userDefinedMetadata, this.name, !0),
                (a.userDefinedMetadata = this.userDefinedMetadata)),
            (a.weightData = s.data),
            (a.weightSpecs = s.specs),
            t.save(a)
        );
    }
    /**
     * Set user-defined metadata.
     *
     * The set metadata will be serialized together with the topology
     * and weights of the model during `save()` calls.
     *
     * @param setUserDefinedMetadata
     */
    setUserDefinedMetadata(t) {
        qm(t, this.name), (this.userDefinedMetadata = t);
    }
    /**
     * Get user-defined metadata.
     *
     * The metadata is supplied via one of the two routes:
     *   1. By calling `setUserDefinedMetadata()`.
     *   2. Loaded during model loading (if the model is constructed
     *      via `tf.loadLayersModel()`.)
     *
     * If no user-defined metadata is available from either of the
     * two routes, this function will return `undefined`.
     */
    getUserDefinedMetadata() {
        return this.userDefinedMetadata;
    }
}
ur.className = "Model";
_(ur);
class sy extends ur {}
sy.className = "Functional";
_(sy);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function FQ(n, t) {
    "modelTopology" in n || (n = { modelTopology: n }), (n = n);
    let e = n.modelTopology;
    e.model_config != null && (e = e.model_config);
    const s = fi(e),
        o = An(s, t);
    if (n.weightsManifest != null) {
        const r = await a$(
                n.weightsManifest,
                n.pathPrefix,
                o.weights.map((a) => a.originalName)
            ),
            i = {};
        for (const a of o.weights) i[a.originalName] = r[a.originalName];
        o.loadWeights(i), xt(r);
    }
    return o;
}
async function VQ(n, t) {
    if ((t == null && (t = {}), typeof n == "string")) {
        const e = B2(n, t);
        if (e.length === 0) e.push(h$(n, t));
        else if (e.length > 1)
            throw new E(
                `Found more than one (${e.length}) load handlers for URL '${n}'`
            );
        n = e[0];
    }
    return p3(n, void 0, t);
}
async function p3(n, t, e) {
    if ((e == null && (e = {}), n.load == null))
        throw new E(
            "Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented."
        );
    const s = await n.load();
    let o = s.modelTopology;
    o.model_config != null && (o = o.model_config);
    const r = e.strict == null ? !0 : e.strict,
        i = s.weightData != null && s.weightSpecs != null && r,
        a = An(fi(o), t, i),
        l = s.trainingConfig;
    if (
        (l != null && a.loadTrainingConfig(l),
        s.userDefinedMetadata != null &&
            a.setUserDefinedMetadata(s.userDefinedMetadata),
        s.weightData != null)
    ) {
        if (s.weightSpecs == null)
            throw new E(
                "LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed."
            );
        const { modelWeights: c, optimizerWeights: u } = f3(
            s.weightData,
            s.weightSpecs
        );
        a.loadWeights(c, r),
            a.optimizer != null &&
                u.length > 0 &&
                (await a.optimizer.setWeights(u)),
            xt(c),
            xt(u.map((d) => d.tensor));
    }
    return a;
}
function f3(n, t) {
    const e = Ab(n, t),
        s = {},
        o = [];
    return (
        t.forEach((r) => {
            r.group === "optimizer"
                ? o.push({ name: r.name, tensor: e[r.name] })
                : (s[r.name] = e[r.name]);
        }),
        { modelWeights: s, optimizerWeights: o }
    );
}
class mi extends ur {
    constructor(t) {
        if (
            (super({ inputs: [], outputs: [] }),
            (t = t || {}),
            (this.trainable = !0),
            (this.built = !1),
            (this.name = t.name != null ? t.name : au("sequential_")),
            t.layers != null)
        )
            for (const e of t.layers) this.add(e);
    }
    // Helper function to Sequential.add  Throws if the new output shape will be
    // invalid.
    checkShape(t) {
        if (t.inboundNodes[0].outputTensors[0].shape.some((s) => s < 0))
            throw new E(
                `Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`
            );
    }
    /**
     * Adds a layer instance on top of the layer stack.
     *
     * ```js
     *  const model = tf.sequential();
     *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));
     *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));
     *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));
     *  // Note that the untrained model is random at this point.
     *  model.predict(tf.randomNormal([10, 1])).print();
     * ```
     * @param layer Layer instance.
     *
     * @exception ValueError In case the `layer` argument does not know its
     * input shape.
     * @exception ValueError In case the `layer` argument has multiple output
     *   tensors, or is already connected somewhere else (forbidden in
     *   `Sequential` models).
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    add(t) {
        const e = t instanceof mi || t instanceof ur;
        let s;
        if (e) {
            if (((s = t), s.outputs.length !== 1))
                throw new E(
                    "All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API."
                );
            if (s.inputs.length !== 1)
                throw new E(
                    "All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API."
                );
        }
        if (this.outputs.length === 0) {
            if (t.inboundNodes.length === 0) {
                if (t.batchInputShape == null)
                    throw new E(
                        "The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument."
                    );
                const o = fL({
                    batchShape: t.batchInputShape,
                    dtype: t.dtype,
                    name: t.name + "_input",
                });
                t.apply(o);
            }
            if (e) (this.outputs = s.outputs), (this.inputs = s.inputs);
            else {
                if (t.inboundNodes.length !== 1)
                    throw new E(
                        `A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`
                    );
                if (t.inboundNodes[0].outputTensors.length !== 1)
                    throw new E(
                        "All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API."
                    );
                this.checkShape(t),
                    (this.outputs = [t.inboundNodes[0].outputTensors[0]]),
                    (this.inputs = Vx(this.outputs[0]));
            }
            (this.inboundNodes = []),
                new cu({
                    outboundLayer: this,
                    inboundLayers: [],
                    nodeIndices: [],
                    tensorIndices: [],
                    inputTensors: this.inputs,
                    outputTensors: this.outputs,
                    // no model-level masking for now
                    inputMasks: Wo(null, this.inputs.length),
                    outputMasks: [null],
                    inputShapes: this.inputs.map((o) => o.shape),
                    outputShapes: this.outputs[0].shape,
                });
        } else {
            const o = t.apply(this.outputs[0]);
            if (Array.isArray(o))
                throw new TypeError(
                    "All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API."
                );
            this.checkShape(t),
                (this.outputs = [o]),
                (this.inboundNodes[0].outputTensors = this.outputs),
                (this.inboundNodes[0].outputShapes = [this.outputs[0].shape]);
        }
        this.layers.push(t), (this.built = !1);
    }
    /**
     * Removes the last layer in the model.
     *
     * @exception TypeError if there are no layers in the model.
     */
    pop() {
        if (this.layers.length === 0)
            throw new TypeError("There are no layers in the model.");
        if ((this.layers.pop(), this.layers.length === 0))
            (this.outputs = []),
                (this.inboundNodes = []),
                (this.outboundNodes = []);
        else {
            const t = this.layers.length - 1;
            (this.layers[t].outboundNodes = []),
                (this.outputs = [this.layers[t].output]),
                (this.inboundNodes[0].outputTensors = this.outputs),
                (this.inboundNodes[0].outputShapes = [this.outputs[0].shape]);
        }
    }
    call(t, e) {
        return this.model == null && this.build(), this.model.call(t, e);
    }
    build(t) {
        if ((Rt(t), this.inputs.length === 0 || this.outputs.length === 0))
            throw new TypeError(
                "Sequential model cannot be built: model is empty. Add some layers first."
            );
        (this.model = new ur({
            inputs: this.inputs,
            outputs: this.outputs[0],
            name: this.name + "_model",
        })),
            (this.model.trainable = this.trainable),
            (this.supportsMasking = this.model.supportsMasking),
            (this.inputLayers = this.model.inputLayers),
            (this.inputLayersNodeIndices = this.model.inputLayersNodeIndices),
            (this.inputLayersTensorIndices =
                this.model.inputLayersTensorIndices),
            (this.outputLayers = this.model.outputLayers),
            (this.outputLayersNodeIndices = this.model.outputLayersNodeIndices),
            (this.outputLayersTensorIndices =
                this.model.outputLayersTensorIndices),
            (this.nodesByDepth = this.model.nodesByDepth),
            (this.containerNodes = this.model.containerNodes),
            (this.outputNames = this.model.outputNames),
            (this.inputNames = this.model.inputNames),
            (this.built = !0);
    }
    countParams() {
        return this.built || this.build(), super.countParams();
    }
    /**
     * Print a text summary of the Sequential model's layers.
     *
     * The summary includes
     * - Name and type of all layers that comprise the model.
     * - Output shape(s) of the layers
     * - Number of weight parameters of each layer
     * - The total number of trainable and non-trainable parameters of the
     * model.
     *
     * ```js
     * const model = tf.sequential();
     * model.add(
     *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));
     * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
     *
     * model.summary();
     * ```
     *
     * @param lineLength Custom line length, in number of characters.
     * @param positions Custom widths of each of the columns, as either
     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
     *   right-most (i.e., ending) position of a column.
     * @param printFn Custom print function. Can be used to replace the default
     *   `console.log`. For example, you can use `x => {}` to mute the printed
     *   messages in the console.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    summary(t, e, s = console.log) {
        this.built || this.build(), super.summary(t, e, s);
    }
    /**
     * Sets the weights of the model.
     *
     * @param weights Should be a list of Tensors with shapes and types matching
     *   the output of `model.getWeights()`.
     */
    setWeights(t) {
        this.model == null && this.build(), this.model.setWeights(t);
    }
    /**
     * Returns the loss value & metrics values for the model in test mode.
     *
     * Loss and metrics are specified during `compile()`, which needs to happen
     * before calls to `evaluate()`.
     *
     * Computation is done in batches.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {
     *   batchSize: 4,
     * });
     * result.print();
     * ```
     *
     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
     * model has multiple inputs.
     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
     * model has multiple outputs.
     * @param args A `ModelEvaluateConfig`, containing optional fields.
     *
     * @return `Scalar` test loss (if the model has a single output and no
     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
     *   and/or metrics). The attribute `model.metricsNames`
     *   will give you the display labels for the scalar outputs.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    evaluate(t, e, s = {}) {
        if (!this.built)
            throw new Sn("The model needs to be compiled before being used.");
        return this.model.evaluate(t, e, s);
    }
    // TODO(cais): Add code snippet below once real dataset objects are
    //   available.
    /**
     * Evaluate model using a dataset object.
     *
     * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
     *
     * @param dataset A dataset object. Its `iterator()` method is expected
     *   to generate a dataset iterator object, the `next()` method of which
     *   is expected to produce data batches for evaluation. The return value
     *   of the `next()` call ought to contain a boolean `done` field and a
     *   `value` field. The `value` field is expected to be an array of two
     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
     *   case is for models with exactly one input and one output (e.g.
     *   a sequential model). The latter case is for models with multiple
     *   inputs and/or multiple outputs. Of the two items in the array, the
     *   first is the input feature(s) and the second is the output target(s).
     * @param args A configuration object for the dataset-based evaluation.
     * @returns Loss and metric values as an Array of `Scalar` objects.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    async evaluateDataset(t, e) {
        if (!this.built)
            throw new Sn("The model needs to be compiled before being used.");
        return this.model.evaluateDataset(t, e);
    }
    /**
     * Generates output predictions for the input samples.
     *
     * Computation is done in batches.
     *
     * Note: the "step" mode of predict() is currently not supported.
     *   This is because the TensorFlow.js core backend is imperative only.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.predict(tf.ones([2, 10])).print();
     * ```
     *
     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
     *   the model has multiple inputs.
     * @param conifg A `ModelPredictConfig` object containing optional fields.
     *
     * @return `tf.Tensor`(s) of predictions.
     *
     * @exception ValueError In case of mismatch between the provided input data
     *   and the model's expectations, or in case a stateful model receives a
     *   number of samples that is not a multiple of the batch size.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    predict(t, e = {}) {
        return this.model == null && this.build(), this.model.predict(t, e);
    }
    /**
     * Returns predictions for a single batch of samples.
     *
     * @param x: Input samples, as a Tensor, or list of Tensors (if the model
     *   has multiple inputs).
     * @return Tensor(s) of predictions
     */
    predictOnBatch(t) {
        return this.model == null && this.build(), this.model.predictOnBatch(t);
    }
    /**
     * See `LayersModel.compile`.
     *
     * @param args
     */
    compile(t) {
        this.build(),
            this.model.compile(t),
            (this.optimizer_ = this.model.optimizer),
            (this.isOptimizerOwned = this.model.isOptimizerOwned),
            (this.loss = this.model.loss),
            (this.metrics = this.model.metrics),
            (this.metricsTensors = this.model.metricsTensors),
            (this.metricsNames = this.model.metricsNames);
    }
    get optimizer() {
        return this.model == null ? void 0 : this.model.optimizer;
    }
    set optimizer(t) {
        this.model.optimizer = t;
    }
    /**
     * Trains the model for a fixed number of epochs (iterations on a dataset).
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
     *   batchSize: 4,
     *   epochs: 3
     * });
     * console.log(history.history.loss[0]);
     * ```
     *
     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
     * model has multiple inputs. If all inputs in the model are named, you can
     * also pass a dictionary mapping input names to `tf.Tensor`s.
     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
     * the model has multiple outputs. If all outputs in the model are named, you
     *  can also pass a dictionary mapping output names to `tf.Tensor`s.
     * @param args  A `ModelFitConfig`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     *
     * @exception ValueError In case of mismatch between the provided input data
     *   and what the model expects.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    async fit(t, e, s = {}) {
        if (!this.built)
            throw new Sn("The model needs to be compiled before being used.");
        return this.model.fit(t, e, s);
    }
    /**
     * Trains the model using a dataset object.
     *
     * ```js
     * const xArray = [
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     * ];
     * const yArray = [1, 1, 1, 1];
     * // Create a dataset from the JavaScript array.
     * const xDataset = tf.data.array(xArray);
     * const yDataset = tf.data.array(yArray);
     * // Zip combines the `x` and `y` Datasets into a single Dataset, the
     * // iterator of which will return an object containing of two tensors,
     * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle
     * // four such samples into a single object, with the same keys now pointing
     * // to tensors that hold 4 examples, organized along the batch dimension.
     * // The call to `shuffle(4)` causes each iteration through the dataset to
     * // happen in a different order.  The size of the shuffle window is 4.
     * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})
     *     .batch(4)
     *     .shuffle(4);
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const history = await model.fitDataset(xyDataset, {
     *   epochs: 4,
     *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}
     * });
     * ```
     *
     * @param dataset A dataset object. Its `iterator()` method is expected to
     *   generate a dataset iterator object, the `next()` method of which is
     *   expected to produce data batches for evaluation. The return value of the
     *   `next()` call ought to contain a boolean `done` field and a `value`
     *   field.
     *
     *   The `value` field is expected to be an object of with fields
     *   `xs` and `ys`, which point to the feature tensor and the target tensor,
     *   respectively. This case is for models with exactly one input and one
     *   output (e.g. a sequential model). For example:
     *   ```js
     *   {value: {xs: xsTensor, ys: ysTensor}, done: false}
     *   ```
     *
     *   If the model has multiple inputs, the `xs` field of `value` should
     *   be an object mapping input names to their respective feature tensors.
     *   For example:
     *   ```js
     *   {
     *     value: {
     *       xs: {
     *         input_1: xsTensor1,
     *         input_2: xsTensor2
     *       },
     *       ys: ysTensor
     *     },
     *     done: false
     *   }
     *   ```
     *   If the model has multiple outputs, the `ys` field of `value` should
     *   be an object mapping output names to their respective target tensors.
     *   For example:
     *   ```js
     *   {
     *     value: {
     *       xs: xsTensor,
     *       ys: {
     *         output_1: ysTensor1,
     *         output_2: ysTensor2
     *       },
     *     },
     *     done: false
     *   }
     *   ```
     * @param args A `ModelFitDatasetArgs`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     *
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */
    async fitDataset(t, e) {
        if (!this.built)
            throw new Sn("The model needs to be compiled before being used.");
        return this.model.fitDataset(t, e);
    }
    /**
     * Runs a single gradient update on a single batch of data.
     *
     * This method differs from `fit()` and `fitDataset()` in the following
     * regards:
     *   - It operates on exactly one batch of data.
     *   - It returns only the loss and metric values, instead of
     *     returning the batch-by-batch loss and metric values.
     *   - It doesn't support fine-grained options such as verbosity and
     *     callbacks.
     *
     * @param x Input data. It could be one of the following:
     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
     *     multiple inputs).
     *   - An Object mapping input names to corresponding `tf.Tensor` (if the
     *     model has named inputs).
     * @param y Target data. It could be either a `tf.Tensor` or multiple
     *   `tf.Tensor`s. It should be consistent with `x`.
     * @returns Training loss or losses (in case the model has
     *   multiple outputs), along with metrics (if any), as numbers.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    async trainOnBatch(t, e) {
        return this.model.trainOnBatch(t, e);
    }
    /* See parent class for JsDoc */
    /** @nocollapse */
    static fromConfig(t, e, s = {}, o = !1) {
        let r,
            i = {};
        if (e instanceof Array) {
            if (e[0].className == null || e[0].className === "Merge")
                throw new E("Legacy serialization format not supported yet.");
            r = e;
        } else
            C(
                e.layers != null,
                () =>
                    "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."
            ),
                (r = e.layers),
                delete e.layers,
                (i = e);
        const a = new t(i);
        if (!(a instanceof mi))
            throw new yt(
                `Sequential.fromConfig called on non-Sequential input: ${a}`
            );
        for (const l of r) {
            const u = An(l, void 0, o);
            o && u.setFastWeightInitDuringBuild(!0), a.add(u);
        }
        return a;
    }
    /**
     * Setter used for force stopping of LayersModel.fit() (i.e., training).
     *
     * Example:
     *
     * ```js
     * const model = tf.sequential();
     * model.add(tf.layers.dense({units: 1, inputShape: [10]}));
     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
     * const xs = tf.ones([8, 10]);
     * const ys = tf.zeros([8, 1]);
     *
     * const history = await model.fit(xs, ys, {
     *   epochs: 10,
     *   callbacks: {
     *     onEpochEnd: async (epoch, logs) => {
     *       if (epoch === 2) {
     *         model.stopTraining = true;
     *       }
     *     }
     *   }
     * });
     *
     * // There should be only 3 values in the loss array, instead of 10 values,
     * // due to the stopping after 3 epochs.
     * console.log(history.history.loss);
     * ```
     */
    set stopTraining(t) {
        if (this.model == null)
            throw new E(
                "Cannot set the stopTraining property of a sequential model before it is compiled."
            );
        this.model.stopTraining = t;
    }
    get stopTraining() {
        if (this.model == null)
            throw new E(
                "Cannot get the stopTraining property of a sequential model before it is compiled."
            );
        return this.model.stopTraining;
    }
    // TODO(cais): Override get trainableWeights() here
    // tslint:disable-next-line:no-any
    getConfig() {
        const t = [];
        for (const e of this.layers) {
            const s = {};
            (s.className = e.getClassName()),
                (s.config = e.getConfig()),
                t.push(s);
        }
        return { name: this.name, layers: t };
    }
}
mi.className = "Sequential";
_(mi);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Ye = class extends _o {
    getConfig() {
        return {};
    }
};
class oy extends Ye {
    /**
     * Calculate the activation function.
     *
     * @param x: Input.
     * @param alpha: Scaling factor the negative section.
     * @return Output of the ELU activation.
     */
    apply(t, e = 1) {
        return jE(t, e);
    }
}
oy.className = "elu";
_(oy);
class ry extends Ye {
    apply(t) {
        return h0(t);
    }
}
ry.className = "selu";
_(ry);
class iy extends Ye {
    apply(t) {
        return Ts(t);
    }
}
iy.className = "relu";
_(iy);
class ay extends Ye {
    apply(t) {
        return D(() => br(6, Ts(t)));
    }
}
ay.className = "relu6";
_(ay);
class ly extends Ye {
    apply(t) {
        return t;
    }
}
ly.className = "linear";
_(ly);
class cy extends Ye {
    apply(t) {
        return kr(t);
    }
}
cy.className = "sigmoid";
_(cy);
class uy extends Ye {
    apply(t) {
        return tL(t);
    }
}
uy.className = "hardSigmoid";
_(uy);
class dy extends Ye {
    apply(t) {
        return va(t);
    }
}
dy.className = "softplus";
_(dy);
class hy extends Ye {
    apply(t) {
        return qE(t);
    }
}
hy.className = "softsign";
_(hy);
class py extends Ye {
    apply(t) {
        return sp(t);
    }
}
py.className = "tanh";
_(py);
let Gf = class extends Ye {
    /**
     * Calculate the activation function.
     *
     * @param x Tensor.
     * @param axis Integer, axis along which the softmax normalization is applied.
     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
     * an error.
     *
     * @returns a Tensor of the same shape as x
     *
     * @throws ValueError: In case `dim(x) < 2`.
     */
    apply(t, e = -1) {
        return $p(t, e);
    }
};
Gf.className = "softmax";
_(Gf);
class fy extends Ye {
    /**
     * Calculate the activation function of log softmax:
     * log( exp(x_i) / sum(exp(x)) )
     *
     * @param x Tensor.
     * @param axis Integer, axis along which the softmax normalization is applied.
     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
     * an error.
     *
     * @returns a Tensor of the same shape as x
     *
     * @throws ValueError: In case `dim(x) < 2`.
     */
    apply(t, e = -1) {
        return r0(t, e);
    }
}
fy.className = "logSoftmax";
_(fy);
class my extends Ye {
    /**
     * Calculate the activation function.
     *
     * @param x Tensor.
     * @param alpha Scaling factor for the sigmoid function.
     * @returns a Tensor of the same shape as x
     */
    apply(t, e = 1) {
        return D(() => G(kr(G(t, e)), t));
    }
}
my.className = "swish";
_(my);
class gy extends Ye {
    /**
     * Calculate the activation function.
     *
     * @param x Tensor.
     * @returns a Tensor of the same shape as x
     */
    apply(t) {
        return D(() => G(t, sp(va(t))));
    }
}
gy.className = "mish";
_(gy);
function Hs(n) {
    return n.getClassName();
}
function Pu(n, t = {}) {
    return Ga(n, cn.getMap().classNameMap, t, "activation");
}
function _s(n) {
    if (n == null) {
        const t = {};
        return (t.className = "linear"), (t.config = {}), Pu(t);
    }
    if (typeof n == "string") {
        const t = {};
        return (t.className = n), (t.config = {}), Pu(t);
    } else return n instanceof Ye ? n : Pu(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Ef(n) {
    if (n != null && typeof n != "object")
        throw new Error(
            `Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`
        );
}
class by extends _o {}
class hu extends by {
    constructor(t) {
        super(),
            Ef(t),
            (this.l1 = t == null || t.l1 == null ? 0.01 : t.l1),
            (this.l2 = t == null || t.l2 == null ? 0.01 : t.l2),
            (this.hasL1 = this.l1 !== 0),
            (this.hasL2 = this.l2 !== 0);
    }
    /**
     * Porting note: Renamed from __call__.
     * @param x Variable of which to calculate the regularization score.
     */
    apply(t) {
        return D(() => {
            let e = be([1]);
            return (
                this.hasL1 && (e = U(e, at(G(this.l1, me(t))))),
                this.hasL2 && (e = U(e, at(G(this.l2, La(t))))),
                W(e, [])
            );
        });
    }
    getConfig() {
        return { l1: this.l1, l2: this.l2 };
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t({ l1: e.l1, l2: e.l2 });
    }
}
hu.className = "L1L2";
_(hu);
function AQ(n) {
    return Ef(n), new hu({ l1: n != null ? n.l1 : null, l2: 0 });
}
function OQ(n) {
    return Ef(n), new hu({ l2: n != null ? n.l2 : null, l1: 0 });
}
const rg = {
    l1l2: "L1L2",
};
function zt(n) {
    return gf(n);
}
function ig(n, t = {}) {
    return Ga(n, cn.getMap().classNameMap, t, "regularizer");
}
function Qt(n) {
    if (n == null) return null;
    if (typeof n == "string") {
        const e = { className: n in rg ? rg[n] : n, config: {} };
        return ig(e);
    } else return n instanceof by ? n : ig(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class xy extends St {
    constructor(t) {
        super(t ?? {}),
            (this.supportsMasking = !0),
            t != null && (this.maxValue = t.maxValue);
    }
    call(t, e) {
        t = mt(t);
        let s = Ts(t);
        return this.maxValue != null && (s = fn(s, 0, this.maxValue)), s;
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = { maxValue: this.maxValue },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
xy.className = "ReLU";
_(xy);
class yy extends St {
    constructor(t) {
        super(t ?? {}),
            (this.DEFAULT_ALPHA = 0.3),
            t == null && (t = {}),
            (this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha);
    }
    call(t, e) {
        const s = mt(t);
        return dp(s, this.alpha);
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = { alpha: this.alpha },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
yy.className = "LeakyReLU";
_(yy);
class wy extends St {
    constructor(t) {
        if (
            (super(t ?? {}),
            (this.DEFAULT_ALPHA_INITIALIZER = "zeros"),
            t == null && (t = {}),
            (this.supportsMasking = !0),
            (this.alphaInitializer = Ut(
                t.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER
            )),
            (this.alphaRegularizer = Qt(t.alphaRegularizer)),
            (this.alphaConstraint = pe(t.alphaConstraint)),
            t.sharedAxes == null)
        )
            this.sharedAxes = null;
        else if (Array.isArray(t.sharedAxes)) this.sharedAxes = t.sharedAxes;
        else if (typeof t.sharedAxes == "number")
            this.sharedAxes = [t.sharedAxes];
        else
            throw new E(
                `Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`
            );
    }
    build(t) {
        t = Rt(t);
        const e = t.slice(1);
        if (this.sharedAxes != null)
            for (const o of this.sharedAxes) e[o - 1] = 1;
        this.alpha = this.addWeight(
            "alpha",
            e,
            "float32",
            this.alphaInitializer,
            this.alphaRegularizer,
            !0,
            this.alphaConstraint
        );
        const s = {};
        if (this.sharedAxes != null)
            for (let o = 1; o < t.length; ++o) s[o] = t[o];
        (this.inputSpec = [
            new de({
                ndim: t.length,
                axes: s,
            }),
        ]),
            (this.built = !0);
    }
    call(t, e) {
        return (t = mt(t)), yp(t, this.alpha.read());
    }
    getConfig() {
        const t = {
                alphaInitializer: jt(this.alphaInitializer),
                alphaRegularizer: zt(this.alphaRegularizer),
                alphaConstraint: he(this.alphaConstraint),
                sharedAxes: this.sharedAxes,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
wy.className = "PReLU";
_(wy);
let Iy = class extends St {
    constructor(t) {
        if (
            (super(t ?? {}),
            (this.DEFAULT_ALPHA = 1),
            t == null && (t = {}),
            t.alpha != null && t.alpha !== this.DEFAULT_ALPHA)
        )
            throw new yt(
                `Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`
            );
        this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha;
    }
    call(t, e) {
        const s = mt(t);
        return Jc(s);
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = { alpha: this.alpha },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
};
Iy.className = "ELU";
_(Iy);
class Cy extends St {
    constructor(t) {
        super(t ?? {}),
            (this.DEFAULT_THETA = 1),
            t == null && (t = {}),
            (this.theta = t.theta == null ? this.DEFAULT_THETA : t.theta);
    }
    call(t, e) {
        const s = mt(t);
        return G(s, tt(rn(s, this.theta), "float32"));
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = { theta: this.theta },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Cy.className = "ThresholdedReLU";
_(Cy);
class vy extends St {
    constructor(t) {
        super(t ?? {}),
            (this.DEFAULT_AXIS = 1),
            t == null && (t = {}),
            (this.softmax = new Gf().apply),
            (this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis);
    }
    call(t, e) {
        return D(() => {
            let s = mt(t);
            const o = e.mask;
            if (o != null) {
                const r = G(it(ks(s.shape), tt(o, s.dtype)), gt(-1e9));
                s = U(s, r);
            }
            return this.axis instanceof Array
                ? this.axis.length > 1
                    ? mn(it(s, pp(s, this.axis, !0)))
                    : this.softmax(s, this.axis[0])
                : this.softmax(s, this.axis);
        });
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = { axis: this.axis },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
vy.className = "Softmax";
_(vy);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function dr(n, t, e) {
    if (typeof n == "number") return Wo(n, t);
    if (n.length !== t)
        throw new E(
            `The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`
        );
    for (let s = 0; s < t; ++s) {
        const o = n[s];
        if (!UE(o))
            throw new E(
                `The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(
                    n
                )} including a non-integer number ${o}`
            );
    }
    return n;
}
function On(n, t, e, s, o = 1) {
    if (n == null) return n;
    const r = t + (t - 1) * (o - 1);
    let i;
    return (
        e === "same" ? (i = n) : (i = n - r + 1), Math.floor((i + s - 1) / s)
    );
}
function jn(n, t, e, s) {
    if (n == null) return null;
    if (s === "valid") n = n * t + Bs([e - t, 0]);
    else if (s === "same") n = n * t;
    else throw new E(`Unsupport padding mode: ${s}.`);
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Lf(n, t) {
    return D(() => (ae(t), t === "channelsFirst" ? kt(n, [0, 2, 3, 1]) : n));
}
function Sy(n, t) {
    return D(() => (ae(t), t === "channelsFirst" ? kt(n, [0, 2, 3, 4, 1]) : n));
}
function m3(n, t, e, s = 1, o = "valid", r, i = 1) {
    return D(() => {
        if ((r == null && (r = Zn()), ae(r), n.shape.length !== 3))
            throw new E(
                `The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`
            );
        if (t.shape.length !== 3)
            throw new E(
                `The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`
            );
        if (e != null && e.shape.length !== 1)
            throw new E(
                `The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`
            );
        if ((r === "channelsFirst" && (n = kt(n, [0, 2, 1])), o === "causal"))
            throw new yt(
                "The support for CAUSAL padding mode in conv1dWithBias is not implemented yet."
            );
        let a = Jb(n, t, s, o === "same" ? "same" : "valid", "NWC", i);
        return e != null && (a = _n(a, e)), a;
    });
}
function ag(n, t, e, s = [1, 1], o = "valid", r, i, a = null) {
    return D(() => {
        if ((r == null && (r = Zn()), ae(r), n.rank !== 3 && n.rank !== 4))
            throw new E(
                `conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`
            );
        if (t.rank !== 3 && t.rank !== 4)
            throw new E(
                `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`
            );
        let l = Lf(n, r);
        if (o === "causal")
            throw new yt(
                "The support for CAUSAL padding mode in conv1dWithBias is not implemented yet."
            );
        return (
            (l = IN({
                x: l,
                filter: t,
                strides: s,
                pad: o === "same" ? "same" : "valid",
                dilations: i,
                dataFormat: "NHWC",
                bias: e,
                activation: a,
            })),
            r === "channelsFirst" && (l = kt(l, [0, 3, 1, 2])),
            l
        );
    });
}
function g3(n, t, e, s = [1, 1, 1], o = "valid", r, i) {
    return D(() => {
        if ((r == null && (r = Zn()), ae(r), n.rank !== 4 && n.rank !== 5))
            throw new E(
                `conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`
            );
        if (t.rank !== 4 && t.rank !== 5)
            throw new E(
                `conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`
            );
        let a = Sy(n, r);
        if (o === "causal")
            throw new yt(
                "The support for CAUSAL padding mode in conv3dWithBias is not implemented yet."
            );
        return (
            (a = IS(a, t, s, o === "same" ? "same" : "valid", "NDHWC", i)),
            e != null && (a = _n(a, e)),
            r === "channelsFirst" && (a = kt(a, [0, 4, 1, 2, 3])),
            a
        );
    });
}
class pu extends St {
    constructor(t, e) {
        if (
            (super(e),
            (this.bias = null),
            (this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal"),
            (this.DEFAULT_BIAS_INITIALIZER = "zeros"),
            pu.verifyArgs(e),
            (this.rank = t),
            xe(this.rank, "rank"),
            this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
        )
            throw new yt(
                `Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`
            );
        if (
            ((this.kernelSize = dr(e.kernelSize, t, "kernelSize")),
            (this.strides = dr(
                e.strides == null ? 1 : e.strides,
                t,
                "strides"
            )),
            (this.padding = e.padding == null ? "valid" : e.padding),
            gn(this.padding),
            (this.dataFormat =
                e.dataFormat == null ? "channelsLast" : e.dataFormat),
            ae(this.dataFormat),
            (this.activation = _s(e.activation)),
            (this.useBias = e.useBias == null ? !0 : e.useBias),
            (this.biasInitializer = Ut(
                e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
            )),
            (this.biasConstraint = pe(e.biasConstraint)),
            (this.biasRegularizer = Qt(e.biasRegularizer)),
            (this.activityRegularizer = Qt(e.activityRegularizer)),
            (this.dilationRate = dr(
                e.dilationRate == null ? 1 : e.dilationRate,
                t,
                "dilationRate"
            )),
            this.rank === 1 &&
                Array.isArray(this.dilationRate) &&
                this.dilationRate.length !== 1)
        )
            throw new E(
                `dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(
                    this.dilationRate
                )}`
            );
        if (this.rank === 2) {
            if (typeof this.dilationRate == "number")
                this.dilationRate = [this.dilationRate, this.dilationRate];
            else if (this.dilationRate.length !== 2)
                throw new E(
                    `dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(
                        this.dilationRate
                    )}`
                );
        } else if (this.rank === 3) {
            if (typeof this.dilationRate == "number")
                this.dilationRate = [
                    this.dilationRate,
                    this.dilationRate,
                    this.dilationRate,
                ];
            else if (this.dilationRate.length !== 3)
                throw new E(
                    `dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(
                        this.dilationRate
                    )}`
                );
        }
    }
    static verifyArgs(t) {
        if (
            (Jn("kernelSize" in t, "required key 'kernelSize' not in config"),
            typeof t.kernelSize != "number" &&
                !bf(t.kernelSize, "number", 1, 3))
        )
            throw new E(
                `BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(
                    t.kernelSize
                )}.`
            );
    }
    getConfig() {
        const t = {
                kernelSize: this.kernelSize,
                strides: this.strides,
                padding: this.padding,
                dataFormat: this.dataFormat,
                dilationRate: this.dilationRate,
                activation: Hs(this.activation),
                useBias: this.useBias,
                biasInitializer: jt(this.biasInitializer),
                biasRegularizer: zt(this.biasRegularizer),
                activityRegularizer: zt(this.activityRegularizer),
                biasConstraint: he(this.biasConstraint),
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
class $r extends pu {
    constructor(t, e) {
        super(t, e),
            (this.kernel = null),
            $r.verifyArgs(e),
            (this.filters = e.filters),
            xe(this.filters, "filters"),
            (this.kernelInitializer = Ut(
                e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.kernelConstraint = pe(e.kernelConstraint)),
            (this.kernelRegularizer = Qt(e.kernelRegularizer));
    }
    build(t) {
        t = Rt(t);
        const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
        if (t[e] == null)
            throw new E(
                `The channel dimension of the input should be defined. Found ${t[e]}`
            );
        const s = t[e],
            o = this.kernelSize.concat([s, this.filters]);
        (this.kernel = this.addWeight(
            "kernel",
            o,
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        )),
            this.useBias &&
                (this.bias = this.addWeight(
                    "bias",
                    [this.filters],
                    null,
                    this.biasInitializer,
                    this.biasRegularizer,
                    !0,
                    this.biasConstraint
                )),
            (this.inputSpec = [{ ndim: this.rank + 2, axes: { [e]: s } }]),
            (this.built = !0);
    }
    call(t, e) {
        return D(() => {
            t = mt(t);
            let s;
            const o = this.bias == null ? null : this.bias.read(),
                r = Cx(this.activation.getClassName());
            if (r != null && this.rank === 2)
                s = ag(
                    t,
                    this.kernel.read(),
                    o,
                    this.strides,
                    this.padding,
                    this.dataFormat,
                    this.dilationRate,
                    r
                );
            else {
                if (this.rank === 1)
                    s = m3(
                        t,
                        this.kernel.read(),
                        o,
                        this.strides[0],
                        this.padding,
                        this.dataFormat,
                        this.dilationRate[0]
                    );
                else if (this.rank === 2)
                    s = ag(
                        t,
                        this.kernel.read(),
                        o,
                        this.strides,
                        this.padding,
                        this.dataFormat,
                        this.dilationRate
                    );
                else if (this.rank === 3)
                    s = g3(
                        t,
                        this.kernel.read(),
                        o,
                        this.strides,
                        this.padding,
                        this.dataFormat,
                        this.dilationRate
                    );
                else
                    throw new yt(
                        "convolutions greater than 3D are not implemented yet."
                    );
                this.activation != null && (s = this.activation.apply(s));
            }
            return s;
        });
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = [],
            s =
                this.dataFormat === "channelsLast"
                    ? t.slice(1, t.length - 1)
                    : t.slice(2);
        for (let r = 0; r < s.length; ++r) {
            const i = On(
                s[r],
                this.kernelSize[r],
                this.padding,
                this.strides[r],
                typeof this.dilationRate == "number"
                    ? this.dilationRate
                    : this.dilationRate[r]
            );
            e.push(i);
        }
        let o = [t[0]];
        return (
            this.dataFormat === "channelsLast"
                ? ((o = o.concat(e)), o.push(this.filters))
                : (o.push(this.filters), (o = o.concat(e))),
            o
        );
    }
    getConfig() {
        const t = {
                filters: this.filters,
                kernelInitializer: jt(this.kernelInitializer),
                kernelRegularizer: zt(this.kernelRegularizer),
                kernelConstraint: he(this.kernelConstraint),
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    static verifyArgs(t) {
        if (!("filters" in t) || typeof t.filters != "number" || t.filters < 1)
            throw new E(
                `Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(
                    t.filters
                )}`
            );
    }
}
class Fa extends $r {
    constructor(t) {
        super(2, t), Fa.verifyArgs(t);
    }
    getConfig() {
        const t = super.getConfig();
        return delete t.rank, t;
    }
    static verifyArgs(t) {
        if (
            typeof t.kernelSize != "number" &&
            !bf(t.kernelSize, "number", 1, 2)
        )
            throw new E(
                `Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(
                    t.kernelSize
                )}.`
            );
    }
}
Fa.className = "Conv2D";
_(Fa);
class Va extends $r {
    constructor(t) {
        super(3, t), Va.verifyArgs(t);
    }
    getConfig() {
        const t = super.getConfig();
        return delete t.rank, t;
    }
    static verifyArgs(t) {
        if (
            typeof t.kernelSize != "number" &&
            !(
                Array.isArray(t.kernelSize) &&
                (t.kernelSize.length === 1 || t.kernelSize.length === 3)
            )
        )
            throw new E(
                `Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(
                    t.kernelSize
                )}.`
            );
    }
}
Va.className = "Conv3D";
_(Va);
class ky extends Fa {
    constructor(t) {
        if (
            (super(t),
            (this.inputSpec = [new de({ ndim: 4 })]),
            this.padding !== "same" && this.padding !== "valid")
        )
            throw new E(
                `Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`
            );
    }
    build(t) {
        if (((t = Rt(t)), t.length !== 4))
            throw new E(
                "Input should have rank 4; Received input shape: " +
                    JSON.stringify(t)
            );
        const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
        if (t[e] == null)
            throw new E(
                "The channel dimension of the inputs should be defined. Found `None`."
            );
        const s = t[e],
            o = this.kernelSize.concat([this.filters, s]);
        (this.kernel = this.addWeight(
            "kernel",
            o,
            "float32",
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        )),
            this.useBias &&
                (this.bias = this.addWeight(
                    "bias",
                    [this.filters],
                    "float32",
                    this.biasInitializer,
                    this.biasRegularizer,
                    !0,
                    this.biasConstraint
                )),
            (this.inputSpec = [new de({ ndim: 4, axes: { [e]: s } })]),
            (this.built = !0);
    }
    call(t, e) {
        return D(() => {
            let s = mt(t);
            if (s.shape.length !== 4)
                throw new E(
                    `Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`
                );
            const o = s.shape,
                r = o[0];
            let i, a;
            this.dataFormat === "channelsFirst"
                ? ((i = 2), (a = 3))
                : ((i = 1), (a = 2));
            const l = o[i],
                c = o[a],
                u = this.kernelSize[0],
                d = this.kernelSize[1],
                h = this.strides[0],
                p = this.strides[1],
                f = jn(l, h, u, this.padding),
                m = jn(c, p, d, this.padding),
                g = [r, f, m, this.filters];
            this.dataFormat !== "channelsLast" && (s = kt(s, [0, 2, 3, 1]));
            let b = jb(s, this.kernel.read(), g, this.strides, this.padding);
            return (
                this.dataFormat !== "channelsLast" && (b = kt(b, [0, 3, 1, 2])),
                this.bias != null &&
                    (b = _n(b, this.bias.read(), this.dataFormat)),
                this.activation != null && (b = this.activation.apply(b)),
                b
            );
        });
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = t.slice();
        let s, o, r;
        this.dataFormat === "channelsFirst"
            ? ((s = 1), (o = 2), (r = 3))
            : ((s = 3), (o = 1), (r = 2));
        const i = this.kernelSize[0],
            a = this.kernelSize[1],
            l = this.strides[0],
            c = this.strides[1];
        return (
            (e[s] = this.filters),
            (e[o] = jn(e[o], l, i, this.padding)),
            (e[r] = jn(e[r], c, a, this.padding)),
            e
        );
    }
    getConfig() {
        const t = super.getConfig();
        return delete t.dilationRate, t;
    }
}
ky.className = "Conv2DTranspose";
_(ky);
class Ty extends Va {
    constructor(t) {
        if (
            (super(t),
            (this.inputSpec = [new de({ ndim: 5 })]),
            this.padding !== "same" && this.padding !== "valid")
        )
            throw new E(
                `Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`
            );
    }
    build(t) {
        if (((t = Rt(t)), t.length !== 5))
            throw new E(
                "Input should have rank 5; Received input shape: " +
                    JSON.stringify(t)
            );
        const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
        if (t[e] == null)
            throw new E(
                "The channel dimension of the inputs should be defined. Found `None`."
            );
        const s = t[e],
            o = this.kernelSize.concat([this.filters, s]);
        (this.kernel = this.addWeight(
            "kernel",
            o,
            "float32",
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        )),
            this.useBias &&
                (this.bias = this.addWeight(
                    "bias",
                    [this.filters],
                    "float32",
                    this.biasInitializer,
                    this.biasRegularizer,
                    !0,
                    this.biasConstraint
                )),
            (this.inputSpec = [new de({ ndim: 5, axes: { [e]: s } })]),
            (this.built = !0);
    }
    call(t, e) {
        return D(() => {
            let s = mt(t);
            if (s.shape.length !== 5)
                throw new E(
                    `Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`
                );
            const o = s.shape,
                r = o[0];
            let i, a, l;
            this.dataFormat === "channelsFirst"
                ? ((l = 2), (i = 3), (a = 4))
                : ((l = 1), (i = 2), (a = 3));
            const c = o[l],
                u = o[i],
                d = o[a],
                h = this.kernelSize[0],
                p = this.kernelSize[1],
                f = this.kernelSize[2],
                m = this.strides[0],
                g = this.strides[1],
                b = this.strides[2],
                x = jn(c, m, h, this.padding),
                w = jn(u, g, p, this.padding),
                y = jn(d, b, f, this.padding),
                I = [r, x, w, y, this.filters];
            this.dataFormat !== "channelsLast" && (s = kt(s, [0, 2, 3, 4, 1]));
            let v = SS(s, this.kernel.read(), I, this.strides, this.padding);
            return (
                this.dataFormat !== "channelsLast" &&
                    (v = kt(v, [0, 4, 1, 2, 3])),
                this.bias !== null &&
                    (v = _n(v, this.bias.read(), this.dataFormat)),
                this.activation !== null && (v = this.activation.apply(v)),
                v
            );
        });
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = t.slice();
        let s, o, r, i;
        this.dataFormat === "channelsFirst"
            ? ((s = 1), (o = 2), (r = 3), (i = 4))
            : ((s = 4), (o = 1), (r = 2), (i = 3));
        const a = this.kernelSize[0],
            l = this.kernelSize[1],
            c = this.kernelSize[2],
            u = this.strides[0],
            d = this.strides[1],
            h = this.strides[2];
        return (
            (e[s] = this.filters),
            (e[o] = jn(e[o], u, a, this.padding)),
            (e[r] = jn(e[r], d, l, this.padding)),
            (e[i] = jn(e[i], h, c, this.padding)),
            e
        );
    }
    getConfig() {
        const t = super.getConfig();
        return delete t.dilationRate, t;
    }
}
Ty.className = "Conv3DTranspose";
_(Ty);
class Ny extends $r {
    constructor(t, e) {
        if (
            (super(t, e),
            (this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform"),
            (this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform"),
            (this.depthwiseKernel = null),
            (this.pointwiseKernel = null),
            e.filters == null)
        )
            throw new E(
                "The `filters` configuration field is required by SeparableConv, but is unspecified."
            );
        if (
            e.kernelInitializer != null ||
            e.kernelRegularizer != null ||
            e.kernelConstraint != null
        )
            throw new E(
                "Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead."
            );
        if (e.padding != null && e.padding !== "same" && e.padding !== "valid")
            throw new E(
                `SeparableConv${
                    this.rank
                }D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(
                    e.padding
                )}`
            );
        (this.depthMultiplier =
            e.depthMultiplier == null ? 1 : e.depthMultiplier),
            (this.depthwiseInitializer = Ut(
                e.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER
            )),
            (this.depthwiseRegularizer = Qt(e.depthwiseRegularizer)),
            (this.depthwiseConstraint = pe(e.depthwiseConstraint)),
            (this.pointwiseInitializer = Ut(
                e.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER
            )),
            (this.pointwiseRegularizer = Qt(e.pointwiseRegularizer)),
            (this.pointwiseConstraint = pe(e.pointwiseConstraint));
    }
    build(t) {
        if (((t = Rt(t)), t.length < this.rank + 2))
            throw new E(
                `Inputs to SeparableConv${this.rank}D should have rank ${
                    this.rank + 2
                }, but received input shape: ${JSON.stringify(t)}`
            );
        const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
        if (t[e] == null || t[e] < 0)
            throw new E(
                `The channel dimension of the inputs should be defined, but found ${JSON.stringify(
                    t[e]
                )}`
            );
        const s = t[e],
            o = this.kernelSize.concat([s, this.depthMultiplier]),
            r = [];
        for (let a = 0; a < this.rank; ++a) r.push(1);
        r.push(s * this.depthMultiplier, this.filters);
        const i = !0;
        (this.depthwiseKernel = this.addWeight(
            "depthwise_kernel",
            o,
            "float32",
            this.depthwiseInitializer,
            this.depthwiseRegularizer,
            i,
            this.depthwiseConstraint
        )),
            (this.pointwiseKernel = this.addWeight(
                "pointwise_kernel",
                r,
                "float32",
                this.pointwiseInitializer,
                this.pointwiseRegularizer,
                i,
                this.pointwiseConstraint
            )),
            this.useBias
                ? (this.bias = this.addWeight(
                      "bias",
                      [this.filters],
                      "float32",
                      this.biasInitializer,
                      this.biasRegularizer,
                      i,
                      this.biasConstraint
                  ))
                : (this.bias = null),
            (this.inputSpec = [
                new de({ ndim: this.rank + 2, axes: { [e]: s } }),
            ]),
            (this.built = !0);
    }
    call(t, e) {
        return D(() => {
            t = mt(t);
            let s;
            if (this.rank === 1)
                throw new yt(
                    "1D separable convolution is not implemented yet."
                );
            return (
                this.rank === 2 &&
                    (this.dataFormat === "channelsFirst" &&
                        (t = kt(t, [0, 2, 3, 1])),
                    (s = p0(
                        t,
                        this.depthwiseKernel.read(),
                        this.pointwiseKernel.read(),
                        this.strides,
                        this.padding,
                        this.dilationRate,
                        "NHWC"
                    ))),
                this.useBias && (s = _n(s, this.bias.read(), this.dataFormat)),
                this.activation != null && (s = this.activation.apply(s)),
                this.dataFormat === "channelsFirst" &&
                    (s = kt(s, [0, 3, 1, 2])),
                s
            );
        });
    }
    getConfig() {
        const t = super.getConfig();
        return (
            delete t.rank,
            delete t.kernelInitializer,
            delete t.kernelRegularizer,
            delete t.kernelConstraint,
            (t.depthwiseInitializer = jt(this.depthwiseInitializer)),
            (t.pointwiseInitializer = jt(this.pointwiseInitializer)),
            (t.depthwiseRegularizer = zt(this.depthwiseRegularizer)),
            (t.pointwiseRegularizer = zt(this.pointwiseRegularizer)),
            (t.depthwiseConstraint = he(this.depthwiseConstraint)),
            (t.pointwiseConstraint = he(this.pointwiseConstraint)),
            t
        );
    }
}
Ny.className = "SeparableConv";
class Ry extends Ny {
    constructor(t) {
        super(2, t);
    }
}
Ry.className = "SeparableConv2D";
_(Ry);
class fu extends $r {
    constructor(t) {
        super(1, t), fu.verifyArgs(t), (this.inputSpec = [{ ndim: 3 }]);
    }
    getConfig() {
        const t = super.getConfig();
        return delete t.rank, delete t.dataFormat, t;
    }
    static verifyArgs(t) {
        if (
            typeof t.kernelSize != "number" &&
            !bf(t.kernelSize, "number", 1, 1)
        )
            throw new E(
                `Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(
                    t.kernelSize
                )}.`
            );
    }
}
fu.className = "Conv1D";
_(fu);
class $y extends St {
    constructor(t) {
        super(t),
            typeof t.cropping == "number"
                ? (this.cropping = [
                      [t.cropping, t.cropping],
                      [t.cropping, t.cropping],
                  ])
                : typeof t.cropping[0] == "number"
                ? (this.cropping = [
                      [t.cropping[0], t.cropping[0]],
                      [t.cropping[1], t.cropping[1]],
                  ])
                : (this.cropping = t.cropping),
            (this.dataFormat =
                t.dataFormat === void 0 ? "channelsLast" : t.dataFormat),
            (this.inputSpec = [{ ndim: 4 }]);
    }
    computeOutputShape(t) {
        return this.dataFormat === "channelsFirst"
            ? [
                  t[0],
                  t[1],
                  t[2] - this.cropping[0][0] - this.cropping[0][1],
                  t[3] - this.cropping[1][0] - this.cropping[1][1],
              ]
            : [
                  t[0],
                  t[1] - this.cropping[0][0] - this.cropping[0][1],
                  t[2] - this.cropping[1][0] - this.cropping[1][1],
                  t[3],
              ];
    }
    call(t, e) {
        return D(() => {
            if (((t = mt(t)), this.dataFormat === "channelsLast")) {
                const s = _a(
                    t,
                    this.cropping[0][0],
                    t.shape[1] - this.cropping[0][0] - this.cropping[0][1],
                    2
                );
                return _a(
                    s,
                    this.cropping[1][0],
                    t.shape[2] - this.cropping[1][1] - this.cropping[1][0],
                    3
                );
            } else {
                const s = _a(
                    t,
                    this.cropping[0][0],
                    t.shape[2] - this.cropping[0][0] - this.cropping[0][1],
                    3
                );
                return _a(
                    s,
                    this.cropping[1][0],
                    t.shape[3] - this.cropping[1][1] - this.cropping[1][0],
                    4
                );
            }
        });
    }
    getConfig() {
        const t = { cropping: this.cropping, dataFormat: this.dataFormat },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
$y.className = "Cropping2D";
_($y);
class Gy extends St {
    constructor(t) {
        super(t),
            (this.DEFAULT_SIZE = [2, 2]),
            (this.inputSpec = [{ ndim: 4 }]),
            (this.size = t.size == null ? this.DEFAULT_SIZE : t.size),
            (this.dataFormat =
                t.dataFormat == null ? "channelsLast" : t.dataFormat),
            ae(this.dataFormat),
            (this.interpolation =
                t.interpolation == null ? "nearest" : t.interpolation),
            BE(this.interpolation);
    }
    computeOutputShape(t) {
        if (this.dataFormat === "channelsFirst") {
            const e = t[2] == null ? null : this.size[0] * t[2],
                s = t[3] == null ? null : this.size[1] * t[3];
            return [t[0], t[1], e, s];
        } else {
            const e = t[1] == null ? null : this.size[0] * t[1],
                s = t[2] == null ? null : this.size[1] * t[2];
            return [t[0], e, s, t[3]];
        }
    }
    call(t, e) {
        return D(() => {
            let s = mt(t);
            const o = s.shape;
            if (this.dataFormat === "channelsFirst") {
                s = kt(s, [0, 2, 3, 1]);
                const r = this.size[0] * o[2],
                    i = this.size[1] * o[3],
                    a =
                        this.interpolation === "nearest"
                            ? fs.resizeNearestNeighbor(s, [r, i])
                            : fs.resizeBilinear(s, [r, i]);
                return kt(a, [0, 3, 1, 2]);
            } else {
                const r = this.size[0] * o[1],
                    i = this.size[1] * o[2];
                return this.interpolation === "nearest"
                    ? fs.resizeNearestNeighbor(s, [r, i])
                    : fs.resizeBilinear(s, [r, i]);
            }
        });
    }
    getConfig() {
        const t = {
                size: this.size,
                dataFormat: this.dataFormat,
                interpolation: this.interpolation,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Gy.className = "UpSampling2D";
_(Gy);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function b3(n, t, e = [1, 1], s = "valid", o, r) {
    return D(() => {
        o == null && (o = Zn()), ae(o);
        let i = Lf(n, o);
        if (n.rank !== 4)
            throw new E(
                `Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`
            );
        if (t.rank !== 4)
            throw new E(
                `depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`
            );
        return (
            (i = ap(i, t, e, s === "same" ? "same" : "valid", "NHWC", r)),
            o === "channelsFirst" && (i = kt(i, [0, 3, 1, 2])),
            i
        );
    });
}
class Ey extends pu {
    constructor(t) {
        super(2, t),
            (this.depthwiseKernel = null),
            (this.depthMultiplier =
                t.depthMultiplier == null ? 1 : t.depthMultiplier),
            (this.depthwiseInitializer = Ut(
                t.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.depthwiseConstraint = pe(t.depthwiseConstraint)),
            (this.depthwiseRegularizer = Qt(t.depthwiseRegularizer));
    }
    build(t) {
        if (((t = Rt(t)), t.length < 4))
            throw new E(
                `Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(
                    t
                )}.`
            );
        const e = this.dataFormat === "channelsFirst" ? 1 : 3;
        if (t[e] == null || t[e] < 0)
            throw new E(
                `The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`
            );
        const s = t[e],
            o = [
                this.kernelSize[0],
                this.kernelSize[1],
                s,
                this.depthMultiplier,
            ];
        (this.depthwiseKernel = this.addWeight(
            "depthwise_kernel",
            o,
            null,
            this.depthwiseInitializer,
            this.depthwiseRegularizer,
            !0,
            this.depthwiseConstraint
        )),
            this.useBias
                ? (this.bias = this.addWeight(
                      "bias",
                      [s * this.depthMultiplier],
                      null,
                      this.biasInitializer,
                      this.biasRegularizer,
                      !0,
                      this.biasConstraint
                  ))
                : (this.bias = null),
            (this.built = !0);
    }
    call(t, e) {
        return D(() => {
            t = mt(t);
            let s = b3(
                t,
                this.depthwiseKernel.read(),
                this.strides,
                this.padding,
                this.dataFormat,
                null
            );
            return (
                this.useBias && (s = _n(s, this.bias.read(), this.dataFormat)),
                this.activation != null && (s = this.activation.apply(s)),
                s
            );
        });
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = this.dataFormat === "channelsFirst" ? t[2] : t[1],
            s = this.dataFormat === "channelsFirst" ? t[3] : t[2],
            o =
                this.dataFormat === "channelsFirst"
                    ? t[1] * this.depthMultiplier
                    : t[3] * this.depthMultiplier,
            r = On(e, this.kernelSize[0], this.padding, this.strides[0]),
            i = On(s, this.kernelSize[1], this.padding, this.strides[1]);
        return this.dataFormat === "channelsFirst"
            ? [t[0], o, r, i]
            : [t[0], r, i, o];
    }
    getConfig() {
        const t = super.getConfig();
        return (
            (t.depthMultiplier = this.depthMultiplier),
            (t.depthwiseInitializer = jt(this.depthwiseInitializer)),
            (t.depthwiseRegularizer = zt(this.depthwiseRegularizer)),
            (t.depthwiseConstraint = he(this.depthwiseRegularizer)),
            t
        );
    }
}
Ey.className = "DepthwiseConv2D";
_(Ey);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Ly(n, t, e, s) {
    if (Array.isArray(n)) {
        if (t != null || e != null)
            throw new E(
                "When inputs is an array, neither initialState or constants should be provided"
            );
        s != null &&
            ((e = n.slice(n.length - s, n.length)),
            (n = n.slice(0, n.length - s))),
            n.length > 1 && (t = n.slice(1, n.length)),
            (n = n[0]);
    }
    function o(r) {
        return r == null || Array.isArray(r) ? r : [r];
    }
    return (t = o(t)), (e = o(e)), { inputs: n, initialState: t, constants: e };
}
function My(n, t, e, s = !1, o, r, i = !1, a = !1) {
    return D(() => {
        const l = t.shape.length;
        if (l < 3) throw new E(`Input should be at least 3D, but is ${l}D.`);
        const c = [1, 0].concat(Kn(2, l));
        if (((t = kt(t, c)), r != null))
            throw new yt(
                "The rnn() functoin of the deeplearn.js backend does not support constants yet."
            );
        i &&
            console.warn(
                "Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."
            ),
            o != null &&
                ((o = tt(tt(o, "bool"), "float32")),
                o.rank === l - 1 && (o = Oe(o, -1)),
                (o = kt(o, c))),
            s && ((t = Lo(t, 0)), o != null && (o = Lo(o, 0)));
        const u = [];
        let d,
            h = e;
        const p = t.shape[0],
            f = Mo(t);
        let m;
        o != null && (m = Mo(o));
        for (let b = 0; b < p; ++b) {
            const x = f[b],
                w = D(() => n(x, h));
            if (o == null) (d = w[0]), (h = w[1]);
            else {
                const y = D(() => {
                    const I = m[b],
                        v = it(Rn(I), I),
                        k = U(G(w[0], I), G(h[0], v)),
                        S = h.map((N, R) => U(G(w[1][R], I), G(N, v)));
                    return { output: k, newStates: S };
                });
                (d = y.output), (h = y.newStates);
            }
            a && u.push(d);
        }
        let g;
        return a && (g = Xn(u, 1)), [d, g, h];
    });
}
class no extends St {
    constructor(t) {
        super(t);
        let e;
        if (t.cell == null)
            throw new E("cell property is missing for the constructor of RNN.");
        if (
            (Array.isArray(t.cell)
                ? (e = new Df({ cells: t.cell }))
                : (e = t.cell),
            e.stateSize == null)
        )
            throw new E(
                "The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state)."
            );
        (this.cell = e),
            (this.returnSequences =
                t.returnSequences == null ? !1 : t.returnSequences),
            (this.returnState = t.returnState == null ? !1 : t.returnState),
            (this.goBackwards = t.goBackwards == null ? !1 : t.goBackwards),
            (this._stateful = t.stateful == null ? !1 : t.stateful),
            (this.unroll = t.unroll == null ? !1 : t.unroll),
            (this.supportsMasking = !0),
            (this.inputSpec = [new de({ ndim: 3 })]),
            (this.stateSpec = null),
            (this.states_ = null),
            (this.numConstants = null),
            (this.keptStates = []);
    }
    // Porting Note: This is the equivalent of `RNN.states` property getter in
    //   PyKeras.
    getStates() {
        if (this.states_ == null) {
            const t = Array.isArray(this.cell.stateSize)
                ? this.cell.stateSize.length
                : 1;
            return Kn(0, t).map((e) => null);
        } else return this.states_;
    }
    // Porting Note: This is the equivalent of the `RNN.states` property setter in
    //   PyKeras.
    setStates(t) {
        this.states_ = t;
    }
    computeOutputShape(t) {
        Gd(t) && (t = t[0]), (t = t);
        let e = this.cell.stateSize;
        Array.isArray(e) || (e = [e]);
        const s = e[0];
        let o;
        if (
            (this.returnSequences ? (o = [t[0], t[1], s]) : (o = [t[0], s]),
            this.returnState)
        ) {
            const r = [];
            for (const i of e) r.push([t[0], i]);
            return [o].concat(r);
        } else return o;
    }
    computeMask(t, e) {
        return D(() => {
            Array.isArray(e) && (e = e[0]);
            const s = this.returnSequences ? e : null;
            if (this.returnState) {
                const o = this.states.map((r) => null);
                return [s].concat(o);
            } else return s;
        });
    }
    /**
     * Get the current state tensors of the RNN.
     *
     * If the state hasn't been set, return an array of `null`s of the correct
     * length.
     */
    get states() {
        if (this.states_ == null) {
            const t = Array.isArray(this.cell.stateSize)
                    ? this.cell.stateSize.length
                    : 1,
                e = [];
            for (let s = 0; s < t; ++s) e.push(null);
            return e;
        } else return this.states_;
    }
    set states(t) {
        this.states_ = t;
    }
    build(t) {
        if (this.numConstants != null)
            throw new yt("Constants support is not implemented in RNN yet.");
        Gd(t) && (t = t[0]), (t = t);
        const e = this.stateful ? t[0] : null,
            s = t.slice(2);
        this.inputSpec[0] = new de({ shape: [e, null, ...s] });
        const o = [t[0]].concat(t.slice(2));
        this.cell.build(o);
        let r;
        if (
            (Array.isArray(this.cell.stateSize)
                ? (r = this.cell.stateSize)
                : (r = [this.cell.stateSize]),
            this.stateSpec != null)
        ) {
            if (
                !$t(
                    this.stateSpec.map((i) => i.shape[i.shape.length - 1]),
                    r
                )
            )
                throw new E(
                    `An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`
                );
        } else this.stateSpec = r.map((i) => new de({ shape: [null, i] }));
        this.stateful && this.resetStates();
    }
    /**
     * Reset the state tensors of the RNN.
     *
     * If the `states` argument is `undefined` or `null`, will set the
     * state tensor(s) of the RNN to all-zero tensors of the appropriate
     * shape(s).
     *
     * If `states` is provided, will set the state tensors of the RNN to its
     * value.
     *
     * @param states Optional externally-provided initial states.
     * @param training Whether this call is done during training. For stateful
     *   RNNs, this affects whether the old states are kept or discarded. In
     *   particular, if `training` is `true`, the old states will be kept so
     *   that subsequent backpropgataion through time (BPTT) may work properly.
     *   Else, the old states will be discarded.
     */
    resetStates(t, e = !1) {
        D(() => {
            if (!this.stateful)
                throw new Qn(
                    "Cannot call resetStates() on an RNN Layer that is not stateful."
                );
            const s = this.inputSpec[0].shape[0];
            if (s == null)
                throw new E(
                    "If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer."
                );
            if (this.states_ == null)
                Array.isArray(this.cell.stateSize)
                    ? (this.states_ = this.cell.stateSize.map((o) =>
                          be([s, o])
                      ))
                    : (this.states_ = [be([s, this.cell.stateSize])]);
            else if (t == null)
                xt(this.states_),
                    this.keptStates != null &&
                        (xt(this.keptStates), (this.keptStates = [])),
                    Array.isArray(this.cell.stateSize)
                        ? (this.states_ = this.cell.stateSize.map((o) =>
                              be([s, o])
                          ))
                        : (this.states_[0] = be([s, this.cell.stateSize]));
            else {
                if (
                    (Array.isArray(t) || (t = [t]),
                    t.length !== this.states_.length)
                )
                    throw new E(
                        `Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`
                    );
                e === !0
                    ? this.keptStates.push(this.states_.slice())
                    : xt(this.states_);
                for (let o = 0; o < this.states_.length; ++o) {
                    const r = t[o],
                        i = Array.isArray(this.cell.stateSize)
                            ? this.cell.stateSize[o]
                            : this.cell.stateSize,
                        a = [s, i];
                    if (!$t(r.shape, a))
                        throw new E(
                            `State ${o} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`
                        );
                    this.states_[o] = r;
                }
            }
            this.states_ = this.states_.map((o) => hn(o.clone()));
        });
    }
    apply(t, e) {
        let s = e == null ? null : e.initialState,
            o = e == null ? null : e.constants;
        e == null && (e = {});
        const r = Ly(t, s, o, this.numConstants);
        (t = r.inputs), (s = r.initialState), (o = r.constants);
        let i = [],
            a = [];
        if (s != null) {
            (e.initialState = s), (i = i.concat(s)), (this.stateSpec = []);
            for (const c of s) this.stateSpec.push(new de({ shape: c.shape }));
            a = a.concat(this.stateSpec);
        }
        if (
            (o != null &&
                ((e.constants = o),
                (i = i.concat(o)),
                (this.numConstants = o.length)),
            i[0] instanceof os)
        ) {
            const c = [t].concat(i),
                u = this.inputSpec.concat(a),
                d = this.inputSpec;
            this.inputSpec = u;
            const h = super.apply(c, e);
            return (this.inputSpec = d), h;
        } else return super.apply(t, e);
    }
    // tslint:disable-next-line:no-any
    call(t, e) {
        return D(() => {
            const s = e == null ? null : e.mask,
                o = e == null ? null : e.training;
            let r = e == null ? null : e.initialState;
            (t = mt(t)),
                r == null &&
                    (this.stateful
                        ? (r = this.states_)
                        : (r = this.getInitialState(t)));
            const i = Array.isArray(this.cell.stateSize)
                ? this.cell.stateSize.length
                : 1;
            if (r.length !== i)
                throw new E(
                    `RNN Layer has ${i} state(s) but was passed ${r.length} initial state(s).`
                );
            this.unroll &&
                console.warn(
                    "Ignoring unroll = true for RNN layer, due to imperative backend."
                );
            const a = { training: o },
                c = My(
                    (f, m) => {
                        const g = this.cell.call([f].concat(m), a);
                        return [g[0], g.slice(1)];
                    },
                    t,
                    r,
                    this.goBackwards,
                    s,
                    null,
                    this.unroll,
                    this.returnSequences
                ),
                u = c[0],
                d = c[1],
                h = c[2];
            this.stateful && this.resetStates(h, o);
            const p = this.returnSequences ? d : u;
            return this.returnState ? [p].concat(h) : p;
        });
    }
    getInitialState(t) {
        return D(() => {
            let e = be(t.shape);
            return (
                (e = at(e, [1, 2])),
                (e = Ea(e)),
                Array.isArray(this.cell.stateSize)
                    ? this.cell.stateSize.map((s) =>
                          s > 1 ? Rd(e, [1, s]) : e
                      )
                    : this.cell.stateSize > 1
                    ? [Rd(e, [1, this.cell.stateSize])]
                    : [e]
            );
        });
    }
    get trainableWeights() {
        return this.trainable ? this.cell.trainableWeights : [];
    }
    get nonTrainableWeights() {
        return this.trainable
            ? this.cell.nonTrainableWeights
            : this.cell.weights;
    }
    setFastWeightInitDuringBuild(t) {
        super.setFastWeightInitDuringBuild(t),
            this.cell != null && this.cell.setFastWeightInitDuringBuild(t);
    }
    getConfig() {
        const t = super.getConfig(),
            e = {
                returnSequences: this.returnSequences,
                returnState: this.returnState,
                goBackwards: this.goBackwards,
                stateful: this.stateful,
                unroll: this.unroll,
            };
        this.numConstants != null && (e.numConstants = this.numConstants);
        const s = this.cell.getConfig();
        return (
            this.getClassName() === no.className &&
                (e.cell = {
                    className: this.cell.getClassName(),
                    config: s,
                }),
            Object.assign(Object.assign(Object.assign({}, s), t), e)
        );
    }
    /** @nocollapse */
    static fromConfig(t, e, s = {}) {
        const o = e.cell,
            r = An(o, s);
        return new t(Object.assign(e, { cell: r }));
    }
}
no.className = "RNN";
_(no);
class mu extends St {}
class Mf extends mu {
    constructor(t) {
        super(t),
            (this.DEFAULT_ACTIVATION = "tanh"),
            (this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal"),
            (this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal"),
            (this.DEFAULT_BIAS_INITIALIZER = "zeros"),
            (this.units = t.units),
            xe(this.units, "units"),
            (this.activation = _s(
                t.activation == null ? this.DEFAULT_ACTIVATION : t.activation
            )),
            (this.useBias = t.useBias == null ? !0 : t.useBias),
            (this.kernelInitializer = Ut(
                t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.recurrentInitializer = Ut(
                t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER
            )),
            (this.biasInitializer = Ut(
                t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
            )),
            (this.kernelRegularizer = Qt(t.kernelRegularizer)),
            (this.recurrentRegularizer = Qt(t.recurrentRegularizer)),
            (this.biasRegularizer = Qt(t.biasRegularizer)),
            (this.kernelConstraint = pe(t.kernelConstraint)),
            (this.recurrentConstraint = pe(t.recurrentConstraint)),
            (this.biasConstraint = pe(t.biasConstraint)),
            (this.dropout = xr([
                1,
                Bs([0, t.dropout == null ? 0 : t.dropout]),
            ])),
            (this.recurrentDropout = xr([
                1,
                Bs([0, t.recurrentDropout == null ? 0 : t.recurrentDropout]),
            ])),
            (this.dropoutFunc = t.dropoutFunc),
            (this.stateSize = this.units),
            (this.dropoutMask = null),
            (this.recurrentDropoutMask = null);
    }
    build(t) {
        (t = Rt(t)),
            (this.kernel = this.addWeight(
                "kernel",
                [t[t.length - 1], this.units],
                null,
                this.kernelInitializer,
                this.kernelRegularizer,
                !0,
                this.kernelConstraint
            )),
            (this.recurrentKernel = this.addWeight(
                "recurrent_kernel",
                [this.units, this.units],
                null,
                this.recurrentInitializer,
                this.recurrentRegularizer,
                !0,
                this.recurrentConstraint
            )),
            this.useBias
                ? (this.bias = this.addWeight(
                      "bias",
                      [this.units],
                      null,
                      this.biasInitializer,
                      this.biasRegularizer,
                      !0,
                      this.biasConstraint
                  ))
                : (this.bias = null),
            (this.built = !0);
    }
    // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:
    //   `inputs` and `states`. Here, the two tensors are combined into an
    //   `Tensor[]` Array as the first input argument.
    //   Similarly, PyKeras' equivalent of this method returns two values:
    //    `output` and `[output]`. Here the two are combined into one length-2
    //    `Tensor[]`, consisting of `output` repeated.
    call(t, e) {
        return D(() => {
            if (((t = t), t.length !== 2))
                throw new E(
                    `SimpleRNNCell expects 2 input Tensors, got ${t.length}.`
                );
            let s = t[1];
            t = t[0];
            const o = e.training == null ? !1 : e.training;
            0 < this.dropout &&
                this.dropout < 1 &&
                this.dropoutMask == null &&
                (this.dropoutMask = Us({
                    ones: () => Rn(t),
                    rate: this.dropout,
                    training: o,
                    dropoutFunc: this.dropoutFunc,
                })),
                0 < this.recurrentDropout &&
                    this.recurrentDropout < 1 &&
                    this.recurrentDropoutMask == null &&
                    (this.recurrentDropoutMask = Us({
                        ones: () => Rn(s),
                        rate: this.recurrentDropout,
                        training: o,
                        dropoutFunc: this.dropoutFunc,
                    }));
            let r;
            const i = this.dropoutMask,
                a = this.recurrentDropoutMask;
            i != null
                ? (r = ns(G(t, i), this.kernel.read()))
                : (r = ns(t, this.kernel.read())),
                this.bias != null && (r = _n(r, this.bias.read())),
                a != null && (s = G(s, a));
            let l = U(r, ns(s, this.recurrentKernel.read()));
            return (
                this.activation != null && (l = this.activation.apply(l)),
                [l, l]
            );
        });
    }
    getConfig() {
        const t = super.getConfig(),
            e = {
                units: this.units,
                activation: Hs(this.activation),
                useBias: this.useBias,
                kernelInitializer: jt(this.kernelInitializer),
                recurrentInitializer: jt(this.recurrentInitializer),
                biasInitializer: jt(this.biasInitializer),
                kernelRegularizer: zt(this.kernelRegularizer),
                recurrentRegularizer: zt(this.recurrentRegularizer),
                biasRegularizer: zt(this.biasRegularizer),
                activityRegularizer: zt(this.activityRegularizer),
                kernelConstraint: he(this.kernelConstraint),
                recurrentConstraint: he(this.recurrentConstraint),
                biasConstraint: he(this.biasConstraint),
                dropout: this.dropout,
                recurrentDropout: this.recurrentDropout,
            };
        return Object.assign(Object.assign({}, t), e);
    }
}
Mf.className = "SimpleRNNCell";
_(Mf);
class Wy extends no {
    constructor(t) {
        (t.cell = new Mf(t)), super(t);
    }
    call(t, e) {
        return D(() => {
            this.cell.dropoutMask != null &&
                (xt(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
                this.cell.recurrentDropoutMask != null &&
                    (xt(this.cell.recurrentDropoutMask),
                    (this.cell.recurrentDropoutMask = null));
            const s = e == null ? null : e.mask,
                o = e == null ? null : e.training,
                r = e == null ? null : e.initialState;
            return super.call(t, { mask: s, training: o, initialState: r });
        });
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t(e);
    }
}
Wy.className = "SimpleRNN";
_(Wy);
class Wf extends mu {
    constructor(t) {
        if (
            (super(t),
            (this.DEFAULT_ACTIVATION = "tanh"),
            (this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid"),
            (this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal"),
            (this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal"),
            (this.DEFAULT_BIAS_INITIALIZER = "zeros"),
            t.resetAfter)
        )
            throw new E(
                "GRUCell does not support reset_after parameter set to true."
            );
        (this.units = t.units),
            xe(this.units, "units"),
            (this.activation = _s(
                t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation
            )),
            (this.recurrentActivation = _s(
                t.recurrentActivation === void 0
                    ? this.DEFAULT_RECURRENT_ACTIVATION
                    : t.recurrentActivation
            )),
            (this.useBias = t.useBias == null ? !0 : t.useBias),
            (this.kernelInitializer = Ut(
                t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.recurrentInitializer = Ut(
                t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER
            )),
            (this.biasInitializer = Ut(
                t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
            )),
            (this.kernelRegularizer = Qt(t.kernelRegularizer)),
            (this.recurrentRegularizer = Qt(t.recurrentRegularizer)),
            (this.biasRegularizer = Qt(t.biasRegularizer)),
            (this.kernelConstraint = pe(t.kernelConstraint)),
            (this.recurrentConstraint = pe(t.recurrentConstraint)),
            (this.biasConstraint = pe(t.biasConstraint)),
            (this.dropout = xr([
                1,
                Bs([0, t.dropout == null ? 0 : t.dropout]),
            ])),
            (this.recurrentDropout = xr([
                1,
                Bs([0, t.recurrentDropout == null ? 0 : t.recurrentDropout]),
            ])),
            (this.dropoutFunc = t.dropoutFunc),
            (this.implementation = t.implementation),
            (this.stateSize = this.units),
            (this.dropoutMask = null),
            (this.recurrentDropoutMask = null);
    }
    build(t) {
        t = Rt(t);
        const e = t[t.length - 1];
        (this.kernel = this.addWeight(
            "kernel",
            [e, this.units * 3],
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        )),
            (this.recurrentKernel = this.addWeight(
                "recurrent_kernel",
                [this.units, this.units * 3],
                null,
                this.recurrentInitializer,
                this.recurrentRegularizer,
                !0,
                this.recurrentConstraint
            )),
            this.useBias
                ? (this.bias = this.addWeight(
                      "bias",
                      [this.units * 3],
                      null,
                      this.biasInitializer,
                      this.biasRegularizer,
                      !0,
                      this.biasConstraint
                  ))
                : (this.bias = null),
            (this.built = !0);
    }
    call(t, e) {
        return D(() => {
            if (((t = t), t.length !== 2))
                throw new E(
                    `GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`
                );
            const s = e.training == null ? !1 : e.training;
            let o = t[1];
            (t = t[0]),
                0 < this.dropout &&
                    this.dropout < 1 &&
                    this.dropoutMask == null &&
                    (this.dropoutMask = Us({
                        ones: () => Rn(t),
                        rate: this.dropout,
                        training: s,
                        count: 3,
                        dropoutFunc: this.dropoutFunc,
                    })),
                0 < this.recurrentDropout &&
                    this.recurrentDropout < 1 &&
                    this.recurrentDropoutMask == null &&
                    (this.recurrentDropoutMask = Us({
                        ones: () => Rn(o),
                        rate: this.recurrentDropout,
                        training: s,
                        count: 3,
                        dropoutFunc: this.dropoutFunc,
                    }));
            const r = this.dropoutMask,
                i = this.recurrentDropoutMask;
            let a, l, c;
            0 < this.dropout && this.dropout < 1 && (t = G(t, r[0]));
            let u = ns(t, this.kernel.read());
            this.useBias && (u = _n(u, this.bias.read())),
                0 < this.recurrentDropout &&
                    this.recurrentDropout < 1 &&
                    (o = G(o, i[0]));
            const d = this.recurrentKernel.read(),
                [h, p] = pn(d, [2 * this.units, this.units], d.rank - 1),
                f = ns(o, h),
                [m, g, b] = pn(u, 3, u.rank - 1),
                [x, w] = pn(f, 2, f.rank - 1);
            (a = this.recurrentActivation.apply(U(m, x))),
                (l = this.recurrentActivation.apply(U(g, w)));
            const y = ns(G(l, o), p);
            c = this.activation.apply(U(b, y));
            const I = U(G(a, o), G(U(1, Yt(a)), c));
            return [I, I];
        });
    }
    getConfig() {
        const t = super.getConfig(),
            e = {
                units: this.units,
                activation: Hs(this.activation),
                recurrentActivation: Hs(this.recurrentActivation),
                useBias: this.useBias,
                kernelInitializer: jt(this.kernelInitializer),
                recurrentInitializer: jt(this.recurrentInitializer),
                biasInitializer: jt(this.biasInitializer),
                kernelRegularizer: zt(this.kernelRegularizer),
                recurrentRegularizer: zt(this.recurrentRegularizer),
                biasRegularizer: zt(this.biasRegularizer),
                activityRegularizer: zt(this.activityRegularizer),
                kernelConstraint: he(this.kernelConstraint),
                recurrentConstraint: he(this.recurrentConstraint),
                biasConstraint: he(this.biasConstraint),
                dropout: this.dropout,
                recurrentDropout: this.recurrentDropout,
                implementation: this.implementation,
                resetAfter: !1,
            };
        return Object.assign(Object.assign({}, t), e);
    }
}
Wf.className = "GRUCell";
_(Wf);
class Dy extends no {
    constructor(t) {
        t.implementation === 0 &&
            console.warn(
                "`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."
            ),
            (t.cell = new Wf(t)),
            super(t);
    }
    call(t, e) {
        return D(() => {
            this.cell.dropoutMask != null &&
                (xt(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
                this.cell.recurrentDropoutMask != null &&
                    (xt(this.cell.recurrentDropoutMask),
                    (this.cell.recurrentDropoutMask = null));
            const s = e == null ? null : e.mask,
                o = e == null ? null : e.training,
                r = e == null ? null : e.initialState;
            return super.call(t, { mask: s, training: o, initialState: r });
        });
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return e.implmentation === 0 && (e.implementation = 1), new t(e);
    }
}
Dy.className = "GRU";
_(Dy);
class gu extends mu {
    constructor(t) {
        super(t),
            (this.DEFAULT_ACTIVATION = "tanh"),
            (this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid"),
            (this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal"),
            (this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal"),
            (this.DEFAULT_BIAS_INITIALIZER = "zeros"),
            (this.units = t.units),
            xe(this.units, "units"),
            (this.activation = _s(
                t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation
            )),
            (this.recurrentActivation = _s(
                t.recurrentActivation === void 0
                    ? this.DEFAULT_RECURRENT_ACTIVATION
                    : t.recurrentActivation
            )),
            (this.useBias = t.useBias == null ? !0 : t.useBias),
            (this.kernelInitializer = Ut(
                t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.recurrentInitializer = Ut(
                t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER
            )),
            (this.biasInitializer = Ut(
                t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
            )),
            (this.unitForgetBias = t.unitForgetBias),
            (this.kernelRegularizer = Qt(t.kernelRegularizer)),
            (this.recurrentRegularizer = Qt(t.recurrentRegularizer)),
            (this.biasRegularizer = Qt(t.biasRegularizer)),
            (this.kernelConstraint = pe(t.kernelConstraint)),
            (this.recurrentConstraint = pe(t.recurrentConstraint)),
            (this.biasConstraint = pe(t.biasConstraint)),
            (this.dropout = xr([
                1,
                Bs([0, t.dropout == null ? 0 : t.dropout]),
            ])),
            (this.recurrentDropout = xr([
                1,
                Bs([0, t.recurrentDropout == null ? 0 : t.recurrentDropout]),
            ])),
            (this.dropoutFunc = t.dropoutFunc),
            (this.implementation = t.implementation),
            (this.stateSize = [this.units, this.units]),
            (this.dropoutMask = null),
            (this.recurrentDropoutMask = null);
    }
    build(t) {
        var e;
        t = Rt(t);
        const s = t[t.length - 1];
        (this.kernel = this.addWeight(
            "kernel",
            [s, this.units * 4],
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        )),
            (this.recurrentKernel = this.addWeight(
                "recurrent_kernel",
                [this.units, this.units * 4],
                null,
                this.recurrentInitializer,
                this.recurrentRegularizer,
                !0,
                this.recurrentConstraint
            ));
        let o;
        if (this.useBias) {
            if (this.unitForgetBias) {
                const r = this.biasInitializer,
                    i = this.units;
                o = new ((e = class extends Gn {
                    apply(l, c) {
                        const u = r.apply([i]),
                            d = new yf().apply([i]),
                            h = r.apply([i * 2]);
                        return Zm(Zm(u, d), h);
                    }
                }) /** @nocollapse */,
                (e.className = "CustomInit"),
                e)();
            } else o = this.biasInitializer;
            this.bias = this.addWeight(
                "bias",
                [this.units * 4],
                null,
                o,
                this.biasRegularizer,
                !0,
                this.biasConstraint
            );
        } else this.bias = null;
        this.built = !0;
    }
    call(t, e) {
        return D(() => {
            const s = e.training == null ? !1 : e.training;
            if (((t = t), t.length !== 3))
                throw new E(
                    `LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`
                );
            let o = t[1];
            const r = t[2];
            (t = t[0]),
                0 < this.dropout &&
                    this.dropout < 1 &&
                    this.dropoutMask == null &&
                    (this.dropoutMask = Us({
                        ones: () => Rn(t),
                        rate: this.dropout,
                        training: s,
                        count: 4,
                        dropoutFunc: this.dropoutFunc,
                    })),
                0 < this.recurrentDropout &&
                    this.recurrentDropout < 1 &&
                    this.recurrentDropoutMask == null &&
                    (this.recurrentDropoutMask = Us({
                        ones: () => Rn(o),
                        rate: this.recurrentDropout,
                        training: s,
                        count: 4,
                        dropoutFunc: this.dropoutFunc,
                    }));
            const i = this.dropoutMask,
                a = this.recurrentDropoutMask;
            let l, c, u, d;
            0 < this.dropout && this.dropout < 1 && (t = G(t, i[0]));
            let h = ns(t, this.kernel.read());
            0 < this.recurrentDropout &&
                this.recurrentDropout < 1 &&
                (o = G(o, a[0])),
                (h = U(h, ns(o, this.recurrentKernel.read()))),
                this.useBias && (h = _n(h, this.bias.read()));
            const [p, f, m, g] = pn(h, 4, h.rank - 1);
            (l = this.recurrentActivation.apply(p)),
                (c = this.recurrentActivation.apply(f)),
                (u = U(G(c, r), G(l, this.activation.apply(m)))),
                (d = this.recurrentActivation.apply(g));
            const b = G(d, this.activation.apply(u));
            return [b, b, u];
        });
    }
    getConfig() {
        const t = super.getConfig(),
            e = {
                units: this.units,
                activation: Hs(this.activation),
                recurrentActivation: Hs(this.recurrentActivation),
                useBias: this.useBias,
                kernelInitializer: jt(this.kernelInitializer),
                recurrentInitializer: jt(this.recurrentInitializer),
                biasInitializer: jt(this.biasInitializer),
                unitForgetBias: this.unitForgetBias,
                kernelRegularizer: zt(this.kernelRegularizer),
                recurrentRegularizer: zt(this.recurrentRegularizer),
                biasRegularizer: zt(this.biasRegularizer),
                activityRegularizer: zt(this.activityRegularizer),
                kernelConstraint: he(this.kernelConstraint),
                recurrentConstraint: he(this.recurrentConstraint),
                biasConstraint: he(this.biasConstraint),
                dropout: this.dropout,
                recurrentDropout: this.recurrentDropout,
                implementation: this.implementation,
            };
        return Object.assign(Object.assign({}, t), e);
    }
}
gu.className = "LSTMCell";
_(gu);
class Fy extends no {
    constructor(t) {
        t.implementation === 0 &&
            console.warn(
                "`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."
            ),
            (t.cell = new gu(t)),
            super(t);
    }
    call(t, e) {
        return D(() => {
            this.cell.dropoutMask != null &&
                (xt(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
                this.cell.recurrentDropoutMask != null &&
                    (xt(this.cell.recurrentDropoutMask),
                    (this.cell.recurrentDropoutMask = null));
            const s = e == null ? null : e.mask,
                o = e == null ? null : e.training,
                r = e == null ? null : e.initialState;
            return super.call(t, { mask: s, training: o, initialState: r });
        });
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return e.implmentation === 0 && (e.implementation = 1), new t(e);
    }
}
Fy.className = "LSTM";
_(Fy);
class Df extends mu {
    constructor(t) {
        super(t), (this.cells = t.cells);
    }
    get stateSize() {
        const t = [];
        for (const e of this.cells.slice().reverse())
            Array.isArray(e.stateSize)
                ? t.push(...e.stateSize)
                : t.push(e.stateSize);
        return t;
    }
    call(t, e) {
        return D(() => {
            t = t;
            let s = t.slice(1);
            const o = [];
            for (const a of this.cells.slice().reverse())
                Array.isArray(a.stateSize)
                    ? o.push(s.splice(0, a.stateSize.length))
                    : o.push(s.splice(0, 1));
            o.reverse();
            const r = [];
            let i;
            for (let a = 0; a < this.cells.length; ++a) {
                const l = this.cells[a];
                (s = o[a]),
                    a === 0 ? (i = [t[0]].concat(s)) : (i = [i[0]].concat(s)),
                    (i = l.call(i, e)),
                    r.push(i.slice(1));
            }
            s = [];
            for (const a of r.slice().reverse()) s.push(...a);
            return [i[0]].concat(s);
        });
    }
    build(t) {
        Gd(t) && (t = t[0]), (t = t);
        let e;
        this.cells.forEach((s, o) => {
            wo(`RNNCell_${o}`, () => {
                s.build(t),
                    Array.isArray(s.stateSize)
                        ? (e = s.stateSize[0])
                        : (e = s.stateSize),
                    (t = [t[0], e]);
            });
        }),
            (this.built = !0);
    }
    getConfig() {
        const t = super.getConfig(),
            e = (r) => ({
                className: r.getClassName(),
                config: r.getConfig(),
            }),
            o = { cells: this.cells.map(e) };
        return Object.assign(Object.assign({}, t), o);
    }
    /** @nocollapse */
    static fromConfig(t, e, s = {}) {
        const o = [];
        for (const r of e.cells) o.push(An(r, s));
        return new t({ cells: o });
    }
    get trainableWeights() {
        if (!this.trainable) return [];
        const t = [];
        for (const e of this.cells) t.push(...e.trainableWeights);
        return t;
    }
    get nonTrainableWeights() {
        const t = [];
        for (const e of this.cells) t.push(...e.nonTrainableWeights);
        if (!this.trainable) {
            const e = [];
            for (const s of this.cells) e.push(...s.trainableWeights);
            return e.concat(t);
        }
        return t;
    }
    /**
     * Retrieve the weights of a the model.
     *
     * @returns A flat `Array` of `tf.Tensor`s.
     */
    getWeights() {
        const t = [];
        for (const e of this.cells) t.push(...e.weights);
        return Ed(t);
    }
    /**
     * Set the weights of the model.
     *
     * @param weights An `Array` of `tf.Tensor`s with shapes and types matching
     *     the output of `getWeights()`.
     */
    setWeights(t) {
        const e = [];
        for (const s of this.cells) {
            const o = s.weights.length,
                r = t.splice(o);
            for (let i = 0; i < s.weights.length; ++i)
                e.push([s.weights[i], r[i]]);
        }
        Tf(e);
    }
}
Df.className = "StackedRNNCells";
_(Df);
function Us(n) {
    const {
            ones: t,
            rate: e,
            training: s = !1,
            count: o = 1,
            dropoutFunc: r,
        } = n,
        i = () => (r != null ? r(t(), e) : $x(t(), e)),
        a = () => Ma(i, t, s);
    return !o || o <= 1
        ? hn(a().clone())
        : Array(o)
              .fill(void 0)
              .map(a)
              .map((c) => hn(c.clone()));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var x3 = function (n, t) {
    var e = {};
    for (var s in n)
        Object.prototype.hasOwnProperty.call(n, s) &&
            t.indexOf(s) < 0 &&
            (e[s] = n[s]);
    if (n != null && typeof Object.getOwnPropertySymbols == "function")
        for (var o = 0, s = Object.getOwnPropertySymbols(n); o < s.length; o++)
            t.indexOf(s[o]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(n, s[o]) &&
                (e[s[o]] = n[s[o]]);
    return e;
};
class Vy extends no {
    constructor(t) {
        if (t.unroll)
            throw new yt("Unrolling is not possible with convolutional RNNs.");
        if (Array.isArray(t.cell))
            throw new yt(
                "It is not possible at the moment to stack convolutional cells."
            );
        super(t), (this.inputSpec = [new de({ ndim: 5 })]);
    }
    call(t, e) {
        return D(() => {
            if (
                (this.cell.dropoutMask != null &&
                    (xt(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
                this.cell.recurrentDropoutMask != null &&
                    (xt(this.cell.recurrentDropoutMask),
                    (this.cell.recurrentDropoutMask = null)),
                e && e.constants)
            )
                throw new E("ConvRNN2D cell does not support constants");
            const s = e == null ? null : e.mask,
                o = e == null ? null : e.training,
                r = e == null ? null : e.initialState;
            return super.call(t, { mask: s, training: o, initialState: r });
        });
    }
    computeOutputShape(t) {
        let e = this.computeSingleOutputShape(t);
        return (
            this.returnSequences || (e = [e[0], ...e.slice(2)]),
            this.returnState &&
                (e = [e, ...Array(2).fill([t[0], ...e.slice(-3)])]),
            e
        );
    }
    getInitialState(t) {
        return D(() => {
            const { stateSize: e } = this.cell,
                s = t.shape,
                o = this.computeSingleOutputShape(s),
                r = [o[0], ...o.slice(2)],
                i = be(r);
            return Array.isArray(e) ? Array(e.length).fill(i) : [i];
        });
    }
    resetStates(t, e = !1) {
        D(() => {
            if (!this.stateful)
                throw new Qn(
                    "Cannot call resetStates() on an RNN Layer that is not stateful."
                );
            const s = this.inputSpec[0].shape,
                o = this.computeSingleOutputShape(s),
                r = [o[0], ...o.slice(2)];
            if (s[0] == null)
                throw new E(
                    "If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer."
                );
            if (this.getStates() == null)
                Array.isArray(this.cell.stateSize)
                    ? (this.states_ = this.cell.stateSize.map(() => be(r)))
                    : (this.states_ = [be(r)]);
            else if (t == null)
                xt(this.states_),
                    this.keptStates != null &&
                        (xt(this.keptStates), (this.keptStates = [])),
                    Array.isArray(this.cell.stateSize)
                        ? (this.states_ = this.cell.stateSize.map(() => be(r)))
                        : (this.states_[0] = be(r));
            else {
                if (
                    (Array.isArray(t) || (t = [t]),
                    t.length !== this.states_.length)
                )
                    throw new E(
                        `Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`
                    );
                e
                    ? this.keptStates.push(this.states_.slice())
                    : xt(this.states_);
                for (let a = 0; a < this.states_.length; ++a) {
                    const l = t[a],
                        c = r;
                    if (!$t(l.shape, c))
                        throw new E(
                            `State ${a} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${l.shape}`
                        );
                    this.states_[a] = l;
                }
            }
            this.states_ = this.states_.map((a) => hn(a.clone()));
        });
    }
    computeSingleOutputShape(t) {
        const {
                dataFormat: e,
                filters: s,
                kernelSize: o,
                padding: r,
                strides: i,
                dilationRate: a,
            } = this.cell,
            l = e === "channelsFirst",
            c = t[l ? 3 : 2],
            u = t[l ? 4 : 3],
            d = On(c, o[0], r, i[0], a[0]),
            h = On(u, o[1], r, i[1], a[1]);
        return [...t.slice(0, 2), ...(l ? [s, d, h] : [d, h, s])];
    }
}
Vy.className = "ConvRNN2D";
class Ff extends gu {
    constructor(t) {
        const {
            filters: e,
            kernelSize: s,
            strides: o,
            padding: r,
            dataFormat: i,
            dilationRate: a,
        } = t;
        super(Object.assign(Object.assign({}, t), { units: e })),
            (this.filters = e),
            xe(this.filters, "filters"),
            (this.kernelSize = dr(s, 2, "kernelSize")),
            this.kernelSize.forEach((l) => xe(l, "kernelSize")),
            (this.strides = dr(o || 1, 2, "strides")),
            this.strides.forEach((l) => xe(l, "strides")),
            (this.padding = r || "valid"),
            gn(this.padding),
            (this.dataFormat = i || "channelsLast"),
            ae(this.dataFormat),
            (this.dilationRate = dr(a || 1, 2, "dilationRate")),
            this.dilationRate.forEach((l) => xe(l, "dilationRate"));
    }
    build(t) {
        var e;
        t = Rt(t);
        const s = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
        if (t[s] == null)
            throw new E(
                `The channel dimension of the input should be defined. Found ${t[s]}`
            );
        const o = t[s],
            r = 4,
            i = this.kernelSize.concat([o, this.filters * r]);
        this.kernel = this.addWeight(
            "kernel",
            i,
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        );
        const a = this.kernelSize.concat([this.filters, this.filters * r]);
        if (
            ((this.recurrentKernel = this.addWeight(
                "recurrent_kernel",
                a,
                null,
                this.recurrentInitializer,
                this.recurrentRegularizer,
                !0,
                this.recurrentConstraint
            )),
            this.useBias)
        ) {
            let l;
            if (this.unitForgetBias) {
                const c = this.biasInitializer,
                    u = this.filters;
                l = new ((e = class extends Gn {
                    apply(h, p) {
                        const f = c.apply([u]),
                            m = ks([u]),
                            g = c.apply([u * 2]);
                        return xf([f, m, g]);
                    }
                }) /** @nocollapse */,
                (e.className = "CustomInit"),
                e)();
            } else l = this.biasInitializer;
            this.bias = this.addWeight(
                "bias",
                [this.filters * r],
                null,
                l,
                this.biasRegularizer,
                !0,
                this.biasConstraint
            );
        }
        this.built = !0;
    }
    call(t, e) {
        return D(() => {
            if (t.length !== 3)
                throw new E(
                    `ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`
                );
            const s = e.training || !1,
                o = t[0],
                r = t[1],
                i = t[2],
                a = 4;
            0 < this.dropout &&
                this.dropout < 1 &&
                this.dropoutMask == null &&
                (this.dropoutMask = Us({
                    ones: () => Rn(o),
                    rate: this.dropout,
                    training: s,
                    count: a,
                    dropoutFunc: this.dropoutFunc,
                }));
            const l = this.dropoutMask,
                c = (Y, Q, j) => (!Q || !Q[j] ? Y : G(Q[j], Y));
            let u = c(o, l, 0),
                d = c(o, l, 1),
                h = c(o, l, 2),
                p = c(o, l, 3);
            0 < this.recurrentDropout &&
                this.recurrentDropout < 1 &&
                this.recurrentDropoutMask == null &&
                (this.recurrentDropoutMask = Us({
                    ones: () => Rn(r),
                    rate: this.recurrentDropout,
                    training: s,
                    count: a,
                    dropoutFunc: this.dropoutFunc,
                }));
            const f = this.recurrentDropoutMask;
            let m = c(r, f, 0),
                g = c(r, f, 1),
                b = c(r, f, 2),
                x = c(r, f, 3);
            const w = 3,
                [y, I, v, k] = pn(this.kernel.read(), a, w),
                [S, N, R, M] = this.useBias
                    ? pn(this.bias.read(), a)
                    : [null, null, null, null];
            (u = this.inputConv(u, y, S, this.padding)),
                (d = this.inputConv(d, I, N, this.padding)),
                (h = this.inputConv(h, v, R, this.padding)),
                (p = this.inputConv(p, k, M, this.padding));
            const [V, z, P, A] = pn(this.recurrentKernel.read(), a, w);
            (m = this.recurrentConv(m, V)),
                (g = this.recurrentConv(g, z)),
                (b = this.recurrentConv(b, P)),
                (x = this.recurrentConv(x, A));
            const O = this.recurrentActivation.apply(U(u, m)),
                B = this.recurrentActivation.apply(U(d, g)),
                Z = U(G(B, i), G(O, this.activation.apply(U(h, b)))),
                H = G(
                    this.recurrentActivation.apply(U(p, x)),
                    this.activation.apply(Z)
                );
            return [H, H, Z];
        });
    }
    getConfig() {
        const t = super.getConfig(),
            e = x3(t, ["units"]),
            s = {
                filters: this.filters,
                kernelSize: this.kernelSize,
                padding: this.padding,
                dataFormat: this.dataFormat,
                dilationRate: this.dilationRate,
                strides: this.strides,
            };
        return Object.assign(Object.assign({}, e), s);
    }
    inputConv(t, e, s, o) {
        const r = $o(
            t,
            e,
            this.strides,
            o || "valid",
            this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC",
            this.dilationRate
        );
        return s ? _n(r, s, this.dataFormat) : r;
    }
    recurrentConv(t, e) {
        return $o(
            t,
            e,
            1,
            "same",
            this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC"
        );
    }
}
Ff.className = "ConvLSTM2DCell";
_(Ff);
class zy extends Vy {
    constructor(t) {
        const e = new Ff(t);
        super(Object.assign(Object.assign({}, t), { cell: e }));
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        return new t(e);
    }
}
zy.className = "ConvLSTM2D";
_(zy);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Vf extends St {
    constructor(t) {
        super(t),
            (this.rate = Math.max(Math.min(t.rate, 1), 0)),
            (this.noiseShape = t.noiseShape),
            (this.seed = t.seed),
            (this.supportsMasking = !0);
    }
    getNoiseShape(t) {
        if (this.noiseShape == null) return this.noiseShape;
        const e = t.shape,
            s = [];
        for (let o = 0; o < this.noiseShape.length; ++o)
            s.push(this.noiseShape[o] == null ? e[o] : this.noiseShape[o]);
        return s;
    }
    call(t, e) {
        return D(() => {
            this.invokeCallHook(t, e);
            const s = mt(t);
            if (0 < this.rate && this.rate < 1) {
                const o = e.training == null ? !1 : e.training,
                    r = this.getNoiseShape(s);
                return Ma(
                    () => $x(s, this.rate, r, this.seed),
                    () => s,
                    o
                );
            }
            return t;
        });
    }
    getConfig() {
        const t = {
                rate: this.rate,
                noiseShape: this.noiseShape,
                seed: this.seed,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    dispose() {
        return super.dispose();
    }
}
Vf.className = "Dropout";
_(Vf);
class Py extends Vf {
    constructor(t) {
        super(t), (this.inputSpec = [{ ndim: 3 }]);
    }
    getNoiseShape(t) {
        const e = t.shape;
        return [e[0], 1, e[2]];
    }
}
Py.className = "SpatialDropout1D";
_(Py);
class Ay extends St {
    constructor(t) {
        if (
            (super(t),
            (this.activation = null),
            (this.useBias = !0),
            (this.kernel = null),
            (this.bias = null),
            (this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal"),
            (this.DEFAULT_BIAS_INITIALIZER = "zeros"),
            t.batchInputShape == null &&
                t.inputShape == null &&
                t.inputDim != null)
        ) {
            let e = null;
            t.batchSize != null && (e = t.batchSize),
                (this.batchInputShape = [e, t.inputDim]);
        }
        (this.units = t.units),
            xe(this.units, "units"),
            (this.activation = _s(t.activation)),
            t.useBias != null && (this.useBias = t.useBias),
            (this.kernelInitializer = Ut(
                t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.biasInitializer = Ut(
                t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
            )),
            (this.kernelConstraint = pe(t.kernelConstraint)),
            (this.biasConstraint = pe(t.biasConstraint)),
            (this.kernelRegularizer = Qt(t.kernelRegularizer)),
            (this.biasRegularizer = Qt(t.biasRegularizer)),
            (this.activityRegularizer = Qt(t.activityRegularizer)),
            (this.supportsMasking = !0),
            (this.inputSpec = [{ minNDim: 2 }]);
    }
    build(t) {
        t = Rt(t);
        const e = t[t.length - 1];
        this.kernel == null &&
            ((this.kernel = this.addWeight(
                "kernel",
                [e, this.units],
                null,
                this.kernelInitializer,
                this.kernelRegularizer,
                !0,
                this.kernelConstraint
            )),
            this.useBias &&
                (this.bias = this.addWeight(
                    "bias",
                    [this.units],
                    null,
                    this.biasInitializer,
                    this.biasRegularizer,
                    !0,
                    this.biasConstraint
                ))),
            (this.inputSpec = [{ minNDim: 2, axes: { [-1]: e } }]),
            (this.built = !0);
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = t.slice();
        return (e[e.length - 1] = this.units), e;
    }
    call(t, e) {
        return D(() => {
            this.invokeCallHook(t, e);
            const s = mt(t),
                o = Cx(this.activation.getClassName());
            let r;
            return (
                o != null
                    ? (r = ns(
                          s,
                          this.kernel.read(),
                          o,
                          this.bias ? this.bias.read() : null
                      ))
                    : ((r = ns(s, this.kernel.read())),
                      this.bias != null && (r = _n(r, this.bias.read())),
                      this.activation != null &&
                          (r = this.activation.apply(r))),
                r
            );
        });
    }
    getConfig() {
        const t = {
                units: this.units,
                activation: Hs(this.activation),
                useBias: this.useBias,
                kernelInitializer: jt(this.kernelInitializer),
                biasInitializer: jt(this.biasInitializer),
                kernelRegularizer: zt(this.kernelRegularizer),
                biasRegularizer: zt(this.biasRegularizer),
                activityRegularizer: zt(this.activityRegularizer),
                kernelConstraint: he(this.kernelConstraint),
                biasConstraint: he(this.biasConstraint),
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Ay.className = "Dense";
_(Ay);
class Oy extends St {
    constructor(t) {
        (t = t || {}),
            super(t),
            (this.inputSpec = [{ minNDim: 3 }]),
            (this.dataFormat = t.dataFormat);
    }
    computeOutputShape(t) {
        t = Rt(t);
        for (const e of t.slice(1))
            if (e == null)
                throw new E(
                    `The shape of the input to "Flatten" is not fully defined (got ${t.slice(
                        1
                    )}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`
                );
        return [t[0], As(t, 1)];
    }
    call(t, e) {
        return D(() => {
            this.invokeCallHook(t, e);
            let s = mt(t);
            if (this.dataFormat === "channelsFirst" && s.rank > 1) {
                const o = [0];
                for (let r = 2; r < s.rank; ++r) o.push(r);
                o.push(1), (s = kt(s, o));
            }
            return JE(s);
        });
    }
    getConfig() {
        const t = {};
        this.dataFormat != null && (t.dataFormat = this.dataFormat);
        const e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Oy.className = "Flatten";
_(Oy);
class Xy extends St {
    constructor(t) {
        super(t),
            (this.supportsMasking = !0),
            (this.activation = _s(t.activation));
    }
    call(t, e) {
        return D(() => {
            this.invokeCallHook(t, e);
            const s = mt(t);
            return this.activation.apply(s);
        });
    }
    getConfig() {
        const t = { activation: Hs(this.activation) },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Xy.className = "Activation";
_(Xy);
class Ky extends St {
    constructor(t) {
        super(t), (this.n = t.n), (this.inputSpec = [{ ndim: 2 }]);
    }
    computeOutputShape(t) {
        return [t[0], this.n, t[1]];
    }
    call(t, e) {
        return D(() => ((t = mt(t)), YE(t, this.n)));
    }
    getConfig() {
        const t = {
                n: this.n,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Ky.className = "RepeatVector";
_(Ky);
class Zy extends St {
    constructor(t) {
        super(t), (this.targetShape = t.targetShape);
        for (let e = 0; e < this.targetShape.length; ++e)
            this.isUnknown(this.targetShape[e]) && (this.targetShape[e] = null);
    }
    isUnknown(t) {
        return t < 0 || t == null;
    }
    /**
     * Finds and replaces a missing dimension in output shape.
     *
     * This is a near direct port of the internal Numpy function
     * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.
     *
     * @param inputShape: Original shape of array begin reshape.
     * @param outputShape: Target shape of the array, with at most a single
     * `null` or negative number, which indicates an underdetermined dimension
     * that should be derived from `inputShape` and the known dimensions of
     *   `outputShape`.
     * @returns: The output shape with `null` replaced with its computed value.
     * @throws: ValueError: If `inputShape` and `outputShape` do not match.
     */
    fixUnknownDimension(t, e) {
        const s = "Total size of new array must be unchanged.",
            o = e.slice();
        let r = 1,
            i = null;
        for (let l = 0; l < o.length; ++l) {
            const c = o[l];
            if (this.isUnknown(c))
                if (i === null) i = l;
                else throw new E("Can only specifiy one unknown dimension.");
            else r *= c;
        }
        const a = As(t);
        if (i !== null) {
            if (r === 0 || a % r !== 0) throw new E(s);
            o[i] = a / r;
        } else if (a !== r) throw new E(s);
        return o;
    }
    computeOutputShape(t) {
        let e = !1;
        for (let s = 0; s < t.length; ++s)
            if (this.isUnknown(t[s])) {
                e = !0;
                break;
            }
        return e
            ? t.slice(0, 1).concat(this.targetShape)
            : t
                  .slice(0, 1)
                  .concat(
                      this.fixUnknownDimension(t.slice(1), this.targetShape)
                  );
    }
    call(t, e) {
        return D(() => {
            this.invokeCallHook(t, e);
            const s = mt(t),
                o = s.shape,
                r = o
                    .slice(0, 1)
                    .concat(
                        this.fixUnknownDimension(o.slice(1), this.targetShape)
                    );
            return W(s, r);
        });
    }
    getConfig() {
        const t = {
                targetShape: this.targetShape,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Zy.className = "Reshape";
_(Zy);
class By extends St {
    constructor(t) {
        if ((super(t), t.dims == null))
            throw new Error(
                "Required configuration field `dims` is missing during Permute constructor call."
            );
        if (!Array.isArray(t.dims))
            throw new Error(
                `Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`
            );
        const e = Kn(1, t.dims.length + 1);
        if (!$t(t.dims.slice().sort(), e))
            throw new Error(
                "Invalid permutation `dims`: " +
                    JSON.stringify(t.dims) +
                    " `dims` must contain consecutive integers starting from 1."
            );
        (this.dims = t.dims),
            (this.dimsIncludingBatch = [0].concat(this.dims)),
            (this.inputSpec = [new de({ ndim: this.dims.length + 1 })]);
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = t.slice();
        return (
            this.dims.forEach((s, o) => {
                e[o + 1] = t[s];
            }),
            e
        );
    }
    call(t, e) {
        return kt(mt(t), this.dimsIncludingBatch);
    }
    getConfig() {
        const t = {
                dims: this.dims,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
By.className = "Permute";
_(By);
class Hy extends St {
    constructor(t) {
        super(t ?? {}),
            (this.supportsMasking = !0),
            t != null
                ? (this.maskValue = t.maskValue == null ? 0 : t.maskValue)
                : (this.maskValue = 0);
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = super.getConfig(),
            e = { maskValue: this.maskValue };
        return Object.assign(e, t), e;
    }
    computeMask(t, e) {
        const s = mt(t);
        return Id(ui(s, this.maskValue), -1);
    }
    call(t, e) {
        return D(() => {
            this.invokeCallHook(t, e);
            const s = mt(t),
                i = Id(ui(s, this.maskValue), -1, !0);
            return G(s, tt(i, s.dtype));
        });
    }
}
Hy.className = "Masking";
_(Hy);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class _y extends St {
    constructor(t) {
        if (
            (super(t),
            (this.embeddings = null),
            (this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform"),
            t.batchInputShape == null && t.inputShape == null)
        ) {
            let e = null;
            t.batchSize != null && (e = t.batchSize),
                t.inputLength == null
                    ? (this.batchInputShape = [e, null])
                    : (this.batchInputShape = [e].concat(Lt(t.inputLength)));
        }
        (this.inputDim = t.inputDim),
            xe(this.inputDim, "inputDim"),
            (this.outputDim = t.outputDim),
            xe(this.outputDim, "outputDim"),
            (this.embeddingsInitializer = Ut(
                t.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER
            )),
            (this.embeddingsRegularizer = Qt(t.embeddingsRegularizer)),
            (this.activityRegularizer = Qt(t.activityRegularizer)),
            (this.embeddingsConstraint = pe(t.embeddingsConstraint)),
            (this.maskZero = t.maskZero),
            (this.supportsMasking = t.maskZero),
            (this.inputLength = t.inputLength);
    }
    build(t) {
        (this.embeddings = this.addWeight(
            "embeddings",
            [this.inputDim, this.outputDim],
            this.dtype,
            this.embeddingsInitializer,
            this.embeddingsRegularizer,
            !0,
            this.embeddingsConstraint
        )),
            (this.built = !0);
    }
    // Override warnOnIncompatibleInputShape because an embedding layer allows
    // the input to have varying ranks.
    warnOnIncompatibleInputShape(t) {}
    computeMask(t, e) {
        return D(() => (this.maskZero ? ((t = mt(t)), ui(t, Tt(t))) : null));
    }
    computeOutputShape(t) {
        if (((t = Rt(t)), this.inputLength == null))
            return [...t, this.outputDim];
        const e = Lt(this.inputLength);
        if (e.length !== t.length - 1)
            throw new E(
                `"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`
            );
        {
            let s = 0;
            for (let o = 0; o < e.length; ++o) {
                const r = e[o],
                    i = t[o + 1];
                if (r != null && i != null && r !== i)
                    throw new E(
                        `"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`
                    );
                r == null && (e[s] = i), s++;
            }
        }
        return [t[0], ...e, this.outputDim];
    }
    call(t, e) {
        return D(() => {
            this.invokeCallHook(t, e);
            let s = mt(t);
            s.dtype !== "int32" && (s = es(s, "int32"));
            const o = Rx(this.embeddings.read(), W(s, [s.size]));
            return W(o, Rt(this.computeOutputShape(s.shape)));
        });
    }
    getConfig() {
        const t = {
                inputDim: this.inputDim,
                outputDim: this.outputDim,
                embeddingsInitializer: jt(this.embeddingsInitializer),
                embeddingsRegularizer: zt(this.embeddingsRegularizer),
                activityRegularizer: zt(this.activityRegularizer),
                embeddingsConstraint: he(this.embeddingsConstraint),
                maskZero: this.maskZero,
                inputLength: this.inputLength,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
_y.className = "Embedding";
_(_y);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Yo extends St {
    constructor(t) {
        super(t || {}), (this.supportsMasking = !0);
    }
    /**
     * Logic for merging multiple tensors, to be overridden by subclasses.
     * @param inputs
     */
    mergeFunction(t) {
        throw new yt();
    }
    /**
     * Computes the shape of the result of an elementwise operation.
     *
     * @param shape1: Shape of the first tensor.
     * @param shape2: Shape of the second tensor.
     * @returns Expected output shape when an elementwise operation is carried
     *   out on 2 tensors with shapes `shape1` and `shape2`.
     * @throws ValueError: If `shape1` and `shape2` are not compatible for
     *   element-wise operations.
     */
    computeElementwiseOpOutputShape(t, e) {
        if (t == null || e == null) return null;
        if (t.length < e.length)
            return this.computeElementwiseOpOutputShape(e, t);
        if (e.length === 0) return t;
        const s = t.slice(0, t.length - e.length);
        for (let o = 0; o < e.length; ++o) {
            const r = t[t.length - e.length + o],
                i = e[o];
            if (r == null || i == null || r < 0 || i < 0) s.push(null);
            else if (r === 1) s.push(i);
            else if (i === 1) s.push(r);
            else {
                if (r !== i)
                    throw new E(
                        "Operands could not be broadcast together with shapes " +
                            JSON.stringify(t) +
                            " " +
                            JSON.stringify(e)
                    );
                s.push(r);
            }
        }
        return s;
    }
    build(t) {
        if (
            (Array.isArray(t) && !Array.isArray(t[0]) && (t = [Rt(t)]),
            (t = t),
            t.length < 2)
        )
            throw new E(
                `A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`
            );
        let e = [];
        for (const r of t) r != null && r[0] !== null && e.push(r[0]);
        if (((e = Ps(e)), e.length > 1))
            throw new E(
                `Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(
                    t
                )}.`
            );
        let s = t[0] == null ? null : t[0].slice(1);
        for (let r = 1; r < t.length; ++r) {
            const i = t[r] == null ? null : t[r].slice(1);
            s = this.computeElementwiseOpOutputShape(s, i);
        }
        const o = t.map((r) => r.length);
        t.indexOf(null) === -1 && Ps(o).length === 1
            ? (this.reshapeRequired = !1)
            : (this.reshapeRequired = !0);
    }
    call(t, e) {
        return D(() => {
            if (((t = t), this.reshapeRequired)) {
                const s = [],
                    o = t.map((r) => r.rank);
                if (o.indexOf(null) === -1) {
                    const r = Bs(o);
                    for (let i of t) {
                        const a = i.rank;
                        for (let l = 0; l < r - a; ++l) i = Ea(i, 1);
                        s.push(i);
                    }
                    return this.mergeFunction(s);
                } else {
                    let r = !1;
                    for (const l of t) {
                        const c = l.rank;
                        if (c == null) {
                            const u = l.shape,
                                d = u[0],
                                h = u.slice(1).concat([d]);
                            let p = W(l, [d].concat(As(u.slice(1))));
                            (p = kt(p, [1, 0])),
                                (p = W(p, h)),
                                s.push(p),
                                (r = !0);
                        } else if (c > 1) {
                            const u = Kn(1, c).concat([0]);
                            s.push(kt(l, u)), (r = !0);
                        } else s.push(l);
                    }
                    let i = this.mergeFunction(s);
                    const a = i.rank;
                    if (r) {
                        if (a == null) {
                            const l = i.shape,
                                c = l.length,
                                u = l[c - 1],
                                d = [u].concat(l.slice(0, l.length - 1));
                            i = W(kt(W(i, [-1, u]), [1, 0]), d);
                        } else if (a > 1) {
                            const l = [a - 1].concat(Kn(0, a - 1));
                            i = kt(i, l);
                        }
                    }
                    return i;
                }
            } else return this.mergeFunction(t);
        });
    }
    computeOutputShape(t) {
        t = t;
        let e;
        t[0] == null ? (e = null) : (e = t[0].slice(1));
        for (let o = 1; o < t.length; ++o) {
            const r = t[o] == null ? null : t[o].slice(1);
            e = this.computeElementwiseOpOutputShape(e, r);
        }
        let s = [];
        for (const o of t) o != null && o[0] !== null && s.push(o[0]);
        return (
            (s = Ps(s)),
            s.length === 1 ? (e = s.concat(e)) : (e = [null].concat(e)),
            e
        );
    }
    computeMask(t, e) {
        return D(() => {
            if (e == null) return null;
            if (!Array.isArray(e)) throw new E("`mask` should be an Array");
            if (!Array.isArray(t)) throw new E("`inputs` should be an Array");
            if (e.length !== t.length)
                throw new E(
                    `The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`
                );
            if (e.every((o) => o == null)) return null;
            e = e.map((o) => (o == null ? o : Oe(o, 0)));
            let s = e[0];
            for (let o = 1; o < e.length - 1; ++o) s = ss(s, e[o]);
            return s;
        });
    }
}
class Uy extends Yo {
    constructor(t) {
        super(t);
    }
    mergeFunction(t) {
        return D(() => {
            let e = t[0].clone();
            for (let s = 1; s < t.length; ++s) e = U(e, t[s]);
            return e;
        });
    }
}
Uy.className = "Add";
_(Uy);
class Yy extends Yo {
    constructor(t) {
        super(t);
    }
    mergeFunction(t) {
        return D(() => {
            let e = t[0].clone();
            for (let s = 1; s < t.length; ++s) e = G(e, t[s]);
            return e;
        });
    }
}
Yy.className = "Multiply";
_(Yy);
class Qy extends Yo {
    constructor(t) {
        super(t);
    }
    mergeFunction(t) {
        return D(() => {
            let e = t[0].clone();
            for (let s = 1; s < t.length; ++s) e = U(e, t[s]);
            return G(1 / t.length, e);
        });
    }
}
Qy.className = "Average";
_(Qy);
class Jy extends Yo {
    constructor(t) {
        super(t);
    }
    mergeFunction(t) {
        return D(() => {
            let e = t[0];
            for (let s = 1; s < t.length; ++s) e = qs(e, t[s]);
            return e;
        });
    }
}
Jy.className = "Maximum";
_(Jy);
class jy extends Yo {
    constructor(t) {
        super(t);
    }
    mergeFunction(t) {
        return D(() => {
            let e = t[0];
            for (let s = 1; s < t.length; ++s) e = br(e, t[s]);
            return e;
        });
    }
}
jy.className = "Minimum";
_(jy);
class qy extends Yo {
    constructor(t) {
        super(t),
            (this.DEFAULT_AXIS = -1),
            t == null && (t = {}),
            (this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis),
            (this.supportsMasking = !0),
            (this.reshapeRequired = !1);
    }
    build(t) {
        if (!(Array.isArray(t) && Array.isArray(t[0])) || t.length === 1)
            throw new E(
                "A `Concatenate` layer should be called on a list of at least 2 inputs"
            );
        t = t;
        let e = !0;
        for (const o of t)
            if (o != null) {
                e = !1;
                break;
            }
        if (e) return;
        const s = [];
        for (let o = 0; o < t.length; ++o) {
            const r = t[o].slice();
            r.splice(this.axis, 1);
            let i = !1;
            for (const a of s)
                if ($t(a, r)) {
                    i = !0;
                    break;
                }
            i || s.push(r);
        }
        if (s.length > 1)
            throw new E(
                "A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " +
                    JSON.stringify(t)
            );
    }
    mergeFunction(t) {
        return D(() => xf(t, this.axis));
    }
    computeOutputShape(t) {
        if (!(Array.isArray(t) && Array.isArray(t[0])))
            throw new E(
                "A `Concatenate` layer should be called on a list of inputs."
            );
        const e = t,
            s = e[0].slice(),
            o = this.axis < 0 ? s.length + this.axis : this.axis;
        for (const r of e.slice(1)) {
            if (s[o] == null || r[o] == null) {
                s[o] = null;
                break;
            }
            s[o] += r[o];
        }
        return s;
    }
    computeMask(t, e) {
        if (e == null) return null;
        if (!Array.isArray(e))
            throw new E("`mask` should be an array for Concatenate");
        if (!Array.isArray(t))
            throw new E("`inputs` should be an array for Concatenate");
        if (e.length !== t.length)
            throw new E(
                `Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`
            );
        return D(() => {
            let s = !0;
            if (
                (e.forEach((i) => {
                    if (i != null) {
                        s = !1;
                        return;
                    }
                }),
                s)
            )
                return null;
            const o = [];
            for (let i = 0; i < t.length; ++i)
                e[i] == null
                    ? o.push(tt(Rn(t[i]), "bool"))
                    : e[i].rank < t[i].rank
                    ? o.push(Oe(e[i], -1))
                    : o.push(e[i]);
            const r = Ge(o, this.axis);
            return Qb(r, -1, !1);
        });
    }
    getConfig() {
        const t = {
                axis: this.axis,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
qy.className = "Concatenate";
_(qy);
function Kr(n, t) {
    for (; n < 0; ) n += t;
    return n;
}
function y3(n, t, e) {
    if (n.shape.length > 3 || t.shape.length > 3)
        throw new yt(
            "batchDot is not implemented for tensors of 4D or higher rank yet"
        );
    if (
        (C(
            n.shape.length >= 2,
            () =>
                `batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`
        ),
        C(
            n.shape.length >= 2,
            () =>
                `batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`
        ),
        typeof e == "number" && (e = [e, e]),
        n.dtype === "complex64" || t.dtype === "complex64")
    )
        throw new yt(
            "batchDot is not implemented for complex64-type Tensors yet."
        );
    const s = n.shape.length,
        o = t.shape.length;
    e == null && (e = [s - 1, o - 2]);
    const r = e;
    return D(() => {
        let i;
        if (s > o) {
            i = s - o;
            const l = [];
            for (let c = 0; c < i; ++c) l.push(1);
            t = W(t, t.shape.concat(l));
        } else if (o > s) {
            i = o - s;
            const l = [];
            for (let c = 0; c < i; ++c) l.push(1);
            n = W(n, n.shape.concat(l));
        } else i = 0;
        let a;
        if (n.shape.length === 2 && t.shape.length === 2)
            r[0] === r[1]
                ? (a = at(G(n, t), r[0]))
                : (a = at(G(kt(n, [1, 0]), t), r[1]));
        else {
            const l = r[0] !== n.shape.length - 1,
                c = r[1] === t.shape.length - 1;
            a = Gt(n, t, l, c);
        }
        if (i > 0) {
            let l;
            s > o ? (l = s + o - 3) : (l = s - 1);
            const c = [];
            for (let u = l; u < l + i; ++u) c.push(u);
            a = ka(a, c);
        }
        return a.shape.length === 1 && (a = Oe(a, 1)), a;
    });
}
class t1 extends Yo {
    constructor(t) {
        super(t),
            (this.axes = t.axes),
            (this.normalize = t.normalize == null ? !1 : t.normalize),
            (this.supportsMasking = !0),
            (this.reshapeRequired = !1);
    }
    build(t) {
        C(
            Array.isArray(t) &&
                t.length === 2 &&
                Array.isArray(t[0]) &&
                Array.isArray(t[1]),
            () =>
                "A `Dot` layer should be called on a list of exactly 2 inputs."
        );
        const e = t[0],
            s = t[1];
        if (e.length > 3 || s.length > 3)
            throw new yt(
                "Dot layer does not support tensors of 4D or higher rank yet."
            );
        const o = this.interpretAxes(e, s);
        if (e[o[0]] !== s[o[1]])
            throw new E(`Dimension incompatibility: ${e[o[0]]} !== ${s[o[1]]}`);
    }
    mergeFunction(t) {
        if (t.length !== 2)
            throw new E(
                `A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`
            );
        let e = t[0],
            s = t[1],
            o;
        return (
            Array.isArray(this.axes)
                ? (o = this.axes.map((r, i) => Kr(r, t[i].shape.length)))
                : (o = [
                      Kr(this.axes, e.shape.length),
                      Kr(this.axes, s.shape.length),
                  ]),
            this.normalize && ((e = Gl(e, o[0])), (s = Gl(s, o[1]))),
            y3(e, s, o)
        );
    }
    interpretAxes(t, e) {
        let s;
        return (
            Array.isArray(this.axes)
                ? (s = this.axes)
                : (s = [Kr(this.axes, t.length), Kr(this.axes, e.length)]),
            s
        );
    }
    computeOutputShape(t) {
        C(
            Array.isArray(t) &&
                t.length === 2 &&
                Array.isArray(t[0]) &&
                Array.isArray(t[1]),
            () =>
                "A `Dot` layer should be called on a list of exactly 2 inputs."
        );
        const e = t[0].slice(),
            s = t[1].slice();
        if (e.length > 3 || s.length > 3)
            throw new yt(
                "Dot layer does not support tensors of 4D or higher rank yet."
            );
        const o = this.interpretAxes(e, s);
        e.splice(o[0], 1), s.splice(o[1], 1), s.splice(0, 1);
        const r = e.concat(s);
        return r.length === 1 && r.push(1), r;
    }
    computeMask(t, e) {
        return null;
    }
    getConfig() {
        const t = {
                axes: this.axes,
                normalize: this.normalize,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
t1.className = "Dot";
_(t1);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class e1 extends St {
    constructor(t) {
        super(t), (this.supportsMasking = !0), (this.stddev = t.stddev);
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = super.getConfig(),
            e = { stddev: this.stddev };
        return Object.assign(e, t), e;
    }
    call(t, e) {
        return D(() => {
            this.invokeCallHook(t, e);
            const s = mt(t);
            return Ma(
                () => U(lu(s.shape, 0, this.stddev), s),
                () => s,
                e.training || !1
            );
        });
    }
}
e1.className = "GaussianNoise";
_(e1);
class n1 extends St {
    constructor(t) {
        super(t), (this.supportsMasking = !0), (this.rate = t.rate);
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = super.getConfig(),
            e = { rate: this.rate };
        return Object.assign(e, t), e;
    }
    call(t, e) {
        return D(() => {
            this.invokeCallHook(t, e);
            const s = mt(t);
            return this.rate > 0 && this.rate < 1
                ? Ma(
                      () => {
                          const r = Math.sqrt(this.rate / (1 - this.rate));
                          return G(s, lu(s.shape, 1, r));
                      },
                      () => s,
                      e.training || !1
                  )
                : s;
        });
    }
}
n1.className = "GaussianDropout";
_(n1);
class s1 extends St {
    constructor(t) {
        super(t),
            (this.supportsMasking = !0),
            (this.rate = t.rate),
            (this.noiseShape = t.noiseShape);
    }
    _getNoiseShape(t) {
        return this.noiseShape || mt(t).shape;
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = super.getConfig(),
            e = { rate: this.rate };
        return Object.assign(e, t), e;
    }
    call(t, e) {
        return D(() => {
            if (this.rate < 1 && this.rate > 0) {
                const s = this._getNoiseShape(t);
                return Ma(
                    () => {
                        const r = mt(t),
                            l = -1.6732632423543772 * 1.0507009873554805;
                        let c = Bo(Sa(s), this.rate);
                        c = es(c, "float32");
                        const u =
                                ((1 - this.rate) * (1 + this.rate * l ** 2)) **
                                -0.5,
                            d = -u * l * this.rate,
                            h = U(G(r, c), G(U(c, -1), l));
                        return U(G(h, u), d);
                    },
                    () => mt(t),
                    e.training || !1
                );
            }
            return t;
        });
    }
}
s1.className = "AlphaDropout";
_(s1);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function gi(n, t, e, s, o, r = 1e-3) {
    let i;
    if (n.rank === 2) i = Jv(n, t, e, s, o, r);
    else if (n.rank === 3) i = qv(n, t, e, s, o, r);
    else if (n.rank === 4) i = eS(n, t, e, s, o, r);
    else
        throw new yt(
            `batchNormalization is not implemented for array of rank ${n.rank} yet`
        );
    return i;
}
function w3(n, t, e, s, o = 1e-3) {
    return D(() => {
        const r = gp(n, s),
            i = r.mean,
            a = r.variance;
        return [gi(n, i, a, e, t, o), i, a];
    });
}
function I3(n, t, e, s, o = 1e-3) {
    return D(() => {
        const r = gp(n, s),
            i = r.mean,
            a = r.variance,
            l = [];
        for (const f of Kn(0, n.rank))
            s.indexOf(f) !== -1 ? l.push(1) : l.push(n.shape[f]);
        const c = W(i, l),
            u = W(a, l),
            d = t == null ? null : W(t, l),
            h = e == null ? null : W(e, l);
        return [gi(n, c, u, h, d, o), i, a];
    });
}
function C3(n, t, e, s, o = 1e-3) {
    return $t(s.slice().sort(), Kn(0, n.rank - 1))
        ? w3(n, t, e, s, o)
        : I3(n, t, e, s, o);
}
class o1 extends St {
    constructor(t) {
        t == null && (t = {}),
            super(t),
            (this.supportsMasking = !0),
            (this.axis = t.axis == null ? -1 : t.axis),
            (this.momentum = t.momentum == null ? 0.99 : t.momentum),
            (this.epsilon = t.epsilon == null ? 1e-3 : t.epsilon),
            (this.center = t.center == null ? !0 : t.center),
            (this.scale = t.scale == null ? !0 : t.scale),
            (this.betaInitializer = Ut(t.betaInitializer || "zeros")),
            (this.gammaInitializer = Ut(t.gammaInitializer || "ones")),
            (this.movingMeanInitializer = Ut(
                t.movingMeanInitializer || "zeros"
            )),
            (this.movingVarianceInitializer = Ut(
                t.movingVarianceInitializer || "ones"
            )),
            (this.betaConstraint = pe(t.betaConstraint)),
            (this.gammaConstraint = pe(t.gammaConstraint)),
            (this.betaRegularizer = Qt(t.betaRegularizer)),
            (this.gammaRegularizer = Qt(t.gammaRegularizer));
    }
    build(t) {
        t = Rt(t);
        const e = this.axis >= 0 ? this.axis : this.axis + t.length,
            s = t[e];
        if (s == null)
            throw new E(
                `Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(
                    t
                )}.`
            );
        this.inputSpec = [new de({ ndim: t.length, axes: { [e]: s } })];
        const o = [s];
        this.scale &&
            (this.gamma = this.addWeight(
                "gamma",
                o,
                null,
                this.gammaInitializer,
                this.gammaRegularizer,
                !0,
                this.gammaConstraint
            )),
            this.center &&
                (this.beta = this.addWeight(
                    "beta",
                    o,
                    null,
                    this.betaInitializer,
                    this.betaRegularizer,
                    !0,
                    this.betaConstraint
                )),
            (this.movingMean = this.addWeight(
                "moving_mean",
                o,
                null,
                this.movingMeanInitializer,
                null,
                !1
            )),
            (this.movingVariance = this.addWeight(
                "moving_variance",
                o,
                null,
                this.movingVarianceInitializer,
                null,
                !1
            )),
            (this.built = !0);
    }
    call(t, e) {
        return D(() => {
            const s = e.training == null ? !1 : e.training,
                o = mt(t),
                r = o.shape,
                i = r.length,
                a = Kn(0, i),
                l = this.axis >= 0 ? this.axis : this.axis + i;
            a.splice(l, 1);
            const c = Wo(1, i);
            c[l] = r[l];
            const u = a.slice();
            u.sort();
            const d = !$t(u, Kn(0, i).slice(0, i - 1)),
                h = () => {
                    if (d) {
                        const x = W(this.movingMean.read(), c),
                            w = W(this.movingVariance.read(), c),
                            y = this.center ? W(this.beta.read(), c) : null,
                            I = this.scale ? W(this.gamma.read(), c) : null;
                        return gi(o, x, w, y, I, this.epsilon);
                    } else
                        return gi(
                            o,
                            this.movingMean.read(),
                            this.movingVariance.read(),
                            this.beta == null ? null : this.beta.read(),
                            this.gamma == null ? null : this.gamma.read(),
                            this.epsilon
                        );
                };
            if (!s) return h();
            const [p, f, m] = C3(
                    o,
                    this.gamma.read(),
                    this.beta.read(),
                    a,
                    this.epsilon
                ),
                g = (x, w, y) => {
                    D(() => {
                        const I = 1 - y,
                            v = x.read(),
                            k = G(it(v, w), I);
                        x.write(it(v, k));
                    });
                };
            return (
                (() => {
                    g(this.movingMean, f, this.momentum),
                        g(this.movingVariance, m, this.momentum);
                })(),
                p
            );
        });
    }
    getConfig() {
        const t = {
                axis: this.axis,
                momentum: this.momentum,
                epsilon: this.epsilon,
                center: this.center,
                scale: this.scale,
                betaInitializer: jt(this.betaInitializer),
                gammaInitializer: jt(this.gammaInitializer),
                movingMeanInitializer: jt(this.movingMeanInitializer),
                movingVarianceInitializer: jt(this.movingVarianceInitializer),
                betaRegularizer: zt(this.betaRegularizer),
                gammaRegularizer: zt(this.gammaRegularizer),
                betaConstraint: he(this.betaConstraint),
                gammaConstraint: he(this.gammaConstraint),
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
o1.className = "BatchNormalization";
_(o1);
class r1 extends St {
    constructor(t) {
        if (
            (t == null && (t = {}),
            super(t),
            (this.axis = t.axis == null ? -1 : t.axis),
            typeof this.axis == "number")
        ) {
            if (!Number.isInteger(this.axis))
                throw new Error(
                    `Expected axis to be an integer, but received ${this.axis}`
                );
        } else if (Array.isArray(this.axis)) {
            for (const e of this.axis)
                if (!Number.isInteger(e))
                    throw new Error(
                        `Expected axis to be an array of integers, but received ${JSON.stringify(
                            this.axis
                        )}`
                    );
        } else
            throw new Error(
                `Expected axis to be an integer or an array of integers, but received ${JSON.stringify(
                    this.axis
                )}`
            );
        (this.epsilon = t.epsilon == null ? 1e-3 : t.epsilon),
            (this.center = t.center == null ? !0 : t.center),
            (this.scale = t.scale == null ? !0 : t.scale),
            (this.betaInitializer = Ut(t.betaInitializer || "zeros")),
            (this.gammaInitializer = Ut(t.gammaInitializer || "ones")),
            (this.betaRegularizer = Qt(t.betaRegularizer)),
            (this.gammaRegularizer = Qt(t.gammaRegularizer)),
            (this.supportsMasking = !0);
    }
    build(t) {
        t = Rt(t);
        const e = t.length;
        typeof this.axis == "number" && (this.axis = [this.axis]);
        for (let r = 0; r < this.axis.length; ++r)
            this.axis[r] < 0 && (this.axis[r] += e);
        for (const r of this.axis)
            if (r < 0 || r >= e) throw new Error(`Invalid axis: ${r}`);
        if (this.axis.length !== Ps(this.axis).length)
            throw new Error(`Found duplicate axes in: ${this.axis}`);
        const s = this.axis.map((r) => t[r]),
            o = !0;
        this.scale
            ? (this.gamma = this.addWeight(
                  "gamma",
                  s,
                  "float32",
                  this.gammaInitializer,
                  this.gammaRegularizer,
                  o
              ))
            : (this.gamma = null),
            this.center
                ? (this.beta = this.addWeight(
                      "beta",
                      s,
                      "float32",
                      this.betaInitializer,
                      this.betaRegularizer,
                      o
                  ))
                : (this.beta = null),
            (this.built = !0);
    }
    call(t, e) {
        const s = mt(t),
            o = s.shape,
            r = o.length;
        return D(() => {
            let { mean: a, variance: l } = gp(s, this.axis, !0);
            const c = Wo(1, r);
            for (const m of this.axis) c[m] = o[m];
            const u = (m) => (m != null && m.shape.length !== r ? W(m, c) : m);
            let d = this.scale ? u(this.gamma.read()) : null,
                h = this.center ? u(this.beta.read()) : null;
            const p = [],
                f = [];
            for (let m = 0; m < r; ++m)
                this.axis.indexOf(m) !== -1
                    ? (p.push(o[m]), f.push(1))
                    : (p.push(1), f.push(o[m]));
            return (
                (a = Vn(a, p)),
                (l = Vn(l, p)),
                d != null && (d = Vn(d, f)),
                h != null && (h = Vn(h, f)),
                gi(s, a, l, h, d, this.epsilon)
            );
        });
    }
    getConfig() {
        const t = {
                axis: this.axis,
                epsilon: this.epsilon,
                center: this.center,
                scale: this.scale,
                betaInitializer: jt(this.betaInitializer),
                gammaInitializer: jt(this.gammaInitializer),
                betaRegularizer: zt(this.betaRegularizer),
                gammaRegularizer: zt(this.gammaRegularizer),
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
r1.className = "LayerNormalization";
_(r1);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function v3(n, t, e) {
    return D(() => {
        if (n.rank !== 4)
            throw new E(
                `temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`
            );
        if (
            (t == null &&
                (t = [
                    [1, 1],
                    [1, 1],
                ]),
            t.length !== 2 || t[0].length !== 2 || t[1].length !== 2)
        )
            throw new E(
                "spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers."
            );
        if (
            (e == null && (e = Zn()),
            e !== "channelsLast" && e !== "channelsFirst")
        )
            throw new E(
                `Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`
            );
        let s;
        return (
            e === "channelsFirst"
                ? (s = [[0, 0], [0, 0], t[0], t[1]])
                : (s = [[0, 0], t[0], t[1], [0, 0]]),
            bp(n, s)
        );
    });
}
class i1 extends St {
    constructor(t) {
        if (
            (t == null && (t = {}),
            super(t),
            (this.dataFormat = t.dataFormat == null ? Zn() : t.dataFormat),
            t.padding == null)
        )
            this.padding = [
                [1, 1],
                [1, 1],
            ];
        else if (typeof t.padding == "number")
            this.padding = [
                [t.padding, t.padding],
                [t.padding, t.padding],
            ];
        else {
            if (((t.padding = t.padding), t.padding.length !== 2))
                throw new E(
                    `ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`
                );
            let e, s;
            if (typeof t.padding[0] == "number")
                (e = [t.padding[0], t.padding[0]]),
                    (s = [t.padding[1], t.padding[1]]);
            else {
                if (((t.padding = t.padding), t.padding[0].length !== 2))
                    throw new E(
                        `ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`
                    );
                if (((e = t.padding[0]), t.padding[1].length !== 2))
                    throw new E(
                        `ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`
                    );
                s = t.padding[1];
            }
            this.padding = [e, s];
        }
        this.inputSpec = [new de({ ndim: 4 })];
    }
    computeOutputShape(t) {
        t = Rt(t);
        let e, s;
        return this.dataFormat === "channelsFirst"
            ? (t[2] != null && t[2] >= 0
                  ? (e = t[2] + this.padding[0][0] + this.padding[0][1])
                  : (e = null),
              t[3] != null && t[3] >= 0
                  ? (s = t[3] + this.padding[1][0] + this.padding[1][1])
                  : (s = null),
              [t[0], t[1], e, s])
            : (t[1] != null && t[1] >= 0
                  ? (e = t[1] + this.padding[0][0] + this.padding[0][1])
                  : (e = null),
              t[2] != null && t[2] >= 0
                  ? (s = t[2] + this.padding[1][0] + this.padding[1][1])
                  : (s = null),
              [t[0], e, s, t[3]]);
    }
    call(t, e) {
        return D(() => v3(mt(t), this.padding, this.dataFormat));
    }
    getConfig() {
        const t = {
                padding: this.padding,
                dataFormat: this.dataFormat,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
i1.className = "ZeroPadding2D";
_(i1);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function bu(n, t, e, s, o, r) {
    return D(() => {
        ae(o),
            Sx(r),
            gn(s),
            e == null && (e = [1, 1]),
            s == null && (s = "valid"),
            o == null && (o = Zn()),
            r == null && (r = "max"),
            (n = Lf(n, o));
        let i;
        const a = s === "same" ? "same" : "valid";
        return (
            r === "max"
                ? (i = mp(n, t, e, a))
                : (i = np(
                      // TODO(cais): Rank check?
                      n,
                      t,
                      e,
                      a
                  )),
            o === "channelsFirst" && (i = kt(i, [0, 3, 1, 2])),
            i
        );
    });
}
function a1(n, t, e, s, o, r) {
    return D(() => {
        ae(o),
            Sx(r),
            gn(s),
            e == null && (e = [1, 1, 1]),
            s == null && (s = "valid"),
            o == null && (o = Zn()),
            r == null && (r = "max"),
            (n = Sy(n, o));
        let i;
        const a = s === "same" ? "same" : "valid";
        return (
            r === "max" ? (i = Ak(n, t, e, a)) : (i = Ov(n, t, e, a)),
            o === "channelsFirst" && (i = kt(i, [0, 4, 1, 2, 3])),
            i
        );
    });
}
class l1 extends St {
    /**
     *
     * @param args Parameters for the Pooling layer.
     *
     * config.poolSize defaults to 2.
     */
    constructor(t) {
        if (
            (t.poolSize == null && (t.poolSize = 2),
            super(t),
            typeof t.poolSize == "number")
        )
            this.poolSize = [t.poolSize];
        else if (
            Array.isArray(t.poolSize) &&
            t.poolSize.length === 1 &&
            typeof t.poolSize[0] == "number"
        )
            this.poolSize = t.poolSize;
        else
            throw new E(
                `poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(
                    t.poolSize
                )}`
            );
        if ((xe(this.poolSize, "poolSize"), t.strides == null))
            this.strides = this.poolSize;
        else if (typeof t.strides == "number") this.strides = [t.strides];
        else if (
            Array.isArray(t.strides) &&
            t.strides.length === 1 &&
            typeof t.strides[0] == "number"
        )
            this.strides = t.strides;
        else
            throw new E(
                `strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(
                    t.strides
                )}`
            );
        xe(this.strides, "strides"),
            (this.padding = t.padding == null ? "valid" : t.padding),
            gn(this.padding),
            (this.inputSpec = [new de({ ndim: 3 })]);
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = On(t[1], this.poolSize[0], this.padding, this.strides[0]);
        return [t[0], e, t[2]];
    }
    call(t, e) {
        return D(() => {
            this.invokeCallHook(t, e), (t = Ea(mt(t), 2));
            const s = this.poolingFunction(
                mt(t),
                [this.poolSize[0], 1],
                [this.strides[0], 1],
                this.padding,
                "channelsLast"
            );
            return ka(s, [2]);
        });
    }
    getConfig() {
        const t = {
                poolSize: this.poolSize,
                padding: this.padding,
                strides: this.strides,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
class c1 extends l1 {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, o, r) {
        return ae(r), gn(o), bu(t, e, s, o, r, "max");
    }
}
c1.className = "MaxPooling1D";
_(c1);
class u1 extends l1 {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, o, r) {
        return ae(r), gn(o), bu(t, e, s, o, r, "avg");
    }
}
u1.className = "AveragePooling1D";
_(u1);
class d1 extends St {
    constructor(t) {
        if (
            (t.poolSize == null && (t.poolSize = [2, 2]),
            super(t),
            (this.poolSize = Array.isArray(t.poolSize)
                ? t.poolSize
                : [t.poolSize, t.poolSize]),
            t.strides == null)
        )
            this.strides = this.poolSize;
        else if (Array.isArray(t.strides)) {
            if (t.strides.length !== 2)
                throw new E(
                    `If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`
                );
            this.strides = t.strides;
        } else this.strides = [t.strides, t.strides];
        xe(this.poolSize, "poolSize"),
            xe(this.strides, "strides"),
            (this.padding = t.padding == null ? "valid" : t.padding),
            (this.dataFormat =
                t.dataFormat == null ? "channelsLast" : t.dataFormat),
            ae(this.dataFormat),
            gn(this.padding),
            (this.inputSpec = [new de({ ndim: 4 })]);
    }
    computeOutputShape(t) {
        t = Rt(t);
        let e = this.dataFormat === "channelsFirst" ? t[2] : t[1],
            s = this.dataFormat === "channelsFirst" ? t[3] : t[2];
        return (
            (e = On(e, this.poolSize[0], this.padding, this.strides[0])),
            (s = On(s, this.poolSize[1], this.padding, this.strides[1])),
            this.dataFormat === "channelsFirst"
                ? [t[0], t[1], e, s]
                : [t[0], e, s, t[3]]
        );
    }
    call(t, e) {
        return D(
            () => (
                this.invokeCallHook(t, e),
                this.poolingFunction(
                    mt(t),
                    this.poolSize,
                    this.strides,
                    this.padding,
                    this.dataFormat
                )
            )
        );
    }
    getConfig() {
        const t = {
                poolSize: this.poolSize,
                padding: this.padding,
                strides: this.strides,
                dataFormat: this.dataFormat,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
class h1 extends d1 {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, o, r) {
        return ae(r), gn(o), bu(t, e, s, o, r, "max");
    }
}
h1.className = "MaxPooling2D";
_(h1);
class p1 extends d1 {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, o, r) {
        return ae(r), gn(o), bu(t, e, s, o, r, "avg");
    }
}
p1.className = "AveragePooling2D";
_(p1);
class f1 extends St {
    constructor(t) {
        if (
            (t.poolSize == null && (t.poolSize = [2, 2, 2]),
            super(t),
            (this.poolSize = Array.isArray(t.poolSize)
                ? t.poolSize
                : [t.poolSize, t.poolSize, t.poolSize]),
            t.strides == null)
        )
            this.strides = this.poolSize;
        else if (Array.isArray(t.strides)) {
            if (t.strides.length !== 3)
                throw new E(
                    `If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`
                );
            this.strides = t.strides;
        } else this.strides = [t.strides, t.strides, t.strides];
        xe(this.poolSize, "poolSize"),
            xe(this.strides, "strides"),
            (this.padding = t.padding == null ? "valid" : t.padding),
            (this.dataFormat =
                t.dataFormat == null ? "channelsLast" : t.dataFormat),
            ae(this.dataFormat),
            gn(this.padding),
            (this.inputSpec = [new de({ ndim: 5 })]);
    }
    computeOutputShape(t) {
        t = Rt(t);
        let e = this.dataFormat === "channelsFirst" ? t[2] : t[1],
            s = this.dataFormat === "channelsFirst" ? t[3] : t[2],
            o = this.dataFormat === "channelsFirst" ? t[4] : t[3];
        return (
            (e = On(e, this.poolSize[0], this.padding, this.strides[0])),
            (s = On(s, this.poolSize[1], this.padding, this.strides[1])),
            (o = On(o, this.poolSize[2], this.padding, this.strides[2])),
            this.dataFormat === "channelsFirst"
                ? [t[0], t[1], e, s, o]
                : [t[0], e, s, o, t[4]]
        );
    }
    call(t, e) {
        return D(
            () => (
                this.invokeCallHook(t, e),
                this.poolingFunction(
                    mt(t),
                    this.poolSize,
                    this.strides,
                    this.padding,
                    this.dataFormat
                )
            )
        );
    }
    getConfig() {
        const t = {
                poolSize: this.poolSize,
                padding: this.padding,
                strides: this.strides,
                dataFormat: this.dataFormat,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
class m1 extends f1 {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, o, r) {
        return ae(r), gn(o), a1(t, e, s, o, r, "max");
    }
}
m1.className = "MaxPooling3D";
_(m1);
class g1 extends f1 {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, o, r) {
        return ae(r), gn(o), a1(t, e, s, o, r, "avg");
    }
}
g1.className = "AveragePooling3D";
_(g1);
class b1 extends St {
    constructor(t) {
        super(t), (this.inputSpec = [new de({ ndim: 3 })]);
    }
    computeOutputShape(t) {
        return [t[0], t[2]];
    }
    call(t, e) {
        throw new yt();
    }
}
class x1 extends b1 {
    constructor(t) {
        super(t || {});
    }
    call(t, e) {
        return D(() => {
            const s = mt(t);
            return oe(s, 1);
        });
    }
}
x1.className = "GlobalAveragePooling1D";
_(x1);
class y1 extends b1 {
    constructor(t) {
        super(t || {});
    }
    call(t, e) {
        return D(() => {
            const s = mt(t);
            return Pn(s, 1);
        });
    }
}
y1.className = "GlobalMaxPooling1D";
_(y1);
class w1 extends St {
    constructor(t) {
        super(t),
            (this.dataFormat =
                t.dataFormat == null ? "channelsLast" : t.dataFormat),
            ae(this.dataFormat),
            (this.inputSpec = [new de({ ndim: 4 })]);
    }
    computeOutputShape(t) {
        return (
            (t = t),
            this.dataFormat === "channelsLast" ? [t[0], t[3]] : [t[0], t[1]]
        );
    }
    call(t, e) {
        throw new yt();
    }
    getConfig() {
        const t = { dataFormat: this.dataFormat },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
class I1 extends w1 {
    call(t, e) {
        return D(() => {
            const s = mt(t);
            return this.dataFormat === "channelsLast"
                ? oe(s, [1, 2])
                : oe(s, [2, 3]);
        });
    }
}
I1.className = "GlobalAveragePooling2D";
_(I1);
class C1 extends w1 {
    call(t, e) {
        return D(() => {
            const s = mt(t);
            return this.dataFormat === "channelsLast"
                ? Pn(s, [1, 2])
                : Pn(s, [2, 3]);
        });
    }
}
C1.className = "GlobalMaxPooling2D";
_(C1);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class v1 extends St {
    constructor(t) {
        super(t), (this.layer = t.layer);
    }
    build(t) {
        this.built = !0;
    }
    // TODO(cais): Implement activityRegularizer getter.
    get trainable() {
        return this.layer != null ? this.layer.trainable : !1;
    }
    set trainable(t) {
        this.layer != null && (this.layer.trainable = t);
    }
    get trainableWeights() {
        return this.layer.trainableWeights;
    }
    // TODO(cais): Implement setter for trainableWeights.
    get nonTrainableWeights() {
        return this.layer.nonTrainableWeights;
    }
    // TODO(cais): Implement setter for nonTrainableWeights.
    get updates() {
        return this.layer._updates;
    }
    // TODO(cais): Implement getUpdatesFor().
    get losses() {
        return this.layer.losses;
    }
    // TODO(cais): Implement getLossesFor().
    getWeights() {
        return this.layer.getWeights();
    }
    setWeights(t) {
        this.layer.setWeights(t);
    }
    getConfig() {
        const t = {
                layer: {
                    className: this.layer.getClassName(),
                    config: this.layer.getConfig(),
                },
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    setFastWeightInitDuringBuild(t) {
        super.setFastWeightInitDuringBuild(t),
            this.layer != null && this.layer.setFastWeightInitDuringBuild(t);
    }
    /** @nocollapse */
    static fromConfig(t, e, s = {}) {
        const o = e.layer,
            r = An(o, s);
        delete e.layer;
        const i = { layer: r };
        return Object.assign(i, e), new t(i);
    }
}
class S1 extends v1 {
    constructor(t) {
        super(t), (this.supportsMasking = !0);
    }
    build(t) {
        if (((t = Rt(t)), t.length < 3))
            throw new E(
                `TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(
                    t
                )}`
            );
        this.inputSpec = [{ shape: t }];
        const e = [t[0]].concat(t.slice(2));
        this.layer.built || (this.layer.build(e), (this.layer.built = !0)),
            super.build(t);
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = [t[0]].concat(t.slice(2)),
            s = this.layer.computeOutputShape(e),
            o = t[1];
        return [s[0], o].concat(s.slice(1));
    }
    call(t, e) {
        return D(
            () => (
                (t = mt(t)),
                My(
                    (i, a) => [mt(this.layer.call(i, e)), []],
                    t,
                    [],
                    !1,
                    null,
                    null,
                    !1,
                    !0
                    /* needPerStepOutputs */
                )[1]
            )
        );
    }
}
S1.className = "TimeDistributed";
_(S1);
function S3(n) {
    Uo(ZE, "BidirectionalMergeMode", n);
}
const k3 = "concat";
class k1 extends v1 {
    constructor(t) {
        super(t);
        const e = t.layer.getConfig(),
            s = {};
        (s.className = t.layer.getClassName()),
            (s.config = e),
            (this.forwardLayer = An(s)),
            (e.goBackwards = e.goBackwards !== !0);
        const o = {};
        if (
            ((o.className = t.layer.getClassName()),
            (o.config = e),
            (this.backwardLayer = An(o)),
            (this.forwardLayer.name = "forward_" + this.forwardLayer.name),
            (this.backwardLayer.name = "backward_" + this.backwardLayer.name),
            (this.mergeMode = t.mergeMode === void 0 ? k3 : t.mergeMode),
            S3(this.mergeMode),
            t.weights)
        )
            throw new yt(
                "weights support is not implemented for Bidirectional layer yet."
            );
        (this._stateful = t.layer.stateful),
            (this.returnSequences = t.layer.returnSequences),
            (this.returnState = t.layer.returnState),
            (this.supportsMasking = !0),
            (this._trainable = !0),
            (this.inputSpec = t.layer.inputSpec),
            (this.numConstants = null);
    }
    get trainable() {
        return this._trainable;
    }
    set trainable(t) {
        (this._trainable = t),
            this.forwardLayer != null && (this.forwardLayer.trainable = t),
            this.backwardLayer != null && (this.backwardLayer.trainable = t);
    }
    getWeights() {
        return this.forwardLayer
            .getWeights()
            .concat(this.backwardLayer.getWeights());
    }
    setWeights(t) {
        const e = t.length,
            s = Math.floor(e / 2);
        this.forwardLayer.setWeights(t.slice(0, s)),
            this.backwardLayer.setWeights(t.slice(s));
    }
    computeOutputShape(t) {
        let e = this.forwardLayer.computeOutputShape(t);
        (Array.isArray(e) && Array.isArray(e[0])) || (e = [e]), (e = e);
        let s, o, r;
        return (
            this.returnState && (r = e.slice(1)),
            (s = e[0]),
            (s = s),
            this.mergeMode === "concat"
                ? ((s[s.length - 1] *= 2), (o = [s]))
                : this.mergeMode == null
                ? (o = [s, s.slice()])
                : (o = [s]),
            this.returnState
                ? this.mergeMode == null
                    ? o.concat(r).concat(r.slice())
                    : [s].concat(r).concat(r.slice())
                : Xe(o)
        );
    }
    apply(t, e) {
        let s = e == null ? null : e.initialState,
            o = e == null ? null : e.constants;
        e == null && (e = {});
        const r = Ly(t, s, o, this.numConstants);
        if (
            ((t = r.inputs),
            (s = r.initialState),
            (o = r.constants),
            Array.isArray(t) && ((s = t.slice(1)), (t = t[0])),
            (s == null || s.length === 0) && o == null)
        )
            return super.apply(t, e);
        const i = [],
            a = [];
        if (s != null) {
            const c = s.length;
            if (c % 2 > 0)
                throw new E(
                    "When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs."
                );
            (e.initialState = s), i.push(...s);
            const u = s.map((d) => new de({ shape: d.shape }));
            (this.forwardLayer.stateSpec = u.slice(0, c / 2)),
                (this.backwardLayer.stateSpec = u.slice(c / 2)),
                a.push(...u);
        }
        if (o != null)
            throw new yt(
                "Support for constants in Bidirectional layers is not implemented yet."
            );
        const l = i[0] instanceof os;
        for (const c of i)
            if (c instanceof os !== l)
                throw new E(
                    "The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors"
                );
        if (l) {
            const c = [t].concat(i),
                u = this.inputSpec.concat(a),
                d = this.inputSpec;
            this.inputSpec = u;
            const h = super.apply(c, e);
            return (this.inputSpec = d), h;
        } else return super.apply(t, e);
    }
    call(t, e) {
        return D(() => {
            const s = e.initialState;
            let o, r;
            if (s == null)
                (o = this.forwardLayer.call(t, e)),
                    (r = this.backwardLayer.call(t, e));
            else {
                const l = s.slice(0, s.length / 2),
                    c = s.slice(s.length / 2);
                (o = this.forwardLayer.call(
                    t,
                    Object.assign(e, { initialState: l })
                )),
                    (r = this.backwardLayer.call(
                        t,
                        Object.assign(e, { initialState: c })
                    ));
            }
            let i;
            this.returnState &&
                (Array.isArray(o) && (i = o.slice(1).concat(r.slice(1))),
                (o = o[0]),
                (r = r[0])),
                this.returnSequences && (r = Lo(r, 1));
            let a;
            return (
                this.mergeMode === "concat"
                    ? (a = xf([o, r]))
                    : this.mergeMode === "sum"
                    ? (a = U(o, r))
                    : this.mergeMode === "ave"
                    ? (a = G(0.5, U(o, r)))
                    : this.mergeMode === "mul"
                    ? (a = G(o, r))
                    : this.mergeMode == null && (a = [o, r]),
                this.returnState
                    ? this.mergeMode == null
                        ? a.concat(i)
                        : [a].concat(i)
                    : a
            );
        });
    }
    resetStates(t) {
        this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
    }
    build(t) {
        wo(this.forwardLayer.name, () => {
            this.forwardLayer.build(t);
        }),
            wo(this.backwardLayer.name, () => {
                this.backwardLayer.build(t);
            }),
            (this.built = !0);
    }
    computeMask(t, e) {
        Array.isArray(e) && (e = e[0]);
        let s;
        if (
            (this.returnSequences
                ? this.mergeMode == null
                    ? (s = [e, e])
                    : (s = e)
                : this.mergeMode == null
                ? (s = [null, null])
                : (s = null),
            this.returnState)
        ) {
            const r = this.forwardLayer.states.map((i) => null);
            return Array.isArray(s)
                ? s.concat(r).concat(r)
                : [s].concat(r).concat(r);
        } else return s;
    }
    get trainableWeights() {
        return this.forwardLayer.trainableWeights.concat(
            this.backwardLayer.trainableWeights
        );
    }
    get nonTrainableWeights() {
        return this.forwardLayer.nonTrainableWeights.concat(
            this.backwardLayer.nonTrainableWeights
        );
    }
    // TODO(cais): Implement constraints().
    setFastWeightInitDuringBuild(t) {
        super.setFastWeightInitDuringBuild(t),
            this.forwardLayer != null &&
                this.forwardLayer.setFastWeightInitDuringBuild(t),
            this.backwardLayer != null &&
                this.backwardLayer.setFastWeightInitDuringBuild(t);
    }
    getConfig() {
        const t = {
                mergeMode: this.mergeMode,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    /** @nocollapse */
    static fromConfig(t, e) {
        const s = An(e.layer);
        if ((delete e.layer, e.numConstants != null))
            throw new yt(
                "Deserialization of a Bidirectional layer with numConstants present is not supported yet."
            );
        const o = e;
        return (o.layer = s), new t(o);
    }
}
k1.className = "Bidirectional";
_(k1);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class T1 extends St {
    constructor(t) {
        super(t),
            (this.scale = t.scale),
            t.offset ? (this.offset = t.offset) : (this.offset = 0);
    }
    getConfig() {
        const t = {
                scale: this.scale,
                offset: this.offset,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    call(t, e) {
        return D(
            () => (
                (t = mt(t)),
                t.dtype !== "float32" && (t = es(t, "float32")),
                U(G(t, this.scale), this.offset)
            )
        );
    }
}
T1.className = "Rescaling";
_(T1);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const { resizeBilinear: T3, cropAndResize: N3 } = fs;
class N1 extends St {
    constructor(t) {
        super(t), (this.height = t.height), (this.width = t.width);
    }
    centerCrop(t, e, s, o, r, i, a, l) {
        return D(() => {
            let c,
                u = !1;
            const d = e / i,
                h = s / a,
                p = (o + e) / i,
                f = (r + s) / a,
                m = [d, h, p, f],
                g = [];
            t.rank === 3 ? ((u = !0), (c = Xn([t]))) : (c = t);
            for (let I = 0; I < c.shape[0]; I++) g.push(m);
            const b = $e(g, [g.length, 4]),
                x = di(0, g.length, 1, "int32"),
                y = N3(c, b, x, [o, r], "nearest");
            return es(u ? mt(Mo(y)) : y, l);
        });
    }
    upsize(t, e, s, o) {
        return D(() => {
            const r = T3(t, [e, s]);
            return es(r, o);
        });
    }
    call(t, e) {
        return D(() => {
            const s = mt(t),
                o = s.dtype,
                r = s.shape,
                i = r[r.length - 3],
                a = r[r.length - 2];
            let l = 0;
            i !== this.height && (l = Math.floor((i - this.height) / 2));
            let c = 0;
            return (
                a !== this.width &&
                    ((c = Math.floor((a - this.width) / 2)),
                    c === 0 && (c = 1)),
                l >= 0 && c >= 0
                    ? this.centerCrop(s, l, c, this.height, this.width, i, a, o)
                    : this.upsize(t, this.height, this.width, o)
            );
        });
    }
    getConfig() {
        const t = {
                height: this.height,
                width: this.width,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = t.length - 3,
            s = t.length - 2;
        return (t[e] = this.height), (t[s] = this.width), t;
    }
}
N1.className = "CenterCrop";
_(N1);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function R3(n, t, e, s) {
    let o = mt(n);
    if ((o.dtype !== "int32" && (o = es(o, "int32")), t === "int")) return o;
    const r = o.shape;
    if (
        (o.rank === 0 && (o = Oe(o, -1)),
        t === "oneHot" && o.shape[o.shape.length - 1] !== 1 && (o = Oe(o, -1)),
        o.rank > 2)
    )
        throw new E(
            `When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${r} which would result in output rank ${o.rank}.`
        );
    const i = ["multiHot", "oneHot"].includes(t),
        a = o;
    let l;
    if (
        (typeof s < "u" && t === "count"
            ? (l = Tm(a, s, e, i))
            : (l = Tm(a, [], e, i)),
        t !== "tfIdf")
    )
        return l;
    if (s) return G(l, s);
    throw new E("When outputMode is 'tfIdf', weights must be provided.");
}
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class R1 extends St {
    constructor(t) {
        super(t),
            (this.numTokens = t.numTokens),
            t.outputMode
                ? (this.outputMode = t.outputMode)
                : (this.outputMode = "multiHot");
    }
    getConfig() {
        const t = {
                numTokens: this.numTokens,
                outputMode: this.outputMode,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    computeOutputShape(t) {
        return (
            (t = Rt(t)),
            t == null
                ? [this.numTokens]
                : this.outputMode === "oneHot" && t[t.length - 1] !== 1
                ? (t.push(this.numTokens), t)
                : ((t[t.length - 1] = this.numTokens), t)
        );
    }
    call(t, e) {
        return D(() => {
            (t = mt(t)), t.dtype !== "int32" && (t = es(t, "int32"));
            let s;
            if (typeof e.countWeights < "u") {
                if (this.outputMode !== "count")
                    throw new E(`countWeights is not used when outputMode !== count.
              Received countWeights=${e.countWeights}`);
                s = mt(e.countWeights);
            }
            const o = Pn(t),
                r = Il(t),
                i = rn(this.numTokens, o).bufferSync().get(0),
                a = Bo(r, 0).bufferSync().get(0);
            if (!(i && a))
                throw new E(
                    `Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`
                );
            return R3(t, this.outputMode, this.numTokens, s);
        });
    }
}
R1.className = "CategoryEncoding";
_(R1);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const $3 = ["bilinear", "nearest"],
    lg = new Set($3);
class $1 extends St {
    constructor(t) {
        if (
            (super(t),
            (this.height = t.height),
            (this.width = t.width),
            t.interpolation)
        )
            if (lg.has(t.interpolation)) this.interpolation = t.interpolation;
            else
                throw new E(
                    `Invalid interpolation parameter: ${t.interpolation} is not implemented`
                );
        else this.interpolation = "bilinear";
        this.cropToAspectRatio = !!t.cropToAspectRatio;
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = t[2];
        return [this.height, this.width, e];
    }
    getConfig() {
        const t = {
                height: this.height,
                width: this.width,
                interpolation: this.interpolation,
                cropToAspectRatio: this.cropToAspectRatio,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    call(t, e) {
        return D(() => {
            const s = [this.height, this.width];
            if (this.interpolation === "bilinear")
                return fs.resizeBilinear(t, s, !this.cropToAspectRatio);
            if (this.interpolation === "nearest")
                return fs.resizeNearestNeighbor(t, s, !this.cropToAspectRatio);
            throw new Error(
                `Interpolation is ${this.interpolation} but only ${[
                    ...lg,
                ]} are supported`
            );
        });
    }
}
$1.className = "Resizing";
_($1);
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class G1 {
    constructor(t) {
        this.seed = t;
    }
    next() {
        if (this.seed !== void 0) return this.seed++;
    }
}
G1.className = "RandomSeed";
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class E1 extends St {
    constructor(t) {
        super(t), (this.randomGenerator = new G1(t.seed));
    }
    getConfig() {
        const t = {
                seed: this.randomGenerator.seed,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
E1.className = "BaseRandomLayer";
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const G3 = ["bilinear", "nearest"],
    cg = new Set(G3);
class L1 extends E1 {
    constructor(t) {
        super(t);
        const { factor: e, interpolation: s = "bilinear" } = t;
        if (
            ((this.factor = e),
            Array.isArray(this.factor) && this.factor.length === 2)
        )
            (this.widthLower = this.factor[0]),
                (this.widthUpper = this.factor[1]);
        else if (!Array.isArray(this.factor) && this.factor > 0)
            (this.widthLower = -this.factor), (this.widthUpper = this.factor);
        else
            throw new E(
                `Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`
            );
        if (this.widthLower < -1 || this.widthUpper < -1)
            throw new E(
                `factor must have values larger than -1. Got: ${this.factor}`
            );
        if (this.widthUpper < this.widthLower)
            throw new E(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);
        if (s)
            if (cg.has(s)) this.interpolation = s;
            else
                throw new E(
                    `Invalid interpolation parameter: ${s} is not implemented`
                );
    }
    getConfig() {
        const t = {
                factor: this.factor,
                interpolation: this.interpolation,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    computeOutputShape(t) {
        t = Rt(t);
        const e = t[2];
        return [this.imgHeight, -1, e];
    }
    call(t, e) {
        return D(() => {
            const s = mt(t);
            this.imgHeight = s.shape[s.shape.length - 3];
            const o = s.shape[s.shape.length - 2];
            this.widthFactor = Sa(
                [1],
                1 + this.widthLower,
                1 + this.widthUpper,
                "float32",
                this.randomGenerator.next()
            );
            let r = this.widthFactor.dataSync()[0] * o;
            r = Math.round(r);
            const i = [this.imgHeight, r];
            switch (this.interpolation) {
                case "bilinear":
                    return fs.resizeBilinear(t, i);
                case "nearest":
                    return fs.resizeNearestNeighbor(t, i);
                default:
                    throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...cg]} are supported`);
            }
        });
    }
}
L1.className = "RandomWidth";
_(L1);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const E3 = F();
E3.registerFlag(
    "KEEP_INTERMEDIATE_TENSORS",
    () => !1,
    (n) => {
        n &&
            console.warn(
                "Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance."
            );
    }
);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
var ug;
(function (n) {
    (n[(n.DT_INVALID = 0)] = "DT_INVALID"),
        (n[(n.DT_FLOAT = 1)] = "DT_FLOAT"),
        (n[(n.DT_DOUBLE = 2)] = "DT_DOUBLE"),
        (n[(n.DT_INT32 = 3)] = "DT_INT32"),
        (n[(n.DT_UINT8 = 4)] = "DT_UINT8"),
        (n[(n.DT_INT16 = 5)] = "DT_INT16"),
        (n[(n.DT_INT8 = 6)] = "DT_INT8"),
        (n[(n.DT_STRING = 7)] = "DT_STRING"),
        (n[(n.DT_COMPLEX64 = 8)] = "DT_COMPLEX64"),
        (n[(n.DT_INT64 = 9)] = "DT_INT64"),
        (n[(n.DT_BOOL = 10)] = "DT_BOOL"),
        (n[(n.DT_QINT8 = 11)] = "DT_QINT8"),
        (n[(n.DT_QUINT8 = 12)] = "DT_QUINT8"),
        (n[(n.DT_QINT32 = 13)] = "DT_QINT32"),
        (n[(n.DT_BFLOAT16 = 14)] = "DT_BFLOAT16"),
        (n[(n.DT_QINT16 = 15)] = "DT_QINT16"),
        (n[(n.DT_QUINT16 = 16)] = "DT_QUINT16"),
        (n[(n.DT_UINT16 = 17)] = "DT_UINT16"),
        (n[(n.DT_COMPLEX128 = 18)] = "DT_COMPLEX128"),
        (n[(n.DT_HALF = 19)] = "DT_HALF"),
        (n[(n.DT_RESOURCE = 20)] = "DT_RESOURCE"),
        (n[(n.DT_VARIANT = 21)] = "DT_VARIANT"),
        (n[(n.DT_UINT32 = 22)] = "DT_UINT32"),
        (n[(n.DT_UINT64 = 23)] = "DT_UINT64"),
        (n[(n.DT_FLOAT_REF = 101)] = "DT_FLOAT_REF"),
        (n[(n.DT_DOUBLE_REF = 102)] = "DT_DOUBLE_REF"),
        (n[(n.DT_INT32_REF = 103)] = "DT_INT32_REF"),
        (n[(n.DT_UINT8_REF = 104)] = "DT_UINT8_REF"),
        (n[(n.DT_INT16_REF = 105)] = "DT_INT16_REF"),
        (n[(n.DT_INT8_REF = 106)] = "DT_INT8_REF"),
        (n[(n.DT_STRING_REF = 107)] = "DT_STRING_REF"),
        (n[(n.DT_COMPLEX64_REF = 108)] = "DT_COMPLEX64_REF"),
        (n[(n.DT_INT64_REF = 109)] = "DT_INT64_REF"),
        (n[(n.DT_BOOL_REF = 110)] = "DT_BOOL_REF"),
        (n[(n.DT_QINT8_REF = 111)] = "DT_QINT8_REF"),
        (n[(n.DT_QUINT8_REF = 112)] = "DT_QUINT8_REF"),
        (n[(n.DT_QINT32_REF = 113)] = "DT_QINT32_REF"),
        (n[(n.DT_BFLOAT16_REF = 114)] = "DT_BFLOAT16_REF"),
        (n[(n.DT_QINT16_REF = 115)] = "DT_QINT16_REF"),
        (n[(n.DT_QUINT16_REF = 116)] = "DT_QUINT16_REF"),
        (n[(n.DT_UINT16_REF = 117)] = "DT_UINT16_REF"),
        (n[(n.DT_COMPLEX128_REF = 118)] = "DT_COMPLEX128_REF"),
        (n[(n.DT_HALF_REF = 119)] = "DT_HALF_REF"),
        (n[(n.DT_RESOURCE_REF = 120)] = "DT_RESOURCE_REF"),
        (n[(n.DT_VARIANT_REF = 121)] = "DT_VARIANT_REF"),
        (n[(n.DT_UINT32_REF = 122)] = "DT_UINT32_REF"),
        (n[(n.DT_UINT64_REF = 123)] = "DT_UINT64_REF");
})(ug || (ug = {}));
var dg;
(function (n) {
    (function (t) {
        (t[(t.LEGACY = 0)] = "LEGACY"),
            (t[(t.V1 = 1)] = "V1"),
            (t[(t.V2 = 2)] = "V2");
    })(n.CheckpointFormatVersion || (n.CheckpointFormatVersion = {}));
})(dg || (dg = {}));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function L3(n, t) {
    return Dl(n, t);
}
function Dl(
    n,
    t,
    e = /* @__PURE__ */ new Map(),
    s = /* @__PURE__ */ new Set()
) {
    if (n == null) return null;
    if (typeof Blob == "function" && n instanceof Blob) return n.slice();
    if (s.has(n)) throw new Error("Circular references are not supported.");
    if (e.has(n)) return e.get(n);
    const o = t(n);
    if (o.recurse && o.value !== null)
        throw new Error(
            "A deep map function may not return both a value and recurse=true."
        );
    if (o.recurse)
        if (yr(n)) {
            const r = Array.isArray(n) ? [] : {};
            s.add(n);
            for (const i in n) {
                const a = n[i],
                    l = Dl(a, t, e, s);
                r[i] = l;
            }
            return s.delete(n), n.__proto__ && (r.__proto__ = n.__proto__), r;
        } else throw new Error(`Can't recurse into non-iterable type: ${n}`);
    else return e.set(n, o.value), o.value;
}
function M3(n, t = W1) {
    return M1(n, t);
}
function M1(n, t, e = /* @__PURE__ */ new Set()) {
    const s = n[0];
    if (e.has(s)) throw new Error("Circular references are not supported.");
    const o = t(n);
    if (o.recurse && o.value !== null)
        throw new Error(
            "A deep zip function may not return both a value and recurse=true."
        );
    if (o.recurse)
        if (yr(s)) {
            const r = Array.isArray(s) ? [] : {};
            e.add(s);
            for (const i in s) {
                const a = n.map((c) => c[i]),
                    l = M1(a, t, e);
                r[i] = l;
            }
            return e.delete(s), r;
        } else throw new Error(`Can't recurse into non-iterable type: ${s}`);
    else return o.value;
}
function W1(n) {
    return n === null
        ? null
        : yr(n[0])
        ? { value: null, recurse: !0 }
        : { value: n, recurse: !1 };
}
async function D1(n, t) {
    const e = /* @__PURE__ */ new Map();
    Dl(n, t, e);
    for (const o of Array.from(e.keys())) {
        const r = e.get(o);
        if (Ci(r)) {
            const i = await r;
            e.set(o, i);
        }
    }
    return Dl(n, t, e);
}
function yr(n) {
    let t = !1;
    if (F().get("IS_BROWSER")) t = n instanceof TextDecoder;
    else {
        const { StringDecoder: e } = require("string_decoder");
        t = n instanceof e;
    }
    return (
        n != null &&
        !ArrayBuffer.isView(n) &&
        (Array.isArray(n) ||
            (typeof n == "object" &&
                !(n instanceof Mt) &&
                !(n instanceof Promise) &&
                !t))
    );
}
function W3(n) {
    return (
        n == null ||
        D3(n) ||
        Array.isArray(n) ||
        (typeof n == "object" && n instanceof Mt) ||
        qe(n)
    );
}
function D3(n) {
    return n === null || (typeof n != "object" && typeof n != "function");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function F3(n) {
    return L3(n, V3);
}
function V3(n) {
    return n instanceof Mt
        ? { value: n.clone(), recurse: !1 }
        : yr(n)
        ? { value: null, recurse: !0 }
        : { value: n, recurse: !1 };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class F1 {
    /**
     * Constructs a `RingBuffer`.
     * @param capacity The number of items that the buffer can accomodate.
     */
    constructor(t) {
        if (((this.capacity = t), (this.begin = 0), (this.end = 0), t == null))
            throw new RangeError(
                "Can't create a ring buffer of unknown capacity."
            );
        if (t < 1)
            throw new RangeError("Can't create ring buffer of capacity < 1.");
        (this.data = new Array(t)), (this.doubledCapacity = 2 * t);
    }
    /**
     * Map any index into the range 0 <= index < 2*capacity.
     */
    wrap(t) {
        for (; t < 0; ) t += this.doubledCapacity;
        return t % this.doubledCapacity;
    }
    get(t) {
        if (t < 0) throw new RangeError("Can't get item at a negative index.");
        return this.data[t % this.capacity];
    }
    set(t, e) {
        if (t < 0) throw new RangeError("Can't set item at a negative index.");
        this.data[t % this.capacity] = e;
    }
    /**
     * Returns the current number of items in the buffer.
     */
    length() {
        let t = this.end - this.begin;
        return t < 0 && (t = this.doubledCapacity + t), t;
    }
    /**
     * Reports whether the buffer is full.
     * @returns true if the number of items in the buffer equals its capacity, and
     *   false otherwise.
     */
    isFull() {
        return this.length() === this.capacity;
    }
    /**
     * Reports whether the buffer is empty.
     * @returns true if the number of items in the buffer equals zero, and
     *   false otherwise.
     */
    isEmpty() {
        return this.length() === 0;
    }
    /**
     * Adds an item to the end of the buffer.
     */
    push(t) {
        if (this.isFull()) throw new RangeError("Ring buffer is full.");
        this.set(this.end, t), (this.end = this.wrap(this.end + 1));
    }
    /**
     * Adds many items to the end of the buffer, in order.
     */
    pushAll(t) {
        for (const e of t) this.push(e);
    }
    /**
     * Removes and returns the last item in the buffer.
     */
    pop() {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        this.end = this.wrap(this.end - 1);
        const t = this.get(this.end);
        return this.set(this.end, void 0), t;
    }
    /**
     * Adds an item to the beginning of the buffer.
     */
    unshift(t) {
        if (this.isFull()) throw new RangeError("Ring buffer is full.");
        (this.begin = this.wrap(this.begin - 1)), this.set(this.begin, t);
    }
    /**
     * Removes and returns the first item in the buffer.
     */
    shift() {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        const t = this.get(this.begin);
        return (
            this.set(this.begin, void 0),
            (this.begin = this.wrap(this.begin + 1)),
            t
        );
    }
    /**
     * Removes and returns a specific item in the buffer, and moves the last item
     * to the vacated slot.  This is useful for implementing a shuffling stream.
     * Note that this operation necessarily scrambles the original order.
     *
     * @param relativeIndex: the index of the item to remove, relative to the
     *   first item in the buffer (e.g., hiding the ring nature of the underlying
     *   storage).
     */
    shuffleExcise(t) {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        const e = this.wrap(this.begin + t),
            s = this.get(e);
        return this.set(e, this.pop()), s;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class xu extends F1 {
    /**
     * Constructs a `GrowingRingBuffer`.
     */
    constructor() {
        super(xu.INITIAL_CAPACITY);
    }
    isFull() {
        return !1;
    }
    push(t) {
        super.isFull() && this.expand(), super.push(t);
    }
    unshift(t) {
        super.isFull() && this.expand(), super.unshift(t);
    }
    /**
     * Doubles the capacity of the buffer.
     */
    expand() {
        const t = this.capacity * 2,
            e = new Array(t),
            s = this.length();
        for (let o = 0; o < s; o++) e[o] = this.get(this.wrap(this.begin + o));
        (this.data = e),
            (this.capacity = t),
            (this.doubledCapacity = 2 * this.capacity),
            (this.begin = 0),
            (this.end = s);
    }
}
xu.INITIAL_CAPACITY = 32;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function V1(n) {
    return new O3(n);
}
function z3(n) {
    return new X3(n);
}
function P3(n, t) {
    return new z1(n, t);
}
function A3(n, t = Fs.FAIL) {
    return new j3(n, t);
}
class He {
    /**
     * Collect all remaining elements of a bounded stream into an array.
     * Obviously this will succeed only for small streams that fit in memory.
     * Useful for testing.
     *
     * @returns A Promise for an array of stream elements, which will resolve
     *   when the stream is exhausted.
     */
    async toArray() {
        const t = [];
        let e = await this.next();
        for (; !e.done; ) t.push(e.value), (e = await this.next());
        return t;
    }
    /**
     * Collect all elements of this dataset into an array with prefetching 100
     * elements. This is useful for testing, because the prefetch changes the
     * order in which the Promises are resolved along the processing pipeline.
     * This may help expose bugs where results are dependent on the order of
     * Promise resolution rather than on the logical order of the stream (i.e.,
     * due to hidden mutable state).
     *
     * @returns A Promise for an array of stream elements, which will resolve
     *   when the stream is exhausted.
     */
    async toArrayForTest() {
        const t = this.prefetch(100),
            e = [];
        let s = await t.next();
        for (; !s.done; ) e.push(s.value), (s = await t.next());
        return e;
    }
    /**
     * Draw items from the stream until it is exhausted.
     *
     * This can be useful when the stream has side effects but no output.  In
     * that case, calling this function guarantees that the stream will be
     * fully processed.
     */
    async resolveFully() {
        let t = await this.next();
        for (; !t.done; ) t = await this.next();
    }
    /**
     * Draw items from the stream until it is exhausted, or a predicate fails.
     *
     * This can be useful when the stream has side effects but no output.  In
     * that case, calling this function guarantees that the stream will be
     * fully processed.
     */
    async resolveWhile(t) {
        let e = await this.next(),
            s = t(e.value);
        for (; !e.done && s; ) (e = await this.next()), (s = t(e.value));
    }
    /**
     * Handles errors thrown on this stream using a provided handler function.
     *
     * @param handler A function that handles any `Error` thrown during a `next()`
     *   call and returns true if the stream should continue (dropping the failed
     *   call) or false if the stream should quietly terminate.  If the handler
     *   itself throws (or rethrows) an `Error`, that will be propagated.
     *
     * @returns A `LazyIterator` of elements passed through from upstream,
     *   possibly filtering or terminating on upstream `next()` calls that
     *   throw an `Error`.
     */
    handleErrors(t) {
        return new Y3(this, t);
    }
    // TODO(soergel): Implement reduce() etc.
    /**
     * Filters this stream according to `predicate`.
     *
     * @param predicate A function mapping a stream element to a boolean or a
     * `Promise` for one.
     *
     * @returns A `LazyIterator` of elements for which the predicate was true.
     */
    filter(t) {
        return new _3(this, t);
    }
    /**
     * Maps this stream through a 1-to-1 transform.
     *
     * @param transform A function mapping a stream element to a transformed
     *   element.
     *
     * @returns A `LazyIterator` of transformed elements.
     */
    map(t) {
        return new U3(this, t);
    }
    /**
     * Maps this stream through an async 1-to-1 transform.
     *
     * @param transform A function mapping a stream element to a `Promise` for a
     *   transformed stream element.
     *
     * @returns A `LazyIterator` of transformed elements.
     */
    mapAsync(t) {
        return new hg(this, t);
    }
    /**
     * Maps this stream through a 1-to-1 transform, forcing serial execution.
     *
     * @param transform A function mapping a stream element to a transformed
     *   element.
     *
     * @returns A `LazyIterator` of transformed elements.
     */
    serialMapAsync(t) {
        return new hg(this, t).serial();
    }
    /**
     * Maps this stream through a 1-to-many transform.
     *
     * @param transform A function mapping a stream element to an array of
     *   transformed elements.
     *
     * @returns A `DataStream` of transformed elements.
     */
    flatmap(t) {
        return new J3(this, t);
    }
    /**
     * Apply a function to every element of the stream.
     *
     * @param f A function to apply to each stream element.
     */
    async forEachAsync(t) {
        return this.map(t).resolveFully();
    }
    /**
     * Apply a function to every element of the stream, forcing serial execution.
     *
     * @param f A function to apply to each stream element.  Should return 'true'
     *   to indicate that the stream should continue, or 'false' to cause it to
     *   terminate.
     */
    async serialForEach(t) {
        return this.serialMapAsync(t).resolveWhile((e) => e === !0);
    }
    /**
     * Groups elements into batches, represented as arrays of elements.
     *
     * We can think of the elements of this iterator as 'rows' (even if they are
     * nested structures).  By the same token, consecutive values for a given
     * key within the elements form a 'column'.  This matches the usual sense of
     * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
     *
     * Thus, "Row-major" means that the resulting batch is simply a collection of
     * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major
     * form, which is needed for vectorized computation.
     *
     * @param batchSize The number of elements desired per batch.
     * @param smallLastBatch Whether to emit the final batch when it has fewer
     *   than batchSize elements. Default true.
     * @returns A `LazyIterator` of batches of elements, represented as arrays
     *   of the original element type.
     */
    rowMajorBatch(t, e = !0) {
        return new H3(this, t, e);
    }
    /**
     * Groups elements into batches, represented in column-major form.
     *
     * We can think of the elements of this iterator as 'rows' (even if they are
     * nested structures).  By the same token, consecutive values for a given
     * key within the elements form a 'column'.  This matches the usual sense of
     * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
     *
     * Thus, "column-major" means that the resulting batch is a (potentially
     * nested) structure representing the columns.  Each column entry, then,
     * contains a collection of the values found in that column for a range of
     * input elements.  This representation allows for vectorized computation, in
     * contrast to the row-major form.
     *
     * The inputs should all have the same nested structure (i.e., of arrays and
     * dicts).  The result is a single object with the same nested structure,
     * where the leaves are arrays collecting the values of the inputs at that
     * location (or, optionally, the result of a custom function applied to those
     * arrays).
     *
     * @param batchSize The number of elements desired per batch.
     * @param smallLastBatch Whether to emit the final batch when it has fewer
     *   than batchSize elements. Default true.
     * @param zipFn: (optional) A function that expects an array of elements at a
     *   single node of the object tree, and returns a `DeepMapResult`.  The
     *   `DeepMapResult` either provides a result value for that node (i.e.,
     *   representing the subtree), or indicates that the node should be processed
     *   recursively.  The default zipFn recurses as far as possible and places
     *   arrays at the leaves.
     * @returns A `LazyIterator` of batches of elements, represented as an object
     *   with collections at the leaves.
     */
    columnMajorBatch(t, e = !0, s = W1) {
        return this.rowMajorBatch(t, e).map((r) => M3(r, s));
    }
    /**
     * Concatenate this `LazyIterator` with another.
     *
     * @param iterator A `LazyIterator` to be concatenated onto this one.
     * @param baseErrorHandler An optional function that can intercept `Error`s
     *   raised during a `next()` call on the base stream.  This function can
     *   decide whether the error should be propagated, whether the error should
     *   be ignored, or whether the base stream should be terminated.
     * @returns A `LazyIterator`.
     */
    concatenate(t, e) {
        return new z1(V1([this, t]), e);
    }
    /**
     * Limits this stream to return at most `count` items.
     *
     * @param count The maximum number of items to provide from the stream. If
     * a negative or undefined value is given, the entire stream is returned
     *   unaltered.
     */
    take(t) {
        return t < 0 || t == null ? this : new B3(this, t);
    }
    /**
     * Skips the first `count` items in this stream.
     *
     * @param count The number of items to skip.  If a negative or undefined
     * value is given, the entire stream is returned unaltered.
     */
    skip(t) {
        return t < 0 || t == null ? this : new Z3(this, t);
    }
    /**
     * Prefetch the first `bufferSize` items in this stream.
     *
     * Note this prefetches Promises, but makes no guarantees about when those
     * Promises resolve.
     *
     * @param bufferSize: An integer specifying the number of elements to be
     *   prefetched.
     */
    prefetch(t) {
        return new P1(this, t);
    }
    // TODO(soergel): deep sharded shuffle, where supported
    /**
     * Randomly shuffles the elements of this stream.
     *
     * @param bufferSize: An integer specifying the number of elements from
     * this stream from which the new stream will sample.
     * @param seed: (Optional.) An integer specifying the random seed that
     * will be used to create the distribution.
     */
    shuffle(t, e) {
        return new q3(this, t, e);
    }
    /**
     * Force an iterator to execute serially: each next() call will await the
     * prior one, so that they cannot execute concurrently.
     */
    serial() {
        return new K3(this);
    }
}
class O3 extends He {
    constructor(t) {
        super(), (this.items = t), (this.trav = 0);
    }
    summary() {
        return `Array of ${this.items.length} items`;
    }
    async next() {
        if (this.trav >= this.items.length) return { value: null, done: !0 };
        const t = this.items[this.trav];
        return this.trav++, { value: F3(t), done: !1 };
    }
}
class X3 extends He {
    constructor(t) {
        super(), (this.nextFn = t);
    }
    summary() {
        return "Function call";
    }
    async next() {
        try {
            return this.nextFn();
        } catch (t) {
            throw (
                ((t.message = `Error thrown while iterating through a dataset: ${t.message}`),
                t)
            );
        }
    }
}
class K3 extends He {
    constructor(t) {
        super(),
            (this.upstream = t),
            (this.lastRead = Promise.resolve({ value: null, done: !1 }));
    }
    summary() {
        return `${this.upstream.summary()} -> Serial`;
    }
    async next() {
        return (
            (this.lastRead = this.lastRead.then(() => this.serialNext())),
            this.lastRead
        );
    }
    async serialNext() {
        return this.upstream.next();
    }
}
class Z3 extends He {
    constructor(t, e) {
        super(),
            (this.upstream = t),
            (this.maxCount = e),
            (this.count = 0),
            (this.lastRead = Promise.resolve({ value: null, done: !1 }));
    }
    summary() {
        return `${this.upstream.summary()} -> Skip`;
    }
    async next() {
        return (
            (this.lastRead = this.lastRead.then(() => this.serialNext())),
            this.lastRead
        );
    }
    async serialNext() {
        for (; this.count++ < this.maxCount; ) {
            const t = await this.upstream.next();
            if (t.done) return t;
            xt(t.value);
        }
        return this.upstream.next();
    }
}
class B3 extends He {
    constructor(t, e) {
        super(), (this.upstream = t), (this.maxCount = e), (this.count = 0);
    }
    summary() {
        return `${this.upstream.summary()} -> Take`;
    }
    async next() {
        return this.count++ >= this.maxCount
            ? { value: null, done: !0 }
            : this.upstream.next();
    }
}
class H3 extends He {
    constructor(t, e, s = !0) {
        super(),
            (this.upstream = t),
            (this.batchSize = e),
            (this.enableSmallLastBatch = s),
            (this.lastRead = Promise.resolve({ value: null, done: !1 }));
    }
    summary() {
        return `${this.upstream.summary()} -> RowMajorBatch`;
    }
    async next() {
        return (
            (this.lastRead = this.lastRead.then(() => this.serialNext())),
            this.lastRead
        );
    }
    async serialNext() {
        const t = [];
        for (; t.length < this.batchSize; ) {
            const e = await this.upstream.next();
            if (e.done)
                return this.enableSmallLastBatch && t.length > 0
                    ? { value: t, done: !1 }
                    : { value: null, done: !0 };
            t.push(e.value);
        }
        return { value: t, done: !1 };
    }
}
class _3 extends He {
    constructor(t, e) {
        super(),
            (this.upstream = t),
            (this.predicate = e),
            (this.lastRead = Promise.resolve({ value: null, done: !1 }));
    }
    summary() {
        return `${this.upstream.summary()} -> Filter`;
    }
    async next() {
        return (
            (this.lastRead = this.lastRead.then(() => this.serialNext())),
            this.lastRead
        );
    }
    async serialNext() {
        for (;;) {
            const t = await this.upstream.next();
            if (t.done || this.predicate(t.value)) return t;
            xt(t.value);
        }
    }
}
class U3 extends He {
    constructor(t, e) {
        super(), (this.upstream = t), (this.transform = e);
    }
    summary() {
        return `${this.upstream.summary()} -> Map`;
    }
    async next() {
        const t = await this.upstream.next();
        if (t.done) return { value: null, done: !0 };
        const e = bs(t.value),
            s = this.transform(t.value),
            o = bs(s);
        for (const r of e) Yc(r, o) || r.dispose();
        return { value: s, done: !1 };
    }
}
class Y3 extends He {
    constructor(t, e) {
        super(),
            (this.upstream = t),
            (this.handler = e),
            (this.count = 0),
            (this.lastRead = Promise.resolve({ value: null, done: !1 }));
    }
    summary() {
        return `${this.upstream.summary()} -> handleErrors`;
    }
    async next() {
        return (
            (this.lastRead = this.lastRead.then(() => this.serialNext())),
            this.lastRead
        );
    }
    async serialNext() {
        for (;;)
            try {
                return await this.upstream.next();
            } catch (t) {
                if (!this.handler(t)) return { value: null, done: !0 };
            }
    }
}
class hg extends He {
    constructor(t, e) {
        super(), (this.upstream = t), (this.transform = e);
    }
    summary() {
        return `${this.upstream.summary()} -> AsyncMap`;
    }
    async next() {
        const t = await this.upstream.next();
        if (t.done) return { value: null, done: !0 };
        const e = bs(t.value),
            s = await this.transform(t.value),
            o = bs(s);
        for (const r of e) Yc(r, o) || r.dispose();
        return { value: s, done: !1 };
    }
}
class Q3 extends He {
    constructor() {
        super(),
            (this.outputQueue = new xu()),
            (this.lastRead = Promise.resolve({ value: null, done: !1 }));
    }
    async next() {
        return (
            (this.lastRead = this.lastRead.then(() => this.serialNext())),
            this.lastRead
        );
    }
    async serialNext() {
        for (; this.outputQueue.length() === 0; )
            if (!(await this.pump())) return { value: null, done: !0 };
        return { value: this.outputQueue.shift(), done: !1 };
    }
}
class J3 extends Q3 {
    constructor(t, e) {
        super(), (this.upstream = t), (this.transform = e);
    }
    summary() {
        return `${this.upstream.summary()} -> Flatmap`;
    }
    async pump() {
        const t = await this.upstream.next();
        if (t.done) return !1;
        const e = bs(t.value),
            s = this.transform(t.value),
            o = bs(s);
        this.outputQueue.pushAll(s);
        for (const r of e) Yc(r, o) || r.dispose();
        return !0;
    }
}
class z1 extends He {
    constructor(t, e) {
        super(),
            (this.baseErrorHandler = e),
            (this.lastRead = null),
            (this.iterator = null),
            (this.moreIterators = t);
    }
    summary() {
        return "TODO: fill in upstream of chained summaries -> Chained";
    }
    async next() {
        return (
            (this.lastRead = this.readFromChain(this.lastRead)), this.lastRead
        );
    }
    async readFromChain(t) {
        if ((await t, this.iterator == null)) {
            const s = await this.moreIterators.next();
            if (s.done) return { value: null, done: !0 };
            (this.iterator = s.value),
                this.baseErrorHandler != null &&
                    (this.iterator = this.iterator.handleErrors(
                        this.baseErrorHandler
                    ));
        }
        const e = await this.iterator.next();
        return e.done ? ((this.iterator = null), this.readFromChain(t)) : e;
    }
}
var Fs;
(function (n) {
    (n[(n.FAIL = 0)] = "FAIL"),
        (n[(n.SHORTEST = 1)] = "SHORTEST"),
        (n[(n.LONGEST = 2)] = "LONGEST");
})(Fs || (Fs = {}));
class j3 extends He {
    constructor(t, e = Fs.FAIL) {
        super(),
            (this.iterators = t),
            (this.mismatchMode = e),
            (this.count = 0),
            (this.currentPromise = null);
    }
    summary() {
        return "{TODO: fill in upstream of zip summaries} -> Zip";
    }
    async nextState(t) {
        await t;
        let e = 0,
            s = 0;
        function o(i) {
            return i instanceof He
                ? {
                      value: i
                          .next()
                          .then((l) => (e++, l.done && s++, l.value)),
                      recurse: !1,
                  }
                : { value: null, recurse: !0 };
        }
        const r = await D1(this.iterators, o);
        if (e === s) return { value: null, done: !0 };
        if (s > 0)
            switch (this.mismatchMode) {
                case Fs.FAIL:
                    throw new Error(
                        `Zipped streams should have the same length. Mismatched at element ${this.count}.`
                    );
                case Fs.SHORTEST:
                    return { value: null, done: !0 };
                case Fs.LONGEST:
            }
        return this.count++, { value: r, done: !1 };
    }
    async next() {
        return (
            (this.currentPromise = this.nextState(this.currentPromise)),
            this.currentPromise
        );
    }
}
class P1 extends He {
    constructor(t, e) {
        super(),
            (this.upstream = t),
            (this.bufferSize = e),
            (this.buffer = new F1(e));
    }
    summary() {
        return `${this.upstream.summary()} -> Prefetch`;
    }
    /**
     * Refill the prefetch buffer.  Returns only after the buffer is full, or
     * the upstream source is exhausted.
     */
    refill() {
        for (; !this.buffer.isFull(); ) {
            const t = this.upstream.next();
            this.buffer.push(t);
        }
    }
    next() {
        return this.refill(), this.buffer.shift();
    }
}
class q3 extends P1 {
    constructor(t, e, s) {
        super(t, e),
            (this.upstream = t),
            (this.windowSize = e),
            (this.upstreamExhausted = !1),
            (this.random = Nr.alea(s || Ie().toString())),
            (this.lastRead = Promise.resolve({ value: null, done: !1 }));
    }
    async next() {
        return (
            (this.lastRead = this.lastRead.then(() => this.serialNext())),
            this.lastRead
        );
    }
    randomInt(t) {
        return Math.floor(this.random() * t);
    }
    chooseIndex() {
        return this.randomInt(this.buffer.length());
    }
    async serialNext() {
        for (
            this.upstreamExhausted || this.refill();
            !this.buffer.isEmpty();

        ) {
            const t = this.chooseIndex(),
                e = await this.buffer.shuffleExcise(t);
            if (e.done) this.upstreamExhausted = !0;
            else return this.refill(), e;
        }
        return { value: null, done: !0 };
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class zf {
    constructor() {
        this.size = null;
    }
    // TODO(soergel): Make Datasets report whether repeated iterator() calls
    // produce the same result (e.g., reading from a file) or different results
    // (e.g., from the webcam).  Currently we don't make this distinction but it
    // could be important for the user to know.
    // abstract isDeterministic(): boolean;
    /**
     * Groups elements into batches.
     *
     * It is assumed that each of the incoming dataset elements has the same
     * structure -- i.e. the same set of keys at each location in an object
     * hierarchy.  For each key, the resulting `Dataset` provides a batched
     * element collecting all of the incoming values for that key.
     *
     *  * Incoming primitives are grouped into a 1-D Tensor.
     *  * Incoming Tensors are grouped into a new Tensor where the 0th axis is
     *    the batch dimension.
     *  * Incoming arrays are converted to Tensor and then batched.
     *  * A nested array is interpreted as an n-D Tensor, so the batched result
     *    has n+1 dimensions.
     *  * An array that cannot be converted to Tensor produces an error.
     *
     * If an array should not be batched as a unit, it should first be converted
     * to an object with integer keys.
     *
     * Here are a few examples:
     *
     * Batch a dataset of numbers:
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);
     * await a.forEachAsync(e => e.print());
     * ```
     *
     * Batch a dataset of arrays:
     * ```js
     * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);
     * await b.forEachAsync(e => e.print());
     * ```
     *
     * Batch a dataset of objects:
     * ```js
     * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},
     *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},
     *   {a: 8, b: 18}]).batch(4);
     * await c.forEachAsync(e => {
     *   console.log('{');
     *   for(var key in e) {
     *     console.log(key+':');
     *     e[key].print();
     *   }
     *   console.log('}');
     * })
     * ```
     *
     * @param batchSize The number of elements desired per batch.
     * @param smallLastBatch Whether to emit the final batch when it has fewer
     *   than batchSize elements. Default true.
     * @returns A `Dataset`, from which a stream of batches can be obtained.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    batch(t, e = !0) {
        const s = this;
        C(
            t > 0,
            () => `batchSize needs to be positive, but it is
      ${t}`
        );
        let o;
        return (
            this.size === 1 / 0 || this.size == null
                ? (o = this.size)
                : e
                ? (o = Math.ceil(this.size / t))
                : (o = Math.floor(this.size / t)),
            yn(async () => (await s.iterator()).columnMajorBatch(t, e, tM), o)
        );
    }
    /**
     * Concatenates this `Dataset` with another.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3]);
     * const b = tf.data.array([4, 5, 6]);
     * const c = a.concatenate(b);
     * await c.forEachAsync(e => console.log(e));
     * ```
     *
     * @param dataset A `Dataset` to be concatenated onto this one.
     * @returns A `Dataset`.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    concatenate(t) {
        const e = this;
        let s;
        return (
            this.size === 1 / 0 || t.size === 1 / 0
                ? (s = 1 / 0)
                : this.size != null && t.size != null
                ? (s = this.size + t.size)
                : (s = null),
            yn(
                async () =>
                    (await e.iterator()).concatenate(await t.iterator()),
                s
            )
        );
    }
    /**
     * Filters this dataset according to `predicate`.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
     *   .filter(x => x%2 === 0);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param predicate A function mapping a dataset element to a boolean or a
     * `Promise` for one.
     *
     * @returns A `Dataset` of elements for which the predicate was true.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    filter(t) {
        const e = this;
        let s;
        return (
            this.size === 1 / 0 ? (s = 1 / 0) : (s = null),
            yn(async () => (await e.iterator()).filter((o) => D(() => t(o))), s)
        );
    }
    /**
     * Apply a function to every element of the dataset.
     *
     * After the function is applied to a dataset element, any Tensors contained
     * within that element are disposed.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3]);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param f A function to apply to each dataset element.
     * @returns A `Promise` that resolves after all elements have been processed.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    async forEachAsync(t) {
        return (await this.iterator()).forEachAsync(t);
    }
    /**
     * Maps this dataset through a 1-to-1 transform.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3]).map(x => x*x);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param transform A function mapping a dataset element to a transformed
     *   dataset element.
     *
     * @returns A `Dataset` of transformed elements.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    map(t) {
        const e = this;
        return yn(
            async () => (await e.iterator()).map((s) => D(() => t(s))),
            this.size
        );
    }
    /**
     * Maps this dataset through an async 1-to-1 transform.
     *
     * ```js
     * const a =
     *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){
     *    setTimeout(() => {
     *      resolve(x * x);
     *    }, Math.random()*1000 + 500);
     *  }));
     * console.log(await a.toArray());
     * ```
     *
     * @param transform A function mapping a dataset element to a `Promise` for a
     *   transformed dataset element.  This transform is responsible for disposing
     *   any intermediate `Tensor`s, i.e. by wrapping its computation in
     *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous
     *   `map()` case).
     *
     * @returns A `Dataset` of transformed elements.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    mapAsync(t) {
        const e = this;
        return yn(async () => (await e.iterator()).mapAsync(t), this.size);
    }
    /**
     *  Creates a `Dataset` that prefetches elements from this dataset.
     *
     * @param bufferSize: An integer specifying the number of elements to be
     *   prefetched.
     * @returns A `Dataset`.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    prefetch(t) {
        if (t == null)
            throw new RangeError(
                "`Dataset.prefetch()` requires bufferSize to be specified."
            );
        const e = this;
        return yn(async () => (await e.iterator()).prefetch(t), this.size);
    }
    /**
     * Repeats this dataset `count` times.
     *
     * NOTE: If this dataset is a function of global state (e.g. a random number
     * generator), then different repetitions may produce different elements.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3]).repeat(3);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param count: (Optional) An integer, representing the number of times
     *   the dataset should be repeated. The default behavior (if `count` is
     *   `undefined` or negative) is for the dataset be repeated indefinitely.
     * @returns A `Dataset`.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    repeat(t) {
        const e = this;
        let s;
        return (
            this.size != null && t > 0
                ? (s = this.size * t)
                : t === 0
                ? (s = 0)
                : this.size != null && (t === void 0 || t < 0)
                ? (s = 1 / 0)
                : (s = null),
            yn(async () => {
                const o = z3(async () => ({
                    value: await e.iterator(),
                    done: !1,
                }));
                return P3(o.take(t));
            }, s)
        );
    }
    /**
     * Creates a `Dataset` that skips `count` initial elements from this dataset.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param count: The number of elements of this dataset that should be skipped
     *   to form the new dataset.  If `count` is greater than the size of this
     *   dataset, the new dataset will contain no elements.  If `count`
     *   is `undefined` or negative, skips the entire dataset.
     *
     * @returns A `Dataset`.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    skip(t) {
        const e = this;
        let s;
        return (
            this.size != null && t >= 0 && this.size >= t
                ? (s = this.size - t)
                : this.size != null && (this.size < t || t === void 0 || t < 0)
                ? (s = 0)
                : (s = null),
            yn(async () => (await e.iterator()).skip(t), s)
        );
    }
    /**
     * Pseudorandomly shuffles the elements of this dataset. This is done in a
     * streaming manner, by sampling from a given number of prefetched elements.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param bufferSize: An integer specifying the number of elements from this
     *   dataset from which the new dataset will sample.
     * @param seed: (Optional) An integer specifying the random seed that will
     *   be used to create the distribution.
     * @param reshuffleEachIteration: (Optional) A boolean, which if true
     *   indicates that the dataset should be pseudorandomly reshuffled each time
     *   it is iterated over. If false, elements will be returned in the same
     *   shuffled order on each iteration. (Defaults to `true`.)
     * @returns A `Dataset`.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    shuffle(t, e, s = !0) {
        if (t == null || t < 0)
            throw this.size == null
                ? new RangeError(
                      "`Dataset.shuffle()` requires bufferSize to be specified."
                  )
                : new RangeError(
                      `\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`
                  );
        const o = this,
            r = Nr.alea(e || Ie().toString());
        return yn(async () => {
            let i = r.int32();
            return (
                s && (i += r.int32()),
                (await o.iterator()).shuffle(t, i.toString())
            );
        }, this.size);
    }
    /**
     * Creates a `Dataset` with at most `count` initial elements from this
     * dataset.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param count: The number of elements of this dataset that should be taken
     *   to form the new dataset.  If `count` is `undefined` or negative, or if
     *   `count` is greater than the size of this dataset, the new dataset will
     *   contain all elements of this dataset.
     * @returns A `Dataset`.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    take(t) {
        const e = this;
        let s;
        return (
            this.size != null && this.size > t
                ? (s = t)
                : this.size != null && this.size <= t
                ? (s = this.size)
                : (s = null),
            yn(async () => (await e.iterator()).take(t), s)
        );
    }
    /**
     * Collect all elements of this dataset into an array.
     *
     * Obviously this will succeed only for small datasets that fit in memory.
     * Useful for testing and generally should be avoided if possible.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6]);
     * console.log(await a.toArray());
     * ```
     *
     * @returns A Promise for an array of elements, which will resolve
     *   when a new stream has been obtained and fully consumed.
     *
     * @doc {heading: 'Data', subheading: 'Classes'}
     */
    async toArray() {
        if (this.size === 1 / 0)
            throw new Error("Can not convert infinite data stream to array.");
        return (await this.iterator()).toArray();
    }
    /**
     * Collect all elements of this dataset into an array with prefetching 100
     * elements. This is useful for testing, because the prefetch changes the
     * order in which the Promises are resolved along the processing pipeline.
     * This may help expose bugs where results are dependent on the order of
     * Promise resolution rather than on the logical order of the stream (i.e.,
     * due to hidden mutable state).
     *
     * @returns A Promise for an array of elements, which will resolve
     *   when a new stream has been obtained and fully consumed.
     */
    async toArrayForTest() {
        if (this.size === 1 / 0)
            throw new Error("Can not convert infinite data stream to array.");
        return (await this.iterator()).toArrayForTest();
    }
}
zf.MAX_BUFFER_SIZE = 1e4;
function yn(n, t = null) {
    return new (class extends zf {
        constructor() {
            super(...arguments), (this.size = t);
        }
        /*
         * Provide a new stream of elements.  Note this will also start new streams
         * from any underlying `Dataset`s.
         */
        async iterator() {
            return n();
        }
    })();
}
function BQ(n) {
    return yn(async () => V1(n), n.length);
}
function HQ(n) {
    if (!yr(n))
        throw new Error("The argument to zip() must be an object or array.");
    let t;
    if (Array.isArray(n))
        for (let e = 0; e < n.length; e++)
            t = t == null ? n[e].size : Math.min(t, n[e].size);
    else if (n instanceof Object)
        for (const e in n) t = t == null ? n[e].size : Math.min(t, n[e].size);
    return yn(async () => {
        const e = await D1(n, (s) => {
            if (s instanceof zf) return { value: s.iterator(), recurse: !1 };
            if (yr(s)) return { value: null, recurse: !0 };
            throw new Error(
                "Leaves of the structure passed to zip() must be Datasets, not primitives."
            );
        });
        return A3(e, Fs.SHORTEST);
    }, t);
}
function tM(n) {
    if (n === null) return null;
    const t = n[0];
    return W3(t) ? { value: eM(n), recurse: !1 } : { value: null, recurse: !0 };
}
function eM(n) {
    if (n.length === 0) throw new Error("Can't make a batch of zero elements.");
    return n[0] instanceof Mt ? Xn(n) : $e(n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lt(n, t) {
    Array.isArray(n) || (n = [n]),
        n.forEach((e) => {
            e != null &&
                C(
                    e.dtype !== "complex64",
                    () =>
                        `${t} does not support complex64 tensors in the CPU backend.`
                );
        });
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nM = C0;
class yu extends _d {
    nextDataId() {
        return yu.nextDataId++;
    }
    constructor() {
        super(),
            (this.blockSize = 48),
            (this.firstUse = !0),
            (this.data = new qg(this, Ot()));
    }
    write(t, e, s) {
        this.firstUse &&
            ((this.firstUse = !1),
            F().get("IS_NODE") &&
                ln(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
        const o = { id: this.nextDataId() };
        return this.data.set(o, { values: t, dtype: s, refCount: 1 }), o;
    }
    /**
     * Create a data bucket in cpu backend.
     * @param shape Shape of the `TensorInfo`.
     * @param dtype DType of the `TensorInfo`.
     * @param values The value of the `TensorInfo` stored as a flattened array.
     */
    makeTensorInfo(t, e, s) {
        let o;
        if (e === "string" && s != null && s.length > 0 && vr(s[0])) {
            const r = s.map((i) => ms(i));
            o = this.write(r, t, e);
        } else o = this.write(s, t, e);
        return { dataId: o, shape: t, dtype: e };
    }
    /** Return refCount of a `TensorData`. */
    refCount(t) {
        return this.data.has(t) ? this.data.get(t).refCount : 0;
    }
    /** Increase refCount of a `TensorData`. */
    incRef(t) {
        const e = this.data.get(t);
        e.refCount++;
    }
    /** Decrease refCount of a `TensorData`. */
    decRef(t) {
        if (this.data.has(t)) {
            const e = this.data.get(t);
            e.refCount--;
        }
    }
    move(t, e, s, o, r) {
        this.data.set(t, { values: e, dtype: o, refCount: r });
    }
    numDataIds() {
        return this.data.numDataIds();
    }
    async read(t) {
        return this.readSync(t);
    }
    readSync(t) {
        const { dtype: e, complexTensorInfos: s } = this.data.get(t);
        if (e === "complex64") {
            const o = this.readSync(s.real.dataId),
                r = this.readSync(s.imag.dataId);
            return xs(o, r);
        }
        return ib(this.data.get(t).values, e);
    }
    bufferSync(t) {
        const e = this.readSync(t.dataId);
        if (t.dtype === "string")
            try {
                const s = e.map((o) => gs(o));
                return vt(t.shape, t.dtype, s);
            } catch {
                throw new Error(
                    "Failed to decode encoded string bytes into utf-8"
                );
            }
        return vt(t.shape, t.dtype, e);
    }
    makeOutput(t, e, s) {
        return Ot().makeTensorFromTensorInfo(
            this.makeTensorInfo(e, s, t),
            this
        );
    }
    /**
     * Dispose the memory if the dataId has 0 refCount. Return true if the memory
     * is released or memory is not managed in this backend, false if memory is
     * not cleared.
     * @param dataId
     * @oaram force Optional, remove the data regardless of refCount
     */
    disposeData(t, e = !1) {
        if (this.data.has(t)) {
            if (
                (this.data.get(t).refCount--,
                !e && this.data.get(t).refCount > 0)
            )
                return !1;
            const { complexTensorInfos: s } = this.data.get(t);
            s != null &&
                (this.disposeData(s.real.dataId, !0),
                this.disposeData(s.imag.dataId, !0)),
                this.data.delete(t);
        }
        return !0;
    }
    disposeIntermediateTensorInfo(t) {
        this.disposeData(t.dataId);
    }
    async time(t) {
        const e = Ie();
        return t(), { kernelMs: Ie() - e };
    }
    memory() {
        return {
            // Unreliable due to automatic gc. The numbers above are cumulative.
            unreliable: !0,
            reasons: [
                "The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.",
            ],
        };
    }
    where(t) {
        lt([t], "where");
        const e = this.readSync(t.dataId);
        return nM(t.shape, e);
    }
    dispose() {}
    floatPrecision() {
        return 32;
    }
    /** Returns the smallest representable number.  */
    epsilon() {
        return super.epsilon();
    }
}
yu.nextDataId = 0;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A1(n) {
    const t = new Float32Array(n.length);
    for (let e = 0; e < n.length; ++e) t[e] = Math.abs(n[e]);
    return t;
}
const sM = (n) => {
        const { x: t } = n.inputs,
            e = n.backend;
        lt(t, "abs");
        let s = new Float32Array(X(t.shape));
        const o = e.data.get(t.dataId).values;
        return (s = A1(o)), e.makeOutput(s, t.shape, t.dtype);
    },
    oM = {
        kernelName: Ul,
        backendName: "cpu",
        kernelFunc: sM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function le(n) {
    return (t, e, s, o, r) => {
        const i = bt(t, e),
            a = i.length,
            l = dt(i),
            c = X(i),
            u = Se(r, c),
            d = t.length,
            h = e.length,
            p = dt(t),
            f = dt(e),
            m = Go(t, i),
            g = Go(e, i);
        if (m.length + g.length === 0)
            for (let b = 0; b < u.length; ++b)
                u[b] = n(s[b % s.length], o[b % o.length]);
        else
            for (let b = 0; b < u.length; ++b) {
                const x = Xo(b, a, l),
                    w = x.slice(-d);
                m.forEach((k) => (w[k] = 0));
                const y = zn(w, d, p),
                    I = x.slice(-h);
                g.forEach((k) => (I[k] = 0));
                const v = zn(I, h, f);
                u[b] = n(s[y], o[v]);
            }
        return [u, i];
    };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Je(n) {
    const { inputs: t, backend: e } = n,
        { real: s, imag: o } = t,
        r = e.data.get(s.dataId).values,
        i = e.data.get(o.dataId).values,
        a = e.makeTensorInfo(s.shape, "complex64"),
        l = e.data.get(a.dataId);
    return (
        (l.complexTensorInfos = {
            real: e.makeTensorInfo(s.shape, "float32", r),
            imag: e.makeTensorInfo(o.shape, "float32", i),
        }),
        a
    );
}
const rM = {
    kernelName: ih,
    backendName: "cpu",
    kernelFunc: Je,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fl(n, t, e = "float32") {
    if (e === "complex64") {
        const o = Fl(n, t, "float32"),
            r = Fl(n, t, "float32");
        return Je({ inputs: { real: o, imag: r }, backend: n });
    }
    const s = ke(X(t), e);
    return n.makeTensorInfo(t, e, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rs(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    return (
        e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype }
    );
}
const iM = {
    kernelName: Ki,
    backendName: "cpu",
    kernelFunc: rs,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Do(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        o = e.data.get(s.dataId).complexTensorInfos.real,
        r = e.data.get(o.dataId).values;
    return e.makeTensorInfo(o.shape, o.dtype, r);
}
const aM = {
    kernelName: Eh,
    backendName: "cpu",
    kernelFunc: Do,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function O1(n, t, e, s) {
    if (s === "int32") {
        const o = Int32Array.from(n);
        return [t, "int32", o];
    }
    if (s === "bool") {
        const o = Qs([0], e),
            [r, i] = le((a, l) => (a !== l ? 1 : 0))(t, [], n, o, "bool");
        return [i, "bool", r];
    }
    throw new Error(`Error in Cast: failed to cast ${e} to ${s}`);
}
function Ys(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { dtype: r } = s;
    if (r === "complex64") {
        if (o.dtype === "complex64")
            return rs({ inputs: { x: o }, backend: e });
        const u = Fl(e, o.shape, o.dtype),
            d = Ys({
                inputs: { x: o },
                backend: e,
                attrs: { dtype: "float32" },
            }),
            h = Je({ inputs: { real: d, imag: u }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(u),
            e.disposeIntermediateTensorInfo(d),
            h
        );
    }
    if (o.dtype === "complex64") {
        const u = Do({ inputs: { input: o }, backend: e }),
            d = Ys({ inputs: { x: u }, backend: e, attrs: { dtype: r } });
        return e.disposeIntermediateTensorInfo(u), d;
    }
    if (!Qd(o.dtype, r)) {
        const u = rs({ inputs: { x: o }, backend: e });
        return { dataId: u.dataId, shape: u.shape, dtype: r };
    }
    const i = e.data.get(o.dataId).values,
        [a, l, c] = O1(i, o.shape, o.dtype, r);
    return e.makeTensorInfo(a, l, c);
}
const lM = {
    kernelName: Gi,
    backendName: "cpu",
    kernelFunc: Ys,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fe(n, t, e, s) {
    return e == null
        ? ({ inputs: o, backend: r }) => {
              const { a: i, b: a } = o,
                  l = r;
              lt([i, a], n);
              const c = l.data.get(i.dataId).values,
                  u = l.data.get(a.dataId).values,
                  d =
                      i.dtype === "string"
                          ? // tslint:disable-next-line: no-any
                            ys(c)
                          : c,
                  h =
                      i.dtype === "string"
                          ? // tslint:disable-next-line: no-any
                            ys(u)
                          : u,
                  p = s || i.dtype,
                  [f, m] = t(i.shape, a.shape, d, h, p);
              return l.makeTensorInfo(m, p, f);
          }
        : ({ inputs: o, backend: r }) => {
              const { a: i, b: a } = o,
                  l = r;
              if (i.dtype === "complex64" || a.dtype === "complex64") {
                  const c = Ys({
                          inputs: { x: i },
                          backend: l,
                          attrs: { dtype: "complex64" },
                      }),
                      u = l.data.get(c.dataId),
                      d = u.complexTensorInfos.real,
                      h = u.complexTensorInfos.imag,
                      p = l.data.get(d.dataId).values,
                      f = l.data.get(h.dataId).values,
                      m = Ys({
                          inputs: { x: a },
                          backend: l,
                          attrs: { dtype: "complex64" },
                      }),
                      g = l.data.get(m.dataId),
                      b = g.complexTensorInfos.real,
                      x = g.complexTensorInfos.imag,
                      w = l.data.get(b.dataId).values,
                      y = l.data.get(x.dataId).values,
                      [I, v, k] = e(i.shape, a.shape, p, f, w, y),
                      S = l.makeTensorInfo(k, "float32", I),
                      N = l.makeTensorInfo(k, "float32", v),
                      R = Je({ inputs: { real: S, imag: N }, backend: l });
                  return (
                      l.disposeIntermediateTensorInfo(c),
                      l.disposeIntermediateTensorInfo(m),
                      l.disposeIntermediateTensorInfo(S),
                      l.disposeIntermediateTensorInfo(N),
                      R
                  );
              } else {
                  const c = l.data.get(i.dataId).values,
                      u = l.data.get(a.dataId).values,
                      d = s || i.dtype,
                      [h, p] = t(i.shape, a.shape, c, u, d);
                  return l.makeTensorInfo(p, d, h);
              }
          };
}
function Pf(n) {
    return (t, e, s, o, r, i) => {
        const a = bt(t, e),
            l = X(a),
            c = a.length,
            u = dt(a),
            d = Se("float32", l),
            h = Se("float32", l),
            p = Go(t, a),
            f = Go(e, a),
            m = xs(s, o),
            g = xs(r, i),
            b = t.length,
            x = dt(t),
            w = e.length,
            y = dt(e);
        if (p.length + f.length === 0)
            for (let I = 0; I < d.length; I++) {
                const v = I % m.length,
                    k = I % g.length,
                    S = n(m[v * 2], m[v * 2 + 1], g[k * 2], g[k * 2 + 1]);
                (d[I] = S.real), (h[I] = S.imag);
            }
        else
            for (let I = 0; I < d.length; I++) {
                const v = Xo(I, c, u),
                    k = v.slice(-b);
                p.forEach((V) => (k[V] = 0));
                const S = zn(k, b, x),
                    N = v.slice(-w);
                f.forEach((V) => (N[V] = 0));
                const R = zn(N, w, y),
                    M = n(m[S * 2], m[S * 2 + 1], g[R * 2], g[R * 2 + 1]);
                (d[I] = M.real), (h[I] = M.imag);
            }
        return [d, h, a];
    };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const X1 = le((n, t) => n + t),
    cM = Pf((n, t, e, s) => ({ real: n + e, imag: t + s })),
    wr = fe(Sr, X1, cM),
    uM = {
        kernelName: Sr,
        backendName: "cpu",
        kernelFunc: wr,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Af(n, t, e, s, o) {
    const r = X(s),
        i = ke(o, e);
    for (let a = 0; a < n.length; a++) {
        const l = n[a];
        if (l < 0) throw new Error("Input x must be non-negative!");
        l >= o || (r > 0 ? (i[l] += t[a]) : (i[l] += 1));
    }
    return i;
}
function K1(n, t, e, s = !1) {
    const o = n.shape[0],
        r = n.shape[1],
        i = vt([o, e], t.dtype);
    for (let a = 0; a < o; a++)
        for (let l = 0; l < r; l++) {
            const c = n.get(a, l);
            if (c < 0) throw new Error("Input x must be non-negative!");
            c >= e ||
                (s
                    ? i.set(1, a, c)
                    : t.size > 0
                    ? i.set(i.get(a, c) + t.get(a, l), a, c)
                    : i.set(i.get(a, c) + 1, a, c));
        }
    return i;
}
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Z1 = le((n, t) => n & t),
    dM = fe(rh, Z1),
    hM = {
        kernelName: rh,
        backendName: "cpu",
        kernelFunc: dM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function as(n) {
    return (t, e, s) => {
        const o = ne(e, t.length);
        for (let r = 0; r < t.length; ++r) o[r] = n(t[r], s);
        return o;
    };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wt(n, t, e) {
    const s = as(t);
    return so(n, s, e);
}
function so(n, t, e) {
    return ({ inputs: s, attrs: o, backend: r }) => {
        const { x: i } = s;
        lt(i, n);
        const a = r,
            l = a.data.get(i.dataId).values;
        let c;
        if (i.dtype === "string") {
            if (!Array.isArray(l))
                throw new Error(
                    "String tensor's value was not an instance of Array"
                );
            c = ys(l);
        } else c = l;
        const u = e || i.dtype,
            d = t(c, u, o);
        return a.makeTensorInfo(i.shape, u, d);
    };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const B1 = as((n) => Math.ceil(n)),
    pM = so(Ei, B1),
    fM = {
        kernelName: Ei,
        backendName: "cpu",
        kernelFunc: pM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H1(n, t, e, s) {
    const o = ne(e, X(t));
    if (s && e !== "string") {
        let r = 0;
        n.forEach((i) => {
            const a = X(i.shape);
            o.set(i.vals, r), (r += a);
        });
    } else {
        let r = 0;
        n.forEach((i) => {
            const a = e === "string" ? ys(i.vals) : i.vals;
            let l = 0;
            for (let c = 0; c < i.shape[0]; ++c) {
                const u = c * t[1] + r;
                for (let d = 0; d < i.shape[1]; ++d) o[u + d] = a[l++];
            }
            r += i.shape[1];
        });
    }
    return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _1 = le((n, t) => (n === t ? 1 : 0)),
    U1 = fe(cc, _1, null, "bool"),
    mM = {
        kernelName: cc,
        backendName: "cpu",
        kernelFunc: U1,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Y1 = as((n) => Math.exp(n)),
    Q1 = so(zi, Y1, "float32"),
    gM = {
        kernelName: zi,
        backendName: "cpu",
        kernelFunc: Q1,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const J1 = as((n) => Math.expm1(n)),
    bM = so(Pi, J1),
    xM = {
        kernelName: Pi,
        backendName: "cpu",
        kernelFunc: bM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j1 = as((n) => Math.floor(n)),
    yM = so(Ai, j1),
    wM = {
        kernelName: Ai,
        backendName: "cpu",
        kernelFunc: yM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const q1 = le((n, t) => Math.floor(n / t)),
    IM = fe(Oi, q1, null, "int32"),
    CM = {
        kernelName: Oi,
        backendName: "cpu",
        kernelFunc: IM,
    };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tw(n, t, e, s, o, r, i, a, l) {
    const c = vt([s, r], e);
    for (let u = 0; u < s; u++) {
        const d = [];
        let h = 0;
        for (let p = 0; p < o; p++) {
            const f = n[u * o + p];
            (h += f * i[p]), d.push(f);
        }
        if (h < 0 || h >= l / r)
            throw new Error(`Invalid indices: ${d} does not index into ${a}`);
        for (let p = 0; p < r; p++)
            c.values[u * r + p] = t.get(...t.indexToLoc(h * r + p));
    }
    return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ew(n, t, e) {
    const s = vt(e, n.dtype);
    for (let o = 0; o < s.size; ++o) {
        const i = s.indexToLoc(o).slice(),
            a = i[0],
            l = i[2],
            c = t.locToIndex([a, l]);
        i[2] = t.values[c];
        const u = n.locToIndex(i);
        0 <= u && u < n.values.length && (s.values[o] = n.values[u]);
    }
    return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nw = le((n, t) => (n > t ? 1 : 0)),
    vM = fe(pc, nw, null, "bool"),
    SM = {
        kernelName: pc,
        backendName: "cpu",
        kernelFunc: vM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sw = le((n, t) => (n >= t ? 1 : 0)),
    kM = fe(Xi, sw, null, "bool"),
    TM = {
        kernelName: Xi,
        backendName: "cpu",
        kernelFunc: kM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ow = le((n, t) => (n < t ? 1 : 0)),
    NM = fe(mc, ow, null, "bool"),
    RM = {
        kernelName: mc,
        backendName: "cpu",
        kernelFunc: NM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rw = le((n, t) => (n <= t ? 1 : 0)),
    $M = fe(gc, rw, null, "bool"),
    GM = {
        kernelName: gc,
        backendName: "cpu",
        kernelFunc: $M,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iw(n, t, e) {
    const s = (t - n) / (e - 1),
        o = ke(e, "float32");
    o[0] = n;
    for (let r = 1; r < o.length; r++) o[r] = o[r - 1] + s;
    return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aw = as((n) => Math.log(n)),
    EM = so(_i, aw),
    LM = {
        kernelName: _i,
        backendName: "cpu",
        kernelFunc: EM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lw(n, t, e, s) {
    const o = Se(s, X(e));
    for (let r = 0; r < o.length; ++r) {
        const i = r * t;
        let a = n[i];
        for (let l = 0; l < t; ++l) {
            const c = n[i + l];
            (Number.isNaN(c) || c > a) && (a = c);
        }
        o[r] = a;
    }
    return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cw = le((n, t) => Math.max(n, t)),
    MM = fe(Yi, cw),
    WM = {
        kernelName: Yi,
        backendName: "cpu",
        kernelFunc: MM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uw = le((n, t) => Math.min(n, t)),
    DM = fe(Qi, uw),
    FM = {
        kernelName: Qi,
        backendName: "cpu",
        kernelFunc: DM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Of = le((n, t) => n * t),
    VM = Pf((n, t, e, s) => ({
        real: n * e - t * s,
        imag: n * s + t * e,
    })),
    wu = fe(ji, Of, VM),
    zM = {
        kernelName: ji,
        backendName: "cpu",
        kernelFunc: wu,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dw(n, t, e) {
    const s = Is(-1, e);
    return Of([], t, s, n, e);
}
function PM(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    lt(s, "neg");
    const o = e.data.get(s.dataId).values,
        [r, i] = dw(o, s.shape, s.dtype);
    return e.makeTensorInfo(i, s.dtype, r);
}
const AM = {
    kernelName: Nc,
    backendName: "cpu",
    kernelFunc: PM,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hw = le((n, t) => (n !== t ? 1 : 0)),
    OM = fe(Rc, hw, null, "bool"),
    XM = {
        kernelName: Rc,
        backendName: "cpu",
        kernelFunc: OM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xf(n, t, e, s, o) {
    const r = t.length,
        i = X(t),
        a = dt(t),
        l = dt(o),
        c = Se(e, X(o));
    for (let u = 0; u < i; ++u) {
        const d = Xo(u, r, a),
            h = new Array(d.length);
        for (let f = 0; f < h.length; f++) h[f] = d[s[f]];
        const p = zn(h, r, l);
        c[p] = n[u];
    }
    return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _e(n) {
    const { inputs: t, attrs: e, backend: s } = n,
        { x: o } = t,
        { perm: r } = e;
    lt(o, "transpose");
    const i = o.shape.length,
        a = new Array(i);
    for (let d = 0; d < a.length; d++) a[d] = o.shape[r[d]];
    const l = s.data.get(o.dataId).values,
        c = Xf(l, o.shape, o.dtype, r, a);
    return { dataId: s.write(c, a, o.dtype), shape: a, dtype: o.dtype };
}
const KM = {
    kernelName: ar,
    backendName: "cpu",
    kernelFunc: _e,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pw(n, t, e, s) {
    const [o, r] = ye(n, s),
        i = tn(t, "int32"),
        a = ke(X(o), i),
        l = X(r);
    for (let c = 0; c < a.length; ++c) {
        const u = c * l;
        let d = 1;
        for (let h = 0; h < l; ++h) d *= e[u + h];
        a[c] = d;
    }
    return { outVals: a, outShape: o, outDtype: i };
}
function ZM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s;
    lt(o, "prod");
    const a = o.shape.length,
        l = Ct(r, o.shape),
        c = qt(l, a);
    let u = l,
        d = o;
    const h = [];
    c != null &&
        ((d = _e({ inputs: { x: o }, backend: e, attrs: { perm: c } })),
        h.push(d),
        (u = ie(u.length, a)));
    const p = e.data.get(d.dataId).values,
        { outVals: f, outShape: m, outDtype: g } = pw(d.shape, d.dtype, p, u);
    let b = m;
    return (
        i && (b = re(m, l)),
        h.forEach((x) => e.disposeIntermediateTensorInfo(x)),
        e.makeTensorInfo(b, g, f)
    );
}
const BM = {
    kernelName: Wc,
    backendName: "cpu",
    kernelFunc: ZM,
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HM(n, t, e) {
    n.forEach((s, o) => {
        if (s < 0 || s >= e) {
            const r = Xo(o, t.length, dt(t)).join(",");
            throw new Error(`indices[${r}] = ${s} is not in [0, ${e})`);
        }
    });
}
function _M(n, t) {
    for (let e = 0; e < n.length; ++e) {
        const s = n[e],
            o = e === n.length - 1 ? t : n[e + 1].length;
        if (s.length === 0) throw new Error("Ragged splits may not be empty");
        if (s[0] < 0) throw new Error("Ragged splits must be non-negative");
        if (s[s.length - 1] > o)
            throw new Error("Ragged splits must not point past values");
        for (let r = 1; r < s.length; ++r)
            if (s[r - 1] > s[r])
                throw new Error(
                    "Ragged splits must be sorted in ascending order"
                );
    }
}
function UM(n, t, e, s) {
    const o = [];
    let r = 0;
    const i = t.length - 1 + e.length,
        a = new Array(i).fill(null).map(() => [0]);
    _M(e, s);
    let l = 1;
    for (let c = 0; c < t.length - 1; ++c) {
        l *= t[c];
        const u = t[c + 1];
        for (let d = 1; d < l + 1; ++d) a[c].push(d * u);
    }
    for (let c = 0; c < n.length; ++c) {
        let u = n[c],
            d = n[c] + 1;
        for (let h = 0; h < e.length; ++h) {
            const p = e[h],
                f = h + t.length - 1;
            if (f >= 0) {
                const m = a[f],
                    g = m[m.length - 1] - p[u];
                for (let b = u; b < d; ++b) a[f].push(p[b + 1] + g);
            }
            (u = p[u]), (d = p[d]);
        }
        d !== u && (o.push([u, d]), (r += d - u));
    }
    return { outSplits: a, valueSlices: o, numValues: r };
}
function YM(n) {
    const t = [];
    for (let e = 0; e < n.length; ++e) {
        const s = n[e].length,
            o = ne("int32", s);
        t.push(o), n[e].forEach((r, i) => (o[i] = r));
    }
    return t;
}
function pg(n, t) {
    const e = n.slice(0, t);
    for (; e.length < t; ) e.push(1);
    for (let s = t; s < n.length; s++) e[t - 1] *= n[s];
    return e;
}
function QM(n, t, e, s, o, r) {
    const i = pg(t, 2)[1],
        a = pg(r, 2)[1];
    let l = 0;
    for (const c of e)
        for (let u = c[0]; u < c[1]; ++u) {
            for (let d = 0; d < s; ++d) o[l * a + d] = n[u * i + d];
            ++l;
        }
}
function JM(n, t, e, s, o) {
    const r = t.slice();
    r[0] = o;
    const i = ne(e, X(r)),
        a = n.length,
        l = a === 0 ? 0 : a / t[0];
    return QM(n, t, s, l, i, r), [i, r];
}
function fw(n, t, e, s, o, r, i, a) {
    if (n.length === 0) throw new Error("paramsNestedSplits must be non empty");
    if (t[0].length === 0) throw new Error("Split tensors must not be scalars");
    const l = t[0][0] - 1;
    if ((HM(r, i, l), s.length === 0))
        throw new Error("params.rank must be nonzero");
    const c = s[0],
        { outSplits: u, valueSlices: d, numValues: h } = UM(r, i, n, c),
        p = YM(u),
        f = JM(e, s, o, d, h);
    return [p, f[0], f[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fg = 2147483647;
function mw(n, t, e, s, o, r, i) {
    if (t.length > 1) throw new Error("starts must be a scalar or vector");
    if (o.length > 1) throw new Error("limits must be a scalar or vector");
    if (i.length > 1) throw new Error("deltas must be a scalar or vector");
    const a = t.length === 0,
        l = o.length === 0,
        c = i.length === 0,
        u = [];
    a || u.push(t[0]), l || u.push(o[0]), c || u.push(i[0]);
    for (let g = 1; g < u.length; ++g)
        if (u[g] !== u[g - 1])
            throw new Error(
                "starts, limits, and deltas must have the same shape"
            );
    const d = u.length === 0 ? 1 : u[0],
        h = ne("int32", d + 1);
    h[0] = 0;
    for (let g = 0; g < d; ++g) {
        const b = a ? n[0] : n[g],
            x = l ? s[0] : s[g],
            w = c ? r[0] : r[g];
        if (w === 0) throw new Error("Requires delta != 0");
        let y;
        if ((w > 0 && x < b) || (w < 0 && x > b)) y = 0;
        else if (((y = Math.ceil(Math.abs((x - b) / w))), y > fg))
            throw new Error(`Requires ((limit - start) / delta) <= ${fg}`);
        h[g + 1] = h[g] + y;
    }
    const p = h[d],
        f = ne(e, p);
    let m = 0;
    for (let g = 0; g < d; ++g) {
        const b = h[g + 1] - h[g];
        let x = a ? n[0] : n[g];
        const w = c ? r[0] : r[g];
        for (let y = 0; y < b; ++y) (f[m++] = x), (x += w);
    }
    return [h, f];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var xn = Fn;
class Vl {
    constructor(t, e, s, o, r, i, a, l, c, u) {
        (this.shape = t),
            (this.shapeShape = e),
            (this.values = s),
            (this.valuesShape = o),
            (this.valuesDType = r),
            (this.defaultValue = i),
            (this.defaultValueShape = a),
            (this.rowPartitionValues = l),
            (this.rowPartitionValuesShapes = c),
            (this.rowPartitionTypes = Y0(u)),
            (this.raggedRank = Q0(this.rowPartitionTypes));
    }
    getRowPartitionTypeByDimension(t) {
        return this.rowPartitionTypes[0] === xn.FIRST_DIM_SIZE
            ? this.rowPartitionTypes[t + 1]
            : this.rowPartitionTypes[t];
    }
    // Returns the relationship between dimension and dimension + 1.
    getRowPartitionTensor(t) {
        return this.rowPartitionTypes[0] === xn.FIRST_DIM_SIZE
            ? this.rowPartitionValues[t + 1]
            : this.rowPartitionValues[t];
    }
    getMaxWidth(t) {
        const e = this.getRowPartitionTensor(t - 1);
        switch (this.getRowPartitionTypeByDimension(t - 1)) {
            case xn.VALUE_ROWIDS:
                return Vl.getMaxWidthValueRowID(e);
            case xn.ROW_SPLITS:
                return Vl.getMaxWidthRowSplit(e);
            default:
                throw new Error(
                    `Cannot handle partition type ${
                        xn[this.getRowPartitionTypeByDimension(t - 1)]
                    }`
                );
        }
    }
    static getMaxWidthRowSplit(t) {
        const e = t.length;
        if (e === 0 || e === 1) return 0;
        let s = 0;
        for (let o = 0; o < e - 1; ++o) {
            const r = t[o + 1] - t[o];
            r > s && (s = r);
        }
        return s;
    }
    static getMaxWidthValueRowID(t) {
        const e = t.length;
        if (e === 0) return 0;
        let s = 0,
            o = t[0],
            r = 0;
        for (let i = 1; i < e; ++i) {
            const a = t[i];
            a !== o && ((o = a), (r = Math.max(i - s, r)), (s = i));
        }
        return Math.max(e - s, r);
    }
    tensorShapeFromTensor(t, e, s = !0) {
        if (e.length === 0) {
            if (t[0] === -1) return [];
            throw new Error(
                "The only valid scalar shape tensor is the fully unknown shape specified as -1."
            );
        }
        return gg(t, s);
    }
    calculateOutputSize(t) {
        const e = this.valuesShape,
            s = this.defaultValueShape;
        J0(s, e);
        const o = this.tensorShapeFromTensor(this.shape, this.shapeShape),
            i = U0(this.raggedRank, o, e);
        i[0] < 0 && (i[0] = t);
        for (let a = 1; a <= this.raggedRank; ++a)
            i[a] < 0 && (i[a] = this.getMaxWidth(a));
        return i;
    }
    /**
     * The outputIndex represents the index in the output tensor
     * where the first element of a particular dimension would be written.
     * If it is -1, it indicates that the index is out of scope.
     * Example, given firstDimension = 10, firstDimensionOutput = 6,
     * and outputIndexMultiplier = 100:
     * result = [0 100 200 300 400 500 -1 -1 -1 -1]
     * If firstDimensionOutput = 11 instead, then:
     * result = [0 100 200 300 400 500 600 700 800 900]
     */
    calculateFirstParentOutputIndex(t, e, s) {
        const o = Math.min(t, s),
            r = [];
        let i = 0;
        for (let a = 0; a < o; ++a, i += e) r.push(i);
        for (let a = o; a < t; ++a) r.push(-1);
        return (
            C(
                r.length === t,
                () => "Final length of result must be equal to firstDimension."
            ),
            r
        );
    }
    calculateOutputIndexRowSplit(t, e, s, o) {
        const r = t.length,
            i = [];
        for (let a = 0; a < r - 1; ++a) {
            const l = t[a + 1] - t[a];
            let c = Math.min(o, l),
                u = e[a];
            u === -1 && (c = 0);
            for (let d = 0; d < c; ++d) i.push(u), (u += s);
            for (let d = 0; d < l - c; ++d) i.push(-1);
        }
        if (r > 0 && i.length !== t[r - 1])
            throw new Error("Invalid row split size.");
        return i;
    }
    // Calculate the output index of the first element of a list.
    // The parentOutputIndex is the same computation for the previous list.
    // -1 indicates an element or list that is out of range.
    // The outputIndexMultiplier is the number of output indices one moves
    // forward for each column.
    // E.g., given:
    // valueRowIds:[0 1 2 2 2 3 5 5 6]
    // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]
    // outputIndexMultiplier: 10
    // outputSize: 2
    // You get:
    // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]
    // result[0] = parentOutputIndex[valueRowIds[0]]
    // result[1] = parentOutputIndex[valueRowIds[1]]
    // result[2] = parentOutputIndex[valueRowIds[2]]
    // result[3] = parentOutputIndex[valueRowIds[2] + 10]
    // result[4] = -1 because it is the third element the size is 2.
    // result[5] = parentOutputIndex[valueRowIds[3]]
    // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1
    // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1
    // result[8] = parentOutputIndex[valueRowIds[7]]
    calculateOutputIndexValueRowID(t, e, s, o) {
        const r = t.length,
            i = [];
        if (r === 0) return [];
        let a = 0,
            l = t[0];
        if (l >= e.length)
            throw new Error(
                `Got currentValueRowId=${l}, which is not less than ${e.length}`
            );
        let c = e[l];
        i.push(c);
        for (let u = 1; u < r; ++u) {
            const d = t[u];
            if (d === l) c >= 0 && (++a, a < o ? (c += s) : (c = -1));
            else {
                if (((a = 0), (l = d), d >= e.length))
                    throw new Error(
                        `Got nextValueRowId=${d} which is not less than ${e.length}`
                    );
                c = e[d];
            }
            i.push(c);
        }
        if (i.length !== t.length) throw new Error("Invalid row ids.");
        return i;
    }
    calculateOutputIndex(t, e, s, o) {
        const r = this.getRowPartitionTensor(t),
            i = this.getRowPartitionTypeByDimension(t);
        switch (i) {
            case xn.VALUE_ROWIDS:
                return this.calculateOutputIndexValueRowID(r, e, s, o);
            case xn.ROW_SPLITS:
                if (r.length - 1 > e.length)
                    throw new Error(
                        `Row partition size is greater than output size: ${
                            r.length - 1
                        } > ${e.length}`
                    );
                return this.calculateOutputIndexRowSplit(r, e, s, o);
            default:
                throw new Error(`Unsupported partition type: ${xn[i]}`);
        }
    }
    getFirstDimensionSize() {
        const t = this.rowPartitionValues[0];
        if (this.rowPartitionTypes.length === 0)
            throw new Error("No row_partition_types given.");
        const e = this.rowPartitionTypes[0];
        switch (e) {
            case xn.FIRST_DIM_SIZE:
                return t[0];
            case xn.VALUE_ROWIDS:
                throw new Error(
                    "Cannot handle VALUE_ROWIDS in first dimension."
                );
            case xn.ROW_SPLITS:
                return this.rowPartitionValuesShapes[0][0] - 1;
            default:
                throw new Error(`Cannot handle type ${xn[e]}`);
        }
    }
    compute() {
        if (this.rowPartitionValues[0].length <= 0)
            throw new Error(
                "Invalid first partition input. Tensor requires at least one element."
            );
        const e = this.getFirstDimensionSize(),
            s = this.calculateOutputSize(e),
            o = new Array(this.raggedRank + 1);
        o[o.length - 1] = 1;
        for (let l = o.length - 2; l >= 0; --l) o[l] = o[l + 1] * s[l + 1];
        const r = gg(s, !1),
            i = ne(this.valuesDType, X(r));
        if (o[0] * s[0] > 0) {
            let l = this.calculateFirstParentOutputIndex(e, o[0], s[0]);
            for (let c = 1; c <= this.raggedRank; ++c)
                l = this.calculateOutputIndex(c - 1, l, o[c], s[c]);
            this.setOutput(this.raggedRank, l, i, r);
        }
        return [r, i];
    }
    setOutput(t, e, s, o) {
        if (s.length === 0) return;
        const r = this.values,
            i = s;
        let a = o.slice();
        a = a.slice(t + 1);
        const l = X(a),
            c = e.length;
        let u = this.defaultValue;
        if (u.length !== l && u.length !== 1) {
            const f = this.defaultValueShape;
            D(() => {
                const m = W(u, f);
                u = ni(m, a).dataSync();
            });
        }
        let d = 0,
            h = 0,
            p = 0;
        for (let f = 0; f <= c; ++f) {
            let m = f < c ? e[f] : -1;
            if (m === p) {
                ++p;
                continue;
            }
            if (h < p) {
                const g = r.subarray(d * l),
                    b = i.subarray(h * l),
                    x = (p - h) * l;
                mg(b, g, x);
            }
            if (f >= c) {
                const g = s.length;
                m = Math.floor(g / l);
            }
            if (m > p)
                if (this.defaultValue.length === 1)
                    i.subarray(p * l, m * l).fill(this.defaultValue[0]),
                        (p = m);
                else
                    for (; m > p; ) {
                        const g = i.slice(p * l);
                        mg(g, u, l), ++p;
                    }
            m < 0 ? ((d = f + 1), (h = p)) : ((d = f), (h = p), (p = h + 1));
        }
    }
}
function mg(n, t, e) {
    for (let s = 0; s < e; s++) n[s] = t[s];
}
function gg(n, t) {
    const e = [];
    for (let s of n) {
        if (s < 0) {
            if (!t) throw new Error(`Dimension ${s} must be >= 0`);
            if (s < -1) throw new Error(`Dimension ${s} must be >= -1`);
            s = -1;
        }
        e.push(s);
    }
    return e;
}
function gw(n, t, e, s, o, r, i, a, l, c) {
    return new Vl(n, t, e, s, o, r, i, a, l, c).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bw(n, t, e, s) {
    const o = n === t,
        r = n < t && e < 0,
        i = t < n && e > 1;
    if (o || r || i) return ke(0, s);
    const a = Math.abs(Math.ceil((t - n) / e)),
        l = ke(a, s);
    t < n && e === 1 && (e = -1), (l[0] = n);
    for (let c = 1; c < l.length; c++) l[c] = l[c - 1] + e;
    return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xw = as((n) => 1 / Math.sqrt(n)),
    jM = so(oa, xw),
    qM = {
        kernelName: oa,
        backendName: "cpu",
        kernelFunc: jM,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bo(n, t, e, s, o, r, i, a, l, c) {
    const u = [s / o, o],
        d = n.values,
        h = t.values;
    if (s === 0) return vt(e, t.dtype);
    const p = l instanceof ve ? l : vt(u, t.dtype);
    typeof l == "string" || typeof l == "number"
        ? p.values.fill(l)
        : typeof l == "boolean" && p.values.fill(+l);
    for (let f = 0; f < r; f++) {
        const m = [];
        let g = 0;
        for (let b = 0; b < i; b++) {
            const x = d[f * i + b];
            m.push(x), (g += x * a[b]);
        }
        if (g < 0 || g >= s / o)
            throw new Error(`Invalid indices: ${m} does not index into ${e}`);
        for (let b = 0; b < o; b++)
            c
                ? (p.values[g * o + b] += h[f * o + b])
                : (p.values[g * o + b] = t.rank === 0 ? h[0] : h[f * o + b]);
    }
    return p;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tW = as((n) => 1 / (1 + Math.exp(-n))),
    yw = Wt(ca, (n) => 1 / (1 + Math.exp(-n))),
    eW = {
        kernelName: ca,
        backendName: "cpu",
        kernelFunc: yw,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ww(n, t, e, s, o) {
    const r = Hp(s, t, e),
        i = X(e),
        a = dt(s);
    if (r) {
        const d = _p(t, a);
        return o === "string" ? n.slice(d, d + i) : n.subarray(d, d + i);
    }
    const l = o === "string" ? ys(n) : n,
        c = vt(s, o, l),
        u = vt(e, o);
    for (let d = 0; d < u.size; ++d) {
        const h = u.indexToLoc(d),
            p = h.map((f, m) => f + t[m]);
        u.set(c.get(...p), ...h);
    }
    return o === "string" ? bx(u.values) : u.values;
}
function Fo(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { begin: r, size: i } = s;
    lt(o, "slice");
    const [a, l] = nu(o, r, i);
    Zp(o, a, l);
    const c = e.data.get(o.dataId).values,
        u = ww(c, a, l, o.shape, o.dtype);
    return e.makeTensorInfo(l, o.dtype, u);
}
const nW = {
    kernelName: Ac,
    backendName: "cpu",
    kernelFunc: Fo,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Iw(n, t, e, s, o, r, i) {
    const a = t[0],
        l = r[0],
        c = new Array(l),
        u = new Array(a),
        d = t[1];
    if (l === 0) {
        if (a !== 0) throw new Error(ox(a));
        const g = ne(e, 0),
            b = ne(o, 0);
        return [g, [0, d], b, c, u];
    }
    let h = !0,
        p = 0;
    const f = new Array(l).fill(0);
    for (let g = 0; g < a; ++g) {
        const b = n[g * d];
        if (b < 0) throw new Error(rx(g, b));
        if (b >= l) throw new Error(ix(g, b, l));
        ++f[b], (h = h && b >= p), (p = b);
    }
    let m = !0;
    for (let g = 0; g < l; ++g) {
        const b = f[g] === 0;
        (c[g] = b),
            (m = m && !b),
            (f[g] = Math.max(f[g], 1)),
            g > 0 && (f[g] += f[g - 1]);
    }
    if (m && h) {
        const g = n,
            b = s;
        for (let x = 0; x < a; ++x) u[x] = x;
        return [g, [a, d], b, c, u];
    } else {
        const g = f[l - 1],
            b = ne(e, g * d),
            x = ne(o, g),
            w = new Array(l).fill(0);
        for (let y = 0; y < a; ++y) {
            const I = n[y * d],
                v = w[I],
                k = (I === 0 ? 0 : f[I - 1]) + v;
            w[I]++;
            for (let S = 0; S < d; ++S) b[k * d + S] = n[y * d + S];
            (x[k] = s[y]), (u[y] = k);
        }
        for (let y = 0; y < l; ++y)
            if (w[y] === 0) {
                const v = y === 0 ? 0 : f[y - 1];
                b[v * d + 0] = y;
                for (let k = 1; k < d; ++k) b[v * d + k] = 0;
                x[v] = i;
            }
        return [b, [g, d], x, c, u];
    }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Cw(n, t, e, s, o) {
    const r = X(s),
        i = t[0],
        a = o.length,
        l = [];
    let c = 1,
        u = -1;
    for (let g = 0; g < a; ++g) {
        const b = o[g];
        if (b === -1) {
            if (u !== -1) throw new Error(ax(u, g));
            (u = g), l.push(1);
        } else {
            if (b < 0) throw new Error(lx(g, b));
            (c *= b), l.push(b);
        }
    }
    if (u !== -1) {
        if (c <= 0) throw new Error(cx());
        const g = Math.trunc(r / c);
        if (c * g !== r) throw new Error(ux(s, l));
        l[u] = g;
    }
    if (X(l) !== r) throw new Error(dx(s, l));
    const h = s.length,
        p = [];
    if (h > 0) {
        p[h - 1] = 1;
        for (let g = h - 2; g >= 0; --g) p[g] = p[g + 1] * s[g + 1];
    }
    const f = [];
    if (a > 0) {
        f[a - 1] = 1;
        for (let g = a - 2; g >= 0; --g) f[g] = f[g + 1] * l[g + 1];
    }
    const m = ne(e, i * a);
    for (let g = 0; g < i; ++g) {
        let b = 0;
        for (let x = 0; x < h; ++x) b += n[g * h + x] * p[x];
        for (let x = 0; x < a; ++x)
            (m[g * a + x] = Math.trunc(b / f[x])), (b %= f[x]);
    }
    return [m, [i, a], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kf(n, t, e, s, o, r = !1, i = 0) {
    const a = s.length,
        l = [t[0], n.length / t[0]],
        c = l[1],
        d = a > 0 ? o[a - 1] + 1 : 0;
    if (d < 0) throw new Error(Td());
    const h = t.slice();
    h[0] = d;
    const p = h.reduce((w, y) => w * y, 1),
        f = ne(e, p);
    if (a === 0) return d > 0 && f.fill(i), [f, h];
    if (d <= 0) throw new Error(Td());
    let m = 0,
        g = 1,
        b = 0,
        x = o[m];
    for (;;) {
        let w = 0;
        if (g < a) {
            if (((w = o[g]), x === w)) {
                ++g;
                continue;
            }
            if (x >= w) throw new Error(hx());
        }
        if (x < 0 || x >= d) throw new Error(px(x, d));
        x > b && f.fill(i, b * c, x * c);
        for (let y = m; y < g; ++y) {
            const I = s[y];
            if (I < 0 || I >= l[0]) throw new Error(fx(y, s[y], l[0]));
            for (let v = 0; v < c; v++) f[x * c + v] += n[I * c + v];
        }
        if (r) for (let y = 0; y < c; y++) f[x * c + y] /= g - m;
        if (((m = g), ++g, (b = x + 1), (x = w), g > a)) break;
    }
    return b < d && f.fill(i, b * c, d * c), [f, h];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sW = as((n) => Math.sqrt(n)),
    oW = Wt(da, (n) => Math.sqrt(n)),
    rW = {
        kernelName: da,
        backendName: "cpu",
        kernelFunc: oW,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vw = le((n, t) => {
        const e = n - t;
        return e * e;
    }),
    iW = fe(ha, vw),
    aW = {
        kernelName: ha,
        backendName: "cpu",
        kernelFunc: iW,
    };
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Sw = as((n, t) => {
        const { pattern: e, replaceGlobal: s, rewrite: o } = t;
        return n.replace(new RegExp(e, s ? "g" : ""), o);
    }),
    lW = so(Bc, Sw),
    cW = {
        kernelName: Bc,
        backendName: "cpu",
        kernelFunc: lW,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kw(n, t, e, s) {
    const o = vt(n, t.dtype);
    for (let r = 0; r < o.size; r++) {
        const i = o.indexToLoc(r),
            a = new Array(i.length);
        for (let l = 0; l < a.length; l++) a[l] = i[l] * e[l] + s[l];
        o.set(t.get(...a), ...i);
    }
    return o;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class uW {
    constructor(t, e, s, o, r, i) {
        (this.separator = ms(t)),
            (this.nGramWidths = e),
            (this.leftPad = ms(s)),
            (this.rightPad = ms(o)),
            (this.padWidth = r),
            (this.preserveShort = i);
    }
    getPadWidth(t) {
        return Math.min(this.padWidth < 0 ? t - 1 : this.padWidth, t - 1);
    }
    getNumNGrams(t, e) {
        const s = this.getPadWidth(e);
        return Math.max(0, t + 2 * s - e + 1);
    }
    createNGrams(t, e, s, o, r, i) {
        for (let a = 0; a < r; ++a) {
            const l = this.getPadWidth(i),
                c = Math.max(0, l - a),
                u = Math.max(0, l - (r - (a + 1))),
                d = i - (c + u),
                h = e + (c > 0 ? 0 : a - l);
            let p = 0;
            p += c * this.leftPad.length;
            for (let x = 0; x < d; ++x) p += t[h + x].length;
            p += u * this.rightPad.length;
            const f = c + u + d - 1;
            (p += f * this.separator.length), (s[o + a] = new Uint8Array(p));
            const m = s[o + a];
            let g = 0;
            const b = (x) => x.forEach((w) => (m[g++] = w));
            for (let x = 0; x < c; ++x) b(this.leftPad), b(this.separator);
            for (let x = 0; x < d - 1; ++x) b(t[h + x]), b(this.separator);
            if (d > 0) {
                b(t[h + d - 1]);
                for (let x = 0; x < u; ++x) b(this.separator), b(this.rightPad);
            } else {
                for (let x = 0; x < u - 1; ++x)
                    b(this.rightPad), b(this.separator);
                b(this.rightPad);
            }
        }
    }
    // Data and splits together form the definition of the ragged tensor,
    // where data is 1 dimensional and contains the values of the tensor
    // and splits denotes the indices at which each row starts.
    compute(t, e) {
        const s = t.length,
            o = e.length;
        if (o > 0) {
            let l = e[0];
            if (l !== 0)
                throw new Error(`First split value must be 0, got ${l}`);
            for (let c = 1; c < o; ++c) {
                let u = e[c] >= l;
                if (((u = u && e[c] <= s), !u))
                    throw new Error(
                        `Invalid split value ${e[c]}, must be in [${l}, ${s}]`
                    );
                l = e[c];
            }
            if (l !== s)
                throw new Error(
                    `Last split value must be data size. Expected ${s}, got ${l}`
                );
        }
        const r = o - 1,
            i = ne("int32", o);
        if (s === 0 || o === 0) {
            const l = new Array(s);
            for (let c = 0; c <= r; ++c) i[c] = 0;
            return [l, i];
        }
        i[0] = 0;
        for (let l = 1; l <= r; ++l) {
            const c = e[l] - e[l - 1];
            let u = 0;
            this.nGramWidths.forEach((d) => {
                u += this.getNumNGrams(c, d);
            }),
                this.preserveShort && c > 0 && u === 0 && (u = 1),
                (i[l] = i[l - 1] + u);
        }
        const a = new Array(i[r]);
        for (let l = 0; l < r; ++l) {
            const c = e[l];
            let u = i[l];
            if (
                (this.nGramWidths.forEach((d) => {
                    const h = e[l + 1] - e[l],
                        p = this.getNumNGrams(h, d);
                    this.createNGrams(t, c, a, u, p, d), (u += p);
                }),
                this.preserveShort && u === i[l])
            ) {
                const d = e[l + 1] - e[l];
                if (d === 0) continue;
                const h = d + 2 * this.padWidth;
                this.createNGrams(t, c, a, u, 1, h);
            }
        }
        return [a, i];
    }
}
function Tw(n, t, e, s, o, r, i, a) {
    return new uW(e, s, o, r, i, a).compute(n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dW(n, t, e, s) {
    if (!n.length) return;
    if (t.length === 0) {
        for (let r = 0; r < n.length; ++r) s.push(n.subarray(r, r + 1));
        return;
    }
    if (t.length === 1) {
        const r = t[0];
        let i = n.indexOf(r);
        for (; i !== -1; ) {
            const a = n.subarray(0, i);
            (!e || a.length !== 0) && s.push(a),
                (n = n.subarray(i + 1)),
                (i = n.indexOf(r));
        }
        (!e || n.length !== 0) && s.push(n);
        return;
    }
    let o = 0;
    for (let r = 0; r < n.length + 1; r++)
        if (r === n.length || t.indexOf(n[r]) !== -1) {
            const i = n.subarray(o, r);
            (!e || i.length !== 0) && s.push(i), (o = r + 1);
        }
}
function Nw(n, t, e) {
    const s = n.length,
        o = [];
    let r = 0,
        i = 0;
    const a = new Array(s);
    for (let h = 0; h < s; ++h) {
        const p = o.length;
        dW(n[h], t, e, o);
        const f = o.length - p;
        (a[h] = f), (r += f), (i = Math.max(i, f));
    }
    const l = ne("int32", r * 2),
        c = new Array(r),
        u = [s, i];
    let d = 0;
    for (let h = 0; h < s; ++h)
        for (let p = 0; p < a[h]; ++p)
            (l[d * 2] = h), (l[d * 2 + 1] = p), (c[d] = o[d]), ++d;
    return [l, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rw(n, t) {
    const e = ne("int32", n.length);
    for (let s = 0; s < n.length; ++s)
        e[s] = Lb(n[s]).modulo(t).getLowBitsUnsigned();
    return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $w = le((n, t) => n - t),
    hW = Pf((n, t, e, s) => ({ real: n - e, imag: t - s })),
    Zf = fe(pa, $w, hW),
    pW = {
        kernelName: pa,
        backendName: "cpu",
        kernelFunc: Zf,
    };
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Gw(n, t) {
    const e = new Array(n.rank);
    for (let o = 0; o < e.length; o++) e[o] = n.shape[o] * t[o];
    const s = vt(e, n.dtype);
    for (let o = 0; o < s.values.length; ++o) {
        const r = s.indexToLoc(o),
            i = new Array(n.rank);
        for (let l = 0; l < i.length; l++) i[l] = r[l] % n.shape[l];
        const a = n.locToIndex(i);
        s.values[o] = n.values[a];
    }
    return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Qr = (n, t) => {
    const e = t.value - n.value;
    return e === 0 ? n.index - t.index : e;
};
function Ew(n, t, e = 0, s = n.length - 1) {
    for (; s > e; ) {
        if (s - e > 600) {
            const a = s - e + 1,
                l = t - e + 1,
                c = Math.log(a),
                u = 0.5 * Math.exp((2 * c) / 3),
                d =
                    0.5 *
                    Math.sqrt((c * u * (a - u)) / a) *
                    Math.sign(l - a / 2),
                h = Math.max(e, Math.floor(t - (l * u) / a + d)),
                p = Math.min(s, Math.floor(t + ((a - l) * u) / a + d));
            Ew(n, t, h, p);
        }
        const o = n[t];
        let r = e,
            i = s;
        for (ds(n, e, t), Qr(n[s], o) > 0 && ds(n, e, s); r < i; ) {
            for (ds(n, r, i), r++, i--; Qr(n[r], o) < 0; ) r = r + 1;
            for (; Qr(n[i], o) > 0; ) i = i - 1;
        }
        Qr(n[e], o) === 0 ? ds(n, e, i) : ((i = i + 1), ds(n, i, s)),
            i <= t && (e = i + 1),
            t <= i && (s = i - 1);
    }
}
function Lw(n, t, e, s, o) {
    const r = t[t.length - 1],
        [i, a] = [n.length / r, r],
        l = Se(e, i * s),
        c = Se("int32", i * s);
    for (let d = 0; d < i; d++) {
        const h = d * a,
            p = n.subarray(h, h + a);
        let f = new Array(p.length);
        p.forEach((x, w) => (f[w] = { value: x, index: w })),
            s < f.length && (Ew(f, s), (f = f.slice(0, s))),
            o && f.sort(Qr);
        const m = d * s,
            g = l.subarray(m, m + s),
            b = c.subarray(m, m + s);
        for (let x = 0; x < s; x++) (g[x] = f[x].value), (b[x] = f[x].index);
    }
    const u = t.slice();
    return (u[u.length - 1] = s), [vt(u, e, l), vt(u, "int32", c)];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Mw(n, t, e, s) {
    const o = Ct(t, e)[0],
        r = [1, e[0], 1];
    for (let f = 0; f < o; f++) r[0] *= e[f];
    r[1] = e[o];
    for (let f = o + 1; f < e.length; f++) r[2] *= e[f];
    const i = /* @__PURE__ */ new Map(),
        a = new Int32Array(e[o]),
        l = new ve(r, s, n),
        c = [],
        u = r[0] === 1 && r[2] === 1;
    for (let f = 0; f < e[o]; f++) {
        let m;
        if (u) m = n[f].toString();
        else {
            const b = [];
            for (let x = 0; x < r[0]; x++)
                for (let w = 0; w < r[2]; w++) b.push(l.get(x, f, w));
            m = b.join(",");
        }
        const g = i.get(m);
        if (g != null) a[f] = g;
        else {
            const b = i.size;
            i.set(m, b), (a[f] = b), c.push(f);
        }
    }
    const d = r.slice();
    d[1] = i.size;
    const h = new ve(d, s);
    c.forEach((f, m) => {
        for (let g = 0; g < r[0]; g++)
            for (let b = 0; b < r[2]; b++) h.set(l.get(g, f, b), g, m, b);
    });
    const p = e.slice();
    return (
        (p[o] = d[1]),
        {
            outputValues: h.values,
            outputShape: p,
            indices: a,
        }
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fW = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            addImpl: X1,
            bincountImpl: Af,
            bincountReduceImpl: K1,
            bitwiseAndImpl: Z1,
            castImpl: O1,
            ceilImpl: B1,
            concatImpl: H1,
            equalImpl: _1,
            expImpl: Y1,
            expm1Impl: J1,
            floorDivImpl: q1,
            floorImpl: j1,
            gatherNdImpl: tw,
            gatherV2Impl: ew,
            greaterEqualImpl: sw,
            greaterImpl: nw,
            lessEqualImpl: rw,
            lessImpl: ow,
            linSpaceImpl: iw,
            logImpl: aw,
            maxImpl: lw,
            maximumImpl: cw,
            minimumImpl: uw,
            multiplyImpl: Of,
            negImpl: dw,
            notEqualImpl: hw,
            prodImpl: pw,
            raggedGatherImpl: fw,
            raggedRangeImpl: mw,
            raggedTensorToTensorImpl: gw,
            rangeImpl: bw,
            rsqrtImpl: xw,
            scatterImpl: bo,
            sigmoidImpl: tW,
            simpleAbsImpl: A1,
            sliceImpl: ww,
            sparseFillEmptyRowsImpl: Iw,
            sparseReshapeImpl: Cw,
            sparseSegmentReductionImpl: Kf,
            sqrtImpl: sW,
            squaredDifferenceImpl: vw,
            staticRegexReplaceImpl: Sw,
            stridedSliceImpl: kw,
            stringNGramsImpl: Tw,
            stringSplitImpl: Nw,
            stringToHashBucketFastImpl: Rw,
            subImpl: $w,
            tileImpl: Gw,
            topKImpl: Lw,
            transposeImpl: Xf,
            uniqueImpl: Mw,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Pb(
    "cpu",
    () => new yu(),
    1
    /* priority */
);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ww = Wt(Fi, (n) => (n >= 0 ? n : Math.exp(n) - 1)),
    mW = {
        kernelName: Fi,
        backendName: "cpu",
        kernelFunc: Ww,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Dw(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { alpha: r } = s;
    lt([o], "leakyRelu");
    const i = X(o.shape),
        a = e.data.get(o.dataId).values,
        l = Se("float32", i);
    for (let c = 0; c < a.length; c++) l[c] = a[c] < 0 ? r * a[c] : a[c];
    return e.makeTensorInfo(o.shape, "float32", l);
}
const gW = {
    kernelName: fc,
    backendName: "cpu",
    kernelFunc: Dw,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bW = le((n, t) => (n < 0 ? t * n : n));
function Fw(n) {
    const { inputs: t, backend: e } = n,
        { x: s, alpha: o } = t;
    lt([s, o], "prelu");
    const r = e.data.get(s.dataId).values,
        i = e.data.get(o.dataId).values,
        [a, l] = bW(s.shape, o.shape, r, i, "float32");
    return e.makeTensorInfo(l, "float32", a);
}
const xW = {
    kernelName: Mc,
    backendName: "cpu",
    kernelFunc: Fw,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Vw = Wt(ea, (n) => Math.max(0, n)),
    yW = {
        kernelName: ea,
        backendName: "cpu",
        kernelFunc: Vw,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zw = Wt(na, (n) => Math.min(Math.max(0, n), 6)),
    wW = {
        kernelName: na,
        backendName: "cpu",
        kernelFunc: zw,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zl(n, t, e, s, o) {
    if (e === "linear") return rs({ inputs: { x: t }, backend: n });
    if (e === "relu") return Vw({ inputs: { x: t }, backend: n });
    if (e === "elu") return Ww({ inputs: { x: t }, backend: n });
    if (e === "relu6") return zw({ inputs: { x: t }, backend: n });
    if (e === "prelu") return Fw({ inputs: { x: t, alpha: s }, backend: n });
    if (e === "leakyrelu")
        return Dw({ inputs: { x: t }, backend: n, attrs: { alpha: o } });
    if (e === "sigmoid") return yw({ inputs: { x: t }, backend: n });
    throw new Error(
        `Activation ${e} has not been implemented for the CPU backend.`
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zt(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { shape: r } = s,
        i = X(o.shape),
        a = Yd(r, i),
        l = X(a);
    C(
        i === l,
        () =>
            `The new shape (${a}) has ${l} elements and the old shape (${o.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`
    ),
        e.incRef(o.dataId);
    const c = e.data.get(o.dataId);
    if (c.complexTensorInfos != null) {
        const u = c.complexTensorInfos.real,
            d = c.complexTensorInfos.imag;
        (u.shape = a), (d.shape = a);
    }
    return { dataId: o.dataId, shape: a, dtype: o.dtype };
}
const IW = {
    kernelName: Dc,
    backendName: "cpu",
    kernelFunc: Zt,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pw(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { a: o, b: r } = t,
        { transposeA: i, transposeB: a } = s;
    lt([o, r], "matMul");
    const l = o.shape.length,
        c = r.shape.length,
        u = i ? o.shape[l - 2] : o.shape[l - 1],
        d = a ? r.shape[c - 1] : r.shape[c - 2],
        h = i ? o.shape[l - 1] : o.shape[l - 2],
        p = a ? r.shape[c - 2] : r.shape[c - 1],
        f = o.shape.slice(0, -2),
        m = r.shape.slice(0, -2),
        g = X(f),
        b = X(m),
        w = bt(o.shape.slice(0, -2), r.shape.slice(0, -2)).concat([h, p]);
    C(
        u === d,
        () =>
            `Error in matMul: inner shapes (${u}) and (${d}) of Tensors with shapes ${o.shape} and ${r.shape} and transposeA=${i} and transposeB=${a} must match.`
    );
    const y = i ? [g, u, h] : [g, h, u],
        I = a ? [b, p, d] : [b, d, p],
        v = Zt({ inputs: { x: o }, backend: e, attrs: { shape: y } }),
        k = Zt({ inputs: { x: r }, backend: e, attrs: { shape: I } }),
        S = i ? v.shape[1] : v.shape[2],
        N = i ? v.shape[2] : v.shape[1],
        R = a ? k.shape[1] : k.shape[2],
        M = Math.max(g, b),
        V = e.data.get(v.dataId).values,
        z = e.data.get(k.dataId).values,
        P = dt(v.shape),
        A = dt(k.shape),
        [O, B, Z] = i ? [P[0], 1, P[1]] : [P[0], P[1], 1],
        [H, Y, Q] = a ? [1, A[1], A[0]] : [A[1], 1, A[0]],
        j = N * R,
        J = vt([M, N, R], v.dtype),
        ot = J.values,
        q = e.blockSize;
    for (let rt = 0; rt < M; rt++) {
        const ht = rt % g,
            ft = rt % b;
        for (let pt = 0; pt < N; pt += q) {
            const wt = Math.min(pt + q, N);
            for (let It = 0; It < R; It += q) {
                const Et = Math.min(It + q, R);
                for (let Pt = 0; Pt < S; Pt += q) {
                    const te = Math.min(Pt + q, S);
                    for (let At = pt; At < wt; At++)
                        for (let Dt = It; Dt < Et; Dt++) {
                            let Jt = 0;
                            for (let _t = Pt; _t < te; _t++) {
                                const ls =
                                        // tslint:disable-next-line: max-line-length
                                        V[ht * O + At * B + _t * Z],
                                    we =
                                        // tslint:disable-next-line: max-line-length
                                        z[_t * H + Dt * Y + ft * Q];
                                Jt += ls * we;
                            }
                            ot[rt * j + (At * R + Dt)] += Jt;
                        }
                }
            }
        }
    }
    return (
        e.disposeIntermediateTensorInfo(v),
        e.disposeIntermediateTensorInfo(k),
        e.makeTensorInfo(w, J.dtype, J.values)
    );
}
const CW = {
    kernelName: ql,
    backendName: "cpu",
    kernelFunc: Pw,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vW(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { a: o, b: r, bias: i, preluActivationWeights: a } = t,
        { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: d } = s;
    let h, p, f;
    const m = [];
    (h = Pw({
        inputs: { a: o, b: r },
        attrs: { transposeA: l, transposeB: c },
        backend: e,
    })),
        i &&
            ((p = wr({ inputs: { a: h, b: i }, backend: e })),
            m.push(h),
            (h = p)),
        u && ((f = zl(e, h, u, a, d)), m.push(h), (h = f));
    for (const b of m) e.disposeIntermediateTensorInfo(b);
    return h;
}
const SW = {
    kernelName: ml,
    backendName: "cpu",
    kernelFunc: vW,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kW = Wt(vi, (n) => Math.acos(n)),
    TW = {
        kernelName: vi,
        backendName: "cpu",
        kernelFunc: kW,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NW = Wt(Si, (n) => Math.acosh(n)),
    RW = {
        kernelName: Si,
        backendName: "cpu",
        kernelFunc: NW,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $W(n) {
    const { inputs: t, backend: e } = n,
        s = t;
    lt(t, "addN");
    const o = s.map((a) => e.data.get(a.dataId).values),
        r = vt(s[0].shape, s[0].dtype),
        i = r.values;
    for (let a = 0; a < s.length; a++) {
        const l = o[a];
        for (let c = 0; c < i.length; c++) i[c] += l[c];
    }
    return e.makeTensorInfo(r.shape, r.dtype, r.values);
}
const GW = {
    kernelName: qd,
    backendName: "cpu",
    kernelFunc: $W,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EW(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s;
    lt(o, "all");
    const a = Ct(r, o.shape);
    let l = a;
    const c = qt(l, o.shape.length);
    let u = o;
    c != null &&
        ((u = _e({ inputs: { x: o }, backend: e, attrs: { perm: c } })),
        (l = ie(l.length, o.shape.length))),
        Ne("all", l, u.shape.length);
    const [d, h] = ye(u.shape, l),
        p = X(h),
        f = ke(X(d), u.dtype),
        m = e.data.get(u.dataId).values;
    for (let b = 0; b < f.length; ++b) {
        const x = b * p;
        let w = m[x];
        for (let y = 0; y < p; ++y) {
            const I = m[x + y];
            w = w && I;
        }
        f[b] = w;
    }
    c != null && e.disposeIntermediateTensorInfo(u);
    const g = e.makeTensorInfo(d, u.dtype, f);
    if (i) {
        const b = re(d, a),
            x = Zt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
        return e.disposeIntermediateTensorInfo(g), x;
    }
    return g;
}
const LW = {
    kernelName: th,
    backendName: "cpu",
    kernelFunc: EW,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MW(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s;
    lt(o, "any");
    const a = Ct(r, o.shape);
    let l = a;
    const c = qt(l, o.shape.length);
    let u = o;
    c != null &&
        ((u = _e({ inputs: { x: o }, backend: e, attrs: { perm: c } })),
        (l = ie(l.length, o.shape.length))),
        Ne("any", l, u.shape.length);
    const [d, h] = ye(u.shape, l),
        p = X(h),
        f = ke(X(d), u.dtype),
        m = e.data.get(u.dataId).values;
    for (let b = 0; b < f.length; ++b) {
        const x = b * p;
        let w = m[x];
        for (let y = 0; y < p; ++y) {
            const I = m[x + y];
            w = w || I;
        }
        f[b] = w;
    }
    c != null && e.disposeIntermediateTensorInfo(u);
    const g = e.makeTensorInfo(d, u.dtype, f);
    if (i) {
        const b = re(d, a),
            x = Zt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
        return e.disposeIntermediateTensorInfo(g), x;
    }
    return g;
}
const WW = {
    kernelName: eh,
    backendName: "cpu",
    kernelFunc: MW,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DW(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r } = s;
    lt(o, "argMax");
    let i = Ct(r, o.shape);
    const a = qt(i, o.shape.length);
    let l = o;
    const c = [];
    a != null &&
        ((l = _e({ inputs: { x: o }, backend: e, attrs: { perm: a } })),
        c.push(l),
        (i = ie(i.length, l.shape.length))),
        (i = [i[0]]),
        Ne("argMax", i, l.shape.length);
    const [u, d] = ye(l.shape, i),
        h = X(u),
        p = ke(h, "int32"),
        f = X(d),
        m = e.data.get(l.dataId).values;
    for (let g = 0; g < p.length; ++g) {
        const b = g * f;
        let x = m[b],
            w = 0;
        for (let y = 0; y < f; ++y) {
            const I = m[b + y];
            I > x && ((x = I), (w = y));
        }
        p[g] = w;
    }
    return (
        c.forEach((g) => e.disposeIntermediateTensorInfo(g)),
        e.makeTensorInfo(u, "int32", p)
    );
}
const FW = {
    kernelName: Yl,
    backendName: "cpu",
    kernelFunc: DW,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VW(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r } = s;
    lt(o, "argMin");
    let i = Ct(r, o.shape);
    const a = qt(i, o.shape.length);
    let l = o;
    const c = [];
    a != null &&
        ((l = _e({ inputs: { x: o }, backend: e, attrs: { perm: a } })),
        c.push(l),
        (i = ie(i.length, l.shape.length))),
        (i = [i[0]]),
        Ne("argMin", i, l.shape.length);
    const [u, d] = ye(l.shape, i),
        h = X(u),
        p = ke(h, "int32"),
        f = X(d),
        m = e.data.get(l.dataId).values;
    for (let g = 0; g < p.length; ++g) {
        const b = g * f;
        let x = m[b],
            w = 0;
        for (let y = 0; y < f; ++y) {
            const I = m[b + y];
            I < x && ((x = I), (w = y));
        }
        p[g] = w;
    }
    return (
        c.forEach((g) => e.disposeIntermediateTensorInfo(g)),
        e.makeTensorInfo(u, "int32", p)
    );
}
const zW = {
    kernelName: Ql,
    backendName: "cpu",
    kernelFunc: VW,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PW = Wt(ki, (n) => Math.asin(n)),
    AW = {
        kernelName: ki,
        backendName: "cpu",
        kernelFunc: PW,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OW = Wt(Ti, (n) => Math.asinh(n)),
    XW = {
        kernelName: Ti,
        backendName: "cpu",
        kernelFunc: OW,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KW = Wt(Ni, (n) => Math.atan(n)),
    ZW = {
        kernelName: Ni,
        backendName: "cpu",
        kernelFunc: KW,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BW = le((n, t) => Math.atan2(n, t)),
    HW = fe($i, BW),
    _W = {
        kernelName: $i,
        backendName: "cpu",
        kernelFunc: HW,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UW = Wt(Ri, (n) => Math.atanh(n)),
    YW = {
        kernelName: Ri,
        backendName: "cpu",
        kernelFunc: UW,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bf(n, t, e, s, o, r) {
    const i = o.strideHeight,
        a = o.strideWidth,
        l = o.dilationHeight,
        c = o.dilationWidth,
        u = o.effectiveFilterHeight,
        d = o.effectiveFilterWidth,
        h = o.padInfo.top,
        p = o.padInfo.left,
        f = r === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
        m = vt(o.outShape, e),
        g = m.values,
        b = o.outShape[1] * o.outShape[2] * o.outShape[3],
        x = o.outShape[2] * o.outShape[3],
        w = o.outShape[3];
    for (let y = 0; y < o.batchSize; ++y) {
        const I = y * b,
            v = y * s[0];
        for (let k = 0; k < o.inChannels; ++k)
            for (let S = 0; S < o.outHeight; ++S) {
                const N = S * i - h,
                    R = Math.max(0, N),
                    M = Math.min(o.inHeight, u + N),
                    V = I + S * x;
                for (let z = 0; z < o.outWidth; ++z) {
                    const P = z * a - p,
                        A = Math.max(0, P),
                        O = Math.min(o.inWidth, d + P);
                    let B = f,
                        Z = 0,
                        H = 0;
                    for (let Q = R; Q < M; Q += l) {
                        const j = v + Q * s[1];
                        for (let J = A; J < O; J += c) {
                            const ot = j + J * s[2],
                                q = n[ot + k];
                            r === "max" && q > B
                                ? (B = q)
                                : r === "avg" && ((Z += q), H++);
                        }
                        if (isNaN(B)) break;
                    }
                    const Y = V + z * w + k;
                    g[Y] = r === "avg" ? Z / H : B;
                }
            }
    }
    return m;
}
function Aw(n, t, e, s, o = !1, r = !1) {
    const i = vt(s.outShape, "int32"),
        a = s.strideHeight,
        l = s.strideWidth,
        c = s.dilationHeight,
        u = s.dilationWidth,
        d = s.effectiveFilterHeight,
        h = s.effectiveFilterWidth,
        p = s.padInfo.top,
        f = s.padInfo.left,
        m = vt(t, e, n);
    for (let g = 0; g < s.batchSize; ++g)
        for (let b = 0; b < s.inChannels; ++b)
            for (let x = 0; x < s.outHeight; ++x) {
                const w = x * a - p;
                let y = w;
                for (; y < 0; ) y += c;
                const I = Math.min(s.inHeight, d + w);
                for (let v = 0; v < s.outWidth; ++v) {
                    const k = v * l - f;
                    let S = k;
                    for (; S < 0; ) S += u;
                    const N = Math.min(s.inWidth, h + k);
                    let R = Number.NEGATIVE_INFINITY,
                        M = -1;
                    for (let V = y; V < I; V += c) {
                        const z = V - w;
                        for (let P = S; P < N; P += u) {
                            const A = P - k,
                                O = m.get(g, V, P, b);
                            O > R &&
                                ((R = O),
                                o
                                    ? (M = r
                                          ? ((g * s.inHeight + V) * s.inWidth +
                                                P) *
                                                s.inChannels +
                                            b
                                          : (V * s.inWidth + P) * s.inChannels +
                                            b)
                                    : (M = z * h + A));
                        }
                    }
                    i.set(M, g, x, v, b);
                }
            }
    return i;
}
function Ow(n, t, e, s, o, r) {
    const i = o.strideDepth,
        a = o.strideHeight,
        l = o.strideWidth,
        c = o.dilationDepth,
        u = o.dilationHeight,
        d = o.dilationWidth,
        h = o.effectiveFilterDepth,
        p = o.effectiveFilterHeight,
        f = o.effectiveFilterWidth,
        m = o.padInfo.front,
        g = o.padInfo.top,
        b = o.padInfo.left,
        x = r === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
        w = vt(o.outShape, e),
        y = w.values,
        I = o.outShape[1] * o.outShape[2] * o.outShape[3] * o.outShape[4],
        v = o.outShape[2] * o.outShape[3] * o.outShape[4],
        k = o.outShape[3] * o.outShape[4],
        S = o.outShape[4];
    for (let N = 0; N < o.batchSize; ++N) {
        const R = N * I,
            M = N * s[0];
        for (let V = 0; V < o.inChannels; ++V)
            for (let z = 0; z < o.outDepth; ++z) {
                const P = z * i - m;
                let A = P;
                for (; A < 0; ) A += c;
                const O = Math.min(o.inDepth, h + P),
                    B = R + z * v;
                for (let Z = 0; Z < o.outHeight; ++Z) {
                    const H = Z * a - g;
                    let Y = H;
                    for (; Y < 0; ) Y += u;
                    const Q = Math.min(o.inHeight, p + H),
                        j = B + Z * k;
                    for (let J = 0; J < o.outWidth; ++J) {
                        const ot = J * l - b;
                        let q = ot;
                        for (; q < 0; ) q += d;
                        const rt = Math.min(o.inWidth, f + ot),
                            ht = j + J * S;
                        let ft = x,
                            pt = 0,
                            wt = 0;
                        for (let Et = A; Et < O; Et += c) {
                            const Pt = M + Et * s[1];
                            for (let te = Y; te < Q; te += u) {
                                const At = Pt + te * s[2];
                                for (let Dt = q; Dt < rt; Dt += d) {
                                    const Jt = At + Dt * s[3],
                                        _t = n[Jt + V];
                                    if (
                                        (r === "max" && _t > ft
                                            ? (ft = _t)
                                            : r === "avg" && ((pt += _t), wt++),
                                        isNaN(ft))
                                    )
                                        break;
                                }
                                if (isNaN(ft)) break;
                            }
                            if (isNaN(ft)) break;
                        }
                        const It = ht + V;
                        y[It] = r === "avg" ? pt / Math.max(wt, 1) : ft;
                    }
                }
            }
    }
    return w;
}
function QW(n, t) {
    const e = vt(t.outShape, "int32"),
        s = t.strideDepth,
        o = t.strideHeight,
        r = t.strideWidth,
        i = t.dilationDepth,
        a = t.dilationHeight,
        l = t.dilationWidth,
        c = t.effectiveFilterDepth,
        u = t.effectiveFilterHeight,
        d = t.effectiveFilterWidth,
        h = t.padInfo.front,
        p = t.padInfo.top,
        f = t.padInfo.left;
    for (let m = 0; m < t.batchSize; ++m)
        for (let g = 0; g < t.inChannels; ++g)
            for (let b = 0; b < t.outDepth; ++b) {
                const x = b * s - h;
                let w = x;
                for (; w < 0; ) w += i;
                const y = Math.min(t.inDepth, c + x);
                for (let I = 0; I < t.outHeight; ++I) {
                    const v = I * o - p;
                    let k = v;
                    for (; k < 0; ) k += a;
                    const S = Math.min(t.inHeight, u + v);
                    for (let N = 0; N < t.outWidth; ++N) {
                        const R = N * r - f;
                        let M = R;
                        for (; M < 0; ) M += l;
                        const V = Math.min(t.inWidth, d + R);
                        let z = Number.NEGATIVE_INFINITY,
                            P = -1;
                        for (let A = w; A < y; A += i) {
                            const O = A - x;
                            for (let B = k; B < S; B += a) {
                                const Z = B - v;
                                for (let H = M; H < V; H += l) {
                                    const Y = H - R,
                                        Q = n.get(m, A, B, H, g);
                                    Q >= z &&
                                        ((z = Q), (P = O * u * d + Z * u + Y));
                                }
                            }
                        }
                        e.set(P, m, b, I, N, g);
                    }
                }
            }
    return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JW(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t;
    lt(o, "avgPool");
    const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s,
        c = 1;
    C(
        Le(i, c),
        () =>
            `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`
    );
    const u = $n(o.shape, r, i, c, a, l);
    let d;
    if (
        u.filterWidth === 1 &&
        u.filterHeight === 1 &&
        $t(u.inShape, u.outShape)
    )
        d = rs({ inputs: { x: o }, backend: e });
    else {
        const h = e.data.get(o.dataId).values,
            p = dt(o.shape),
            f = Bf(h, o.shape, o.dtype, p, u, "avg");
        d = e.makeTensorInfo(u.outShape, o.dtype, f.values);
    }
    return d;
}
const jW = {
    kernelName: Jl,
    backendName: "cpu",
    kernelFunc: JW,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qW(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        {
            filterSize: r,
            strides: i,
            pad: a,
            dimRoundingMode: l,
            dataFormat: c,
        } = s;
    lt(o, "avgPool3d");
    const u = vs(o.shape, r, i, 1, a, l, c),
        d = e.data.get(o.dataId).values,
        h = Ow(d, o.shape, o.dtype, dt(o.shape), u, "avg");
    return e.makeTensorInfo(h.shape, "float32", h.values);
}
const tD = {
    kernelName: jl,
    backendName: "cpu",
    kernelFunc: qW,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, input: r } = t,
        { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
    lt([o, r], "avgPool3DGrad");
    const u = vs(r.shape, i, a, 1, l, c),
        d = u.strideDepth,
        h = u.strideHeight,
        p = u.strideWidth,
        f = u.filterDepth,
        m = u.filterHeight,
        g = u.filterWidth,
        b = u.dilationDepth,
        x = u.dilationHeight,
        w = u.dilationWidth,
        y = u.effectiveFilterDepth,
        I = u.effectiveFilterHeight,
        v = u.effectiveFilterWidth,
        k = y - 1 - u.padInfo.front,
        S = v - 1 - u.padInfo.left,
        N = I - 1 - u.padInfo.top,
        R = vt(r.shape, "float32"),
        M = 1 / (f * m * g),
        V = e.bufferSync(o);
    for (let z = 0; z < u.batchSize; ++z)
        for (let P = 0; P < u.inChannels; ++P)
            for (let A = 0; A < u.inDepth; ++A)
                for (let O = 0; O < u.inHeight; ++O)
                    for (let B = 0; B < u.inWidth; ++B) {
                        const Z = A - k,
                            H = O - N,
                            Y = B - S;
                        let Q = 0;
                        for (let j = 0; j < y; j += b) {
                            const J = (Z + j) / d;
                            if (
                                !(
                                    J < 0 ||
                                    J >= u.outDepth ||
                                    Math.floor(J) !== J
                                )
                            )
                                for (let ot = 0; ot < I; ot += x) {
                                    const q = (H + ot) / h;
                                    if (
                                        !(
                                            q < 0 ||
                                            q >= u.outHeight ||
                                            Math.floor(q) !== q
                                        )
                                    )
                                        for (let rt = 0; rt < v; rt += w) {
                                            const ht = (Y + rt) / p;
                                            if (
                                                ht < 0 ||
                                                ht >= u.outWidth ||
                                                Math.floor(ht) !== ht
                                            )
                                                continue;
                                            const ft = V.get(z, J, q, ht, P);
                                            Q += ft;
                                        }
                                }
                        }
                        R.set(Q * M, z, A, O, B, P);
                    }
    return e.makeTensorInfo(R.shape, R.dtype, R.values);
}
const nD = {
    kernelName: sh,
    backendName: "cpu",
    kernelFunc: eD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, input: r } = t,
        i = r;
    lt([o, r], "avgPoolGrad");
    const { filterSize: a, strides: l, pad: c } = s,
        u = $n(i.shape, a, l, 1, c),
        d = u.strideHeight,
        h = u.strideWidth,
        p = u.filterHeight,
        f = u.filterWidth,
        m = u.dilationHeight,
        g = u.dilationWidth,
        b = u.effectiveFilterHeight,
        x = u.effectiveFilterWidth,
        w = x - 1 - u.padInfo.left,
        y = b - 1 - u.padInfo.top,
        I = vt(i.shape, "float32"),
        v = 1 / (p * f),
        k = e.data.get(o.dataId).values,
        S = vt(o.shape, "float32", k);
    for (let N = 0; N < u.batchSize; ++N)
        for (let R = 0; R < u.inChannels; ++R)
            for (let M = 0; M < u.inHeight; ++M)
                for (let V = 0; V < u.inWidth; ++V) {
                    const z = M - y,
                        P = V - w;
                    let A = 0;
                    for (let O = 0; O < b; O += m) {
                        const B = (z + O) / d;
                        if (!(B < 0 || B >= u.outHeight || Math.floor(B) !== B))
                            for (let Z = 0; Z < x; Z += g) {
                                const H = (P + Z) / h;
                                if (
                                    H < 0 ||
                                    H >= u.outWidth ||
                                    Math.floor(H) !== H
                                )
                                    continue;
                                const Y = S.get(N, B, H, R);
                                A += Y;
                            }
                    }
                    I.set(A * v, N, M, V, R);
                }
    return e.makeTensorInfo(I.shape, I.dtype, I.values);
}
const oD = {
    kernelName: nh,
    backendName: "cpu",
    kernelFunc: sD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, scale: r, offset: i, mean: a, variance: l } = t;
    C(
        a.shape.length === l.shape.length,
        () =>
            "Batch normalization gradient requires mean and variance to have equal ranks."
    ),
        C(
            i == null || a.shape.length === i.shape.length,
            () =>
                "Batch normalization gradient requires mean and offset to have equal ranks."
        ),
        C(
            r == null || a.shape.length === r.shape.length,
            () =>
                "Batch normalization gradient requires mean and scale to have equal ranks."
        ),
        lt([o, a, l, r, i], "batchNorm");
    let { varianceEpsilon: c } = s;
    c == null && (c = 1e-3);
    const u = e.data.get(o.dataId).values,
        d = e.data.get(a.dataId).values,
        h = e.data.get(l.dataId).values,
        p = r ? e.data.get(r.dataId).values : new Float32Array([1]),
        f = i ? e.data.get(i.dataId).values : new Float32Array([0]),
        m = new Float32Array(u.length),
        g = f.length,
        b = p.length,
        x = h.length,
        w = d.length;
    let y = 0,
        I = 0,
        v = 0,
        k = 0;
    for (let S = 0; S < u.length; ++S)
        (m[S] = f[y++] + ((u[S] - d[I++]) * p[v++]) / Math.sqrt(h[k++] + c)),
            y >= g && (y = 0),
            I >= w && (I = 0),
            v >= b && (v = 0),
            k >= x && (k = 0);
    return e.makeTensorInfo(o.shape, o.dtype, m);
}
const iD = {
    kernelName: dc,
    backendName: "cpu",
    kernelFunc: rD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { blockShape: r, crops: i } = s;
    lt([o], "batchToSpaceND");
    const a = r.reduce((b, x) => b * x),
        l = Na(o.shape, r, a),
        c = Ra(l.length, r.length),
        u = $a(o.shape, r, a),
        d = jp(i, r.length),
        h = qp(u, i, r.length),
        p = Zt({ inputs: { x: o }, backend: e, attrs: { shape: l } }),
        f = _e({ inputs: { x: p }, backend: e, attrs: { perm: c } }),
        m = Zt({ inputs: { x: f }, backend: e, attrs: { shape: u } }),
        g = Fo({
            inputs: { x: m },
            backend: e,
            attrs: { begin: d, size: h },
        });
    return (
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(f),
        e.disposeIntermediateTensorInfo(m),
        g
    );
}
const lD = {
    kernelName: tc,
    backendName: "cpu",
    kernelFunc: aD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, weights: r } = t,
        { size: i } = s,
        a = e.data.get(o.dataId).values,
        l = e.data.get(r.dataId).values,
        c = Af(a, l, r.dtype, r.shape, i);
    return e.makeTensorInfo([i], r.dtype, c);
}
const uD = {
    kernelName: oh,
    backendName: "cpu",
    kernelFunc: cD,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dD(n) {
    const { inputs: t, backend: e } = n,
        { s0: s, s1: o } = t,
        r = e.data.get(s.dataId).values,
        i = e.data.get(o.dataId).values,
        a = bt(Array.from(r), Array.from(i));
    return e.makeTensorInfo([a.length], "int32", Int32Array.from(a));
}
const hD = {
    kernelName: cb,
    backendName: "cpu",
    kernelFunc: dD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pD = Wt(Li, (n, t) => {
        const e = t;
        return n > e.clipValueMax
            ? e.clipValueMax
            : n < e.clipValueMin
            ? e.clipValueMin
            : n;
    }),
    fD = {
        kernelName: Li,
        backendName: "cpu",
        kernelFunc: pD,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mD = (n) => {
        const { x: t } = n.inputs,
            e = n.backend,
            s = new Float32Array(X(t.shape)),
            o = e.data.get(t.dataId),
            r = o.complexTensorInfos.real,
            i = o.complexTensorInfos.imag,
            a = e.data.get(r.dataId).values,
            l = e.data.get(i.dataId).values;
        for (let c = 0; c < a.length; c++) {
            const u = a[c],
                d = l[c];
            s[c] = Math.hypot(u, d);
        }
        return e.makeOutput(s, t.shape, "float32");
    },
    gD = {
        kernelName: ec,
        backendName: "cpu",
        kernelFunc: mD,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ir(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        o = e.data.get(s.dataId).complexTensorInfos.imag,
        r = e.data.get(o.dataId).values;
    return e.makeTensorInfo(o.shape, o.dtype, r);
}
const bD = {
    kernelName: vh,
    backendName: "cpu",
    kernelFunc: Ir,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Cr(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { axis: o } = s,
        r = Ct(o, t[0].shape)[0],
        i = t.map((m) => m.shape);
    Yp(i, r);
    let a = ts(
        t.map((m) => m.shape),
        r
    );
    if (X(a) === 0) return e.makeTensorInfo(a, t[0].dtype, []);
    const l = t.filter((m) => X(m.shape) > 0);
    if (l.length === 1) return rs({ inputs: { x: l[0] }, backend: e });
    if (l[0].dtype === "complex64") {
        const m = l.map((y) => Do({ inputs: { input: y }, backend: e })),
            g = l.map((y) => Ir({ inputs: { input: y }, backend: e })),
            b = Cr({ inputs: m, backend: e, attrs: { axis: r } }),
            x = Cr({ inputs: g, backend: e, attrs: { axis: r } }),
            w = Je({ inputs: { real: b, imag: x }, backend: e });
        return (
            m.forEach((y) => e.disposeIntermediateTensorInfo(y)),
            g.forEach((y) => e.disposeIntermediateTensorInfo(y)),
            e.disposeIntermediateTensorInfo(b),
            e.disposeIntermediateTensorInfo(x),
            w
        );
    }
    const c = l.map((m) => {
            const b = [-1, X(m.shape.slice(r))];
            return Zt({ inputs: { x: m }, backend: e, attrs: { shape: b } });
        }),
        u = c.map((m) => ({
            vals: e.data.get(m.dataId).values,
            shape: m.shape,
        }));
    a = ts(
        c.map((m) => m.shape),
        1
        /* axis */
    );
    const d = c[0].shape[0] === 1,
        h = H1(u, a, t[0].dtype, d),
        p = ts(
            l.map((m) => m.shape),
            r
        ),
        f = e.makeTensorInfo(p, t[0].dtype, h);
    return c.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
}
const xD = {
    kernelName: nc,
    backendName: "cpu",
    kernelFunc: Cr,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xw(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r } = t,
        {
            strides: i,
            pad: a,
            dataFormat: l,
            dilations: c,
            dimRoundingMode: u,
        } = s;
    lt([o, r], "conv2d");
    const d = Ss(l),
        h = Te(o.shape, r.shape, i, c, a, u, !1, d),
        p = h.filterHeight,
        f = h.filterWidth,
        m = h.dilationHeight,
        g = h.dilationWidth,
        b = h.padInfo.left,
        x = h.padInfo.top,
        w = h.dataFormat === "channelsLast",
        y = new ve(h.outShape, o.dtype),
        I = dt(o.shape),
        v = dt(r.shape),
        k = I[0],
        S = w ? I[1] : I[2],
        N = w ? I[2] : 1,
        R = w ? 1 : I[1],
        M = y.strides[0],
        V = w ? y.strides[1] : y.strides[2],
        z = w ? y.strides[2] : 1,
        P = w ? 1 : y.strides[1],
        A = e.data.get(o.dataId).values,
        O = e.data.get(r.dataId).values,
        B = y.values;
    for (let Z = 0; Z < h.batchSize; ++Z) {
        const H = Z * k,
            Y = Z * M;
        for (let Q = 0; Q < h.outHeight; ++Q) {
            const j = Y + Q * V,
                J = Q * h.strideHeight - x;
            for (let ot = 0; ot < p; ++ot) {
                const q = J + ot * m;
                if (q < 0 || q >= h.inHeight) continue;
                const rt = ot * v[0],
                    ht = H + q * S;
                for (let ft = 0; ft < h.outWidth; ++ft) {
                    const pt = j + ft * z,
                        wt = ft * h.strideWidth - b;
                    for (let It = 0; It < f; ++It) {
                        const Et = wt + It * g;
                        if (Et < 0 || Et >= h.inWidth) continue;
                        const Pt = rt + It * v[1],
                            te = ht + Et * N;
                        let At = Pt;
                        for (let Dt = 0; Dt < h.inChannels; ++Dt) {
                            const Jt = A[te + Dt * R];
                            for (let _t = 0; _t < h.outChannels; ++_t)
                                B[pt + _t * P] += Jt * O[At + _t];
                            At += h.outChannels;
                        }
                    }
                }
            }
        }
    }
    return e.makeTensorInfo(y.shape, y.dtype, B);
}
const yD = {
    kernelName: sc,
    backendName: "cpu",
    kernelFunc: Xw,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, dy: r } = t,
        {
            strides: i,
            pad: a,
            dataFormat: l,
            dimRoundingMode: c,
            filterShape: u,
        } = s;
    lt([o, r], "conv2dBackpropFilter");
    const d = Ss(l),
        h = Te(o.shape, u, i, 1, a, c, !1, d),
        {
            strideHeight: p,
            strideWidth: f,
            filterHeight: m,
            filterWidth: g,
        } = h,
        b = h.dataFormat === "channelsLast",
        x = new ve(h.filterShape, "float32"),
        w = h.padInfo.left,
        y = h.padInfo.top,
        I = e.data.get(o.dataId).values,
        v = e.data.get(r.dataId).values,
        k = new ve(o.shape, o.dtype, I),
        S = new ve(r.shape, r.dtype, v);
    for (let N = 0; N < m; ++N) {
        const R = Math.max(0, Math.ceil((y - N) / p)),
            M = Math.min(h.outHeight, (h.inHeight + y - N) / p);
        for (let V = 0; V < g; ++V) {
            const z = Math.max(0, Math.ceil((w - V) / f)),
                P = Math.min(h.outWidth, (h.inWidth + w - V) / f);
            for (let A = 0; A < h.inChannels; ++A)
                for (let O = 0; O < h.outChannels; ++O) {
                    let B = 0;
                    for (let Z = 0; Z < h.batchSize; ++Z)
                        for (let H = R; H < M; ++H) {
                            const Y = N + H * p - y;
                            for (let Q = z; Q < P; ++Q) {
                                const j = V + Q * f - w;
                                b
                                    ? (B +=
                                          k.get(Z, Y, j, A) * S.get(Z, H, Q, O))
                                    : (B +=
                                          k.get(Z, A, Y, j) *
                                          S.get(Z, O, H, Q));
                            }
                        }
                    x.set(B, N, V, A, O);
                }
        }
    }
    return e.makeTensorInfo(x.shape, x.dtype, x.values);
}
const ID = {
    kernelName: ah,
    backendName: "cpu",
    kernelFunc: wD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, filter: r } = t,
        {
            inputShape: i,
            strides: a,
            pad: l,
            dataFormat: c,
            dimRoundingMode: u,
        } = s;
    lt([o, r], "conv2dBackpropInput");
    const d = dt(r.shape),
        h = dt(o.shape);
    let p = Ss(c);
    const f = Te(i, r.shape, a, 1, l, u, !1, p),
        m = new ve(f.inShape, "float32"),
        g = m.values,
        b = e.data.get(o.dataId).values,
        x = e.data.get(r.dataId).values,
        [w, y, I] = d,
        {
            batchSize: v,
            filterHeight: k,
            filterWidth: S,
            inChannels: N,
            inHeight: R,
            inWidth: M,
            outChannels: V,
            outHeight: z,
            outWidth: P,
            strideHeight: A,
            strideWidth: O,
        } = f;
    p = f.dataFormat;
    const B = k - 1 - f.padInfo.top,
        Z = S - 1 - f.padInfo.left,
        H = p === "channelsLast",
        Y = m.strides[0],
        Q = H ? m.strides[1] : m.strides[2],
        j = H ? m.strides[2] : 1,
        J = H ? 1 : m.strides[1],
        ot = h[0],
        q = H ? h[1] : h[2],
        rt = H ? h[2] : 1,
        ht = H ? 1 : h[1];
    for (let ft = 0; ft < v; ++ft)
        for (let pt = 0; pt < N; ++pt)
            for (let wt = 0; wt < R; ++wt) {
                const It = wt - B,
                    Et = Math.max(0, Math.ceil(It / A)),
                    Pt = Math.min(z, (k + It) / A);
                for (let te = 0; te < M; ++te) {
                    const At = te - Z,
                        Dt = Math.max(0, Math.ceil(At / O)),
                        Jt = Math.min(P, (S + At) / O);
                    let _t = 0;
                    for (let we = Et; we < Pt; ++we) {
                        const $s = we * A - It;
                        for (let an = Dt; an < Jt; ++an) {
                            const ro = an * O - At,
                                Ln = ot * ft + q * we + rt * an,
                                cs =
                                    w * (k - 1 - $s) +
                                    y * (S - 1 - ro) +
                                    I * pt;
                            for (let Gs = 0; Gs < V; ++Gs) {
                                const Es = b[Ln + ht * Gs],
                                    Ls = x[cs + Gs];
                                _t += Es * Ls;
                            }
                        }
                    }
                    const ls = Y * ft + Q * wt + j * te + J * pt;
                    g[ls] = _t;
                }
            }
    return e.makeTensorInfo(m.shape, m.dtype, m.values);
}
const vD = {
    kernelName: oc,
    backendName: "cpu",
    kernelFunc: CD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r } = t,
        { strides: i, pad: a, dilations: l } = s;
    lt([o, r], "conv3d");
    const c = Js(o.shape, r.shape, i, l, a),
        {
            filterDepth: u,
            filterHeight: d,
            filterWidth: h,
            dilationDepth: p,
            dilationHeight: f,
            dilationWidth: m,
            padInfo: g,
        } = c,
        b = g.front,
        x = g.left,
        w = g.top,
        y = new ve(c.outShape, o.dtype),
        I = e.data.get(o.dataId).values,
        v = e.data.get(r.dataId).values,
        k = y.values,
        S = dt(o.shape),
        N = dt(r.shape);
    for (let R = 0; R < c.batchSize; ++R) {
        const M = R * S[0],
            V = R * y.strides[0];
        for (let z = 0; z < c.outDepth; ++z) {
            const P = V + z * y.strides[1],
                A = z * c.strideDepth - b;
            for (let O = 0; O < u; ++O) {
                const B = A + O * p;
                if (B < 0 || B >= c.inDepth) continue;
                const Z = O * N[0],
                    H = M + B * S[1];
                for (let Y = 0; Y < c.outHeight; ++Y) {
                    const Q = P + Y * y.strides[2],
                        j = Y * c.strideHeight - w;
                    for (let J = 0; J < d; ++J) {
                        const ot = j + J * f;
                        if (ot < 0 || ot >= c.inHeight) continue;
                        const q = Z + J * N[1],
                            rt = H + ot * S[2];
                        for (let ht = 0; ht < c.outWidth; ++ht) {
                            const ft = Q + ht * c.outChannels,
                                pt = ht * c.strideWidth - x;
                            for (let wt = 0; wt < h; ++wt) {
                                const It = pt + wt * m;
                                if (It < 0 || It >= c.inWidth) continue;
                                const Et = q + wt * N[2],
                                    Pt = rt + It * c.inChannels;
                                let te = Et;
                                for (let At = 0; At < c.inChannels; ++At) {
                                    const Dt = I[Pt + At];
                                    for (let Jt = 0; Jt < c.outChannels; ++Jt)
                                        k[ft + Jt] += Dt * v[te + Jt];
                                    te += c.outChannels;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return e.makeTensorInfo(y.shape, y.dtype, y.values);
}
const kD = {
    kernelName: rc,
    backendName: "cpu",
    kernelFunc: SD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, dy: r } = t,
        { strides: i, pad: a, filterShape: l } = s;
    lt([o, r], "conv3dBackpropFilterV2");
    const c = dt(o.shape),
        u = dt(r.shape),
        d = Js(o.shape, l, i, 1, a),
        h = d.strideDepth,
        p = d.strideHeight,
        f = d.strideWidth,
        m = d.filterDepth,
        g = d.filterHeight,
        b = d.filterWidth,
        x = new ve(d.filterShape, "float32"),
        w = x.values,
        [y, I, v, k] = x.strides,
        S = e.data.get(r.dataId).values,
        [N, R, M, V] = u,
        z = e.data.get(o.dataId).values,
        [P, A, O, B] = c,
        Z = d.padInfo.front,
        H = d.padInfo.left,
        Y = d.padInfo.top;
    for (let Q = 0; Q < m; ++Q) {
        const j = Math.max(0, Math.ceil((Z - Q) / h)),
            J = Math.min(d.outDepth, (d.inDepth + Z - Q) / h),
            ot = Q * y;
        for (let q = 0; q < g; ++q) {
            const rt = Math.max(0, Math.ceil((Y - q) / p)),
                ht = Math.min(d.outHeight, (d.inHeight + Y - q) / p),
                ft = q * I + ot;
            for (let pt = 0; pt < b; ++pt) {
                const wt = Math.max(0, Math.ceil((H - pt) / f)),
                    It = Math.min(d.outWidth, (d.inWidth + H - pt) / f),
                    Et = pt * v + ft;
                for (let Pt = 0; Pt < d.inChannels; ++Pt) {
                    const te = Pt * k + Et;
                    for (let At = 0; At < d.outChannels; ++At) {
                        let Dt = 0;
                        for (let Jt = 0; Jt < d.batchSize; ++Jt) {
                            const _t = Jt * P,
                                ls = Jt * N;
                            for (let we = j; we < J; ++we) {
                                const an = (Q + we * h - Z) * A + _t,
                                    ro = we * R + ls;
                                for (let Ln = rt; Ln < ht; ++Ln) {
                                    const Gs = (q + Ln * p - Y) * O + an,
                                        Es = Ln * M + ro;
                                    for (let Ls = wt; Ls < It; ++Ls) {
                                        const Nu = (pt + Ls * f - H) * B + Gs,
                                            Ru = Ls * V + Es;
                                        Dt += z[Nu + Pt] * S[Ru + At];
                                    }
                                }
                            }
                        }
                        w[te + At] = Dt;
                    }
                }
            }
        }
    }
    return e.makeTensorInfo(x.shape, x.dtype, x.values);
}
const ND = {
    kernelName: lh,
    backendName: "cpu",
    kernelFunc: TD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, filter: r } = t,
        { pad: i, strides: a, inputShape: l } = s;
    lt([o], "conv3dBackpropInputV2");
    const c = dt(o.shape),
        u = dt(r.shape),
        d = Js(l, r.shape, a, 1, i),
        h = new ve(d.inShape, "float32"),
        p = h.values,
        [f, m, g, b] = h.strides,
        x = e.data.get(o.dataId).values,
        [w, y, I, v] = c,
        k = e.data.get(r.dataId).values,
        [S, N, R, M] = u,
        {
            batchSize: V,
            filterDepth: z,
            filterHeight: P,
            filterWidth: A,
            inChannels: O,
            inDepth: B,
            inHeight: Z,
            inWidth: H,
            outChannels: Y,
            outDepth: Q,
            outHeight: j,
            outWidth: J,
            strideDepth: ot,
            strideHeight: q,
            strideWidth: rt,
        } = d,
        ht = z - 1 - d.padInfo.front,
        ft = P - 1 - d.padInfo.top,
        pt = A - 1 - d.padInfo.left;
    for (let wt = 0; wt < V; ++wt)
        for (let It = 0; It < O; ++It)
            for (let Et = 0; Et < B; ++Et) {
                const Pt = Et - ht,
                    te = Math.max(0, Math.ceil(Pt / ot)),
                    At = Math.min(Q, (z + Pt) / ot);
                for (let Dt = 0; Dt < Z; ++Dt) {
                    const Jt = Dt - ft,
                        _t = Math.max(0, Math.ceil(Jt / q)),
                        ls = Math.min(j, (P + Jt) / q);
                    for (let we = 0; we < H; ++we) {
                        const $s = we - pt,
                            an = Math.max(0, Math.ceil($s / rt)),
                            ro = Math.min(J, (A + $s) / rt);
                        let Ln = 0;
                        for (let cs = te; cs < At; ++cs) {
                            const Gs = cs * ot - Pt;
                            for (let Es = _t; Es < ls; ++Es) {
                                const Ls = Es * q - Jt;
                                for (let Pr = an; Pr < ro; ++Pr) {
                                    const Nu = Pr * rt - $s,
                                        Ru = w * wt + y * cs + I * Es + v * Pr,
                                        EC =
                                            S * (z - 1 - Gs) +
                                            N * (P - 1 - Ls) +
                                            R * (A - 1 - Nu) +
                                            M * It;
                                    for (let Ka = 0; Ka < Y; ++Ka) {
                                        const LC = x[Ru + Ka],
                                            MC = k[EC + Ka];
                                        Ln += LC * MC;
                                    }
                                }
                            }
                        }
                        p[f * wt + m * Et + g * Dt + b * we + It] = Ln;
                    }
                }
            }
    return e.makeTensorInfo(h.shape, h.dtype, h.values);
}
const $D = {
    kernelName: ch,
    backendName: "cpu",
    kernelFunc: RD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GD = Wt(Mi, (n) => Math.cos(n)),
    ED = {
        kernelName: Mi,
        backendName: "cpu",
        kernelFunc: GD,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LD = Wt(Wi, (n) => Math.cosh(n)),
    MD = {
        kernelName: Wi,
        backendName: "cpu",
        kernelFunc: LD,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { image: o, boxes: r, boxInd: i } = t,
        { cropSize: a, method: l, extrapolationValue: c } = s,
        [u, d, h, p] = o.shape,
        f = r.shape[0],
        [m, g] = a,
        b = vt([f, m, g, p], "float32"),
        x = e.data.get(r.dataId).values,
        w = e.data.get(i.dataId).values,
        y = e.data.get(o.dataId).values,
        I = dt(o.shape),
        v = dt(b.shape);
    for (let k = 0; k < f; k++) {
        const S = k * 4,
            N = x[S],
            R = x[S + 1],
            M = x[S + 2],
            V = x[S + 3],
            z = w[k];
        if (z >= u) continue;
        const P = m > 1 ? ((M - N) * (d - 1)) / (m - 1) : 0,
            A = g > 1 ? ((V - R) * (h - 1)) / (g - 1) : 0;
        for (let O = 0; O < m; O++) {
            const B = m > 1 ? N * (d - 1) + O * P : 0.5 * (N + M) * (d - 1);
            if (B < 0 || B > d - 1) {
                for (let Z = 0; Z < g; Z++)
                    for (let H = 0; H < p; H++) {
                        const Y = H + Z * v[2] + O * v[1] + k * v[0];
                        b.values[Y] = c;
                    }
                continue;
            }
            if (l === "bilinear") {
                const Z = Math.floor(B),
                    H = Math.ceil(B),
                    Y = B - Z;
                for (let Q = 0; Q < g; Q++) {
                    const j =
                        g > 1 ? R * (h - 1) + Q * A : 0.5 * (R + V) * (h - 1);
                    if (j < 0 || j > h - 1) {
                        for (let rt = 0; rt < p; rt++) {
                            const ht = rt + Q * v[2] + O * v[1] + k * v[0];
                            b.values[ht] = c;
                        }
                        continue;
                    }
                    const J = Math.floor(j),
                        ot = Math.ceil(j),
                        q = j - J;
                    for (let rt = 0; rt < p; rt++) {
                        let ht = rt + J * I[2] + Z * I[1] + z * I[0];
                        const ft = y[ht];
                        ht = rt + ot * I[2] + Z * I[1] + z * I[0];
                        const pt = y[ht];
                        ht = rt + J * I[2] + H * I[1] + z * I[0];
                        const wt = y[ht];
                        ht = rt + ot * I[2] + H * I[1] + z * I[0];
                        const It = y[ht],
                            Et = ft + (pt - ft) * q,
                            Pt = wt + (It - wt) * q;
                        (ht = rt + Q * v[2] + O * v[1] + k * v[0]),
                            (b.values[ht] = Et + (Pt - Et) * Y);
                    }
                }
            } else
                for (let Z = 0; Z < g; ++Z) {
                    const H =
                        g > 1 ? R * (h - 1) + Z * A : 0.5 * (R + V) * (h - 1);
                    if (H < 0 || H > h - 1) {
                        for (let j = 0; j < p; j++) {
                            const J = j + Z * v[2] + O * v[1] + k * v[0];
                            b.values[J] = c;
                        }
                        continue;
                    }
                    const Y = Math.round(H),
                        Q = Math.round(B);
                    for (let j = 0; j < p; j++) {
                        const J = j + Y * I[2] + Q * I[1] + z * I[0],
                            ot = j + Z * v[2] + O * v[1] + k * v[0];
                        b.values[ot] = y[J];
                    }
                }
        }
    }
    return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
const DD = {
    kernelName: dh,
    backendName: "cpu",
    kernelFunc: WD,
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, exclusive: i, reverse: a } = s;
    lt(o, "cumprod");
    const l = qt([r], o.shape.length);
    let c = o;
    l != null && (c = _e({ inputs: { x: o }, backend: e, attrs: { perm: l } }));
    const u = ie(1, o.shape.length)[0];
    if (u !== c.shape.length - 1)
        throw new Error(
            `backend.cumprod in CPU expects an inner-most axis=${
                c.shape.length - 1
            } but got axis=${u}`
        );
    const d = tn(c.dtype, "int32"),
        h = _l(X(c.shape), d),
        p = e.data.get(c.dataId).values,
        f = c.shape[c.shape.length - 1],
        m = a ? (b, x) => b + f - x - 1 : (b, x) => b + x;
    for (let b = 0; b < p.length; b += f)
        for (let x = 0; x < f; x++) {
            const w = m(b, x);
            if (x === 0) h[w] = i ? 1 : p[w];
            else {
                const y = m(b, x - 1);
                h[w] = i ? p[y] * h[y] : p[w] * h[y];
            }
        }
    const g = e.makeTensorInfo(c.shape, d, h);
    if (l != null) {
        const b = js(l),
            x = _e({ inputs: { x: g }, backend: e, attrs: { perm: b } });
        return (
            e.disposeIntermediateTensorInfo(g),
            e.disposeIntermediateTensorInfo(c),
            x
        );
    }
    return g;
}
const VD = {
    kernelName: uh,
    backendName: "cpu",
    kernelFunc: FD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, exclusive: i, reverse: a } = s;
    lt(o, "cumsum");
    const l = qt([r], o.shape.length);
    let c = o;
    l != null && (c = _e({ inputs: { x: o }, backend: e, attrs: { perm: l } }));
    const u = ie(1, o.shape.length)[0];
    if (u !== c.shape.length - 1)
        throw new Error(
            `backend.cumsum in CPU expects an inner-most axis=${
                c.shape.length - 1
            } but got axis=${u}`
        );
    const d = tn(c.dtype, "int32"),
        h = ke(X(c.shape), d),
        p = e.data.get(c.dataId).values,
        f = c.shape[c.shape.length - 1],
        m = a ? (b, x) => b + f - x - 1 : (b, x) => b + x;
    for (let b = 0; b < p.length; b += f)
        for (let x = 0; x < f; x++) {
            const w = m(b, x);
            if (x === 0) h[w] = i ? 0 : p[w];
            else {
                const y = m(b, x - 1);
                h[w] = i ? p[y] + h[y] : p[w] + h[y];
            }
        }
    const g = e.makeTensorInfo(c.shape, d, h);
    if (l != null) {
        const b = js(l),
            x = _e({ inputs: { x: g }, backend: e, attrs: { perm: b } });
        return (
            e.disposeIntermediateTensorInfo(g),
            e.disposeIntermediateTensorInfo(c),
            x
        );
    }
    return g;
}
const PD = {
    kernelName: ic,
    backendName: "cpu",
    kernelFunc: zD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, weights: r } = t,
        { size: i, binaryOutput: a } = s;
    if (o.shape.length === 1) {
        const l = e.data.get(o.dataId).values,
            c = e.data.get(r.dataId).values,
            u = Af(l, c, r.dtype, r.shape, i);
        return e.makeTensorInfo([i], r.dtype, u);
    } else if (o.shape.length === 2) {
        const l = e.bufferSync(o),
            c = e.bufferSync(r),
            u = K1(l, c, i, a);
        return e.makeTensorInfo(u.shape, r.dtype, u.values);
    }
    throw new Error(
        `Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`
    );
}
const OD = {
    kernelName: hh,
    backendName: "cpu",
    kernelFunc: AD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { blockSize: r, dataFormat: i } = s;
    C(
        i === "NHWC",
        () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`
    );
    const a = o.shape[0],
        l = o.shape[1],
        c = o.shape[2],
        u = o.shape[3],
        d = l * r,
        h = c * r,
        p = u / (r * r),
        f = e.data.get(o.dataId).values,
        m = new Float32Array(a * d * h * p);
    let g = 0;
    for (let b = 0; b < a; ++b)
        for (let x = 0; x < d; ++x) {
            const w = Math.floor(x / r),
                y = x % r;
            for (let I = 0; I < h; ++I) {
                const v = Math.floor(I / r),
                    k = I % r,
                    S = (y * r + k) * p;
                for (let N = 0; N < p; ++N) {
                    const M = N + S + u * (v + c * (w + l * b));
                    m[g++] = f[M];
                }
            }
        }
    return e.makeTensorInfo([a, d, h, p], o.dtype, m);
}
const KD = {
    kernelName: ph,
    backendName: "cpu",
    kernelFunc: XD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kw(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r } = t,
        { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
    lt([o, r], "depthwiseConv2DNative");
    const u = dt(o.shape),
        d = dt(r.shape);
    let h = l;
    h == null && (h = [1, 1]),
        C(
            Le(i, h),
            () =>
                `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${h}'`
        );
    const p = Te(
            o.shape,
            r.shape,
            i,
            h,
            a,
            c,
            !0
            /* depthwise */
        ),
        {
            filterHeight: f,
            filterWidth: m,
            dilationHeight: g,
            dilationWidth: b,
            padInfo: x,
        } = p,
        w = x.left,
        y = x.top,
        I = p.outChannels / p.inChannels,
        v = new ve(p.outShape, o.dtype),
        k = e.data.get(o.dataId).values,
        S = e.data.get(r.dataId).values,
        N = v.values;
    for (let R = 0; R < p.batchSize; ++R) {
        const M = R * u[0],
            V = R * v.strides[0];
        for (let z = 0; z < p.outHeight; ++z) {
            const P = V + z * v.strides[1],
                A = z * p.strideHeight - y;
            for (let O = 0; O < f; ++O) {
                const B = A + O * g;
                if (B < 0 || B >= p.inHeight) continue;
                const Z = O * d[0],
                    H = M + B * u[1];
                for (let Y = 0; Y < p.outWidth; ++Y) {
                    const Q = P + Y * v.strides[2],
                        j = Y * p.strideWidth - w;
                    for (let J = 0; J < m; ++J) {
                        const ot = j + J * b;
                        if (ot < 0 || ot >= p.inWidth) continue;
                        const q = Z + J * d[1],
                            rt = H + ot * p.inChannels;
                        let ht = Q,
                            ft = q;
                        for (let pt = 0; pt < p.inChannels; ++pt) {
                            const wt = k[rt + pt];
                            for (let It = 0; It < I; ++It)
                                N[ht + It] += wt * S[ft + It];
                            (ht += I), (ft += I);
                        }
                    }
                }
            }
        }
    }
    return e.makeTensorInfo(v.shape, v.dtype, v.values);
}
const ZD = {
    kernelName: ac,
    backendName: "cpu",
    kernelFunc: Kw,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BD(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, dy: r } = t,
        {
            strides: i,
            dilations: a,
            pad: l,
            dimRoundingMode: c,
            filterShape: u,
        } = s;
    lt([o, r], "depthwiseConv2dNativeBackpropFilter");
    const d = Te(
            o.shape,
            u,
            i,
            a,
            l,
            c,
            !0
            /* depthwise */
        ),
        {
            strideHeight: h,
            strideWidth: p,
            filterHeight: f,
            filterWidth: m,
        } = d,
        g = new ve(d.filterShape, "float32"),
        b = d.padInfo.left,
        x = d.padInfo.top,
        w = d.outChannels / d.inChannels,
        y = e.data.get(o.dataId).values,
        I = new ve(o.shape, o.dtype, y),
        v = e.data.get(r.dataId).values,
        k = new ve(r.shape, r.dtype, v);
    for (let S = 0; S < f; ++S) {
        const N = Math.max(0, Math.ceil((x - S) / h)),
            R = Math.min(d.outHeight, (d.inHeight + x - S) / h);
        for (let M = 0; M < m; ++M) {
            const V = Math.max(0, Math.ceil((b - M) / p)),
                z = Math.min(d.outWidth, (d.inWidth + b - M) / p);
            for (let P = 0; P < d.outChannels; ++P) {
                const A = Math.trunc(P / w),
                    O = P % w;
                let B = 0;
                for (let Z = 0; Z < d.batchSize; ++Z)
                    for (let H = N; H < R; ++H) {
                        const Y = S + H * h - x;
                        for (let Q = V; Q < z; ++Q) {
                            const j = M + Q * p - b;
                            B += I.get(Z, Y, j, A) * k.get(Z, H, Q, P);
                        }
                    }
                g.set(B, S, M, A, O);
            }
        }
    }
    return e.makeTensorInfo(g.shape, g.dtype, g.values);
}
const HD = {
    kernelName: fh,
    backendName: "cpu",
    kernelFunc: BD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _D(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, filter: r } = t,
        {
            strides: i,
            dilations: a,
            pad: l,
            dimRoundingMode: c,
            inputShape: u,
        } = s;
    lt([o, r], "depthwiseConv2DNativeBackpropInput");
    const d = dt(o.shape),
        h = dt(r.shape),
        p = Te(
            u,
            r.shape,
            i,
            a,
            l,
            c,
            !0
            /* depthwise */
        ),
        f = new ve(p.inShape, "float32"),
        m = f.values,
        [g, b, x] = f.strides,
        w = e.data.get(o.dataId).values,
        [y, I, v] = d,
        k = e.data.get(r.dataId).values,
        [S, N, R] = h,
        {
            batchSize: M,
            filterHeight: V,
            filterWidth: z,
            inChannels: P,
            inHeight: A,
            inWidth: O,
            outChannels: B,
            outHeight: Z,
            outWidth: H,
            strideHeight: Y,
            strideWidth: Q,
        } = p,
        j = V - 1 - p.padInfo.top,
        J = z - 1 - p.padInfo.left,
        ot = B / P;
    for (let q = 0; q < M; ++q)
        for (let rt = 0; rt < P; ++rt)
            for (let ht = 0; ht < A; ++ht) {
                const ft = ht - j,
                    pt = Math.max(0, Math.ceil(ft / Y)),
                    wt = Math.min(Z, (V + ft) / Y);
                for (let It = 0; It < O; ++It) {
                    const Et = It - J,
                        Pt = Math.max(0, Math.ceil(Et / Q)),
                        te = Math.min(H, (z + Et) / Q);
                    let At = 0;
                    for (let Dt = pt; Dt < wt; ++Dt) {
                        const Jt = Dt * Y - ft;
                        for (let _t = Pt; _t < te; ++_t) {
                            const ls = _t * Q - Et,
                                we = y * q + I * Dt + v * _t,
                                $s =
                                    S * (V - 1 - Jt) +
                                    N * (z - 1 - ls) +
                                    R * rt;
                            for (let an = 0; an < ot; ++an) {
                                const ro = rt * ot + an,
                                    Ln = w[we + ro],
                                    cs = k[$s + an];
                                At += Ln * cs;
                            }
                        }
                    }
                    m[g * q + b * ht + x * It + rt] = At;
                }
            }
    return e.makeTensorInfo(f.shape, f.dtype, f.values);
}
const UD = {
    kernelName: mh,
    backendName: "cpu",
    kernelFunc: _D,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YD(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t,
        o = X(s.shape),
        r = e.data.get(s.dataId).values,
        i = vt([o, o], s.dtype),
        a = i.values;
    for (let c = 0; c < r.length; c++) a[c * o + c] = r[c];
    const l = [...s.shape, ...s.shape];
    return e.makeTensorInfo(l, i.dtype, i.values);
}
const QD = {
    kernelName: ub,
    backendName: "cpu",
    kernelFunc: YD,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JD = {
    kernelName: lc,
    backendName: "cpu",
    kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
        const { x: s, filter: o } = n,
            { strides: r, pad: i, dilations: a } = e,
            l = t,
            c = l.data.get(s.dataId).values,
            u = s.shape.length,
            d = l.data.get(o.dataId).values,
            h = o.shape.length,
            {
                batchSize: p,
                inHeight: f,
                inWidth: m,
                inChannels: g,
                outHeight: b,
                outWidth: x,
                padInfo: w,
                strideHeight: y,
                strideWidth: I,
                filterHeight: v,
                filterWidth: k,
                dilationHeight: S,
                dilationWidth: N,
                outShape: R,
            } = Ia(s.shape, o.shape, r, i, "NHWC", a),
            M = X(R),
            V = R.length,
            z = ne(s.dtype, M);
        for (let A = 0; A < p; ++A)
            for (let O = 0; O < b; ++O) {
                const B = O * y - w.top;
                for (let Z = 0; Z < x; ++Z) {
                    const H = Z * I - w.left;
                    for (let Y = 0; Y < g; ++Y) {
                        let Q = Number.MIN_SAFE_INTEGER;
                        for (let J = 0; J < v; ++J) {
                            const ot = B + J * S;
                            if (ot >= 0 && ot < f)
                                for (let q = 0; q < k; ++q) {
                                    const rt = H + q * N;
                                    if (rt >= 0 && rt < m) {
                                        const ht = zn(
                                                [A, ot, rt, Y],
                                                u,
                                                dt(s.shape)
                                            ),
                                            ft = zn([J, q, Y], h, dt(o.shape)),
                                            pt = c[ht] + d[ft];
                                        pt > Q && (Q = pt);
                                    }
                                }
                        }
                        const j = zn([A, O, Z, Y], V, dt(R));
                        z[j] = Q;
                    }
                }
            }
        return {
            dataId: l.write(Qs(z, s.dtype), R, s.dtype),
            shape: R,
            dtype: s.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jD = {
    kernelName: ld,
    backendName: "cpu",
    kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
        const { x: s, filter: o, dy: r } = n,
            { strides: i, pad: a, dilations: l } = e,
            c = t,
            u = kn(s.shape, c.data.get(s.dataId).values),
            d = kn(o.shape, c.data.get(o.dataId).values),
            {
                batchSize: h,
                inHeight: p,
                inWidth: f,
                inChannels: m,
                outHeight: g,
                outWidth: b,
                padInfo: x,
                strideHeight: w,
                strideWidth: y,
                filterHeight: I,
                filterWidth: v,
                dilationHeight: k,
                dilationWidth: S,
                outShape: N,
            } = Ia(s.shape, o.shape, i, a, "NHWC", l);
        C(
            r.rank === N.length,
            () =>
                `Error in ${ld}, dy must have the same rank as output ${N.length}, but got ${r.rank}`
        );
        const R = kn(N, c.data.get(r.dataId).values),
            M = Jd(o.shape, o.dtype);
        for (let z = 0; z < h; ++z)
            for (let P = 0; P < g; ++P) {
                const A = P * w - x.top;
                for (let O = 0; O < b; ++O) {
                    const B = O * y - x.left;
                    for (let Z = 0; Z < m; ++Z) {
                        let H = Number.MIN_SAFE_INTEGER,
                            Y = 0,
                            Q = 0;
                        for (let j = 0; j < I; ++j) {
                            const J = A + j * k;
                            if (J >= 0 && J < p)
                                for (let ot = 0; ot < v; ++ot) {
                                    const q = B + ot * S;
                                    if (q >= 0 && q < f) {
                                        const rt = u[z][J][q][Z] + d[j][ot][Z];
                                        rt > H && ((H = rt), (Y = j), (Q = ot));
                                    }
                                }
                        }
                        M[Y][Q][Z] += R[z][P][O][Z];
                    }
                }
            }
        return {
            dataId: c.write(Qs(M, s.dtype), o.shape, o.dtype),
            shape: o.shape,
            dtype: o.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qD = {
    kernelName: ad,
    backendName: "cpu",
    kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
        const { x: s, filter: o, dy: r } = n,
            { strides: i, pad: a, dilations: l } = e,
            c = t,
            u = kn(s.shape, c.data.get(s.dataId).values),
            d = kn(o.shape, c.data.get(o.dataId).values),
            {
                batchSize: h,
                inHeight: p,
                inWidth: f,
                inChannels: m,
                outHeight: g,
                outWidth: b,
                padInfo: x,
                strideHeight: w,
                strideWidth: y,
                filterHeight: I,
                filterWidth: v,
                dilationHeight: k,
                dilationWidth: S,
                outShape: N,
            } = Ia(s.shape, o.shape, i, a, "NHWC", l);
        C(
            r.rank === N.length,
            () =>
                `Error in ${ad}, dy must have the same rank as output ${N.length}, but got ${r.rank}`
        );
        const R = kn(N, c.data.get(r.dataId).values),
            M = Jd(s.shape, s.dtype);
        for (let z = 0; z < h; ++z)
            for (let P = 0; P < g; ++P) {
                const A = P * w - x.top;
                for (let O = 0; O < b; ++O) {
                    const B = O * y - x.left;
                    for (let Z = 0; Z < m; ++Z) {
                        let H = Number.MIN_SAFE_INTEGER,
                            Y = A < 0 ? 0 : A,
                            Q = B < 0 ? 0 : B;
                        for (let j = 0; j < I; ++j) {
                            const J = A + j * k;
                            if (J >= 0 && J < p)
                                for (let ot = 0; ot < v; ++ot) {
                                    const q = B + ot * S;
                                    if (q >= 0 && q < f) {
                                        const rt = u[z][J][q][Z] + d[j][ot][Z];
                                        rt > H && ((H = rt), (Y = J), (Q = q));
                                    }
                                }
                        }
                        M[z][Y][Q][Z] += R[z][P][O][Z];
                    }
                }
            }
        return {
            dataId: c.write(Qs(M, s.dtype), s.shape, s.dtype),
            shape: s.shape,
            dtype: s.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tF(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { image: o } = t,
        { canvas: r, options: i } = s,
        { contextOptions: a, imageOptions: l } = i || {},
        c = (l == null ? void 0 : l.alpha) || 1,
        u = (a == null ? void 0 : a.contextType) || "2d";
    if (u !== "2d")
        throw new Error(
            `Context type ${a.contextType} is not supported by the CPU backend.`
        );
    const d = r.getContext(u, (a == null ? void 0 : a.contextAttributes) || {});
    if (d == null) throw new Error(`Could not get the context with ${u} type.`);
    const [h, p] = o.shape.slice(0, 2),
        f = o.shape.length === 2 ? 1 : o.shape[2],
        m = e.data.get(o.dataId).values,
        g = o.dtype === "float32" ? 255 : 1,
        b = new Uint8ClampedArray(p * h * 4);
    for (let w = 0; w < h * p; ++w) {
        const y = [0, 0, 0, 255 * c];
        for (let v = 0; v < f; v++) {
            const k = m[w * f + v];
            if (o.dtype === "float32") {
                if (k < 0 || k > 1)
                    throw new Error(
                        `Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${k}.`
                    );
            } else if (o.dtype === "int32" && (k < 0 || k > 255))
                throw new Error(
                    `Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${k}.`
                );
            f === 1
                ? ((y[0] = k * g), (y[1] = k * g), (y[2] = k * g))
                : (y[v] = k * g);
        }
        const I = w * 4;
        (b[I + 0] = Math.round(y[0])),
            (b[I + 1] = Math.round(y[1])),
            (b[I + 2] = Math.round(y[2])),
            (b[I + 3] = Math.round(y[3]));
    }
    (r.width = p), (r.height = h);
    const x = new ImageData(b, p, h);
    return d.putImageData(x, 0, 0), o;
}
const eF = {
    kernelName: gh,
    backendName: "cpu",
    kernelFunc: tF,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function za(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s;
    lt(o, "sum");
    let a;
    o.dtype === "bool"
        ? (a = Ys({ inputs: { x: o }, backend: e, attrs: { dtype: "int32" } }))
        : (a = rs({ inputs: { x: o }, backend: e }));
    const l = a.shape.length,
        c = Ct(r, a.shape),
        u = qt(c, l);
    let d = c,
        h = a;
    u != null &&
        ((h = _e({ inputs: { x: a }, backend: e, attrs: { perm: u } })),
        (d = ie(d.length, l))),
        Ne("sum", d, h.shape.length);
    const [p, f] = ye(h.shape, d),
        m = tn(h.dtype, "int32");
    let g = Fl(e, p, m);
    const b = X(f),
        x = e.data.get(g.dataId).values,
        w = e.data.get(h.dataId).values;
    for (let y = 0; y < x.length; ++y) {
        const I = y * b;
        let v = 0;
        for (let k = 0; k < b; ++k) v += w[I + k];
        x[y] = v;
    }
    if (i) {
        const y = re(g.shape, c),
            I = g;
        (g = Zt({ inputs: { x: g }, backend: e, attrs: { shape: y } })),
            e.disposeIntermediateTensorInfo(I);
    }
    return (
        e.disposeIntermediateTensorInfo(a),
        u != null && e.disposeIntermediateTensorInfo(h),
        g
    );
}
const nF = {
    kernelName: Oc,
    backendName: "cpu",
    kernelFunc: za,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sF(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { equation: o } = s,
        r = t,
        { allDims: i, summedDims: a, idDims: l } = lf(o, r.length);
    uf(i.length, l, r);
    const { path: c, steps: u } = df(a, l),
        d = u.length;
    let h = null,
        p = i.length;
    const f = [];
    for (let m = 0; m < d; ++m) {
        for (const g of u[m]) {
            const { permutationIndices: b, expandDims: x } = cf(p, l[g]);
            let w;
            hf(b)
                ? (w = r[g])
                : ((w = _e({
                      inputs: { x: r[g] },
                      backend: e,
                      attrs: { perm: b },
                  })),
                  f.push(w));
            const y = w.shape.slice();
            for (let I = 0; I < x.length; ++I) y.splice(x[I], 0, 1);
            $t(w.shape, y) ||
                ((w = Zt({
                    inputs: { x: w },
                    backend: e,
                    attrs: { shape: y },
                })),
                f.push(w)),
                h === null
                    ? (h = w)
                    : ((h = wu({ inputs: { a: w, b: h }, backend: e })),
                      f.push(h));
        }
        m < d - 1 &&
            (c[m] >= 0 &&
                ((h = za({
                    inputs: { x: h },
                    backend: e,
                    attrs: {
                        axis: c[m] - (i.length - p),
                        keepDims: !1,
                    },
                })),
                f.push(h)),
            p--);
    }
    for (const m of f) m !== h && e.disposeIntermediateTensorInfo(m);
    return h;
}
const oF = {
    kernelName: bh,
    backendName: "cpu",
    kernelFunc: sF,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rF(n) {
    const { inputs: t, backend: e } = n,
        { dy: s, y: o } = t;
    lt([s, o], "eluGrad");
    const r = new Float32Array(X(o.shape)),
        i = e.data.get(o.dataId).values,
        a = e.data.get(s.dataId).values;
    for (let l = 0; l < i.length; ++l) {
        const c = i[l];
        c >= 0 ? (r[l] = a[l]) : (r[l] = a[l] * (c + 1));
    }
    return e.makeTensorInfo(o.shape, "float32", r);
}
const iF = {
    kernelName: xh,
    backendName: "cpu",
    kernelFunc: rF,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aF = tf,
    lF = ef,
    cF = nf,
    uF = sf,
    dF = of,
    hF = rf,
    pF = Wt(Vi, (n) => {
        const t = Math.sign(n),
            e = Math.abs(n),
            s = 1 / (1 + aF * e);
        return (
            t *
            (1 -
                ((((hF * s + dF) * s + uF) * s + cF) * s + lF) *
                    s *
                    Math.exp(-e * e))
        );
    }),
    fF = {
        kernelName: Vi,
        backendName: "cpu",
        kernelFunc: pF,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pl(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { input: o } = t,
        { dim: r } = s,
        i = o.shape.length,
        a = o.shape.slice();
    let l = r;
    return (
        r < 0 &&
            (C(
                -(i + 1) <= r,
                () => `Axis must be in the interval [${-(i + 1)}, ${i}]`
            ),
            (l = i + r + 1)),
        a.splice(l, 0, 1),
        Zt({ inputs: { x: o }, backend: e, attrs: { shape: a } })
    );
}
const mF = {
    kernelName: uc,
    backendName: "cpu",
    kernelFunc: Pl,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gF = le((n, t) => n / t),
    Hf = fe(Di, gF),
    Fd = {
        kernelName: Di,
        backendName: "cpu",
        kernelFunc: Hf,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zw(n, t, e) {
    const s = n.shape,
        o = s[0],
        r = s[1],
        i = e.data.get(n.dataId),
        a = i.complexTensorInfos.real,
        l = i.complexTensorInfos.imag,
        c = [o, r],
        u = X(c),
        d = Se("float32", u),
        h = Se("float32", u);
    for (let g = 0; g < o; g++) {
        const b = Fo({
                inputs: { x: a },
                backend: e,
                attrs: { begin: [g, 0], size: [1, r] },
            }),
            x = Fo({
                inputs: { x: l },
                backend: e,
                attrs: { begin: [g, 0], size: [1, r] },
            }),
            w = Je({ inputs: { real: b, imag: x }, backend: e }),
            { real: y, imag: I } = bF(w, t, e),
            v = xs(y, I);
        for (let k = 0; k < r; k++) {
            const S = af(v, k);
            (d[g * r + k] = S.real), (h[g * r + k] = S.imag);
        }
        e.disposeIntermediateTensorInfo(b),
            e.disposeIntermediateTensorInfo(x),
            e.disposeIntermediateTensorInfo(w);
    }
    const p = e.makeTensorInfo(c, "float32", d),
        f = e.makeTensorInfo(c, "float32", h),
        m = Je({ inputs: { real: p, imag: f }, backend: e });
    return (
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(f),
        m
    );
}
function bF(n, t, e) {
    const s = X(n.shape),
        o = e.data.get(n.dataId),
        r = e.data.get(o.complexTensorInfos.real.dataId).values,
        i = e.data.get(o.complexTensorInfos.imag.dataId).values;
    if (xF(s)) {
        const a = Vd(r, i, s, t, e),
            l = [n.shape[0], n.shape[1]];
        if (t) {
            const c = e.makeTensorInfo(l, "float32", a.real),
                u = e.makeTensorInfo(l, "float32", a.imag),
                d = e.makeTensorInfo([], "float32", Is(s, "float32")),
                h = rs({ inputs: { x: d }, backend: e }),
                p = Fd.kernelFunc({ inputs: { a: c, b: d }, backend: e }),
                f = Fd.kernelFunc({ inputs: { a: u, b: h }, backend: e }),
                m = e.data.get(p.dataId).values,
                g = e.data.get(f.dataId).values;
            return (
                e.disposeIntermediateTensorInfo(c),
                e.disposeIntermediateTensorInfo(u),
                e.disposeIntermediateTensorInfo(d),
                e.disposeIntermediateTensorInfo(h),
                e.disposeIntermediateTensorInfo(p),
                e.disposeIntermediateTensorInfo(f),
                { real: m, imag: g }
            );
        }
        return a;
    } else {
        const a = xs(r, i),
            l = yF(a, s, t);
        return j0(l);
    }
}
function xF(n) {
    return (n & (n - 1)) === 0;
}
function Vd(n, t, e, s, o) {
    if (e === 1) return { real: n, imag: t };
    const r = xs(n, t),
        i = e / 2,
        a = q0(r),
        l = a.real,
        c = a.imag,
        u = [l.length],
        d = o.makeTensorInfo(u, "float32", l),
        h = o.makeTensorInfo(u, "float32", c),
        p = Je({ inputs: { real: d, imag: h }, backend: o }),
        f = tx(r),
        m = f.real,
        g = f.imag,
        b = [m.length],
        x = o.makeTensorInfo(b, "float32", m),
        w = o.makeTensorInfo(b, "float32", g),
        y = Je({ inputs: { real: x, imag: w }, backend: o }),
        I = Vd(l, c, i, s, o),
        v = I.real,
        k = I.imag,
        S = [v.length],
        N = o.makeTensorInfo(S, "float32", v),
        R = o.makeTensorInfo(S, "float32", k),
        M = Je({
            inputs: { real: N, imag: R },
            backend: o,
        }),
        V = Vd(m, g, i, s, o),
        z = V.real,
        P = V.imag,
        A = [z.length],
        O = o.makeTensorInfo(A, "float32", z),
        B = o.makeTensorInfo(A, "float32", P),
        Z = Je({ inputs: { real: O, imag: B }, backend: o }),
        H = nx(e, s),
        Y = [H.real.length],
        Q = o.makeTensorInfo(Y, "float32", H.real),
        j = o.makeTensorInfo(Y, "float32", H.imag),
        J = Je({ inputs: { real: Q, imag: j }, backend: o }),
        ot = wu({ inputs: { a: J, b: Z }, backend: o }),
        q = wr({
            inputs: { a: M, b: ot },
            backend: o,
        }),
        rt = Zf({
            inputs: { a: M, b: ot },
            backend: o,
        }),
        ht = Do({ inputs: { input: q }, backend: o }),
        ft = Do({ inputs: { input: rt }, backend: o }),
        pt = Ir({ inputs: { input: q }, backend: o }),
        wt = Ir({ inputs: { input: rt }, backend: o }),
        It = Cr({
            inputs: [ht, ft],
            backend: o,
            attrs: { axis: 0 },
        }),
        Et = Cr({
            inputs: [pt, wt],
            backend: o,
            attrs: { axis: 0 },
        }),
        Pt = o.data.get(It.dataId).values,
        te = o.data.get(Et.dataId).values;
    return (
        o.disposeIntermediateTensorInfo(d),
        o.disposeIntermediateTensorInfo(h),
        o.disposeIntermediateTensorInfo(p),
        o.disposeIntermediateTensorInfo(x),
        o.disposeIntermediateTensorInfo(w),
        o.disposeIntermediateTensorInfo(y),
        o.disposeIntermediateTensorInfo(N),
        o.disposeIntermediateTensorInfo(R),
        o.disposeIntermediateTensorInfo(M),
        o.disposeIntermediateTensorInfo(O),
        o.disposeIntermediateTensorInfo(B),
        o.disposeIntermediateTensorInfo(Z),
        o.disposeIntermediateTensorInfo(Q),
        o.disposeIntermediateTensorInfo(j),
        o.disposeIntermediateTensorInfo(J),
        o.disposeIntermediateTensorInfo(ot),
        o.disposeIntermediateTensorInfo(q),
        o.disposeIntermediateTensorInfo(rt),
        o.disposeIntermediateTensorInfo(ht),
        o.disposeIntermediateTensorInfo(pt),
        o.disposeIntermediateTensorInfo(ft),
        o.disposeIntermediateTensorInfo(wt),
        o.disposeIntermediateTensorInfo(It),
        o.disposeIntermediateTensorInfo(Et),
        { real: Pt, imag: te }
    );
}
function yF(n, t, e) {
    const s = new Float32Array(t * 2);
    for (let o = 0; o < t; o++) {
        let r = 0,
            i = 0;
        for (let a = 0; a < t; a++) {
            const l = sx(o * a, t, e),
                c = af(n, a);
            (r += c.real * l.real - c.imag * l.imag),
                (i += c.real * l.imag + c.imag * l.real);
        }
        e && ((r /= t), (i /= t)), ex(s, r, i, o);
    }
    return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wF(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        o = X(s.shape),
        r = s.shape[s.shape.length - 1],
        i = o / r,
        a = Zt({
            inputs: { x: s },
            backend: e,
            attrs: { shape: [i, r] },
        }),
        l = Zw(a, !1, e),
        c = Zt({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
    return (
        e.disposeIntermediateTensorInfo(a),
        e.disposeIntermediateTensorInfo(l),
        c
    );
}
const IF = {
    kernelName: yh,
    backendName: "cpu",
    kernelFunc: wF,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _f(n) {
    const { backend: t, attrs: e } = n,
        { shape: s, value: o, dtype: r } = e,
        i = r || Oo(o),
        a = ne(i, X(s));
    return vF(a, o, i), t.makeTensorInfo(s, i, a);
}
const CF = {
    kernelName: wh,
    backendName: "cpu",
    kernelFunc: _f,
};
function vF(n, t, e) {
    n.fill(t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SF = {
    kernelName: Ih,
    backendName: "cpu",
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { image: s } = n,
            o = e,
            r = Se(s.dtype, X(s.shape)),
            [i, a, l, c] = s.shape,
            u = o.data.get(s.dataId).values;
        for (let h = 0; h < i; h++) {
            const p = h * l * a * c;
            for (let f = 0; f < a; f++) {
                const m = f * (l * c);
                for (let g = 0; g < l; g++) {
                    const b = g * c;
                    for (let x = 0; x < c; x++) {
                        const w = Math.round(l - g - 1),
                            y = p + m + b + x;
                        let I = u[y];
                        if (w >= 0 && w < l) {
                            const v = w * c,
                                k = p + m + v + x;
                            I = u[k];
                        }
                        r[y] = I;
                    }
                }
            }
        }
        return {
            dataId: o.write(r, s.shape, s.dtype),
            shape: s.shape,
            dtype: s.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kF(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r, bias: i, preluActivationWeights: a } = t,
        {
            strides: l,
            pad: c,
            dataFormat: u,
            dilations: d,
            dimRoundingMode: h,
            activation: p,
            leakyreluAlpha: f,
        } = s;
    let m = Xw({
        inputs: { x: o, filter: r },
        backend: e,
        attrs: {
            strides: l,
            pad: c,
            dataFormat: u,
            dilations: d,
            dimRoundingMode: h,
        },
    });
    if (i) {
        const g = m;
        if (u === "NCHW" && i.shape.length === 1 && i.shape[0] !== 1) {
            const b = Zt({
                inputs: { x: i },
                backend: e,
                attrs: { shape: [i.shape[0], 1, 1] },
            });
            (m = wr({ inputs: { a: m, b }, backend: e })),
                e.disposeIntermediateTensorInfo(b);
        } else m = wr({ inputs: { a: m, b: i }, backend: e });
        e.disposeIntermediateTensorInfo(g);
    }
    if (p) {
        const g = m;
        if (
            u === "NCHW" &&
            p === "prelu" &&
            a.shape.length === 1 &&
            a.shape[0] !== 1
        ) {
            const b = Zt({
                inputs: { x: a },
                backend: e,
                attrs: { shape: [a.shape[0], 1, 1] },
            });
            (m = zl(e, m, p, b, f)), e.disposeIntermediateTensorInfo(b);
        } else m = zl(e, m, p, a, f);
        e.disposeIntermediateTensorInfo(g);
    }
    return m;
}
const TF = {
    kernelName: gl,
    backendName: "cpu",
    kernelFunc: kF,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NF(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r, bias: i, preluActivationWeights: a } = t,
        {
            strides: l,
            pad: c,
            dataFormat: u,
            dilations: d,
            dimRoundingMode: h,
            activation: p,
            leakyreluAlpha: f,
        } = s;
    let m = Kw({
        inputs: { x: o, filter: r },
        backend: e,
        attrs: {
            strides: l,
            pad: c,
            dataFormat: u,
            dilations: d,
            dimRoundingMode: h,
        },
    });
    if (i) {
        const g = m;
        (m = wr({ inputs: { a: m, b: i }, backend: e })),
            e.disposeIntermediateTensorInfo(g);
    }
    if (p) {
        const g = m;
        (m = zl(e, m, p, a, f)), e.disposeIntermediateTensorInfo(g);
    }
    return m;
}
const RF = {
    kernelName: Cb,
    backendName: "cpu",
    kernelFunc: NF,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $F(n) {
    const { inputs: t, backend: e } = n,
        { params: s, indices: o } = t,
        r = X(s.shape),
        i = o.shape,
        a = i[i.length - 1],
        [l, c, u, d] = eu(s, o);
    if (c === 0) return e.makeTensorInfo(l, s.dtype, []);
    const h = e.data.get(o.dataId).values,
        p = e.bufferSync(s),
        f = tw(h, p, s.dtype, c, a, u, d, s.shape, r);
    return e.makeTensorInfo(l, s.dtype, f.values);
}
const GF = {
    kernelName: db,
    backendName: "cpu",
    kernelFunc: $F,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EF(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, indices: r } = t,
        { axis: i, batchDims: a } = s;
    lt([o, r], "gatherV2");
    const l = Ct(i, o.shape)[0],
        c = e.data.get(r.dataId).values,
        u = o.shape[l];
    for (let y = 0; y < c.length; ++y) {
        const I = c[y];
        C(
            I <= u - 1 && I >= 0,
            () => `GatherV2: the index value ${I} is not in [0, ${u - 1}]`
        );
    }
    let d = a;
    a == null && (d = 0);
    const h = X(r.shape),
        p = ff(o, r, l, d),
        f = Zt({
            inputs: { x: o },
            backend: e,
            attrs: {
                shape: [p.batchSize, p.outerSize, p.dimSize, p.sliceSize],
            },
        }),
        m = Zt({
            inputs: { x: r },
            backend: e,
            attrs: { shape: [p.batchSize, h / p.batchSize] },
        }),
        g = [p.batchSize, p.outerSize, h / p.batchSize, p.sliceSize],
        b = e.bufferSync(m),
        x = e.bufferSync(f),
        w = ew(x, b, g);
    return (
        e.disposeIntermediateTensorInfo(f),
        e.disposeIntermediateTensorInfo(m),
        e.makeTensorInfo(p.outputShape, w.dtype, w.values)
    );
}
const LF = {
    kernelName: hc,
    backendName: "cpu",
    kernelFunc: EF,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MF(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        o = X(s.shape),
        r = s.shape[s.shape.length - 1],
        i = o / r,
        a = Zt({
            inputs: { x: s },
            backend: e,
            attrs: { shape: [i, r] },
        }),
        l = Zw(a, !0, e),
        c = Zt({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
    return (
        e.disposeIntermediateTensorInfo(a),
        e.disposeIntermediateTensorInfo(l),
        c
    );
}
const WF = {
    kernelName: Ch,
    backendName: "cpu",
    kernelFunc: MF,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DF = Wt(Zi, (n) => (Number.isFinite(n) ? 1 : 0), "bool"),
    FF = {
        kernelName: Zi,
        backendName: "cpu",
        kernelFunc: DF,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VF = Wt(Bi, (n) => (Math.abs(n) === 1 / 0 ? 1 : 0), "bool"),
    zF = {
        kernelName: Bi,
        backendName: "cpu",
        kernelFunc: VF,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PF = Wt(Hi, (n) => (Number.isNaN(n) ? 1 : 0), "bool"),
    AF = {
        kernelName: Hi,
        backendName: "cpu",
        kernelFunc: PF,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OF(n) {
    const { backend: t, attrs: e } = n,
        { start: s, stop: o, num: r } = e,
        i = iw(s, o, r);
    return t.makeTensorInfo([i.length], "float32", i);
}
const XF = {
    kernelName: hb,
    backendName: "cpu",
    kernelFunc: OF,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KF = Wt(Ui, (n) => Math.log1p(n)),
    ZF = {
        kernelName: Ui,
        backendName: "cpu",
        kernelFunc: KF,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BF = le((n, t) => n && t),
    HF = fe(bc, BF, null, "bool"),
    _F = {
        kernelName: bc,
        backendName: "cpu",
        kernelFunc: HF,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UF = Wt(xc, (n) => (n ? 0 : 1), "bool"),
    YF = {
        kernelName: xc,
        backendName: "cpu",
        kernelFunc: UF,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QF = le((n, t) => n || t),
    JF = fe(yc, QF, null, "bool"),
    jF = {
        kernelName: yc,
        backendName: "cpu",
        kernelFunc: JF,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qF(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { depthRadius: r, bias: i, alpha: a, beta: l } = s;
    lt(o, "LRN");
    const c = o.shape[3],
        u = c - 1,
        d = e.data.get(o.dataId).values,
        h = X(o.shape),
        p = new Float32Array(h);
    function f(m) {
        const g = m % c;
        let b = m - g + Math.max(0, g - r);
        const x = m - g + Math.min(g + r, u);
        let w = 0;
        for (; b <= x; b++) {
            const y = d[b];
            w += y * y;
        }
        return w;
    }
    for (let m = 0; m < h; m++) {
        const g = f(m),
            b = d[m] * Math.pow(i + a * g, -l);
        p[m] = b;
    }
    return e.makeTensorInfo(o.shape, o.dtype, p);
}
const tV = {
    kernelName: wc,
    backendName: "cpu",
    kernelFunc: qF,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, y: r, dy: i } = t,
        { depthRadius: a, bias: l, alpha: c, beta: u } = s;
    lt(i, "LRNGrad");
    const d = X(i.shape),
        h = i.shape[3],
        p = e.data.get(i.dataId).values,
        f = e.data.get(o.dataId).values,
        m = e.data.get(r.dataId).values,
        g = new Float32Array(d),
        b = d;
    for (let x = 0; x < b; x++) {
        const w = x % h,
            y = x - w + Math.max(0, w - a),
            I = x - w + Math.min(h, w + a + 1);
        let v = 0;
        for (let k = y; k < I; k++) v += Math.pow(f[k], 2);
        v = c * v + l;
        for (let k = y; k < I; k++) {
            let S = (-2 * c * u * f[k] * m[x]) / v;
            x === k && (S += Math.pow(v, -u)), (S *= p[x]), (g[k] += S);
        }
    }
    return e.makeTensorInfo(i.shape, o.dtype, g);
}
const nV = {
    kernelName: Sh,
    backendName: "cpu",
    kernelFunc: eV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bw(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { reductionIndices: r, keepDims: i } = s,
        a = e;
    let l = o.shape;
    const c = l.length,
        u = Ct(r, l);
    let d = u;
    const h = qt(d, c);
    let p = a.data.get(o.dataId).values;
    if (h != null) {
        const y = new Array(c);
        for (let I = 0; I < y.length; I++) y[I] = l[h[I]];
        (p = Xf(p, l, o.dtype, h, y)), (d = ie(d.length, c)), (l = y);
    }
    lt(o, "max"), Ne("max", d, c);
    const [f, m] = ye(l, d),
        g = X(m),
        b = lw(p, g, f, o.dtype),
        x = a.write(b, f, o.dtype);
    let w = f;
    return i && (w = re(f, u)), { dataId: x, shape: w, dtype: o.dtype };
}
const sV = {
    kernelName: Ic,
    backendName: "cpu",
    kernelFunc: Bw,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t;
    lt(o, "maxPool");
    const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s,
        c = 1;
    C(
        Le(i, c),
        () =>
            `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`
    );
    const u = $n(o.shape, r, i, c, a, l);
    let d;
    if (
        u.filterWidth === 1 &&
        u.filterHeight === 1 &&
        $t(u.inShape, u.outShape)
    )
        d = rs({ inputs: { x: o }, backend: e });
    else {
        const h = e.data.get(o.dataId).values,
            p = dt(o.shape),
            f = Bf(h, o.shape, o.dtype, p, u, "max");
        d = e.makeTensorInfo(u.outShape, o.dtype, f.values);
    }
    return d;
}
const rV = {
    kernelName: Cc,
    backendName: "cpu",
    kernelFunc: oV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        {
            filterSize: r,
            strides: i,
            pad: a,
            dimRoundingMode: l,
            dataFormat: c,
        } = s;
    lt(o, "maxPool3d");
    const u = vs(o.shape, r, i, 1, a, l, c),
        d = e.data.get(o.dataId).values,
        h = Ow(d, o.shape, o.dtype, dt(o.shape), u, "max");
    return e.makeTensorInfo(h.shape, "float32", h.values);
}
const aV = {
    kernelName: vc,
    backendName: "cpu",
    kernelFunc: iV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, input: r } = t,
        { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
    lt([o, r], "maxPool3DGrad");
    const u = vs(r.shape, i, a, 1, l, c),
        d = e.bufferSync(r),
        h = QW(d, u),
        p = u.strideDepth,
        f = u.strideHeight,
        m = u.strideWidth,
        g = u.dilationDepth,
        b = u.dilationHeight,
        x = u.dilationWidth,
        w = u.effectiveFilterDepth,
        y = u.effectiveFilterHeight,
        I = u.effectiveFilterWidth,
        v = w - 1 - u.padInfo.front,
        k = I - 1 - u.padInfo.left,
        S = y - 1 - u.padInfo.top,
        N = vt(r.shape, "float32"),
        R = e.bufferSync(o);
    for (let M = 0; M < u.batchSize; ++M)
        for (let V = 0; V < u.inChannels; ++V)
            for (let z = 0; z < u.inDepth; ++z)
                for (let P = 0; P < u.inHeight; ++P)
                    for (let A = 0; A < u.inWidth; ++A) {
                        const O = z - v,
                            B = P - S,
                            Z = A - k;
                        let H = 0;
                        for (let Y = 0; Y < w; Y += g) {
                            const Q = (O + Y) / p;
                            if (
                                !(
                                    Q < 0 ||
                                    Q >= u.outDepth ||
                                    Math.floor(Q) !== Q
                                )
                            )
                                for (let j = 0; j < y; j += b) {
                                    const J = (B + j) / f;
                                    if (
                                        !(
                                            J < 0 ||
                                            J >= u.outHeight ||
                                            Math.floor(J) !== J
                                        )
                                    )
                                        for (let ot = 0; ot < I; ot += x) {
                                            const q = (Z + ot) / m;
                                            if (
                                                q < 0 ||
                                                q >= u.outWidth ||
                                                Math.floor(q) !== q
                                            )
                                                continue;
                                            const rt =
                                                    w * y * I -
                                                    1 -
                                                    h.get(M, Q, J, q, V),
                                                ht = Y * y * I + j * I + ot,
                                                ft = rt === ht ? 1 : 0;
                                            if (ft === 0) continue;
                                            const pt = R.get(M, Q, J, q, V);
                                            H += pt * ft;
                                        }
                                }
                        }
                        N.set(H, M, z, P, A, V);
                    }
    return e.makeTensorInfo(N.shape, N.dtype, N.values);
}
const cV = {
    kernelName: Th,
    backendName: "cpu",
    kernelFunc: lV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, input: r, output: i } = t,
        a = r;
    lt([r, i], "maxPoolGrad");
    const { filterSize: l, strides: c, pad: u, dimRoundingMode: d } = s,
        h = $n(a.shape, l, c, 1, u, d),
        p = e.data.get(a.dataId).values,
        f = vt(h.outShape, a.dtype, Aw(p, a.shape, a.dtype, h).values),
        m = h.strideHeight,
        g = h.strideWidth,
        b = h.dilationHeight,
        x = h.dilationWidth,
        w = h.effectiveFilterHeight,
        y = h.effectiveFilterWidth,
        I = y - 1 - h.padInfo.left,
        v = w - 1 - h.padInfo.top,
        k = vt(a.shape, "float32"),
        S = e.data.get(o.dataId).values,
        N = vt(o.shape, "float32", S);
    for (let R = 0; R < h.batchSize; ++R)
        for (let M = 0; M < h.inChannels; ++M)
            for (let V = 0; V < h.inHeight; ++V)
                for (let z = 0; z < h.inWidth; ++z) {
                    const P = V - v,
                        A = z - I;
                    let O = 0;
                    for (let B = 0; B < w; B += b) {
                        const Z = (P + B) / m;
                        if (!(Z < 0 || Z >= h.outHeight || Math.floor(Z) !== Z))
                            for (let H = 0; H < y; H += x) {
                                const Y = (A + H) / g;
                                if (
                                    Y < 0 ||
                                    Y >= h.outWidth ||
                                    Math.floor(Y) !== Y
                                )
                                    continue;
                                const Q = w * y - 1 - f.get(R, Z, Y, M),
                                    j = B * y + H,
                                    J = Q === j ? 1 : 0;
                                if (J === 0) continue;
                                const ot = N.get(R, Z, Y, M);
                                O += ot * J;
                            }
                    }
                    k.set(O, R, V, z, M);
                }
    return e.makeTensorInfo(k.shape, k.dtype, k.values);
}
const dV = {
    kernelName: kh,
    backendName: "cpu",
    kernelFunc: uV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hV(n, t, e, s, o) {
    const r = dt(t),
        i = Bf(n, t, e, r, o, "max"),
        a = Aw(n, t, e, o, !0, s);
    return [i.values, a.values];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pV = {
    kernelName: pb,
    backendName: "cpu",
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { x: s } = n,
            { filterSize: o, strides: r, pad: i, includeBatchInIndex: a } = t,
            l = e;
        lt(s, "MaxPoolWithArgmax");
        const c = l.data.get(s.dataId).values,
            u = $n(s.shape, o, r, [1, 1], i),
            [d, h] = hV(c, s.shape, s.dtype, a, u),
            p = l.write(d, u.outShape, s.dtype),
            f = l.write(h, u.outShape, s.dtype);
        return [
            { dataId: p, shape: u.outShape, dtype: s.dtype },
            { dataId: f, shape: u.outShape, dtype: "int32" },
        ];
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s,
        a = Ct(r, o.shape),
        c = ye(o.shape, a)[1],
        u = X(c),
        d = [],
        h = e.makeTensorInfo([], "float32", new Float32Array([u]));
    d.push(h);
    const p = Ys({ inputs: { x: o }, backend: e, attrs: { dtype: "float32" } });
    d.push(p);
    const f = Hf({ inputs: { a: p, b: h }, backend: e });
    d.push(f);
    const m = za({
        inputs: { x: f },
        backend: e,
        attrs: { axis: r, keepDims: i },
    });
    return d.forEach((g) => e.disposeIntermediateTensorInfo(g)), m;
}
const mV = {
    kernelName: Sc,
    backendName: "cpu",
    kernelFunc: fV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s;
    lt(o, "min");
    const a = Ct(r, o.shape);
    let l = a;
    const c = qt(l, o.shape.length);
    let u = o;
    c != null &&
        ((u = _e({ inputs: { x: o }, backend: e, attrs: { perm: c } })),
        (l = ie(l.length, o.shape.length))),
        Ne("min", l, u.shape.length);
    const [d, h] = ye(u.shape, l),
        p = X(h),
        f = ke(X(d), u.dtype),
        m = e.data.get(u.dataId).values;
    for (let b = 0; b < f.length; ++b) {
        const x = b * p;
        let w = m[x];
        for (let y = 0; y < p; ++y) {
            const I = m[x + y];
            (Number.isNaN(I) || I < w) && (w = I);
        }
        f[b] = w;
    }
    c != null && e.disposeIntermediateTensorInfo(u);
    const g = e.makeTensorInfo(d, u.dtype, f);
    if (i) {
        const b = re(d, a),
            x = Zt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
        return e.disposeIntermediateTensorInfo(g), x;
    }
    return g;
}
const bV = {
    kernelName: kc,
    backendName: "cpu",
    kernelFunc: gV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { paddings: r, mode: i } = s;
    lt(o, "mirrorPad");
    const a = r.map(
            (w, y) => w[0] + o.shape[y] + w[1]
            /* afterPad */
        ),
        l = r.map((w) => w[0]),
        c = r.map((w, y) => w[0] + o.shape[y]),
        u = i === "reflect" ? 0 : 1,
        d = e.data.get(o.dataId).values,
        h = o.shape.length,
        p = dt(o.shape),
        f = X(a),
        m = a.length,
        g = dt(a),
        b = Se(o.dtype, f);
    for (let w = 0; w < f; w++) {
        let y = Xo(w, m, g);
        for (let v = 0; v < m; v++)
            y[v] < l[v]
                ? (y[v] = l[v] * 2 - y[v] - u)
                : y[v] >= c[v] && (y[v] = (c[v] - 1) * 2 - y[v] + u);
        y = y.map((v, k) => v - l[k]);
        const I = zn(y, h, p);
        b[w] = d[I];
    }
    return { dataId: e.write(b, a, o.dtype), shape: a, dtype: o.dtype };
}
const yV = {
    kernelName: Tc,
    backendName: "cpu",
    kernelFunc: xV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wV = le((n, t) => {
        const e = n % t;
        return (n < 0 && t < 0) || (n >= 0 && t >= 0) ? e : (e + t) % t;
    }),
    IV = fe(Ji, wV),
    CV = {
        kernelName: Ji,
        backendName: "cpu",
        kernelFunc: IV,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Hw(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { logits: o } = t,
        { dim: r } = s,
        i = o.shape.length;
    let a = r;
    if ((a === -1 && (a = i - 1), a !== i - 1))
        throw Error(
            `Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`
        );
    const l = Ct([a], o.shape),
        c = Bw({
            inputs: { x: o },
            backend: e,
            attrs: { reductionIndices: l, keepDims: !1 },
        }),
        u = re(c.shape, l),
        d = Zt({ inputs: { x: c }, backend: e, attrs: { shape: u } }),
        h = Zf({ inputs: { a: o, b: d }, backend: e }),
        p = Q1({ inputs: { x: h }, backend: e }),
        f = za({
            inputs: { x: p },
            backend: e,
            attrs: { axis: l, keepDims: !1 },
        }),
        m = Zt({ inputs: { x: f }, backend: e, attrs: { shape: u } }),
        g = Hf({ inputs: { a: p, b: m }, backend: e });
    return (
        e.disposeIntermediateTensorInfo(c),
        e.disposeIntermediateTensorInfo(d),
        e.disposeIntermediateTensorInfo(h),
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(f),
        e.disposeIntermediateTensorInfo(m),
        g
    );
}
const vV = {
    kernelName: Zc,
    backendName: "cpu",
    kernelFunc: Hw,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { logits: o } = t,
        { numSamples: r, seed: i, normalized: a } = s;
    lt(o, "multinomial");
    const l = a
            ? o
            : Hw({ inputs: { logits: o }, backend: e, attrs: { dim: -1 } }),
        c = l.shape[0],
        u = l.shape[1],
        d = e.data.get(l.dataId).values,
        h = [c, r],
        p = ke(X(h), "int32");
    for (let f = 0; f < c; ++f) {
        const m = f * u,
            g = new Float32Array(u - 1);
        g[0] = d[m];
        for (let w = 1; w < g.length; ++w) g[w] = g[w - 1] + d[m + w];
        const b = Nr.alea(i.toString()),
            x = f * r;
        for (let w = 0; w < r; ++w) {
            const y = b();
            p[x + w] = g.length;
            for (let I = 0; I < g.length; I++)
                if (y < g[I]) {
                    p[x + w] = I;
                    break;
                }
        }
    }
    return (
        a || e.disposeIntermediateTensorInfo(l), e.makeTensorInfo(h, "int32", p)
    );
}
const kV = {
    kernelName: fb,
    backendName: "cpu",
    kernelFunc: SV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TV = zp;
function NV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: o, scores: r } = t,
        { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s;
    lt(o, "NonMaxSuppression");
    const c = e.data.get(o.dataId).values,
        u = e.data.get(r.dataId).values,
        { selectedIndices: d } = TV(c, u, i, a, l);
    return e.makeTensorInfo([d.length], "int32", new Int32Array(d));
}
const RV = {
    kernelName: Nh,
    backendName: "cpu",
    kernelFunc: NV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $V = Pp;
function GV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: o, scores: r } = t,
        {
            maxOutputSize: i,
            iouThreshold: a,
            scoreThreshold: l,
            padToMaxOutputSize: c,
        } = s;
    lt(o, "NonMaxSuppressionPadded");
    const u = e.data.get(o.dataId).values,
        d = e.data.get(r.dataId).values,
        { selectedIndices: h, validOutputs: p } = $V(u, d, i, a, l, c);
    return [
        e.makeTensorInfo([h.length], "int32", new Int32Array(h)),
        e.makeTensorInfo([], "int32", new Int32Array([p])),
    ];
}
const EV = {
    kernelName: Rh,
    backendName: "cpu",
    kernelFunc: GV,
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LV = Ap;
function MV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: o, scores: r } = t,
        {
            maxOutputSize: i,
            iouThreshold: a,
            scoreThreshold: l,
            softNmsSigma: c,
        } = s;
    lt(o, "NonMaxSuppressionWithScore");
    const u = e.data.get(o.dataId).values,
        d = e.data.get(r.dataId).values,
        h = i,
        p = a,
        f = l,
        m = c,
        { selectedIndices: g, selectedScores: b } = LV(u, d, h, p, f, m);
    return [
        e.makeTensorInfo([g.length], "int32", new Int32Array(g)),
        e.makeTensorInfo([b.length], "float32", new Float32Array(b)),
    ];
}
const WV = {
    kernelName: $h,
    backendName: "cpu",
    kernelFunc: MV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { indices: o } = t,
        { dtype: r, depth: i, onValue: a, offValue: l } = s;
    lt(o, "oneHot");
    const c = X(o.shape),
        u = new Float32Array(c * i);
    u.fill(l);
    const d = e.data.get(o.dataId).values;
    for (let h = 0; h < c; ++h) d[h] >= 0 && d[h] < i && (u[h * i + d[h]] = a);
    return e.makeTensorInfo([...o.shape, i], r, u);
}
const FV = {
    kernelName: Gc,
    backendName: "cpu",
    kernelFunc: DV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Al(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (s.dtype === "string")
        throw new Error("zerosLike is not supported for string tensors");
    if (s.dtype === "complex64") {
        const o = Do({ inputs: { input: s }, backend: e }),
            r = Al({ inputs: { x: o }, backend: e }),
            i = Ir({ inputs: { input: s }, backend: e }),
            a = Al({ inputs: { x: i }, backend: e }),
            l = Je({ inputs: { real: r, imag: a }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(o),
            e.disposeIntermediateTensorInfo(r),
            e.disposeIntermediateTensorInfo(i),
            e.disposeIntermediateTensorInfo(a),
            l
        );
    } else
        return _f({
            backend: e,
            attrs: { shape: s.shape, value: 0, dtype: s.dtype },
        });
}
const VV = {
    kernelName: Uc,
    backendName: "cpu",
    kernelFunc: Al,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _w(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (s.dtype === "string")
        throw new Error("onesLike is not supported for string tensors");
    if (s.dtype === "complex64") {
        const o = Do({ inputs: { input: s }, backend: e }),
            r = _w({ inputs: { x: o }, backend: e }),
            i = Ir({ inputs: { input: s }, backend: e }),
            a = Al({ inputs: { x: i }, backend: e }),
            l = Je({ inputs: { real: r, imag: a }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(o),
            e.disposeIntermediateTensorInfo(r),
            e.disposeIntermediateTensorInfo(i),
            e.disposeIntermediateTensorInfo(a),
            l
        );
    } else
        return _f({
            backend: e,
            attrs: { shape: s.shape, value: 1, dtype: s.dtype },
        });
}
const zV = {
    kernelName: $c,
    backendName: "cpu",
    kernelFunc: _w,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Uw(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { axis: o } = s;
    if (t.length === 1)
        return Pl({ inputs: { input: t[0] }, backend: e, attrs: { dim: o } });
    const r = t[0].shape,
        i = t[0].dtype;
    t.forEach((u) => {
        Pe(r, u.shape, "All tensors passed to stack must have matching shapes"),
            C(
                i === u.dtype,
                () => "All tensors passed to stack must have matching dtypes"
            );
    });
    const a = [],
        l = t.map((u) => {
            const d = Pl({
                inputs: { input: u },
                backend: e,
                attrs: { dim: o },
            });
            return a.push(d), d;
        }),
        c = Cr({ inputs: l, backend: e, attrs: { axis: o } });
    return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const PV = {
    kernelName: Ec,
    backendName: "cpu",
    kernelFunc: Uw,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { paddings: r, constantValue: i } = s;
    lt(o, "pad");
    const a = r.map(
            (x, w) => x[0] + o.shape[w] + x[1]
            /* afterPad */
        ),
        l = r.map((x) => x[0]),
        c = e.data.get(o.dataId).values,
        u = X(o.shape),
        d = o.shape.length,
        h = dt(o.shape),
        p = X(a),
        f = a.length,
        m = dt(a),
        g = Se(o.dtype, p);
    i !== 0 && g.fill(i);
    for (let x = 0; x < u; x++) {
        const y = Xo(x, d, h).map((v, k) => v + l[k]),
            I = zn(y, f, m);
        g[I] = c[x];
    }
    return { dataId: e.write(g, a, o.dtype), shape: a, dtype: o.dtype };
}
const Yw = {
    kernelName: Lc,
    backendName: "cpu",
    kernelFunc: AV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OV = le((n, t) => Math.pow(n, t)),
    XV = fe(qi, OV),
    KV = {
        kernelName: qi,
        backendName: "cpu",
        kernelFunc: XV,
    };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { paramsNestedSplits: o, paramsDenseValues: r, indices: i } = t,
        a = o.map((g) => e.data.get(g.dataId).values),
        l = o.map((g) => g.shape),
        c = e.data.get(r.dataId).values,
        u = e.data.get(i.dataId).values,
        [d, h, p] = fw(a, l, c, r.shape, r.dtype, u, i.shape),
        f = d.map((g) => e.makeTensorInfo([g.length], "int32", g)),
        m = e.makeTensorInfo(p, r.dtype, h);
    return f.concat([m]);
}
const BV = {
    kernelName: mb,
    backendName: "cpu",
    kernelFunc: ZV,
};
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HV(n) {
    const { inputs: t, backend: e } = n,
        { starts: s, limits: o, deltas: r } = t,
        i = e.data.get(s.dataId).values,
        a = e.data.get(o.dataId).values,
        l = e.data.get(r.dataId).values,
        [c, u] = mw(i, s.shape, s.dtype, a, o.shape, l, r.shape),
        d = e.makeTensorInfo([c.length], "int32", c),
        h = e.makeTensorInfo([u.length], s.dtype, u);
    return [d, h];
}
const _V = {
    kernelName: gb,
    backendName: "cpu",
    kernelFunc: HV,
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { shape: o, values: r, defaultValue: i, rowPartitionTensors: a } = t,
        { rowPartitionTypes: l } = s,
        c = e.data.get(o.dataId).values,
        u = e.data.get(r.dataId).values,
        d = e.data.get(i.dataId).values,
        h = a.map((g) => e.data.get(g.dataId).values),
        p = a.map((g) => g.shape),
        [f, m] = gw(c, o.shape, u, r.shape, r.dtype, d, i.shape, h, p, l);
    return e.makeTensorInfo(f, r.dtype, m);
}
const YV = {
    kernelName: bb,
    backendName: "cpu",
    kernelFunc: UV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QV(n) {
    const { backend: t, attrs: e } = n,
        { start: s, stop: o, dtype: r, step: i } = e,
        a = bw(s, o, i, r);
    return t.makeTensorInfo([a.length], r, a);
}
const JV = {
    kernelName: Gh,
    backendName: "cpu",
    kernelFunc: QV,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jV = Wt(ta, (n) => 1 / n),
    qV = {
        kernelName: ta,
        backendName: "cpu",
        kernelFunc: jV,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: o } = t,
        { alignCorners: r, halfPixelCenters: i, size: a } = s;
    lt(o, "resizeBilinear");
    const l = dt(o.shape),
        [c, u] = a,
        [d, h, p, f] = o.shape,
        m = e.data.get(o.dataId).values,
        g = new Float32Array(X([d, c, u, f])),
        b = [r && c > 1 ? h - 1 : h, r && u > 1 ? p - 1 : p],
        x = [r && c > 1 ? c - 1 : c, r && u > 1 ? u - 1 : u];
    let w = 0;
    const y = b[0] / x[0],
        I = b[1] / x[1];
    for (let v = 0; v < d; v++)
        for (let k = 0; k < c; k++) {
            let S;
            i ? (S = y * (k + 0.5) - 0.5) : (S = y * k);
            const N = Math.max(0, Math.floor(S)),
                R = S - N,
                M = Math.min(h - 1, Math.ceil(S)),
                V = v * l[0] + N * l[1],
                z = v * l[0] + M * l[1];
            for (let P = 0; P < u; P++) {
                let A;
                i ? (A = I * (P + 0.5) - 0.5) : (A = I * P);
                const O = Math.max(0, Math.floor(A)),
                    B = A - O,
                    Z = Math.min(p - 1, Math.ceil(A)),
                    H = V + O * l[2],
                    Y = z + O * l[2],
                    Q = V + Z * l[2],
                    j = z + Z * l[2];
                for (let J = 0; J < f; J++) {
                    const ot = m[H + J],
                        q = m[Y + J],
                        rt = m[Q + J],
                        ht = m[j + J],
                        ft = ot + (rt - ot) * B,
                        pt = q + (ht - q) * B,
                        wt = ft + (pt - ft) * R;
                    g[w++] = wt;
                }
            }
        }
    return e.makeTensorInfo([d, c, u, f], "float32", g);
}
const ez = {
    kernelName: Vc,
    backendName: "cpu",
    kernelFunc: tz,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: o, dy: r } = t,
        { alignCorners: i } = s;
    lt([r, o], "resizeBilinearGrad");
    const a = dt(o.shape),
        [l, c, u, d] = o.shape,
        [, h, p] = r.shape,
        f = new Float32Array(l * c * u * d),
        m = [i && h > 1 ? c - 1 : c, i && p > 1 ? u - 1 : u],
        g = [i && h > 1 ? h - 1 : h, i && p > 1 ? p - 1 : p],
        b = m[0] / g[0],
        x = m[1] / g[1],
        w = e.data.get(r.dataId).values;
    let y = 0;
    for (let I = 0; I < l; I++) {
        const v = I * a[0];
        for (let k = 0; k < h; k++) {
            const S = k * b,
                N = Math.floor(S),
                R = Math.min(Math.ceil(S), c - 1),
                M = v + N * a[1],
                V = v + R * a[1],
                z = S - N,
                P = 1 - z;
            for (let A = 0; A < p; A++) {
                const O = A * x,
                    B = Math.floor(O),
                    Z = Math.min(Math.ceil(O), u - 1),
                    H = O - B,
                    Y = 1 - H,
                    Q = M + B * a[2],
                    j = M + Z * a[2],
                    J = V + B * a[2],
                    ot = V + Z * a[2],
                    q = P * Y,
                    rt = P * H,
                    ht = z * Y,
                    ft = z * H;
                for (let pt = 0; pt < d; pt++) {
                    const wt = w[y++];
                    (f[Q + pt] += wt * q),
                        (f[j + pt] += wt * rt),
                        (f[J + pt] += wt * ht),
                        (f[ot + pt] += wt * ft);
                }
            }
        }
    }
    return e.makeTensorInfo([l, u, c, d], "float32", f);
}
const sz = {
    kernelName: Mh,
    backendName: "cpu",
    kernelFunc: nz,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: o } = t,
        { alignCorners: r, halfPixelCenters: i, size: a } = s;
    lt(o, "resizeNearestNeighbor");
    const l = dt(o.shape),
        [c, u] = a,
        [d, h, p, f] = o.shape,
        m = e.data.get(o.dataId).values,
        g = new Float32Array(d * c * u * f),
        b = [r && c > 1 ? h - 1 : h, r && u > 1 ? p - 1 : p],
        x = [r && c > 1 ? c - 1 : c, r && u > 1 ? u - 1 : u],
        w = b[0] / x[0],
        y = b[1] / x[1];
    let I = 0;
    for (let v = 0; v < d; v++) {
        const k = v * l[0];
        for (let S = 0; S < c; S++) {
            const N = i ? w * (S + 0.5) : w * S;
            let R = Math.min(h - 1, r ? Math.round(N) : Math.floor(N));
            i && (R = Math.max(0, R));
            const M = k + R * l[1];
            for (let V = 0; V < u; V++) {
                const z = i ? y * (V + 0.5) : y * V;
                let P = Math.min(p - 1, r ? Math.round(z) : Math.floor(z));
                i && (P = Math.max(0, P));
                const A = M + P * l[2];
                for (let O = 0; O < f; O++) {
                    const B = m[A + O];
                    g[I++] = B;
                }
            }
        }
    }
    return e.makeTensorInfo([d, c, u, f], o.dtype, g);
}
const rz = {
    kernelName: Fc,
    backendName: "cpu",
    kernelFunc: oz,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: o, dy: r } = t,
        { alignCorners: i } = s;
    lt([r, o], "resizeNearestNeighborGrad");
    const a = dt(o.shape),
        l = dt(r.shape),
        [c, u, d, h] = o.shape,
        [, p, f] = r.shape,
        m = new Float32Array(c * u * d * h),
        g = e.data.get(r.dataId).values,
        b = [i && p > 1 ? u - 1 : u, i && f > 1 ? d - 1 : d],
        x = [i && p > 1 ? p - 1 : p, i && f > 1 ? f - 1 : f],
        w = b[0] / x[0],
        y = b[1] / x[1],
        I = 1 / w,
        v = 1 / y,
        k = Math.ceil(I) * 2 + 2,
        S = Math.ceil(v) * 2 + 2;
    for (let N = 0; N < c; N++) {
        const R = N * a[0];
        for (let M = 0; M < u; M++) {
            const V = R + M * a[1],
                z = Math.floor(M * I),
                P = Math.floor(z - k / 2);
            for (let A = 0; A < d; A++) {
                const O = V + A * a[2],
                    B = Math.floor(A * v),
                    Z = Math.floor(B - S / 2);
                for (let H = 0; H < h; H++) {
                    let Y = 0;
                    for (let Q = 0; Q < k; Q++) {
                        const j = Q + P;
                        if (j < 0 || j >= p) continue;
                        const J = R + j * l[1],
                            ot = j * w,
                            q = Math.min(
                                u - 1,
                                i ? Math.round(ot) : Math.floor(ot)
                            );
                        if (M === q)
                            for (let rt = 0; rt < S; rt++) {
                                const ht = rt + Z;
                                if (ht < 0 || ht >= f) continue;
                                const ft = J + ht * l[2],
                                    pt = ht * y,
                                    wt = Math.min(
                                        d - 1,
                                        i ? Math.round(pt) : Math.floor(pt)
                                    );
                                A === wt && (Y += g[ft + H]);
                            }
                    }
                    m[O + H] = Y;
                }
            }
        }
    }
    return e.makeTensorInfo(o.shape, o.dtype, m);
}
const az = {
    kernelName: Lh,
    backendName: "cpu",
    kernelFunc: iz,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { dims: r } = s;
    lt(o, "reverse");
    const i = o.shape.length,
        a = Ct(r, o.shape);
    if (i === 0) return rs({ inputs: { x: o }, backend: e });
    const l = new ve(o.shape, o.dtype),
        c = e.bufferSync(o);
    for (let u = 0; u < l.size; u++) {
        const d = l.indexToLoc(u),
            h = d.slice();
        a.forEach((p) => (h[p] = o.shape[p] - 1 - h[p])),
            l.set(c.get(...h), ...d);
    }
    return e.makeTensorInfo(l.shape, l.dtype, l.values);
}
const cz = {
    kernelName: zc,
    backendName: "cpu",
    kernelFunc: lz,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uz = {
    kernelName: Hh,
    backendName: "cpu",
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { image: s } = n,
            { radians: o, fillValue: r, center: i } = t,
            a = e,
            l = Se(s.dtype, X(s.shape)),
            [c, u, d, h] = s.shape,
            [p, f] = Jp(i, u, d),
            m = 255,
            g = Math.sin(o),
            b = Math.cos(o),
            x = a.data.get(s.dataId).values;
        for (let y = 0; y < c; y++) {
            const I = y * d * u * h;
            for (let v = 0; v < u; v++) {
                const k = v * (d * h);
                for (let S = 0; S < d; S++) {
                    const N = S * h;
                    for (let R = 0; R < h; R++) {
                        const M = [c, v, S, R],
                            V = M[2],
                            z = M[1];
                        let P = (V - p) * b - (z - f) * g,
                            A = (V - p) * g + (z - f) * b;
                        (P = Math.round(P + p)), (A = Math.round(A + f));
                        let O = r;
                        if (
                            (typeof r != "number" &&
                                (R === 3 ? (O = m) : (O = r[R])),
                            P >= 0 && P < d && A >= 0 && A < u)
                        ) {
                            const Z = A * (d * h),
                                H = P * h,
                                Y = I + Z + H + R;
                            O = x[Y];
                        }
                        const B = I + k + N + R;
                        l[B] = O;
                    }
                }
            }
        }
        return {
            dataId: a.write(l, s.shape, s.dtype),
            shape: s.shape,
            dtype: s.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dz = Wt(sa, (n) => {
        const t = Math.floor(n);
        return n - t < 0.5
            ? Math.floor(n)
            : n - t > 0.5
            ? Math.ceil(n)
            : t % 2 === 0
            ? t
            : t + 1;
    }),
    hz = {
        kernelName: sa,
        backendName: "cpu",
        kernelFunc: dz,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { indices: o, updates: r } = t,
        { shape: i } = s,
        {
            sliceRank: a,
            numUpdates: l,
            sliceSize: c,
            strides: u,
            outputSize: d,
        } = to(r, o, i),
        h = !0,
        p = e.bufferSync(o),
        f = e.bufferSync(r),
        m = bo(p, f, i, d, c, l, a, u, 0, h);
    return e.makeTensorInfo(i, m.dtype, m.values);
}
const fz = {
    kernelName: xb,
    backendName: "cpu",
    kernelFunc: pz,
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mz(n, t) {
    let e = 0,
        s = n.length,
        o = 0;
    for (; e < s; )
        (o = Math.floor((e + s) / 2)), n[o] < t ? (e = o + 1) : (s = o);
    return s;
}
function gz(n, t) {
    let e = 0,
        s = n.length,
        o = 0;
    for (; e < s; )
        (o = Math.floor((e + s) / 2)), n[o] <= t ? (e = o + 1) : (s = o);
    return s;
}
function bz(n, t, e, s, o, r) {
    const i = ne("int32", e * o);
    for (let a = 0; a < e; ++a) {
        const l = n.slice(a * s, (a + 1) * s),
            c = a * o;
        for (let u = 0; u < o; ++u)
            i[c + u] = r === "left" ? mz(l, t[u + c]) : gz(l, t[u + c]);
    }
    return i;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { sortedSequence: o, values: r } = t,
        { side: i } = s,
        a = e.data.get(o.dataId).values,
        l = e.data.get(r.dataId).values,
        c = bz(a, l, o.shape[0], o.shape[1], r.shape[1], i);
    return e.makeTensorInfo(r.shape, "int32", c);
}
const yz = {
    kernelName: wb,
    backendName: "cpu",
    kernelFunc: xz,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wz(n) {
    const { inputs: t, backend: e } = n,
        { condition: s, t: o, e: r } = t;
    lt([s, o, r], "select");
    const i = s.shape.length,
        a = e.data.get(s.dataId).values,
        l = e.data.get(o.dataId).values,
        c = e.data.get(r.dataId).values,
        u = tn(o.dtype, r.dtype),
        d = ke(X(o.shape), u);
    let h = 0;
    const p =
        i === 0 || i > 1 || o.shape.length === 1 ? 1 : X(o.shape.slice(1));
    for (let f = 0; f < a.length; f++)
        for (let m = 0; m < p; m++)
            a[f] === 1 ? (d[h++] = l[f]) : (d[h++] = c[f]);
    return e.makeTensorInfo(o.shape, u, d);
}
const Iz = {
    kernelName: Pc,
    backendName: "cpu",
    kernelFunc: wz,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Cz = ru,
    vz = iu,
    Sz = Wt(ra, (n) => (n >= 0 ? vz * n : Cz * (Math.exp(n) - 1))),
    kz = {
        kernelName: ra,
        backendName: "cpu",
        kernelFunc: Sz,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Tz = Wt(la, (n) => (n < 0 ? -1 : n > 0 ? 1 : 0)),
    Nz = {
        kernelName: la,
        backendName: "cpu",
        kernelFunc: Tz,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rz = Wt(ia, (n) => Math.sin(n)),
    $z = {
        kernelName: ia,
        backendName: "cpu",
        kernelFunc: Rz,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Gz = Wt(aa, (n) => Math.sinh(n)),
    Ez = {
        kernelName: aa,
        backendName: "cpu",
        kernelFunc: Gz,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Lz = 11920928955078125e-23,
    bg = Math.log(Lz) + 2,
    Mz = Wt(ua, (n) => {
        const t = n > -bg,
            e = n < bg,
            s = Math.exp(n);
        let o;
        return e ? (o = s) : t ? (o = n) : (o = Math.log(1 + s)), o;
    }),
    Wz = {
        kernelName: ua,
        backendName: "cpu",
        kernelFunc: Mz,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Dz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { blockShape: r, paddings: i } = s;
    lt([o], "spaceToBatchND");
    const a = X(r),
        l = [[0, 0]];
    l.push(...i);
    for (let v = 1 + r.length; v < o.shape.length; ++v) l.push([0, 0]);
    const c = Yw.kernelFunc({
            inputs: { x: o },
            backend: e,
            attrs: { paddings: l, constantValue: 0 },
        }),
        u = Na(c.shape, r, a, !1),
        d = Ra(u.length, r.length, !1),
        h = $a(c.shape, r, a, !1),
        m = Zt({ inputs: { x: c }, backend: e, attrs: { shape: u } }),
        x = _e({ inputs: { x: m }, backend: e, attrs: { perm: d } }),
        I = Zt({ inputs: { x }, backend: e, attrs: { shape: h } });
    return (
        e.disposeIntermediateTensorInfo(c),
        e.disposeIntermediateTensorInfo(m),
        e.disposeIntermediateTensorInfo(x),
        I
    );
}
const Fz = {
    kernelName: Xc,
    backendName: "cpu",
    kernelFunc: Dz,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vz(n) {
    const { inputs: t, backend: e } = n,
        { indices: s, values: o, denseShape: r, defaultValue: i } = t;
    if (r.shape.length !== 1)
        throw new Error(`Dense shape must be a vector, saw:
        ${r.shape}`);
    if (s.shape.length !== 2)
        throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);
    if (o.shape.length !== 1)
        throw new Error(`Values must be a vector, saw:
        ${o.shape}`);
    if (i.shape.length !== 0)
        throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
    const a = e.data.get(s.dataId).values,
        l = e.data.get(o.dataId).values,
        c = e.data.get(r.dataId).values,
        u = e.data.get(i.dataId).values[0],
        [d, h, p, f, m] = Iw(a, s.shape, s.dtype, l, o.dtype, c, u);
    return [
        e.makeTensorInfo(h, s.dtype, d),
        e.makeTensorInfo([h[0]], o.dtype, p),
        e.makeTensorInfo(
            [f.length],
            "bool",
            new Uint8Array(f.map((g) => Number(g)))
        ),
        e.makeTensorInfo([m.length], s.dtype, new Int32Array(m)),
    ];
}
const zz = {
    kernelName: Wh,
    backendName: "cpu",
    kernelFunc: Vz,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pz(n) {
    const { inputs: t, backend: e } = n,
        { inputIndices: s, inputShape: o, newShape: r } = t;
    if (s.shape.length !== 2)
        throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
    if (o.shape.length !== 1)
        throw new Error(`Input shape should be a vector but received shape
        ${o.shape}`);
    if (r.shape.length !== 1)
        throw new Error(
            `Target shape should be a vector but received shape ${r.shape}`
        );
    const i = Array.from(e.data.get(o.dataId).values),
        a = e.data.get(s.dataId).values,
        l = Array.from(e.data.get(r.dataId).values),
        [c, u, d] = Cw(a, s.shape, s.dtype, i, l);
    return [
        e.makeTensorInfo(u, s.dtype, c),
        e.makeTensorInfo([d.length], r.dtype, new Int32Array(d)),
    ];
}
const Az = {
    kernelName: Dh,
    backendName: "cpu",
    kernelFunc: Pz,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Oz(n) {
    const { inputs: t, backend: e } = n,
        { data: s, indices: o, segmentIds: r } = t;
    if (s.shape.length < 1)
        throw new Error(
            "Data should be at least 1 dimensional but received scalar"
        );
    if (o.shape.length !== 1)
        throw new Error(`Indices should be a vector but received shape
          ${o.shape}`);
    if (r.shape.length !== 1)
        throw new Error(`Segment ids should be a vector but received shape
          ${r.shape}`);
    if (o.shape[0] !== r.shape[0])
        throw new Error("segmentIds and indices should have same size.");
    const i = e.data.get(s.dataId).values,
        a = e.data.get(o.dataId).values,
        l = e.data.get(r.dataId).values,
        [c, u] = Kf(i, s.shape, s.dtype, a, l, !0);
    return e.makeTensorInfo(u, s.dtype, c);
}
const Xz = {
    kernelName: Fh,
    backendName: "cpu",
    kernelFunc: Oz,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kz(n) {
    const { inputs: t, backend: e } = n,
        { data: s, indices: o, segmentIds: r } = t;
    if (s.shape.length < 1)
        throw new Error(
            "Data should be at least 1 dimensional but received scalar"
        );
    if (o.shape.length !== 1)
        throw new Error(`Indices should be a vector but received shape
         ${o.shape}`);
    if (r.shape.length !== 1)
        throw new Error(`Segment ids should be a vector but received shape
         ${r.shape}`);
    if (o.shape[0] !== r.shape[0])
        throw new Error("segmentIds and indices should have same size.");
    const i = e.data.get(s.dataId).values,
        a = e.data.get(o.dataId).values,
        l = e.data.get(r.dataId).values,
        [c, u] = Kf(i, s.shape, s.dtype, a, l);
    return e.makeTensorInfo(u, s.dtype, c);
}
const Zz = {
    kernelName: Vh,
    backendName: "cpu",
    kernelFunc: Kz,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { sparseIndices: o, sparseValues: r, defaultValue: i } = t,
        { outputShape: a } = s,
        {
            sliceRank: l,
            numUpdates: c,
            sliceSize: u,
            strides: d,
            outputSize: h,
        } = to(r, o, a),
        p = !1,
        f = e.bufferSync(o);
    let m;
    switch (r.dtype) {
        case "bool": {
            const g = e.bufferSync(r),
                b = !!e.data.get(i.dataId).values[0];
            m = bo(f, g, a, h, u, c, l, d, b, p);
            break;
        }
        case "float32": {
            const g = e.bufferSync(r),
                b = e.data.get(i.dataId).values[0];
            m = bo(f, g, a, h, u, c, l, d, b, p);
            break;
        }
        case "int32": {
            const g = e.bufferSync(r),
                b = e.data.get(i.dataId).values[0];
            m = bo(f, g, a, h, u, c, l, d, b, p);
            break;
        }
        case "string": {
            const g = e.bufferSync(r),
                b = gs(e.data.get(i.dataId).values[0]);
            m = bo(f, g, a, h, u, c, l, d, b, p);
            break;
        }
        default:
            throw new Error(`Unsupported type ${r.dtype}`);
    }
    return e.makeTensorInfo(a, m.dtype, m.values);
}
const Hz = {
    kernelName: Ib,
    backendName: "cpu",
    kernelFunc: Bz,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _z(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { numOrSizeSplits: r, axis: i } = s,
        a = Ct(i, o.shape)[0],
        l = pf(o, r, a),
        c = new Array(o.shape.length).fill(0),
        u = o.shape.slice();
    return l.map((d) => {
        const h = [...u];
        h[a] = d;
        const p = Fo({
            inputs: { x: o },
            backend: e,
            attrs: { begin: c, size: h },
        });
        return (c[a] += d), p;
    });
}
const Uz = {
    kernelName: Kc,
    backendName: "cpu",
    kernelFunc: _z,
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Yz = {
    kernelName: zh,
    backendName: "cpu",
    kernelFunc: ({ inputs: n, backend: t }) => {
        const { x: e } = n,
            s = t;
        lt(e, "square");
        const o = s.data.get(e.dataId).values,
            r = new Float32Array(o.length);
        for (let a = 0; a < o.length; ++a) {
            const l = o[a];
            r[a] = l * l;
        }
        return {
            dataId: s.write(r, e.shape, e.dtype),
            shape: e.shape,
            dtype: e.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Qz = Wt(ba, (n, t) => {
        const e = t;
        return isNaN(n) ? NaN : n > 0 ? 1 : e.alpha;
    }),
    Jz = {
        kernelName: ba,
        backendName: "cpu",
        kernelFunc: Qz,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        {
            begin: r,
            end: i,
            strides: a,
            beginMask: l,
            endMask: c,
            ellipsisMask: u,
            newAxisMask: d,
            shrinkAxisMask: h,
        } = s;
    lt(o, "stridedSlice");
    const {
        finalShapeSparse: p,
        finalShape: f,
        isIdentity: m,
        sliceDim0: g,
        isSimpleSlice: b,
        begin: x,
        end: w,
        strides: y,
    } = Up(o.shape, r, i, a, l, c, u, d, h);
    let I;
    if (m) I = Zt({ inputs: { x: o }, backend: e, attrs: { shape: f } });
    else if (g || b) {
        C(
            o.shape.length >= 1,
            () => `Input must have rank at least 1, got: ${o.shape.length}`
        );
        const v = Bp(x, w, y),
            k = Fo({
                inputs: { x: o },
                backend: e,
                attrs: { begin: x, size: v },
            });
        (I = Zt({ inputs: { x: k }, backend: e, attrs: { shape: f } })),
            e.disposeIntermediateTensorInfo(k);
    } else {
        const v = e.bufferSync(o),
            k = kw(p, v, y, x);
        I = e.makeTensorInfo(f, k.dtype, k.values);
    }
    return I;
}
const qz = {
    kernelName: Ph,
    backendName: "cpu",
    kernelFunc: jz,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tP(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        {
            separator: o,
            nGramWidths: r,
            leftPad: i,
            rightPad: a,
            padWidth: l,
            preserveShortSequences: c,
        } = s,
        { data: u, dataSplits: d } = t,
        h = e.data.get(u.dataId).values,
        p = e.data.get(d.dataId).values,
        [f, m] = Tw(h, p, o, r, i, a, l, c);
    return [
        e.makeTensorInfo([f.length], "string", f),
        e.makeTensorInfo(d.shape, "int32", m),
    ];
}
const eP = {
    kernelName: Ah,
    backendName: "cpu",
    kernelFunc: tP,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nP(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { skipEmpty: o } = s,
        { input: r, delimiter: i } = t;
    if (r.dtype !== "string")
        throw new Error("Input must be of datatype string");
    if (r.shape.length !== 1)
        throw new Error(`Input must be a vector, got shape: ${r.shape}`);
    if (i.shape.length !== 0)
        throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
    const a = e.data.get(r.dataId).values,
        l = e.data.get(i.dataId).values[0],
        [c, u, d] = Nw(a, l, o),
        h = u.length;
    return [
        e.makeTensorInfo([h, 2], "int32", c),
        e.makeTensorInfo([h], "string", u),
        e.makeTensorInfo([2], "int32", new Int32Array(d)),
    ];
}
const sP = {
    kernelName: Oh,
    backendName: "cpu",
    kernelFunc: nP,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oP(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { numBuckets: o } = s,
        { input: r } = t;
    if (r.dtype !== "string")
        throw new Error("Input must be of datatype string");
    if (o <= 0) throw new Error("Number of buckets must be at least 1");
    const i = e.data.get(r.dataId).values,
        a = Rw(i, o);
    return e.makeTensorInfo(r.shape, "int32", a);
}
const rP = {
    kernelName: Xh,
    backendName: "cpu",
    kernelFunc: oP,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iP = Wt(fa, (n) => Math.tan(n)),
    aP = {
        kernelName: fa,
        backendName: "cpu",
        kernelFunc: iP,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lP = Wt(ma, (n) => Math.tanh(n)),
    cP = {
        kernelName: ma,
        backendName: "cpu",
        kernelFunc: lP,
    };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uP(n) {
    const { inputs: t, backend: e } = n,
        { tensor: s, indices: o, updates: r } = t,
        {
            sliceRank: i,
            numUpdates: a,
            sliceSize: l,
            strides: c,
            outputSize: u,
        } = to(r, o, s.shape),
        d = !1,
        h = e.bufferSync(o),
        p = e.bufferSync(r),
        f = e.bufferSync(s),
        m = bo(h, p, s.shape, u, l, a, i, c, f, d);
    return e.makeTensorInfo(s.shape, m.dtype, m.values);
}
const dP = {
    kernelName: yb,
    backendName: "cpu",
    kernelFunc: uP,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hP(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { reps: r } = s;
    lt(o, "tile");
    const i = Gw(e.bufferSync(o), r);
    return e.makeTensorInfo(i.shape, i.dtype, i.values);
}
const pP = {
    kernelName: ga,
    backendName: "cpu",
    kernelFunc: hP,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fP(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { k: r, sorted: i } = s;
    lt(o, "topk");
    const a = e.data.get(o.dataId).values,
        [l, c] = Lw(a, o.shape, o.dtype, r, i);
    return [
        e.makeTensorInfo(l.shape, l.dtype, l.values),
        e.makeTensorInfo(c.shape, c.dtype, c.values),
    ];
}
const mP = {
    kernelName: Kh,
    backendName: "cpu",
    kernelFunc: fP,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gP(n) {
    const { inputs: t, attrs: e, backend: s } = n,
        { image: o, transforms: r } = t,
        { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = e,
        [u, d, h, p] = o.shape,
        [f, m] = c ?? [d, h],
        g = [u, f, m, p],
        b = dt(o.shape),
        x = b[0],
        w = b[1],
        y = b[2],
        I = dt(g),
        v = I[0],
        k = I[1],
        S = I[2],
        N = Se(o.dtype, X(g));
    N.fill(l);
    const R = s.data.get(o.dataId).values,
        M = s.data.get(r.dataId).values;
    for (let z = 0; z < u; ++z) {
        const P = r.shape[0] === 1 ? M : M.subarray(z * 8, z * 8 + 8);
        for (let A = 0; A < f; ++A)
            for (let O = 0; O < m; ++O)
                for (let B = 0; B < p; ++B) {
                    let Z;
                    const H = P[6] * O + P[7] * A + 1;
                    if (H === 0) continue;
                    const Y = (P[0] * O + P[1] * A + P[2]) / H,
                        Q = (P[3] * O + P[4] * A + P[5]) / H,
                        j = xg(Y, h, a),
                        J = xg(Q, d, a);
                    switch (i) {
                        case "nearest":
                            Z = CP(R, d, h, x, w, y, z, J, j, B, l);
                            break;
                        case "bilinear":
                            Z = vP(R, d, h, x, w, y, z, J, j, B, l);
                            break;
                        default:
                            throw new Error(
                                `Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`
                            );
                    }
                    const ot = z * v + A * k + O * S + B;
                    N[ot] = Z;
                }
        return s.makeTensorInfo(g, o.dtype, N);
    }
    return { dataId: s.write(N, g, o.dtype), shape: o.shape, dtype: o.dtype };
}
const bP = {
    kernelName: Zh,
    backendName: "cpu",
    kernelFunc: gP,
};
function xg(n, t, e) {
    switch (e) {
        case "reflect":
            return xP(n, t);
        case "wrap":
            return yP(n, t);
        case "nearest":
            return IP(n, t);
        case "constant":
        default:
            return wP(n);
    }
}
function xP(n, t) {
    let e = n;
    if (e < 0)
        if (t <= 1) e = 0;
        else {
            const s = 2 * t;
            e < s && (e = s * Math.trunc(-e / s) + e),
                (e = e < -t ? e + s : -e - 1);
        }
    else if (e > t - 1)
        if (t <= 1) e = 0;
        else {
            const s = 2 * t;
            (e -= s * Math.trunc(e / s)), e >= t && (e = s - e - 1);
        }
    return Os(0, e, t - 1);
}
function yP(n, t) {
    let e = n;
    if (e < 0)
        if (t <= 1) e = 0;
        else {
            const s = t - 1;
            e += t * (Math.trunc(-e / s) + 1);
        }
    else if (e > t - 1)
        if (t <= 1) e = 0;
        else {
            const s = t - 1;
            e -= t * Math.trunc(e / s);
        }
    return Os(0, e, t - 1);
}
function wP(n, t) {
    return n;
}
function IP(n, t) {
    return Os(0, n, t - 1);
}
function Jr(n, t, e, s, o, r, i, a, l, c, u) {
    const d = i * s + a * o + l * r + c;
    return 0 <= a && a < t && 0 <= l && l < e ? n[d] : u;
}
function CP(n, t, e, s, o, r, i, a, l, c, u) {
    const d = Math.round(a),
        h = Math.round(l);
    return Jr(n, t, e, s, o, r, i, d, h, c, u);
}
function vP(n, t, e, s, o, r, i, a, l, c, u) {
    const d = Math.floor(a),
        h = Math.floor(l),
        p = d + 1,
        f = h + 1,
        m =
            (f - l) * Jr(n, t, e, s, o, r, i, d, h, c, u) +
            (l - h) * Jr(n, t, e, s, o, r, i, d, f, c, u),
        g =
            (f - l) * Jr(n, t, e, s, o, r, i, p, h, c, u) +
            (l - h) * Jr(n, t, e, s, o, r, i, p, f, c, u);
    return (p - a) * m + (a - d) * g;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SP(n) {
    const { inputs: t, attrs: e, backend: s } = n,
        { axis: o } = e,
        { x: r } = t;
    lt(r, "unique");
    const i = s.data.get(r.dataId).values,
        {
            outputValues: a,
            outputShape: l,
            indices: c,
        } = Mw(i, o, r.shape, r.dtype);
    return [
        s.makeTensorInfo(l, r.dtype, a),
        s.makeTensorInfo([c.length], "int32", c),
    ];
}
const kP = {
    kernelName: Bh,
    backendName: "cpu",
    kernelFunc: SP,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TP(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { value: o } = t;
    let { axis: r } = s;
    r < 0 && (r += o.shape.length);
    const i = o.shape.length,
        a = o.shape[r],
        l = new Array(i - 1);
    let c = 0;
    for (let p = 0; p < i; p++) p !== r && (l[c++] = o.shape[p]);
    const u = new Array(i).fill(0),
        d = o.shape.slice();
    d[r] = 1;
    const h = new Array(a);
    for (let p = 0; p < h.length; p++) {
        u[r] = p;
        const f = Fo({
            inputs: { x: o },
            backend: e,
            attrs: { begin: u, size: d },
        });
        (h[p] = Zt({ inputs: { x: f }, backend: e, attrs: { shape: l } })),
            e.disposeIntermediateTensorInfo(f);
    }
    return h;
}
const NP = {
    kernelName: Hc,
    backendName: "cpu",
    kernelFunc: TP,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RP(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, segmentIds: r } = t,
        { numSegments: i } = s;
    lt(o, "unsortedSegmentSum");
    const a = o.shape.length,
        l = r.shape.length,
        c = [],
        u = [],
        d = a - l;
    let h = r;
    for (let f = 0; f < d; ++f) {
        const m = Pl({
            inputs: { input: h },
            backend: e,
            attrs: { dim: f + 1 },
        });
        (h = m), u.push(m);
    }
    for (let f = 0; f < i; ++f) {
        const m = Is(f, "int32"),
            g = e.makeTensorInfo([], "int32", m),
            b = U1({ inputs: { a: g, b: h }, backend: e }),
            x = Ys({
                inputs: { x: b },
                backend: e,
                attrs: { dtype: "float32" },
            }),
            w = wu({ inputs: { a: x, b: o }, backend: e }),
            y = za({
                inputs: { x: w },
                backend: e,
                attrs: { axis: 0, keepDims: !1 },
            });
        c.push(y), u.push(g), u.push(b), u.push(x), u.push(w), u.push(y);
    }
    const p = Uw({ inputs: c, backend: e, attrs: { axis: 0 } });
    return u.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const $P = {
    kernelName: _c,
    backendName: "cpu",
    kernelFunc: RP,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GP = [
    SW,
    oM,
    TW,
    RW,
    uM,
    GW,
    LW,
    WW,
    FW,
    zW,
    AW,
    XW,
    ZW,
    _W,
    YW,
    jW,
    tD,
    nD,
    oD,
    CW,
    iD,
    lD,
    uD,
    hM,
    hD,
    lM,
    fM,
    fD,
    rM,
    gD,
    xD,
    yD,
    ID,
    vD,
    kD,
    ND,
    $D,
    ED,
    MD,
    DD,
    VD,
    PD,
    OD,
    KD,
    ZD,
    HD,
    UD,
    QD,
    JD,
    jD,
    qD,
    eF,
    oF,
    mW,
    iF,
    mM,
    fF,
    gM,
    mF,
    xM,
    IF,
    CF,
    SF,
    wM,
    CM,
    TF,
    RF,
    GF,
    LF,
    SM,
    TM,
    iM,
    WF,
    bD,
    FF,
    zF,
    AF,
    gW,
    RM,
    GM,
    XF,
    LM,
    ZF,
    _F,
    YF,
    jF,
    tV,
    nV,
    sV,
    WM,
    rV,
    aV,
    cV,
    dV,
    pV,
    mV,
    bV,
    FM,
    yV,
    CV,
    kV,
    zM,
    AM,
    RV,
    EV,
    WV,
    XM,
    FV,
    zV,
    PV,
    Yw,
    KV,
    xW,
    BM,
    BV,
    _V,
    YV,
    JV,
    aM,
    Fd,
    qV,
    yW,
    wW,
    IW,
    ez,
    sz,
    rz,
    az,
    cz,
    uz,
    hz,
    qM,
    fz,
    yz,
    Iz,
    kz,
    eW,
    Nz,
    $z,
    Ez,
    nW,
    vV,
    Wz,
    Fz,
    zz,
    Az,
    Xz,
    Zz,
    Hz,
    Uz,
    rW,
    Yz,
    aW,
    cW,
    Jz,
    qz,
    eP,
    sP,
    rP,
    pW,
    nF,
    aP,
    cP,
    dP,
    pP,
    mP,
    bP,
    KM,
    kP,
    NP,
    $P,
    VV,
];
for (const n of GP) sn(n);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const po = {},
    Ya = {
        alpha: !1,
        antialias: !1,
        premultipliedAlpha: !1,
        preserveDrawingBuffer: !1,
        depth: !1,
        stencil: !1,
        failIfMajorPerformanceCaveat: !0,
    };
function EP(n, t) {
    po[n] = t;
}
function Bn(n, t) {
    if (!(n in po) || t != null) {
        const s = MP(n, t);
        if (s !== null) po[n] = s;
        else
            return (
                console.log("Could not get context for WebGL version", n), null
            );
    }
    const e = po[n];
    return e == null || e.isContextLost()
        ? (delete po[n], Bn(n))
        : (e.disable(e.DEPTH_TEST),
          e.disable(e.STENCIL_TEST),
          e.disable(e.BLEND),
          e.disable(e.DITHER),
          e.disable(e.POLYGON_OFFSET_FILL),
          e.disable(e.SAMPLE_COVERAGE),
          e.enable(e.SCISSOR_TEST),
          e.enable(e.CULL_FACE),
          e.cullFace(e.BACK),
          po[n]);
}
function LP(n) {
    if (!F().getBool("IS_SAFARI") && typeof OffscreenCanvas < "u" && n === 2)
        return new OffscreenCanvas(300, 150);
    if (typeof document < "u") return document.createElement("canvas");
    throw new Error("Cannot create a canvas in this context");
}
function MP(n, t) {
    if (n !== 1 && n !== 2)
        throw new Error(
            "Cannot get WebGL rendering context, WebGL is disabled."
        );
    const e = t ?? LP(n);
    return (
        e.addEventListener(
            "webglcontextlost",
            (s) => {
                s.preventDefault(), delete po[n];
            },
            !1
        ),
        F().getBool("SOFTWARE_WEBGL_ENABLED") &&
            (Ya.failIfMajorPerformanceCaveat = !1),
        n === 1
            ? // tslint:disable-next-line
              e.getContext("webgl", Ya) ||
              e.getContext("experimental-webgl", Ya)
            : e.getContext("webgl2", Ya)
    );
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var bi;
(function (n) {
    (n[(n.DENSE = 0)] = "DENSE"), (n[(n.SHARED_BATCH = 1)] = "SHARED_BATCH");
})(bi || (bi = {}));
var un;
(function (n) {
    (n[(n.RENDER = 0)] = "RENDER"),
        (n[(n.UPLOAD = 1)] = "UPLOAD"),
        (n[(n.PIXELS = 2)] = "PIXELS"),
        (n[(n.DOWNLOAD = 3)] = "DOWNLOAD");
})(un || (un = {}));
var Ce;
(function (n) {
    (n[(n.UNPACKED_FLOAT16 = 0)] = "UNPACKED_FLOAT16"),
        (n[(n.UNPACKED_FLOAT32 = 1)] = "UNPACKED_FLOAT32"),
        (n[(n.PACKED_4X1_UNSIGNED_BYTE = 2)] = "PACKED_4X1_UNSIGNED_BYTE"),
        (n[(n.PACKED_2X2_FLOAT32 = 3)] = "PACKED_2X2_FLOAT32"),
        (n[(n.PACKED_2X2_FLOAT16 = 4)] = "PACKED_2X2_FLOAT16");
})(Ce || (Ce = {}));
function Pa(n, t) {
    return [t, n];
}
function WP(n, t) {
    return n * t;
}
function Qa(n) {
    const t = X(n),
        e = Math.ceil(t / 4);
    return hl(e);
}
function Gr(n, t) {
    return [Math.max(1, Math.ceil(t / 2)), Math.max(1, Math.ceil(n / 2))];
}
function DP(n, t) {
    const [e, s] = Gr(n, t);
    return e * s * 4;
}
function Uf(n, t) {
    const e = n;
    let s, o, r, i, a, l, c, u, d, h;
    return (
        F().getNumber("WEBGL_VERSION") === 2
            ? ((s = e.R32F),
              (o = e.R16F),
              (r = e.RGBA16F),
              (i = e.RGBA32F),
              (a = e.RED),
              (c = 4),
              (u = 1),
              (d = e.HALF_FLOAT),
              (h = e.FLOAT),
              (l = e.RGBA8))
            : ((s = n.RGBA),
              (o = n.RGBA),
              (r = n.RGBA),
              (i = e.RGBA),
              (a = n.RGBA),
              (c = 4),
              (u = 4),
              (d = t != null ? t.HALF_FLOAT_OES : null),
              (h = n.FLOAT),
              (l = n.RGBA)),
        {
            internalFormatFloat: s,
            internalFormatHalfFloat: o,
            internalFormatPackedHalfFloat: r,
            internalFormatPackedFloat: i,
            textureFormatFloat: a,
            downloadTextureFormat: l,
            downloadUnpackNumChannels: c,
            defaultNumChannels: u,
            textureTypeHalfFloat: d,
            textureTypeFloat: h,
        }
    );
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nt(n, t) {
    const e = t();
    return F().getBool("DEBUG") && FP(n), e;
}
function FP(n) {
    const t = n.getError();
    if (t !== n.NO_ERROR) throw new Error("WebGL Error: " + Jw(n, t));
}
const VP = 596e-10,
    zP = 65504;
function Qw(n) {
    return !!(
        F().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ||
        n === 0 ||
        (VP < Math.abs(n) && Math.abs(n) < zP)
    );
}
function Jw(n, t) {
    switch (t) {
        case n.NO_ERROR:
            return "NO_ERROR";
        case n.INVALID_ENUM:
            return "INVALID_ENUM";
        case n.INVALID_VALUE:
            return "INVALID_VALUE";
        case n.INVALID_OPERATION:
            return "INVALID_OPERATION";
        case n.INVALID_FRAMEBUFFER_OPERATION:
            return "INVALID_FRAMEBUFFER_OPERATION";
        case n.OUT_OF_MEMORY:
            return "OUT_OF_MEMORY";
        case n.CONTEXT_LOST_WEBGL:
            return "CONTEXT_LOST_WEBGL";
        default:
            return `Unknown error code ${t}`;
    }
}
function jr(n, t) {
    return Rs(
        n,
        () => n.getExtension(t),
        'Extension "' + t + '" not supported on this browser.'
    );
}
function jw(n, t) {
    const e = Rs(
        n,
        () => n.createShader(n.VERTEX_SHADER),
        "Unable to create vertex WebGLShader."
    );
    if (
        (nt(n, () => n.shaderSource(e, t)),
        nt(n, () => n.compileShader(e)),
        n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
    )
        throw (
            (console.log(n.getShaderInfoLog(e)),
            new Error("Failed to compile vertex shader."))
        );
    return e;
}
function qw(n, t) {
    const e = Rs(
        n,
        () => n.createShader(n.FRAGMENT_SHADER),
        "Unable to create fragment WebGLShader."
    );
    if (
        (nt(n, () => n.shaderSource(e, t)),
        nt(n, () => n.compileShader(e)),
        F().get("ENGINE_COMPILE_ONLY"))
    )
        return e;
    if (n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
        throw (
            (Yf(t, n.getShaderInfoLog(e)),
            new Error("Failed to compile fragment shader."))
        );
    return e;
}
const PP = /ERROR: [0-9]+:([0-9]+):/g;
function Yf(n, t) {
    const e = PP.exec(t);
    if (e == null) {
        console.log(`Couldn't parse line number in error: ${t}`),
            console.log(n);
        return;
    }
    const s = +e[1],
        o = n.split(`
`),
        r = o.length.toString().length + 2,
        i = o.map((d, h) => xo((h + 1).toString(), r) + d);
    let a = 0;
    for (let d = 0; d < i.length; d++) a = Math.max(i[d].length, a);
    const l = i.slice(0, s - 1),
        c = i.slice(s - 1, s),
        u = i.slice(s);
    console.log(
        l.join(`
`)
    ),
        console.log(
            t.split(`
`)[0]
        ),
        console.log(
            `%c ${xo(c[0], a)}`,
            "border:1px solid red; background-color:#e3d2d2; color:#a61717"
        ),
        console.log(
            u.join(`
`)
        );
}
function tI(n) {
    return Rs(n, () => n.createProgram(), "Unable to create WebGLProgram.");
}
function eI(n, t) {
    if (
        (nt(n, () => n.linkProgram(t)),
        !F().get("ENGINE_COMPILE_ONLY") &&
            n.getProgramParameter(t, n.LINK_STATUS) === !1)
    )
        throw (
            (console.log(n.getProgramInfoLog(t)),
            new Error("Failed to link vertex and fragment shaders."))
        );
}
function al(n, t) {
    if (
        (nt(n, () => n.validateProgram(t)),
        n.getProgramParameter(t, n.VALIDATE_STATUS) === !1)
    )
        throw (
            (console.log(n.getProgramInfoLog(t)),
            new Error("Shader program validation failed."))
        );
}
function nI(n, t) {
    const e = Rs(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
    return (
        nt(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)),
        nt(n, () => n.bufferData(n.ARRAY_BUFFER, t, n.STATIC_DRAW)),
        e
    );
}
function sI(n, t) {
    const e = Rs(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
    return (
        nt(n, () => n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, e)),
        nt(n, () => n.bufferData(n.ELEMENT_ARRAY_BUFFER, t, n.STATIC_DRAW)),
        e
    );
}
function AP() {
    return F().getNumber("WEBGL_VERSION") === 2 ? 1 : 4;
}
function oI(n) {
    return Rs(n, () => n.createTexture(), "Unable to create WebGLTexture.");
}
function rI(n, t) {
    const e = F().getNumber("WEBGL_MAX_TEXTURE_SIZE");
    if (n <= 0 || t <= 0) {
        const s = `[${n}x${t}]`;
        throw new Error("Requested texture size " + s + " is invalid.");
    }
    if (n > e || t > e) {
        const s = `[${n}x${t}]`,
            o = `[${e}x${e}]`;
        throw new Error(
            "Requested texture size " +
                s +
                " greater than WebGL maximum on this browser / GPU " +
                o +
                "."
        );
    }
}
function iI(n) {
    return Rs(
        n,
        () => n.createFramebuffer(),
        "Unable to create WebGLFramebuffer."
    );
}
function zd(n, t, e, s, o, r, i) {
    const a = n.getAttribLocation(t, e);
    return a === -1
        ? !1
        : (nt(n, () => n.bindBuffer(n.ARRAY_BUFFER, s)),
          nt(n, () => n.vertexAttribPointer(a, o, n.FLOAT, !1, r, i)),
          nt(n, () => n.enableVertexAttribArray(a)),
          !0);
}
function aI(n, t, e) {
    hI(n, e),
        nt(n, () => n.activeTexture(n.TEXTURE0 + e)),
        nt(n, () => n.bindTexture(n.TEXTURE_2D, t));
}
function OP(n, t) {
    hI(n, t),
        nt(n, () => n.activeTexture(n.TEXTURE0 + t)),
        nt(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function lI(n, t, e) {
    return Rs(
        n,
        () => n.getUniformLocation(t, e),
        'uniform "' + e + '" not present in program.'
    );
}
function cI(n, t, e) {
    return n.getUniformLocation(t, e);
}
function uI(n, t, e, s) {
    nt(n, () => aI(n, t, s)), nt(n, () => n.uniform1i(e, s));
}
function XP(n) {
    nt(n, () => n.bindFramebuffer(n.FRAMEBUFFER, null)),
        nt(n, () => n.viewport(0, 0, n.canvas.width, n.canvas.height)),
        nt(n, () => n.scissor(0, 0, n.canvas.width, n.canvas.height));
}
function ll(n, t, e) {
    nt(n, () => n.bindFramebuffer(n.FRAMEBUFFER, e)),
        nt(n, () =>
            n.framebufferTexture2D(
                n.FRAMEBUFFER,
                n.COLOR_ATTACHMENT0,
                n.TEXTURE_2D,
                t,
                0
            )
        );
}
function Pd(n, t) {
    nt(n, () => n.bindFramebuffer(n.FRAMEBUFFER, t)),
        nt(n, () =>
            n.framebufferTexture2D(
                n.FRAMEBUFFER,
                n.COLOR_ATTACHMENT0,
                n.TEXTURE_2D,
                null,
                0
            )
        );
}
function qr(n) {
    const t = n.checkFramebufferStatus(n.FRAMEBUFFER);
    if (t !== n.FRAMEBUFFER_COMPLETE)
        throw new Error("Error binding framebuffer: " + dI(n, t));
}
function dI(n, t) {
    switch (t) {
        case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
            return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
        case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
            return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
        case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
            return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
        case n.FRAMEBUFFER_UNSUPPORTED:
            return "FRAMEBUFFER_UNSUPPORTED";
        default:
            return `unknown error ${t}`;
    }
}
function Rs(n, t, e) {
    const s = nt(n, () => t());
    if (s == null) throw new Error(e);
    return s;
}
function hI(n, t) {
    const e = n.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1,
        s = t + n.TEXTURE0;
    if (s < n.TEXTURE0 || s > e) {
        const o = `[gl.TEXTURE0, gl.TEXTURE${e}]`;
        throw new Error(`textureUnit must be in ${o}.`);
    }
}
function Vo(n, t = 2) {
    return X(n.slice(0, n.length - t));
}
function zo(n) {
    if (n.length === 0)
        throw Error("Cannot get rows and columns of an empty shape array.");
    return [n.length > 1 ? n[n.length - 2] : 1, n[n.length - 1]];
}
function ti(n) {
    let t = [1, 1, 1];
    return (
        n.length === 0 ||
            (n.length === 1 && n[0] === 1) ||
            (t = [Vo(n), ...zo(n)]),
        t
    );
}
function pI(n, t = !1) {
    let e = F().getNumber("WEBGL_MAX_TEXTURE_SIZE"),
        s = F().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
    s === 1 / 0 &&
        F().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") &&
        (s = e / 2),
        t &&
            ((e = e * 2),
            (s = s * 2),
            (n = n.map((a, l) => (l >= n.length - 2 ? Bl(n[l]) : n[l]))),
            n.length === 1 && (n = [2, n[0]])),
        n.length !== 2 && (n = ws(n).newShape);
    let o = X(n),
        r = null;
    n.length <= 1 && o <= e
        ? (r = [1, o])
        : n.length === 2 && n[0] <= e && n[1] <= e
        ? (r = n)
        : n.length === 3 && n[0] * n[1] <= e && n[2] <= e
        ? (r = [n[0] * n[1], n[2]])
        : n.length === 3 && n[0] <= e && n[1] * n[2] <= e
        ? (r = [n[0], n[1] * n[2]])
        : n.length === 4 && n[0] * n[1] * n[2] <= e && n[3] <= e
        ? (r = [n[0] * n[1] * n[2], n[3]])
        : n.length === 4 &&
          n[0] <= e &&
          n[1] * n[2] * n[3] <= e &&
          (r = [n[0], n[1] * n[2] * n[3]]);
    const i =
        r != null &&
        Math.max(...r) > s &&
        Math.min(...r) <= (t ? 2 : 1) &&
        Math.min(...r) > 0;
    if (r == null || i)
        if (t) {
            const a = Vo(n);
            let l = 2,
                c = 2;
            n.length && ([l, c] = zo(n)),
                (o = a * (l / 2) * (c / 2)),
                (r = hl(o).map((u) => u * 2));
        } else r = hl(o);
    return r;
}
function Ja(n) {
    return n % 2 === 0;
}
function xi(n, t) {
    if (
        ((n = n.slice(-2)),
        (t = t.slice(-2)),
        $t(n, t) ||
            !n.length ||
            !t.length ||
            n[0] === 0 ||
            n[1] === 0 ||
            t[0] === 0 ||
            t[1] === 0)
    )
        return !0;
    if (n.length !== t.length) {
        const e = n[n.length - 1],
            s = t[t.length - 1];
        if (e === s || (Ja(e) && Ja(s) && (n[0] === 1 || t[0] === 1)))
            return !0;
    }
    return n[1] === t[1] && Ja(n[0]) && Ja(t[0]);
}
let cl, ul;
function fI(n) {
    if (cl == null) {
        const t = Bn(n);
        cl = t.getParameter(t.MAX_TEXTURE_SIZE);
    }
    return cl;
}
function KP() {
    cl = null;
}
function ZP() {
    ul = null;
}
function mI(n) {
    if (ul == null) {
        const t = Bn(n);
        ul = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
    }
    return Math.min(16, ul);
}
function gI(n) {
    if (n === 0) return 0;
    let t;
    const e = Bn(n);
    return (
        dn(e, "EXT_disjoint_timer_query_webgl2") && n === 2
            ? (t = 2)
            : dn(e, "EXT_disjoint_timer_query")
            ? (t = 1)
            : (t = 0),
        t
    );
}
function dn(n, t) {
    return n.getExtension(t) != null;
}
function Ad(n) {
    try {
        if (Bn(n) != null) return !0;
    } catch (t) {
        return console.log("Error when getting WebGL context: ", t), !1;
    }
    return !1;
}
function bI(n) {
    if (n === 0) return !1;
    const t = Bn(n);
    if (n === 1) {
        if (!dn(t, "OES_texture_float")) return !1;
    } else if (!dn(t, "EXT_color_buffer_float")) return !1;
    return Od(t);
}
function xI(n) {
    if (n === 0) return !1;
    const t = Bn(n);
    if (n === 1) {
        if (!dn(t, "OES_texture_float") || !dn(t, "WEBGL_color_buffer_float"))
            return !1;
    } else {
        if (dn(t, "EXT_color_buffer_float")) return Od(t);
        const s = "EXT_color_buffer_half_float";
        if (dn(t, s)) {
            const o = t.getExtension(s);
            return BP(t, o);
        }
        return !1;
    }
    return Od(t);
}
function Od(n) {
    const t = Uf(n),
        e = n.createTexture();
    n.bindTexture(n.TEXTURE_2D, e),
        n.texImage2D(
            n.TEXTURE_2D,
            0,
            t.internalFormatFloat,
            1,
            1,
            0,
            t.textureFormatFloat,
            t.textureTypeFloat,
            null
        );
    const r = n.createFramebuffer();
    n.bindFramebuffer(n.FRAMEBUFFER, r),
        n.framebufferTexture2D(
            n.FRAMEBUFFER,
            n.COLOR_ATTACHMENT0,
            n.TEXTURE_2D,
            e,
            0
        );
    const i =
        n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
    return (
        n.bindTexture(n.TEXTURE_2D, null),
        n.bindFramebuffer(n.FRAMEBUFFER, null),
        n.deleteTexture(e),
        n.deleteFramebuffer(r),
        i
    );
}
function BP(n, t) {
    const e = Uf(n, t),
        s = n.createTexture();
    n.bindTexture(n.TEXTURE_2D, s),
        n.texImage2D(
            n.TEXTURE_2D,
            0,
            e.internalFormatHalfFloat,
            1,
            1,
            0,
            e.textureFormatFloat,
            e.textureTypeHalfFloat,
            null
        );
    const i = n.createFramebuffer();
    n.bindFramebuffer(n.FRAMEBUFFER, i),
        n.framebufferTexture2D(
            n.FRAMEBUFFER,
            n.COLOR_ATTACHMENT0,
            n.TEXTURE_2D,
            s,
            0
        );
    const a =
        n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
    return (
        n.bindTexture(n.TEXTURE_2D, null),
        n.bindFramebuffer(n.FRAMEBUFFER, null),
        n.deleteTexture(s),
        n.deleteFramebuffer(i),
        a
    );
}
function yI(n) {
    return n !== 2 ? !1 : Bn(n).fenceSync != null;
}
function Er(n, t) {
    Array.isArray(n) || (n = [n]),
        n.forEach((e) => {
            e != null &&
                C(
                    e.dtype !== "complex64",
                    () =>
                        `${t} does not support complex64 tensors in the WebGL backend.`
                );
        });
}
const _Q = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            assertNotComplex: Er,
            bindCanvasToFramebuffer: XP,
            bindColorTextureToFramebuffer: ll,
            bindTextureToProgramUniformSampler: uI,
            bindTextureUnit: aI,
            bindVertexBufferToProgramAttribute: zd,
            callAndCheck: nt,
            canBeRepresented: Qw,
            createFragmentShader: qw,
            createFramebuffer: iI,
            createProgram: tI,
            createStaticIndexBuffer: sI,
            createStaticVertexBuffer: nI,
            createTexture: oI,
            createVertexShader: jw,
            getBatchDim: Vo,
            getExtensionOrThrow: jr,
            getFramebufferErrorMessage: dI,
            getMaxTexturesInShader: mI,
            getNumChannels: AP,
            getProgramUniformLocation: cI,
            getProgramUniformLocationOrThrow: lI,
            getRowsCols: zo,
            getShapeAs3D: ti,
            getTextureShapeFromLogicalShape: pI,
            getWebGLDisjointQueryTimerVersion: gI,
            getWebGLErrorMessage: Jw,
            getWebGLMaxTextureSize: fI,
            hasExtension: dn,
            isCapableOfRenderingToFloatTexture: bI,
            isDownloadFloatTextureEnabled: xI,
            isReshapeFree: xi,
            isWebGLFenceEnabled: yI,
            isWebGLVersionEnabled: Ad,
            linkProgram: eI,
            logShaderSourceAndInfoLog: Yf,
            resetMaxTextureSize: KP,
            resetMaxTexturesInShader: ZP,
            unbindColorTextureFromFramebuffer: Pd,
            unbindTextureUnit: OP,
            validateFramebuffer: qr,
            validateProgram: al,
            validateTextureSize: rI,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ct = F();
ct.registerFlag("HAS_WEBGL", () => ct.getNumber("WEBGL_VERSION") > 0);
ct.registerFlag("WEBGL_VERSION", () => (Ad(2) ? 2 : Ad(1) ? 1 : 0));
ct.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => !1);
ct.registerFlag("WEBGL_BUFFER_SUPPORTED", () => ct.get("WEBGL_VERSION") === 2);
ct.registerFlag("WEBGL_CPU_FORWARD", () => !0);
ct.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => !1);
ct.registerFlag("WEBGL_PACK", () => ct.getBool("HAS_WEBGL"));
ct.registerFlag("WEBGL_PACK_NORMALIZATION", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_CLIP", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_REDUCE", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_LAZILY_UNPACK", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_CONV_IM2COL", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () =>
    fI(ct.getNumber("WEBGL_VERSION"))
);
ct.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () =>
    mI(ct.getNumber("WEBGL_VERSION"))
);
ct.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
    const n = ct.getNumber("WEBGL_VERSION");
    return n === 0 ? 0 : gI(n);
});
ct.registerFlag(
    "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",
    () =>
        ct.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 &&
        !Qh()
);
ct.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () =>
    bI(ct.getNumber("WEBGL_VERSION"))
);
ct.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () =>
    ct.getBool("WEBGL_FORCE_F16_TEXTURES")
        ? !1
        : ct.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")
);
ct.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () =>
    xI(ct.getNumber("WEBGL_VERSION"))
);
ct.registerFlag("WEBGL_FENCE_API_ENABLED", () =>
    yI(ct.getNumber("WEBGL_VERSION"))
);
ct.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () =>
    ct.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0
);
ct.registerFlag(
    "WEBGL_DELETE_TEXTURE_THRESHOLD",
    () => -1,
    (n) => {
        if (typeof n != "number")
            throw new Error(
                `WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${n}.`
            );
        if (n < 0 && n !== -1)
            throw new Error(
                `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`
            );
    }
);
ct.registerFlag(
    "WEBGL_FLUSH_THRESHOLD",
    () => (Qh() ? 1 : -1),
    (n) => {
        if (typeof n != "number")
            throw new Error(
                `WEBGL_FLUSH_THRESHOLD must be a number but got ${n}.`
            );
        if (n < 0 && n !== -1)
            throw new Error(
                `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`
            );
    }
);
ct.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
ct.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => !1);
ct.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
ct.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
ct.registerFlag("WEBGL_EXP_CONV", () => !1);
ct.registerFlag("SOFTWARE_WEBGL_ENABLED", () => ct.getBool("IS_TEST"));
ct.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
ct.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => !1);
ct.registerFlag("WEBGL2_ISNAN_CUSTOM", () => !1);
ct.registerFlag("ENGINE_COMPILE_ONLY", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ae() {
    let n, t, e, s, o, r, i, a, l, c;
    return (
        F().getNumber("WEBGL_VERSION") === 2
            ? ((n = "#version 300 es"),
              (t = "in"),
              (e = "out"),
              (s = "in"),
              (o = "texture"),
              (r = "outputColor"),
              (i = "out vec4 outputColor;"),
              (a = F().getBool("WEBGL2_ISNAN_CUSTOM")
                  ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `
                  : ""),
              (l = ""),
              (c = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `))
            : ((n = ""),
              (t = "attribute"),
              (e = "varying"),
              (s = "varying"),
              (o = "texture2D"),
              (r = "gl_FragColor"),
              (i = ""),
              (a = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `),
              (l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `),
              (c = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `)),
        {
            version: n,
            attribute: t,
            varyingVs: e,
            varyingFs: s,
            texture2D: o,
            output: r,
            defineOutput: i,
            defineSpecialNaN: a,
            defineSpecialInf: l,
            defineRound: c,
        }
    );
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qo(n, t, e = "index") {
    const s = dt(t);
    return s
        .map((o, r) => {
            const i = `int ${n[r]} = ${e} / ${o}`,
                a =
                    r === s.length - 1
                        ? `int ${n[r + 1]} = ${e} - ${n[r]} * ${o}`
                        : `index -= ${n[r]} * ${o}`;
            return `${i}; ${a};`;
        })
        .join("");
}
function Iu(n, t, e = "index") {
    const s = dt(t);
    return s
        .map((o, r) => {
            const i = `int ${n[r]} = ${e} / outShapeStrides[${r}]`,
                a =
                    r === s.length - 1
                        ? `int ${n[r + 1]} = ${e} - ${
                              n[r]
                          } * outShapeStrides[${r}]`
                        : `index -= ${n[r]} * outShapeStrides[${r}]`;
            return `${i}; ${a};`;
        })
        .join("");
}
function HP(n, t) {
    const e = n.length,
        s = n.map((r) => `${t}[${r}]`),
        o = new Array(e - 1);
    o[e - 2] = s[e - 1];
    for (let r = e - 3; r >= 0; --r) o[r] = `(${o[r + 1]} * ${s[r + 1]})`;
    return o;
}
function _P(n, t, e = "index") {
    const s = n.map((r, i) => i),
        o = HP(s, t);
    return o
        .map((r, i) => {
            const a = `int ${n[i]} = ${e} / ${o[i]}`,
                l =
                    i === o.length - 1
                        ? `int ${n[i + 1]} = ${e} - ${n[i]} * ${o[i]}`
                        : `index -= ${n[i]} * ${o[i]}`;
            return `${a}; ${l};`;
        })
        .join("");
}
function Qf(n) {
    const t = dt(n).map((e) => e.toString());
    return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`;
}
function Jf() {
    return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
const wI = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { getBroadcastDims: II } = E$;
function UP(n, t, e) {
    const s = [];
    if (
        (n.forEach((p) => {
            const f = X(p.shapeInfo.logicalShape);
            if (
                (p.shapeInfo.isUniform
                    ? s.push(`uniform float ${p.name}${f > 1 ? `[${f}]` : ""};`)
                    : (s.push(`uniform sampler2D ${p.name};`),
                      s.push(`uniform int offset${p.name};`)),
                e.enableShapeUniforms)
            ) {
                const { uniformShape: m } = jf(
                    e.packedInputs,
                    p.shapeInfo.logicalShape,
                    p.shapeInfo.texShape
                );
                switch (m.length) {
                    case 1:
                        s.push(`uniform int ${p.name}Shape;`);
                        break;
                    case 2:
                        s.push(`uniform ivec2 ${p.name}Shape;`);
                        break;
                    case 3:
                        s.push(`uniform ivec3 ${p.name}Shape;`);
                        break;
                    case 4:
                        s.push(`uniform ivec4 ${p.name}Shape;`);
                        break;
                }
                s.push(`uniform ivec2 ${p.name}TexShape;`);
            }
        }),
        e.enableShapeUniforms)
    ) {
        switch (t.logicalShape.length) {
            case 1:
                s.push("uniform int outShape;");
                break;
            case 2:
                s.push("uniform ivec2 outShape;"),
                    s.push("uniform int outShapeStrides;");
                break;
            case 3:
                s.push("uniform ivec3 outShape;"),
                    s.push("uniform ivec2 outShapeStrides;");
                break;
            case 4:
                s.push("uniform ivec4 outShape;"),
                    s.push("uniform ivec3 outShapeStrides;");
                break;
        }
        s.push("uniform ivec2 outTexShape;");
    }
    e.customUniforms &&
        e.customUniforms.forEach((p) => {
            s.push(
                `uniform ${p.type} ${p.name}${
                    p.arrayIndex ? `[${p.arrayIndex}]` : ""
                };`
            );
        });
    const o = s.join(`
`),
        r = n.map((p) => YP(p, t, e.packedInputs, e.enableShapeUniforms)).join(`
`),
        i = t.texShape,
        a = Ae(),
        l = jP(a);
    let c,
        u,
        d = eA(a);
    return (
        t.isPacked
            ? ((c = QP(t.logicalShape, i, e.enableShapeUniforms)), (u = tA(a)))
            : ((c = JP(t.logicalShape, i, e.enableShapeUniforms)), (u = qP(a))),
        e.packedInputs && (d += rA),
        [d, l, u, o, c, r, e.userCode].join(`
`)
    );
}
function Lr(n, t = !1) {
    const e = n.shapeInfo.logicalShape;
    switch (e.length) {
        case 0:
            return bA(n, t);
        case 1:
            return yA(n, t);
        case 2:
            return IA(n, t);
        case 3:
            return vA(n, t);
        case 4:
            return kA(n, t);
        case 5:
            return TA(n);
        case 6:
            return NA(n);
        default:
            throw new Error(
                `${e.length}-D input sampling is not yet supported`
            );
    }
}
function CI(n, t) {
    switch (n.shapeInfo.logicalShape.length) {
        case 0:
            return gA(n);
        case 1:
            return xA(n, t);
        case 2:
            return wA(n, t);
        case 3:
            return CA(n, t);
        default:
            return SA(n, t);
    }
}
function YP(n, t, e = !1, s) {
    let o = "";
    e ? (o += CI(n, s)) : (o += Lr(n, s));
    const r = n.shapeInfo.logicalShape,
        i = t.logicalShape;
    return r.length <= i.length && (e ? (o += RA(n, t)) : (o += $A(n, t))), o;
}
function QP(n, t, e) {
    switch (n.length) {
        case 0:
            return vI();
        case 1:
            return iA(n, t, e);
        case 2:
            return fA(n, t, e);
        case 3:
            return lA(n, t, e);
        default:
            return uA(n, t, e);
    }
}
function JP(n, t, e) {
    switch (n.length) {
        case 0:
            return vI();
        case 1:
            return aA(n, t, e);
        case 2:
            return mA(n, t, e);
        case 3:
            return cA(n, t, e);
        case 4:
            return dA(n, t, e);
        case 5:
            return hA(n, t);
        case 6:
            return pA(n, t);
        default:
            throw new Error(
                `${n.length}-D output sampling is not yet supported`
            );
    }
}
function jP(n) {
    return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `;
}
function qP(n) {
    return `
    void setOutput(float val) {
      ${n.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function tA(n) {
    return `
    void setOutput(vec4 val) {
      ${n.output} = val;
    }
  `;
}
function eA(n) {
    return `${n.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${n.varyingFs} vec2 resultUV;
    ${n.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${n.defineSpecialNaN}
    ${n.defineSpecialInf}
    ${n.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${nA}
    ${sA}
    ${oA}
  `;
}
const nA = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,
    sA = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,
    oA = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,
    rA = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function vI() {
    return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function iA(n, t, e) {
    const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
    return s[0] === 1
        ? e
            ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `
            : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    `
        : s[1] === 1
        ? e
            ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `
            : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    `
        : e
        ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `
        : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;
}
function aA(n, t, e) {
    return t[0] === 1
        ? e
            ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `
            : `
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `
        : t[1] === 1
        ? e
            ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `
            : `
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `
        : e
        ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `
        : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `;
}
function lA(n, t, e) {
    if (e)
        return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
    const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)],
        o = Math.ceil(n[2] / 2),
        r = o * Math.ceil(n[1] / 2);
    return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${r};
      index -= b * ${r};

      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function cA(n, t, e) {
    if (e)
        return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Iu(["r", "c", "d"], n)}
    return ivec3(r, c, d);
  }
`;
    const s = Qo(["r", "c", "d"], n);
    return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `;
}
function uA(n, t, e) {
    if (e)
        return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
    const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)],
        o = Math.ceil(n[n.length - 1] / 2),
        r = o * Math.ceil(n[n.length - 2] / 2);
    let i = r,
        a = "",
        l = "b, r, c";
    for (let c = 2; c < n.length - 1; c++)
        (i *= n[n.length - c - 1]),
            (a =
                `
      int b${c} = index / ${i};
      index -= b${c} * ${i};
    ` + a),
            (l = `b${c}, ` + l);
    return `
    ivec${n.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${a}

      int b = index / ${r};
      index -= b * ${r};

      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec${n.length}(${l});
    }
  `;
}
function dA(n, t, e) {
    if (e)
        return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Iu(["r", "c", "d", "d2"], n)}
      return ivec4(r, c, d, d2);
    }
  `;
    const s = Qo(["r", "c", "d", "d2"], n);
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `;
}
function hA(n, t) {
    const e = Qo(["r", "c", "d", "d2", "d3"], n);
    return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function pA(n, t) {
    const e = Qo(["r", "c", "d", "d2", "d3", "d4"], n);
    return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function fA(n, t, e) {
    const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
    if ($t(n, t))
        return e
            ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `
            : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;
    const o = Math.ceil(n[1] / 2);
    return e
        ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `
        : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec2(r, c);
    }
  `;
}
function mA(n, t, e) {
    return $t(n, t)
        ? e
            ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `
            : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `
        : n[1] === 1
        ? e
            ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `
            : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `
        : n[0] === 1
        ? e
            ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `
            : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `
        : e
        ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `
        : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${n[1]};
      int c = index - r * ${n[1]};
      return ivec2(r, c);
    }
  `;
}
function Jo(n) {
    return `offset${n}`;
}
function gA(n) {
    const t = n.name,
        e = "get" + t.charAt(0).toUpperCase() + t.slice(1),
        s = Ae();
    return `
    vec4 ${e}() {
      return ${s.texture2D}(${t}, halfCR);
    }
  `;
}
function bA(n, t) {
    const e = n.name,
        s = "get" + e.charAt(0).toUpperCase() + e.slice(1);
    if (n.shapeInfo.isUniform) return `float ${s}() {return ${e};}`;
    const [o, r] = n.shapeInfo.texShape;
    if (o === 1 && r === 1)
        return `
      float ${s}() {
        return sampleTexture(${e}, halfCR);
      }
    `;
    const i = Jo(e);
    if (t)
        return `
    float ${s}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;
    const [a, l] = n.shapeInfo.texShape;
    return `
    float ${s}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `;
}
function xA(n, t) {
    const e = n.name,
        s = "get" + e.charAt(0).toUpperCase() + e.slice(1),
        o = n.shapeInfo.texShape,
        r = Ae();
    if (t)
        return `
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${r.texture2D}(${e}, uv);
    }
  `;
    const i = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)];
    return `
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${r.texture2D}(${e}, uv);
    }
  `;
}
function yA(n, t) {
    const e = n.name,
        s = "get" + e.charAt(0).toUpperCase() + e.slice(1);
    if (n.shapeInfo.isUniform)
        return `
      float ${s}(int index) {
        ${Mr(n)}
      }
    `;
    const o = n.shapeInfo.texShape,
        r = o[0],
        i = o[1];
    if (i === 1 && r === 1)
        return `
      float ${s}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;
    const a = Jo(e);
    return i === 1
        ? t
            ? `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    `
            : `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${r}.0);
        return sampleTexture(${e}, uv);
      }
    `
        : r === 1
        ? t
            ? `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    `
            : `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    `
        : t
        ? `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  `
        : `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${r}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `;
}
function wA(n, t) {
    const e = n.shapeInfo.logicalShape,
        s = n.name,
        o = "get" + s.charAt(0).toUpperCase() + s.slice(1),
        r = n.shapeInfo.texShape,
        i = r[0],
        a = r[1],
        l = Ae();
    if (r != null && $t(e, r))
        return t
            ? `
      vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${l.texture2D}(${s}, uv);
      }
    `
            : `
      vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${s}, uv);
      }
    `;
    if (t)
        return `
    vec4 ${o}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
    const c = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)],
        u = Math.ceil(e[1] / 2);
    return `
    vec4 ${o}(int row, int col) {
      vec2 uv = packedUVfrom2D(${u}, ${c[0]}, ${c[1]}, row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
}
function IA(n, t) {
    const e = n.shapeInfo.logicalShape,
        s = n.name,
        o = "get" + s.charAt(0).toUpperCase() + s.slice(1),
        r = n.shapeInfo.texShape;
    if (r != null && $t(e, r)) {
        if (t)
            return `
      float ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `;
        const h = r[0],
            p = r[1];
        return `
    float ${o}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${p}.0, ${h}.0);
      return sampleTexture(${s}, uv);
    }
  `;
    }
    const { newShape: i, keptDims: a } = ws(e),
        l = i;
    if (l.length < e.length) {
        const h = Wr(n, l),
            p = ["row", "col"];
        return `
      ${Lr(h, t)}
      float ${o}(int row, int col) {
        return ${o}(${Dr(p, a)});
      }
    `;
    }
    if (n.shapeInfo.isUniform)
        return `
      float ${o}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${Mr(n)}
      }
    `;
    const c = r[0],
        u = r[1],
        d = Jo(s);
    return u === 1
        ? t
            ? `
      float ${o}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));
        return sampleTexture(${s}, uv);
      }
    `
            : `
    float ${o}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);
      return sampleTexture(${s}, uv);
    }
  `
        : c === 1
        ? t
            ? `
      float ${o}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);
        return sampleTexture(${s}, uv);
      }
    `
            : `
    float ${o}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);
      return sampleTexture(${s}, uv);
    }
  `
        : t
        ? `
      float ${o}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s}Shape[1] + col + ${d};
        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
        return sampleTexture(${s}, uv);
      }
    `
        : `
  float ${o}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${d};
    vec2 uv = uvFromFlat(${c}, ${u}, index);
    return sampleTexture(${s}, uv);
  }
`;
}
function CA(n, t) {
    const e = n.shapeInfo.logicalShape,
        s = n.name,
        o = "get" + s.charAt(0).toUpperCase() + s.slice(1),
        r = n.shapeInfo.texShape,
        i = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)];
    if (e[0] === 1) {
        const h = e.slice(1),
            p = [1, 2],
            f = Wr(n, h),
            m = ["b", "row", "col"];
        return `
        ${CI(f, t)}
        vec4 ${o}(int b, int row, int col) {
          return ${o}(${Dr(m, p)});
        }
      `;
    }
    const a = Ae();
    if (t)
        return `
    vec4 ${o}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
    const l = i[0],
        c = i[1],
        u = Math.ceil(e[2] / 2),
        d = u * Math.ceil(e[1] / 2);
    return `
    vec4 ${o}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${c}, ${d}, ${u}, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
}
function vA(n, t) {
    const e = n.shapeInfo.logicalShape,
        s = n.name,
        o = "get" + s.charAt(0).toUpperCase() + s.slice(1),
        r = e[1] * e[2],
        i = e[2],
        { newShape: a, keptDims: l } = ws(e),
        c = a;
    if (c.length < e.length) {
        const m = Wr(n, c),
            g = ["row", "col", "depth"];
        return `
        ${Lr(m, t)}
        float ${o}(int row, int col, int depth) {
          return ${o}(${Dr(g, l)});
        }
      `;
    }
    if (n.shapeInfo.isUniform)
        return `
      float ${o}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${r}, ${i}, 1)));
        ${Mr(n)}
      }
    `;
    const u = n.shapeInfo.texShape,
        d = u[0],
        h = u[1],
        p = n.shapeInfo.flatOffset;
    if (h === r && p == null)
        return t
            ? `
      float ${o}(int row, int col, int depth) {
        int stride1 = ${s}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `
            : `
        float ${o}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${h}.0, ${d}.0);
          return sampleTexture(${s}, uv);
        }
      `;
    if (h === i && p == null)
        return t
            ? `
      float ${o}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `
            : `
    float ${o}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${d}.0);
      return sampleTexture(${s}, uv);
    }
  `;
    const f = Jo(s);
    return t
        ? `
    float ${o}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${s}Shape[1] * ${s}Shape[2];
      int stride1 = ${s}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
      return sampleTexture(${s}, uv);
    }
    `
        : `
      float ${o}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${r} + col * ${i} + depth + ${f};
        vec2 uv = uvFromFlat(${d}, ${h}, index);
        return sampleTexture(${s}, uv);
      }
  `;
}
function SA(n, t) {
    const e = n.name,
        s = "get" + e.charAt(0).toUpperCase() + e.slice(1),
        o = Ae();
    if (t)
        return `
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${o.texture2D}(${e}, uv);
    }
  `;
    const r = n.shapeInfo.logicalShape,
        i = r.length,
        a = n.shapeInfo.texShape,
        l = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)],
        c = l[0],
        u = l[1],
        d = Math.ceil(r[i - 1] / 2);
    let h = d * Math.ceil(r[i - 2] / 2),
        p = "int b, int row, int col",
        f = `b * ${h} + (row / 2) * ${d} + (col / 2)`;
    for (let m = 2; m < i - 1; m++)
        (p = `int b${m}, ` + p),
            (h *= r[i - m - 1]),
            (f = `b${m} * ${h} + ` + f);
    return `
    vec4 ${s}(${p}) {
      int index = ${f};
      int texR = index / ${u};
      int texC = index - texR * ${u};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${c});
      return ${o.texture2D}(${e}, uv);
    }
  `;
}
function kA(n, t) {
    const e = n.shapeInfo.logicalShape,
        s = n.name,
        o = "get" + s.charAt(0).toUpperCase() + s.slice(1),
        r = e[3],
        i = e[2] * r,
        a = e[1] * i,
        { newShape: l, keptDims: c } = ws(e);
    if (l.length < e.length) {
        const x = Wr(n, l),
            w = ["row", "col", "depth", "depth2"];
        return `
      ${Lr(x, t)}
      float ${o}(int row, int col, int depth, int depth2) {
        return ${o}(${Dr(w, c)});
      }
    `;
    }
    if (n.shapeInfo.isUniform)
        return `
      float ${o}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${r}, 1)));
        ${Mr(n)}
      }
    `;
    const u = n.shapeInfo.flatOffset,
        d = n.shapeInfo.texShape,
        h = d[0],
        p = d[1],
        f = `int stride2 = ${s}Shape[3];`,
        m = `int stride1 = ${s}Shape[2] * stride2;`,
        g = `int stride0 = ${s}Shape[1] * stride1;`;
    if (p === a && u == null)
        return t
            ? `
      float ${o}(int row, int col, int depth, int depth2) {
        ${f}
        ${m}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `
            : `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${h}.0);
        return sampleTexture(${s}, uv);
      }
    `;
    if (p === r && u == null)
        return t
            ? `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `
            : `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1] * e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${h}.0);
        return sampleTexture(${s}, uv);
      }
    `;
    const b = Jo(s);
    return t
        ? `
    float ${o}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${m}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${b});
      return sampleTexture(${s}, uv);
    }
  `
        : `
    float ${o}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${r} + depth2;
      vec2 uv = uvFromFlat(${h}, ${p}, index + ${b});
      return sampleTexture(${s}, uv);
    }
  `;
}
function TA(n) {
    const t = n.shapeInfo.logicalShape,
        e = n.name,
        s = "get" + e.charAt(0).toUpperCase() + e.slice(1),
        o = t[4],
        r = t[3] * o,
        i = t[2] * r,
        a = t[1] * i,
        { newShape: l, keptDims: c } = ws(t);
    if (l.length < t.length) {
        const m = Wr(n, l),
            g = ["row", "col", "depth", "depth2", "depth3"];
        return `
      ${Lr(m)}
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        return ${s}(${Dr(g, c)});
      }
    `;
    }
    if (n.shapeInfo.isUniform)
        return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${r}, ${o})) +
          depth3;
        ${Mr(n)}
      }
    `;
    const u = n.shapeInfo.flatOffset,
        d = n.shapeInfo.texShape,
        h = d[0],
        p = d[1];
    if (p === a && u == null)
        return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${r}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${h}.0);
        return sampleTexture(${e}, uv);
      }
    `;
    if (p === o && u == null)
        return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3]},
               ${t[2] * t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${h}.0);
        return sampleTexture(${e}, uv);
      }
    `;
    const f = Jo(e);
    return `
    float ${s}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${r} +
          depth2 * ${o} + depth3 + ${f};
      vec2 uv = uvFromFlat(${h}, ${p}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function NA(n) {
    const t = n.shapeInfo.logicalShape,
        e = n.name,
        s = "get" + e.charAt(0).toUpperCase() + e.slice(1),
        { newShape: o, keptDims: r } = ws(t);
    if (o.length < t.length) {
        const g = Wr(n, o),
            b = ["row", "col", "depth", "depth2", "depth3", "depth4"];
        return `
      ${Lr(g)}
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${s}(${Dr(b, r)});
      }
    `;
    }
    const i = t[5],
        a = t[4] * i,
        l = t[3] * a,
        c = t[2] * l,
        u = t[1] * c;
    if (n.shapeInfo.isUniform)
        return `
      float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${c}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${Mr(n)}
      }
    `;
    const d = n.shapeInfo.flatOffset,
        h = n.shapeInfo.texShape,
        p = h[0],
        f = h[1];
    if (f === u && d == null)
        return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
    if (f === i && d == null)
        return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3] * t[4]},
               ${t[2] * t[3] * t[4]},
               ${t[3] * t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
    const m = Jo(e);
    return `
    float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${c} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${m};
      vec2 uv = uvFromFlat(${p}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function Mr(n) {
    const t = n.name,
        e = X(n.shapeInfo.logicalShape);
    return e < 2
        ? `return ${t};`
        : `
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `;
}
function RA(n, t) {
    const e = n.name,
        s = e.charAt(0).toUpperCase() + e.slice(1),
        o = "get" + s + "AtOutCoords",
        r = n.shapeInfo.logicalShape.length,
        i = t.logicalShape.length,
        a = II(n.shapeInfo.logicalShape, t.logicalShape),
        l = Vt(i),
        c = i - r;
    let u;
    const d = ["x", "y", "z", "w", "u", "v"];
    r === 0
        ? (u = "")
        : i < 2 && a.length >= 1
        ? (u = "coords = 0;")
        : (u = a.map((x) => `coords.${d[x + c]} = 0;`).join(`
`));
    let h = "";
    i < 2 && r > 0
        ? (h = "coords")
        : (h = n.shapeInfo.logicalShape
              .map((x, w) => `coords.${d[w + c]}`)
              .join(", "));
    let p = "return outputValue;";
    const m = X(n.shapeInfo.logicalShape) === 1,
        b = X(t.logicalShape) === 1;
    if (r === 1 && !m && !b)
        p = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
    else if (m && !b)
        i === 1
            ? (p = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `)
            : (p = `
        return vec4(outputValue.x);
      `);
    else if (a.length) {
        const x = r - 2,
            w = r - 1;
        a.indexOf(x) > -1 && a.indexOf(w) > -1
            ? (p = "return vec4(outputValue.x);")
            : a.indexOf(x) > -1
            ? (p =
                  "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);")
            : a.indexOf(w) > -1 &&
              (p = "return vec4(outputValue.xx, outputValue.zz);");
    }
    return `
    vec4 ${o}() {
      ${l} coords = getOutputCoords();
      ${u}
      vec4 outputValue = get${s}(${h});
      ${p}
    }
  `;
}
function $A(n, t) {
    const e = n.name,
        s = e.charAt(0).toUpperCase() + e.slice(1),
        o = "get" + s + "AtOutCoords",
        r = t.texShape,
        i = n.shapeInfo.texShape,
        a = n.shapeInfo.logicalShape.length,
        l = t.logicalShape.length;
    if (
        !n.shapeInfo.isUniform &&
        a === l &&
        n.shapeInfo.flatOffset == null &&
        $t(i, r)
    )
        return `
      float ${o}() {
        return sampleTexture(${e}, resultUV);
      }
    `;
    const c = Vt(l),
        u = II(n.shapeInfo.logicalShape, t.logicalShape),
        d = l - a;
    let h;
    const p = ["x", "y", "z", "w", "u", "v"];
    a === 0
        ? (h = "")
        : l < 2 && u.length >= 1
        ? (h = "coords = 0;")
        : (h = u.map((m) => `coords.${p[m + d]} = 0;`).join(`
`));
    let f = "";
    return (
        l < 2 && a > 0
            ? (f = "coords")
            : (f = n.shapeInfo.logicalShape
                  .map((m, g) => `coords.${p[g + d]}`)
                  .join(", ")),
        `
    float ${o}() {
      ${c} coords = getOutputCoords();
      ${h}
      return get${s}(${f});
    }
  `
    );
}
function Vt(n) {
    if (n <= 1) return "int";
    if (n === 2) return "ivec2";
    if (n === 3) return "ivec3";
    if (n === 4) return "ivec4";
    if (n === 5) return "ivec5";
    if (n === 6) return "ivec6";
    throw Error(`GPU for rank ${n} is not yet supported`);
}
function jf(n, t, e) {
    const { newShape: s, keptDims: o } = ws(t),
        r = t.length,
        i = n && r === 3 && t[0] === 1,
        a = i ? t.slice(1) : s,
        l = (!n && r > 1 && !$t(t, e) && s.length < r) || i;
    return { useSqueezeShape: l, uniformShape: l ? a : t, keptDims: o };
}
function Wr(n, t) {
    const e = JSON.parse(JSON.stringify(n));
    return (e.shapeInfo.logicalShape = t), e;
}
function Dr(n, t) {
    return t.map((e) => n[e]).join(", ");
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GA(n, t, e, s) {
    const o = e.map((u, d) => {
            const h = {
                logicalShape: u.shape,
                texShape: u.isUniform ? null : u.texData.texShape,
                isUniform: u.isUniform,
                isPacked: u.isUniform ? !1 : u.texData.isPacked,
                flatOffset: null,
            };
            return (
                u.texData != null &&
                    u.texData.slice != null &&
                    u.texData.slice.flatOffset > 0 &&
                    (h.flatOffset = u.texData.slice.flatOffset),
                { name: t.variableNames[d], shapeInfo: h }
            );
        }),
        r = o.map((u) => u.shapeInfo),
        i = {
            logicalShape: s.shape,
            texShape: s.texData.texShape,
            isUniform: !1,
            isPacked: s.texData.isPacked,
            flatOffset: null,
        },
        a = UP(o, i, t),
        l = qw(n.gl, a),
        c = n.createProgram(l);
    return F().get("ENGINE_COMPILE_ONLY")
        ? {
              program: t,
              fragmentShader: l,
              source: a,
              webGLProgram: c,
              inShapeInfos: r,
              outShapeInfo: i,
              variablesLocations: null,
              customUniformLocations: null,
              infLoc: null,
              nanLoc: null,
              outShapeLocation: null,
              outShapeStridesLocation: null,
              outTexShapeLocation: null,
          }
        : (n.buildVao(c),
          Object.assign(
              {
                  program: t,
                  fragmentShader: l,
                  source: a,
                  webGLProgram: c,
                  inShapeInfos: r,
                  outShapeInfo: i,
              },
              SI(n, t, c)
          ));
}
function SI(n, t, e) {
    const s = [],
        o = [];
    let r,
        i,
        a,
        l = null,
        c = null;
    (c = n.getUniformLocation(e, "NAN", !1)),
        F().getNumber("WEBGL_VERSION") === 1 &&
            (l = n.getUniformLocation(e, "INFINITY", !1));
    const u = !1;
    for (const d of t.variableNames) {
        const h = {
            name: d,
            uniform: n.getUniformLocation(e, d, u),
            offset: n.getUniformLocation(e, `offset${d}`, u),
        };
        t.enableShapeUniforms &&
            ((h.shape = n.getUniformLocation(e, `${d}Shape`, u)),
            (h.texShape = n.getUniformLocation(e, `${d}TexShape`, u))),
            s.push(h);
    }
    if (
        (t.enableShapeUniforms &&
            ((r = n.getUniformLocation(e, "outShape", u)),
            (a = n.getUniformLocation(e, "outShapeStrides", u)),
            (i = n.getUniformLocation(e, "outTexShape", u))),
        t.customUniforms)
    )
        for (const d of t.customUniforms)
            o.push(n.getUniformLocation(e, d.name, u));
    return {
        variablesLocations: s,
        customUniformLocations: o,
        infLoc: l,
        nanLoc: c,
        outShapeLocation: r,
        outShapeStridesLocation: a,
        outTexShapeLocation: i,
    };
}
function yg(n, t) {
    if (n.length !== t.length)
        throw Error(
            `Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`
        );
    n.forEach((e, s) => {
        const o = e.logicalShape,
            r = t[s],
            i = r.shape;
        if (!$t(o, i))
            throw Error(
                `Binary was compiled with different shapes than the current args. Shapes ${o} and ${i} must match`
            );
        if (e.isUniform && r.isUniform) return;
        const a = e.texShape,
            l = r.isUniform ? null : r.texData.texShape;
        if (!$t(a, l))
            throw Error(
                `Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`
            );
    });
}
function EA(n, t, e, s, o) {
    t.program.enableShapeUniforms ||
        (yg(t.inShapeInfos, e), yg([t.outShapeInfo], [s]));
    const r = s.texData.texture,
        i = s.texData.texShape;
    s.texData.isPacked
        ? n.setOutputPackedMatrixTexture(r.texture, i[0], i[1])
        : n.setOutputMatrixTexture(r.texture, i[0], i[1]),
        n.setProgram(t.webGLProgram),
        n.bindVertexArray(t.webGLProgram.vao),
        F().getNumber("WEBGL_VERSION") === 1 &&
            t.infLoc !== null &&
            n.gl.uniform1f(t.infLoc, 1 / 0),
        t.nanLoc !== null && n.gl.uniform1f(t.nanLoc, NaN);
    for (let l = 0; l < e.length; ++l) {
        const c = e[l],
            {
                uniform: u,
                offset: d,
                shape: h,
                texShape: p,
            } = t.variablesLocations[l];
        if (h) {
            const { uniformShape: f } = jf(
                t.program.packedInputs,
                c.shape,
                c.texData.texShape
            );
            switch (f.length) {
                case 1:
                    n.gl.uniform1iv(h, new Int32Array(f));
                    break;
                case 2:
                    n.gl.uniform2iv(h, new Int32Array(f));
                    break;
                case 3:
                    n.gl.uniform3iv(h, new Int32Array(f));
                    break;
                case 4:
                    n.gl.uniform4iv(h, new Int32Array(f));
                    break;
            }
        }
        if (
            (p &&
                n.gl.uniform2i(p, c.texData.texShape[0], c.texData.texShape[1]),
            u != null)
        ) {
            if (c.isUniform) {
                if (X(c.shape) < 2) n.gl.uniform1f(u, c.uniformValues[0]);
                else {
                    let f = c.uniformValues;
                    f instanceof Float32Array || (f = new Float32Array(f)),
                        n.gl.uniform1fv(u, f);
                }
                continue;
            }
            c.texData.slice != null &&
                d != null &&
                n.gl.uniform1i(d, c.texData.slice.flatOffset),
                n.setInputMatrixTexture(c.texData.texture.texture, u, l);
        }
    }
    const a = t.outShapeLocation;
    if (a)
        switch (s.shape.length) {
            case 1:
                n.gl.uniform1iv(a, new Int32Array(s.shape));
                break;
            case 2:
                n.gl.uniform2iv(a, new Int32Array(s.shape));
                break;
            case 3:
                n.gl.uniform3iv(a, new Int32Array(s.shape));
                break;
            case 4:
                n.gl.uniform4iv(a, new Int32Array(s.shape));
                break;
        }
    if (t.outShapeStridesLocation) {
        const l = dt(s.shape);
        switch (s.shape.length) {
            case 2:
                n.gl.uniform1iv(t.outShapeStridesLocation, new Int32Array(l));
                break;
            case 3:
                n.gl.uniform2iv(t.outShapeStridesLocation, new Int32Array(l));
                break;
            case 4:
                n.gl.uniform3iv(t.outShapeStridesLocation, new Int32Array(l));
                break;
        }
    }
    if (
        (t.outTexShapeLocation &&
            n.gl.uniform2i(
                t.outTexShapeLocation,
                s.texData.texShape[0],
                s.texData.texShape[1]
            ),
        t.program.customUniforms && o)
    )
        for (let l = 0; l < t.program.customUniforms.length; ++l) {
            const c = t.program.customUniforms[l],
                u = t.customUniformLocations[l],
                d = o[l];
            if (c.type === "float") n.gl.uniform1fv(u, d);
            else if (c.type === "vec2") n.gl.uniform2fv(u, d);
            else if (c.type === "vec3") n.gl.uniform3fv(u, d);
            else if (c.type === "vec4") n.gl.uniform4fv(u, d);
            else if (c.type === "int") n.gl.uniform1iv(u, d);
            else if (c.type === "ivec2") n.gl.uniform2iv(u, d);
            else if (c.type === "ivec3") n.gl.uniform3iv(u, d);
            else if (c.type === "ivec4") n.gl.uniform4iv(u, d);
            else throw Error(`uniform type ${c.type} is not supported yet.`);
        }
    n.executeProgram();
}
function LA(n, t, e) {
    let s = "";
    t.concat(e).forEach((i) => {
        const a =
            i.texData != null &&
            i.texData.slice != null &&
            i.texData.slice.flatOffset > 0;
        if (n.enableShapeUniforms && !i.isUniform) {
            const l = i.texData.texShape,
                {
                    useSqueezeShape: c,
                    uniformShape: u,
                    keptDims: d,
                } = jf(n.packedInputs, i.shape, l);
            let h = "",
                p = "",
                f = "";
            if (u.length === 1 && n.packedInputs) {
                const I = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)];
                h = `${I[0] > 1}_${I[1] > 1}`;
            } else if (u.length === 2 && !n.packedInputs)
                p = `${u[0] > 1}_${u[1] > 1}`;
            else if (u.length > 2 && !n.packedInputs) {
                const I = dt(u);
                f = `${I[0] === l[1]}_${I[I.length - 1] === l[1]}`;
            }
            const m = i.shape.length,
                g = u.length === 2 && $t(i.shape, l),
                b = X(i.shape) === 1,
                x = Go(i.shape, e.shape),
                w =
                    !n.packedInputs &&
                    m === e.shape.length &&
                    $t(l, e.texData.texShape),
                y =
                    n.packedInputs || u.length > 2
                        ? ""
                        : `${l[0] > 1}_${l[1] > 1}`;
            s += `${m}_${w}_${c ? d : ""}_${
                u.length
            }_${b}_${x}_${g}_${h}_${p}_${f}_${y}_${a}`;
        } else {
            const l = i.isUniform ? "uniform" : i.texData.texShape;
            s += `${i.shape}_${l}_${a}`;
        }
    });
    const o = n.userCode;
    let r = n.constructor.name;
    return (r += "_" + s + "_" + o + `${F().getNumber("WEBGL_VERSION")}`), r;
}
function Me(n) {
    return F().getBool("WEBGL_USE_SHAPES_UNIFORMS") && n <= 4;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MA {
    constructor(t) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !1),
            (this.packedOutput = !0),
            (this.outPackingScheme = bi.DENSE),
            (this.customUniforms = [{ name: "texShape", type: "ivec2" }]);
        const e = Ae();
        (this.outputShape = t),
            (this.enableShapeUniforms = Me(this.outputShape.length)),
            (this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${
            this.enableShapeUniforms
                ? Iu(["r", "c", "d"], t)
                : Qo(["r", "c", "d"], t)
        }
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class WA {
    constructor(t) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outPackingScheme = bi.DENSE),
            (this.customUniforms = [{ name: "texShape", type: "ivec2" }]);
        const e = Ae();
        (this.outputShape = t),
            (this.enableShapeUniforms = Me(this.outputShape.length)),
            (this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${
            this.enableShapeUniforms
                ? Iu(["r", "c", "d"], t)
                : Qo(["r", "c", "d"], t)
        }
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DA {
    constructor(t) {
        (this.variableNames = ["A"]), (this.outTexUsage = un.DOWNLOAD);
        const e = Ae();
        (this.outputShape = t),
            (this.userCode = `
      ${wI}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FA {
    constructor(t) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !1),
            (this.outTexUsage = un.DOWNLOAD);
        const e = Ae();
        (this.outputShape = t),
            (this.userCode = `
      ${wI}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VA = {
    R: 0,
    G: 1,
    B: 2,
    A: 3,
};
class wg {
    constructor(t, e = !1, s = "RGBA") {
        (this.variableNames = ["A"]),
            (this.customUniforms = [{ name: "texShape", type: "ivec2" }]);
        const o = Ae();
        (this.outputShape = t),
            (this.enableShapeUniforms = Me(this.outputShape.length));
        let r = "result";
        e && (r = "floor(result * 255. + 0.5)");
        let i = "";
        for (let a = 0; a < s.length; a++) {
            const l = s[a];
            i += `
          if(offset == ${a}) {
            result = values[${VA[l]}];
          }`;
        }
        this.userCode = `
      ${this.enableShapeUniforms ? Jf() : Qf(t)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${s.length});

        flatIndex = idiv(flatIndex, ${s.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${o.texture2D}(A, uv);
          ${i}
        }
        ${o.output} = vec4(${r}, 0., 0., 0.);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class zA {
    constructor(t, e = !1) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !1),
            (this.packedOutput = !0),
            (this.customUniforms = [{ name: "texShape", type: "ivec2" }]);
        const s = Ae();
        (this.outputShape = t),
            (this.enableShapeUniforms = Me(this.outputShape.length));
        let o = "",
            r = "result";
        e && (r = "floor(result * 255. + 0.5)");
        for (let i = 0; i <= 1; i++)
            for (let a = 0; a <= 1; a++) {
                const l = i * 2 + a;
                o += `
          localCoords = coords;
          if(localCoords[2] + ${a} < ${
                    this.enableShapeUniforms ? "outShape[2]" : `${t[2]}`
                }) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${
                    this.enableShapeUniforms ? "outShape[1]" : `${t[1]}`
                }) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${s.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `;
            }
        this.userCode = `
        ${this.enableShapeUniforms ? Jf() : Qf(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${o}

          ${s.output} = ${r};
        }
    `;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kI(n) {
    const t = Ae(),
        e = `${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
    return jw(n, e);
}
function TI(n) {
    const t = new Float32Array([
        -1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0,
    ]);
    return nI(n, t);
}
function NI(n) {
    const t = new Uint16Array([0, 1, 2, 2, 1, 3]);
    return sI(n, t);
}
function Aa(n, t, e, s, o, r) {
    rI(t, e);
    const i = oI(n),
        a = n.TEXTURE_2D;
    return (
        nt(n, () => n.bindTexture(a, i)),
        nt(n, () => n.texParameteri(a, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE)),
        nt(n, () => n.texParameteri(a, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE)),
        nt(n, () => n.texParameteri(a, n.TEXTURE_MIN_FILTER, n.NEAREST)),
        nt(n, () => n.texParameteri(a, n.TEXTURE_MAG_FILTER, n.NEAREST)),
        F().getNumber("WEBGL_VERSION") === 1
            ? nt(n, () => n.texImage2D(a, 0, s, t, e, 0, o, r, null))
            : nt(n, () => n.texStorage2D(a, 1, s, t, e)),
        nt(n, () => n.bindTexture(n.TEXTURE_2D, null)),
        { texture: i, texShape: [e, t] }
    );
}
function qf(n) {
    return n.internalFormatFloat;
}
function RI(n, t, e, s) {
    const [o, r] = Pa(t, e);
    return Aa(n, o, r, qf(s), s.textureFormatFloat, n.FLOAT);
}
function tm(n) {
    return n.internalFormatHalfFloat;
}
function $I(n, t, e, s) {
    const [o, r] = Pa(t, e);
    return Aa(n, o, r, tm(s), s.textureFormatFloat, s.textureTypeHalfFloat);
}
function em(n) {
    return n.downloadTextureFormat;
}
function GI(n, t, e, s) {
    const [o, r] = Pa(t, e);
    return Aa(n, o, r, em(s), n.RGBA, n.UNSIGNED_BYTE);
}
function nm(n) {
    return n.internalFormatPackedFloat;
}
function EI(n, t, e, s) {
    const [o, r] = Gr(t, e);
    return Aa(n, o, r, nm(s), n.RGBA, n.FLOAT);
}
function sm(n) {
    return n.internalFormatPackedHalfFloat;
}
function LI(n, t, e, s) {
    const [o, r] = Gr(t, e);
    return Aa(n, o, r, sm(s), n.RGBA, s.textureTypeHalfFloat);
}
function MI(n, t, e) {
    return (
        nt(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)),
        zd(n, t, "clipSpacePos", e, 3, 20, 0) && zd(n, t, "uv", e, 2, 20, 12)
    );
}
function WI(n, t, e, s, o, r) {
    nt(n, () => n.bindTexture(n.TEXTURE_2D, t));
    let i, a, l;
    o instanceof Uint8Array
        ? ((i = new Uint8Array(e * s * 4)), (a = n.UNSIGNED_BYTE), (l = n.RGBA))
        : ((i = new Float32Array(e * s * 4)),
          (a = n.FLOAT),
          (l = r.internalFormatPackedFloat)),
        i.set(o),
        F().getNumber("WEBGL_VERSION") === 2
            ? nt(n, () =>
                  n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, e, s, n.RGBA, a, i)
              )
            : nt(n, () =>
                  n.texImage2D(n.TEXTURE_2D, 0, l, e, s, 0, n.RGBA, a, i)
              ),
        nt(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function DI(n, t, e) {
    nt(n, () => n.bindTexture(n.TEXTURE_2D, t)),
        e.data instanceof Uint8Array
            ? F().getNumber("WEBGL_VERSION") === 2
                ? nt(n, () =>
                      n.texSubImage2D(
                          n.TEXTURE_2D,
                          0,
                          0,
                          0,
                          e.width,
                          e.height,
                          n.RGBA,
                          n.UNSIGNED_BYTE,
                          e.data
                      )
                  )
                : nt(n, () =>
                      n.texImage2D(
                          n.TEXTURE_2D,
                          0,
                          n.RGBA,
                          e.width,
                          e.height,
                          0,
                          n.RGBA,
                          n.UNSIGNED_BYTE,
                          e.data
                      )
                  )
            : F().getNumber("WEBGL_VERSION") === 2
            ? nt(n, () =>
                  n.texSubImage2D(
                      n.TEXTURE_2D,
                      0,
                      0,
                      0,
                      n.RGBA,
                      n.UNSIGNED_BYTE,
                      e
                  )
              )
            : nt(n, () =>
                  n.texImage2D(
                      n.TEXTURE_2D,
                      0,
                      n.RGBA,
                      n.RGBA,
                      n.UNSIGNED_BYTE,
                      e
                  )
              ),
        nt(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function FI(n, t, e, s) {
    const o = n.createBuffer();
    nt(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, o));
    const a = 4 * 4 * t * e;
    return (
        nt(n, () => n.bufferData(n.PIXEL_PACK_BUFFER, a, n.STREAM_READ)),
        nt(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, 0)),
        nt(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, null)),
        o
    );
}
function VI(n, t, e) {
    const s = n,
        o = new Float32Array(e);
    return (
        s.bindBuffer(s.PIXEL_PACK_BUFFER, t),
        s.getBufferSubData(s.PIXEL_PACK_BUFFER, 0, o),
        s.bindBuffer(s.PIXEL_PACK_BUFFER, null),
        o
    );
}
function zI(n, t, e, s) {
    const [o, r] = Pa(t, e),
        i = 4,
        a = new Uint8Array(WP(t * e, i));
    return (
        nt(n, () =>
            n.readPixels(
                0,
                0,
                o,
                r,
                s.downloadTextureFormat,
                n.UNSIGNED_BYTE,
                a
            )
        ),
        new Float32Array(a.buffer)
    );
}
function PI(n, t, e, s, o, r, i, a) {
    const l = n,
        c = new Float32Array(DP(r, i));
    return (
        l.bindBuffer(l.PIXEL_PACK_BUFFER, t),
        l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, c),
        l.bindBuffer(l.PIXEL_PACK_BUFFER, null),
        c
    );
}
function AI(n, t, e) {
    const s = new Float32Array(t * e * 4);
    return nt(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, s)), s;
}
const UQ = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            bindVertexProgramAttributeStreams: MI,
            createBufferFromOutputTexture: FI,
            createFloat16MatrixTexture: $I,
            createFloat16PackedMatrixTexture: LI,
            createFloat32MatrixTexture: RI,
            createIndexBuffer: NI,
            createPackedMatrixTexture: EI,
            createUnsignedBytesMatrixTexture: GI,
            createVertexBuffer: TI,
            createVertexShader: kI,
            downloadByteEncodedFloatMatrixFromOutputTexture: zI,
            downloadFloat32MatrixFromBuffer: VI,
            downloadMatrixFromPackedOutputTexture: AI,
            downloadPackedMatrixFromBuffer: PI,
            getInternalFormatForFloat16MatrixTexture: tm,
            getInternalFormatForFloat16PackedMatrixTexture: sm,
            getInternalFormatForFloat32MatrixTexture: qf,
            getInternalFormatForPackedMatrixTexture: nm,
            getInternalFormatForUnsignedBytesMatrixTexture: em,
            uploadDenseMatrixToTexture: WI,
            uploadPixelDataToTexture: DI,
        },
        Symbol.toStringTag,
        { value: "Module" }
    )
);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Au {
    constructor(t) {
        (this.outputTexture = null),
            (this.program = null),
            (this.disposed = !1),
            (this.itemsToPoll = []);
        const e = F().getNumber("WEBGL_VERSION");
        if (
            (t != null ? ((this.gl = t), EP(e, t)) : (this.gl = Bn(e)),
            (t = this.gl),
            F().getNumber("WEBGL_VERSION") === 2)
        ) {
            const r = t;
            (this.createVertexArray = () => nt(r, () => r.createVertexArray())),
                (this.bindVertexArray = (i) =>
                    nt(r, () => r.bindVertexArray(i))),
                (this.deleteVertexArray = (i) =>
                    nt(r, () => r.deleteVertexArray(i))),
                (this.getVertexArray = () =>
                    nt(r, () => r.getParameter(r.VERTEX_ARRAY_BINDING)));
        } else if (t != null) {
            const r = t.getExtension("OES_vertex_array_object");
            if (r == null)
                throw new Error(
                    "All WebGL1 implementations are expected to offer OES_vertex_array_object."
                );
            (this.createVertexArray = () =>
                nt(t, () => r.createVertexArrayOES())),
                (this.bindVertexArray = (i) =>
                    nt(t, () => r.bindVertexArrayOES(i))),
                (this.deleteVertexArray = (i) =>
                    nt(t, () => r.deleteVertexArrayOES(i))),
                (this.getVertexArray = () =>
                    nt(t, () => t.getParameter(r.VERTEX_ARRAY_BINDING_OES)));
        }
        let s = "WEBGL_color_buffer_float";
        const o = "EXT_color_buffer_half_float";
        if (
            ((this.parallelCompilationExtension = this.gl.getExtension(
                "KHR_parallel_shader_compile"
            )),
            F().getNumber("WEBGL_VERSION") === 1)
        ) {
            const r = "OES_texture_float",
                i = "OES_texture_half_float";
            if (((this.textureFloatExtension = jr(this.gl, r)), dn(this.gl, i)))
                this.textureHalfFloatExtension = jr(this.gl, i);
            else if (F().get("WEBGL_FORCE_F16_TEXTURES"))
                throw new Error(
                    "GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true."
                );
            if (
                ((this.colorBufferFloatExtension = this.gl.getExtension(s)),
                dn(this.gl, o))
            )
                this.colorBufferHalfFloatExtension = jr(this.gl, o);
            else if (F().get("WEBGL_FORCE_F16_TEXTURES"))
                throw new Error(
                    "GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true."
                );
        } else if (((s = "EXT_color_buffer_float"), dn(this.gl, s)))
            this.colorBufferFloatExtension = this.gl.getExtension(s);
        else if (dn(this.gl, o))
            this.colorBufferHalfFloatExtension = this.gl.getExtension(o);
        else
            throw new Error(
                "GL context does not support color renderable floats"
            );
        (this.vertexBuffer = TI(this.gl)),
            (this.indexBuffer = NI(this.gl)),
            (this.framebuffer = iI(this.gl)),
            (this.textureConfig = Uf(this.gl, this.textureHalfFloatExtension));
    }
    get debug() {
        return F().getBool("DEBUG");
    }
    dispose() {
        if (this.disposed) return;
        this.program != null &&
            console.warn(
                "Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."
            ),
            this.outputTexture != null &&
                console.warn(
                    "Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing."
                );
        const t = this.gl;
        nt(t, () => t.finish()),
            nt(t, () => t.bindFramebuffer(t.FRAMEBUFFER, null)),
            nt(t, () => t.deleteFramebuffer(this.framebuffer)),
            nt(t, () => t.bindBuffer(t.ARRAY_BUFFER, null)),
            nt(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null)),
            nt(t, () => t.deleteBuffer(this.indexBuffer)),
            (this.disposed = !0);
    }
    createFloat32MatrixTexture(t, e) {
        return this.throwIfDisposed(), RI(this.gl, t, e, this.textureConfig);
    }
    createFloat16MatrixTexture(t, e) {
        return this.throwIfDisposed(), $I(this.gl, t, e, this.textureConfig);
    }
    createUnsignedBytesMatrixTexture(t, e) {
        return this.throwIfDisposed(), GI(this.gl, t, e, this.textureConfig);
    }
    uploadPixelDataToTexture(t, e) {
        this.throwIfDisposed(), DI(this.gl, t, e);
    }
    uploadDenseMatrixToTexture(t, e, s, o) {
        this.throwIfDisposed(), WI(this.gl, t, e, s, o, this.textureConfig);
    }
    createFloat16PackedMatrixTexture(t, e) {
        return this.throwIfDisposed(), LI(this.gl, t, e, this.textureConfig);
    }
    createPackedMatrixTexture(t, e) {
        return this.throwIfDisposed(), EI(this.gl, t, e, this.textureConfig);
    }
    deleteMatrixTexture(t) {
        this.throwIfDisposed(),
            this.outputTexture === t &&
                (Pd(this.gl, this.framebuffer), (this.outputTexture = null)),
            nt(this.gl, () => this.gl.deleteTexture(t));
    }
    downloadByteEncodedFloatMatrixFromOutputTexture(t, e, s) {
        return this.downloadMatrixDriver(t, () =>
            zI(this.gl, e, s, this.textureConfig)
        );
    }
    downloadPackedMatrixFromBuffer(t, e, s, o, r, i) {
        return PI(this.gl, t, e, s, o, r, i, this.textureConfig);
    }
    downloadFloat32MatrixFromBuffer(t, e) {
        return VI(this.gl, t, e);
    }
    createBufferFromTexture(t, e, s) {
        this.bindTextureToFrameBuffer(t);
        const o = FI(this.gl, e, s, this.textureConfig);
        return this.unbindTextureToFrameBuffer(), o;
    }
    createAndWaitForFence() {
        const t = this.createFence(this.gl);
        return this.pollFence(t);
    }
    createFence(t) {
        let e, s;
        if (F().getBool("WEBGL_FENCE_API_ENABLED")) {
            const o = t,
                r = o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE, 0);
            t.flush(),
                (s = () => {
                    const i = o.clientWaitSync(r, 0, 0);
                    return (
                        i === o.ALREADY_SIGNALED || i === o.CONDITION_SATISFIED
                    );
                }),
                (e = r);
        } else
            F().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0
                ? ((e = this.beginQuery()),
                  this.endQuery(),
                  (s = () =>
                      this.isQueryAvailable(
                          e,
                          F().getNumber(
                              "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
                          )
                      )))
                : (s = () => !0);
        return { query: e, isFencePassed: s };
    }
    downloadMatrixFromPackedTexture(t, e, s) {
        return this.downloadMatrixDriver(t, () => AI(this.gl, e, s));
    }
    createProgram(t) {
        this.throwIfDisposed();
        const e = this.gl;
        this.vertexShader == null && (this.vertexShader = kI(e));
        const s = tI(e);
        nt(e, () => e.attachShader(s, this.vertexShader)),
            nt(e, () => e.attachShader(s, t)),
            eI(e, s);
        const o = Object.assign(s, { vao: this.createVertexArray() });
        return this.debug && al(e, o), o;
    }
    buildVao(t) {
        this.setProgram(t), this.bindVertexArray(t.vao);
        const e = this.gl;
        nt(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this.indexBuffer)),
            MI(e, t, this.vertexBuffer);
    }
    deleteProgram(t) {
        this.throwIfDisposed(),
            t === this.program && (this.program = null),
            t != null &&
                (nt(this.gl, () => this.gl.deleteProgram(t)),
                this.deleteVertexArray(t.vao));
    }
    setProgram(t) {
        this.throwIfDisposed(),
            (this.program = t),
            this.program != null && this.debug && al(this.gl, this.program),
            nt(this.gl, () => this.gl.useProgram(t));
    }
    getUniformLocation(t, e, s = !0) {
        return (
            this.throwIfDisposed(), s ? lI(this.gl, t, e) : cI(this.gl, t, e)
        );
    }
    getAttributeLocation(t, e) {
        return (
            this.throwIfDisposed(),
            nt(this.gl, () => this.gl.getAttribLocation(t, e))
        );
    }
    getUniformLocationNoThrow(t, e) {
        return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);
    }
    setInputMatrixTexture(t, e, s) {
        this.throwIfDisposed(), this.throwIfNoProgram(), uI(this.gl, t, e, s);
    }
    setOutputMatrixTexture(t, e, s) {
        this.setOutputMatrixTextureDriver(t, s, e);
    }
    setOutputPackedMatrixTexture(t, e, s) {
        this.throwIfDisposed();
        const [o, r] = Gr(e, s);
        this.setOutputMatrixTextureDriver(t, o, r);
    }
    setOutputMatrixWriteRegion(t, e, s, o) {
        this.setOutputMatrixWriteRegionDriver(s, t, o, e);
    }
    setOutputPackedMatrixWriteRegion(t, e, s, o) {
        throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
    }
    debugValidate() {
        this.program != null && al(this.gl, this.program), qr(this.gl);
    }
    executeProgram() {
        this.throwIfDisposed(), this.throwIfNoProgram();
        const t = this.gl;
        if (this.debug) {
            const e = this.getVertexArray();
            console.assert(
                e === this.program.vao,
                "VAO changed between setProgram and executeProgram!"
            ),
                this.debugValidate();
        }
        nt(t, () => t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0));
    }
    blockUntilAllProgramsCompleted() {
        this.throwIfDisposed(), nt(this.gl, () => this.gl.finish());
    }
    getQueryTimerExtension() {
        return (
            this.disjointQueryTimerExtension == null &&
                (this.disjointQueryTimerExtension = jr(
                    this.gl,
                    F().getNumber(
                        "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
                    ) === 2
                        ? "EXT_disjoint_timer_query_webgl2"
                        : "EXT_disjoint_timer_query"
                )),
            this.disjointQueryTimerExtension
        );
    }
    getQueryTimerExtensionWebGL2() {
        return this.getQueryTimerExtension();
    }
    getQueryTimerExtensionWebGL1() {
        return this.getQueryTimerExtension();
    }
    beginQuery() {
        if (
            F().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2
        ) {
            const s = this.gl,
                o = this.getQueryTimerExtensionWebGL2(),
                r = s.createQuery();
            return s.beginQuery(o.TIME_ELAPSED_EXT, r), r;
        }
        const t = this.getQueryTimerExtensionWebGL1(),
            e = t.createQueryEXT();
        return t.beginQueryEXT(t.TIME_ELAPSED_EXT, e), e;
    }
    endQuery() {
        if (
            F().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2
        ) {
            const e = this.gl,
                s = this.getQueryTimerExtensionWebGL2();
            e.endQuery(s.TIME_ELAPSED_EXT);
            return;
        }
        const t = this.getQueryTimerExtensionWebGL1();
        t.endQueryEXT(t.TIME_ELAPSED_EXT);
    }
    async waitForQueryAndGetTime(t) {
        return (
            await id(
                () =>
                    this.disposed || // while testing contexts are created / disposed
                    // in rapid succession, so without this check we
                    // may poll for the query timer indefinitely
                    this.isQueryAvailable(
                        t,
                        F().getNumber(
                            "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"
                        )
                    )
            ),
            this.getQueryTime(
                t,
                F().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")
            )
        );
    }
    getQueryTime(t, e) {
        if (e === 0) return null;
        if (e === 2) {
            const s = this.gl;
            return s.getQueryParameter(t, s.QUERY_RESULT) / 1e6;
        } else {
            const s = this.getQueryTimerExtensionWebGL1();
            return s.getQueryObjectEXT(t, s.QUERY_RESULT_EXT) / 1e6;
        }
    }
    isQueryAvailable(t, e) {
        if (e === 0) return !0;
        if (e === 2) {
            const s = this.gl,
                o = this.getQueryTimerExtensionWebGL2(),
                r = s.getQueryParameter(t, s.QUERY_RESULT_AVAILABLE);
            return (
                this.disjoint == null &&
                    (this.disjoint = this.gl.getParameter(o.GPU_DISJOINT_EXT)),
                r && !this.disjoint
            );
        } else {
            const s = this.getQueryTimerExtensionWebGL1(),
                o = s.getQueryObjectEXT(t, s.QUERY_RESULT_AVAILABLE_EXT);
            return (
                this.disjoint == null &&
                    (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)),
                o && !this.disjoint
            );
        }
    }
    pollFence(t) {
        return new Promise((e) => {
            this.addItemToPoll(
                () => t.isFencePassed(),
                () => e()
            );
        });
    }
    pollItems() {
        const t = PA(this.itemsToPoll.map((e) => e.isDoneFn));
        for (let e = 0; e <= t; ++e) {
            const { resolveFn: s } = this.itemsToPoll[e];
            s();
        }
        this.itemsToPoll = this.itemsToPoll.slice(t + 1);
    }
    addItemToPoll(t, e) {
        if (
            (this.itemsToPoll.push({ isDoneFn: t, resolveFn: e }),
            this.itemsToPoll.length > 1)
        )
            return;
        let s;
        "setTimeoutCustom" in F().platform &&
            (s = F().platform.setTimeoutCustom.bind(F().platform)),
            id(
                () => (this.pollItems(), this.itemsToPoll.length === 0),
                () => 0,
                null,
                s
            );
    }
    bindTextureToFrameBuffer(t) {
        this.throwIfDisposed(),
            ll(this.gl, t, this.framebuffer),
            this.debug && qr(this.gl);
    }
    unbindTextureToFrameBuffer() {
        this.outputTexture != null
            ? (ll(this.gl, this.outputTexture, this.framebuffer),
              this.debug && qr(this.gl))
            : Pd(this.gl, this.framebuffer);
    }
    downloadMatrixDriver(t, e) {
        this.bindTextureToFrameBuffer(t);
        const s = e();
        return this.unbindTextureToFrameBuffer(), s;
    }
    setOutputMatrixTextureDriver(t, e, s) {
        this.throwIfDisposed();
        const o = this.gl;
        ll(o, t, this.framebuffer),
            this.debug && qr(o),
            (this.outputTexture = t),
            nt(o, () => o.viewport(0, 0, e, s)),
            nt(o, () => o.scissor(0, 0, e, s));
    }
    setOutputMatrixWriteRegionDriver(t, e, s, o) {
        this.throwIfDisposed(), nt(this.gl, () => this.gl.scissor(t, e, s, o));
    }
    throwIfDisposed() {
        if (this.disposed)
            throw new Error("Attempted to use disposed GPGPUContext.");
    }
    throwIfNoProgram() {
        if (this.program == null)
            throw new Error("No GPU program is currently set.");
    }
}
function PA(n) {
    let t = 0;
    for (; t < n.length && n[t](); ++t);
    return t - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const {
    addImpl: AA,
    bincountImpl: OI,
    bincountReduceImpl: OA,
    bitwiseAndImpl: XA,
    castImpl: KA,
    ceilImpl: ZA,
    concatImpl: BA,
    equalImpl: HA,
    expImpl: _A,
    expm1Impl: UA,
    floorImpl: YA,
    gatherNdImpl: QA,
    gatherV2Impl: JA,
    greaterImpl: jA,
    greaterEqualImpl: qA,
    lessImpl: tO,
    lessEqualImpl: eO,
    linSpaceImpl: nO,
    logImpl: sO,
    maxImpl: oO,
    maximumImpl: rO,
    minimumImpl: iO,
    multiplyImpl: aO,
    negImpl: lO,
    notEqualImpl: cO,
    prodImpl: uO,
    raggedGatherImpl: dO,
    raggedRangeImpl: hO,
    raggedTensorToTensorImpl: pO,
    rangeImpl: fO,
    rsqrtImpl: mO,
    scatterImpl: gO,
    sigmoidImpl: bO,
    simpleAbsImpl: XI,
    sliceImpl: xO,
    sparseFillEmptyRowsImpl: yO,
    sparseReshapeImpl: wO,
    sparseSegmentReductionImpl: KI,
    sqrtImpl: IO,
    staticRegexReplaceImpl: CO,
    stridedSliceImpl: vO,
    stringNGramsImpl: SO,
    stringSplitImpl: kO,
    stringToHashBucketFastImpl: TO,
    subImpl: NO,
    tileImpl: RO,
    topKImpl: $O,
    transposeImpl: om,
    uniqueImpl: GO,
} = fW;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZI(n, t) {
    return ["x", "y", "z", "w", "u", "v"].slice(0, t).map((e) => `${n}.${e}`);
}
function Fe(n, t) {
    return t === 1 ? [n] : ZI(n, t);
}
function EO(n, t) {
    if (n === 1) return "rc";
    let e = "";
    for (let s = 0; s < n; s++) (e += t[s]), s < n - 1 && (e += ",");
    return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LO {
    constructor(t) {
        if (
            ((this.variableNames = ["A"]),
            (this.packedInputs = !1),
            (this.packedOutput = !0),
            (this.outputShape = t),
            (this.rank = t.length),
            (this.enableShapeUniforms = Me(this.outputShape.length)),
            this.rank === 0)
        )
            this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
        else {
            const e = Fe("rc", this.rank),
                s = Vt(this.rank),
                o = this.getOutOfBoundsCondition(e),
                r = this.getSetup(e),
                i = this.getOutput(e);
            this.userCode = `
        void main() {
          ${s} rc = getOutputCoords();

          if(${o}) {
            setOutput(vec4(0));
          } else {
            ${r}

            setOutput(vec4(${i}));
          }
        }
      `;
        }
    }
    getSourceCoordsArr(t) {
        const e = [];
        for (let s = 0; s <= 1; s++)
            for (let o = 0; o <= 1; o++) {
                let r = `${s === 0 ? "r" : "rp1"}, ${o === 0 ? "c" : "cp1"}`;
                for (let i = 2; i < this.rank; i++)
                    r = `${t[t.length - 1 - i]},` + r;
                e.push(r);
            }
        return e;
    }
    getOutOfBoundsCondition(t) {
        if (this.rank === 1)
            return `rc > ${
                this.enableShapeUniforms ? "outShape" : this.outputShape[0]
            }`;
        let e = "";
        for (let s = this.rank - 2; s < this.rank; s++)
            (e += `${t[s]} >= ${
                this.enableShapeUniforms
                    ? `outShape[${s}]`
                    : this.outputShape[s]
            }`),
                s < this.rank - 1 && (e += "||");
        return e;
    }
    getSetup(t) {
        if (this.rank === 1) return "";
        const e = t.slice(-2),
            s = this.enableShapeUniforms
                ? `outShape[${this.rank} - 1]`
                : this.outputShape[this.rank - 1],
            o = this.enableShapeUniforms
                ? `outShape[${this.rank} - 2]`
                : this.outputShape[this.rank - 2];
        return `
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${s};
      bool rEdge = rp1 >= ${o};
    `;
    }
    getOutput(t) {
        const e = this.getSourceCoordsArr(t);
        return this.rank === 1
            ? `getA(rc), (rc + 1 >= ${
                  this.enableShapeUniforms ? "outShape" : this.outputShape[0]
              } ? 0. : getA(rc + 1)), 0, 0`
            : `getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BI {
    constructor(t, e) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [{ name: "inputShape", type: "ivec3" }]),
            (this.outputShape = t),
            (this.enableShapeUniforms = Me(this.outputShape.length));
        let s = "";
        for (let o = 0; o < 4; o++) {
            let r = "thisRC = rc;";
            o % 2 === 1 && (r += "thisRC.z += 1;"),
                o > 1 && (r += "thisRC.y += 1;"),
                (s += `
        ${r}
        ${o > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${o}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${o > 0 ? "}" : ""}
      `);
        }
        this.userCode = `
      ${MO(e, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? Jf() : Qf(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : t[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : t[2]};

        ${s}

        setOutput(result);
      }
    `;
    }
}
function MO(n, t) {
    return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t ? _P(["r", "c", "d"], "inputShape") : Qo(["r", "c", "d"], n)}
      return ivec3(r, c, d);
    }
  `;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class WO {
    constructor(t) {
        (this.gpgpu = t),
            (this.numUsedTextures = 0),
            (this.numFreeTextures = 0),
            (this._numBytesAllocated = 0),
            (this._numBytesFree = 0),
            (this.freeTextures = {}),
            (this.usedTextures = {}),
            (this.logEnabled = !1);
    }
    acquireTexture(t, e, s) {
        const o = Cg(e, s),
            r = vg(t, o, s);
        r in this.freeTextures || (this.freeTextures[r] = []),
            r in this.usedTextures || (this.usedTextures[r] = []);
        const i = Ig(t, o, this.gpgpu.gl, this.gpgpu.textureConfig, s);
        if (this.freeTextures[r].length > 0) {
            this.numFreeTextures--,
                this.numUsedTextures++,
                (this._numBytesFree -= i),
                this.log();
            const l = this.freeTextures[r].pop();
            return this.usedTextures[r].push(l), l;
        }
        let a;
        return (
            o === Ce.PACKED_2X2_FLOAT32
                ? (a = this.gpgpu.createPackedMatrixTexture(t[0], t[1]))
                : o === Ce.PACKED_2X2_FLOAT16
                ? (a = this.gpgpu.createFloat16PackedMatrixTexture(t[0], t[1]))
                : o === Ce.UNPACKED_FLOAT32
                ? (a = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]))
                : o === Ce.UNPACKED_FLOAT16
                ? (a = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]))
                : o === Ce.PACKED_4X1_UNSIGNED_BYTE &&
                  (a = this.gpgpu.createUnsignedBytesMatrixTexture(t[0], t[1])),
            this.usedTextures[r].push(a),
            this.numUsedTextures++,
            (this._numBytesAllocated += i),
            this.log(),
            a
        );
    }
    releaseTexture(t, e, s, o) {
        if (this.freeTextures == null) return;
        const r = Cg(s, o),
            i = vg(e, r, o);
        i in this.freeTextures || (this.freeTextures[i] = []);
        const a = Ig(e, r, this.gpgpu.gl, this.gpgpu.textureConfig, o),
            l = F().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");
        l !== -1 && this._numBytesAllocated > l
            ? (this.gpgpu.deleteMatrixTexture(t.texture),
              (this._numBytesAllocated -= a))
            : (this.freeTextures[i].push(t),
              this.numFreeTextures++,
              (this._numBytesFree += a)),
            this.numUsedTextures--;
        const c = this.usedTextures[i],
            u = c && c.indexOf(t);
        if (u == null || u < 0)
            throw new Error(
                "Cannot release a texture that was never provided by this texture manager"
            );
        (c[u] = c[c.length - 1]), c.pop(), this.log();
    }
    log() {
        if (!this.logEnabled) return;
        const t = this.numFreeTextures + this.numUsedTextures;
        console.log(
            "Free/Used",
            `${this.numFreeTextures} / ${this.numUsedTextures}`,
            `(${t})`
        );
        const e = this._numBytesFree / this._numBytesAllocated;
        console.log(`Bytes allocated: ${this._numBytesAllocated}`),
            console.log(
                `Bytes unused: ${this._numBytesFree} (${Math.round(100 * e)}%)`
            );
    }
    get numBytesAllocated() {
        return this._numBytesAllocated;
    }
    get numBytesFree() {
        return this._numBytesFree;
    }
    getNumUsedTextures() {
        return this.numUsedTextures;
    }
    getNumFreeTextures() {
        return this.numFreeTextures;
    }
    dispose() {
        if (this.freeTextures != null) {
            for (const t in this.freeTextures)
                this.freeTextures[t].forEach((e) => {
                    this.gpgpu.deleteMatrixTexture(e.texture);
                });
            for (const t in this.usedTextures)
                this.usedTextures[t].forEach((e) => {
                    this.gpgpu.deleteMatrixTexture(e.texture);
                });
            (this.freeTextures = null),
                (this.usedTextures = null),
                (this.numUsedTextures = 0),
                (this.numFreeTextures = 0),
                (this._numBytesAllocated = 0),
                (this._numBytesFree = 0);
        }
    }
}
function DO(n, t) {
    const e = n;
    if (t === e.R32F) return 4;
    if (t === e.R16F) return 2;
    if (t === e.RGBA32F) return 16;
    if (t === n.RGBA) return 16;
    if (t === e.RGBA16F) return 8;
    if (t === e.RGBA8) return 4;
    throw new Error(`Unknown internal format ${t}`);
}
function Ig(n, t, e, s, o) {
    const r = FO(t, s);
    let i;
    if (o) {
        const [l, c] = Gr(n[0], n[1]);
        i = l * c;
    } else {
        const [l, c] = Pa(n[0], n[1]);
        i = l * c;
    }
    const a = DO(e, r);
    return i * a;
}
function FO(n, t) {
    switch (n) {
        case Ce.PACKED_2X2_FLOAT32:
            return nm(t);
        case Ce.PACKED_2X2_FLOAT16:
            return sm(t);
        case Ce.UNPACKED_FLOAT32:
            return qf(t);
        case Ce.UNPACKED_FLOAT16:
            return tm(t);
        case Ce.PACKED_4X1_UNSIGNED_BYTE:
            return em(t);
        default:
            throw new Error(`Unknown physical texture type ${n}`);
    }
}
function VO(n) {
    return F().getBool("WEBGL_RENDER_FLOAT32_ENABLED")
        ? n
            ? Ce.PACKED_2X2_FLOAT32
            : Ce.UNPACKED_FLOAT32
        : n
        ? Ce.PACKED_2X2_FLOAT16
        : Ce.UNPACKED_FLOAT16;
}
function Cg(n, t) {
    if (n === un.UPLOAD) return Ce.PACKED_2X2_FLOAT32;
    if (n === un.RENDER || n == null) return VO(t);
    if (n === un.DOWNLOAD || n === un.PIXELS)
        return Ce.PACKED_4X1_UNSIGNED_BYTE;
    throw new Error(`Unknown logical texture type ${n}`);
}
function vg(n, t, e) {
    return `${n[0]}_${n[1]}_${t}_${e}`;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qn {
    constructor(t, e) {
        (this.variableNames = ["A"]),
            (this.outputShape = t),
            (this.enableShapeUniforms = Me(this.outputShape.length)),
            (this.userCode = `
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `);
    }
}
const En = "if (isnan(x)) return x;",
    zO = "return x;",
    Sg = "return abs(x);",
    PO = "return (x >= 0.0) ? x : (exp(x) - 1.0);",
    AO =
        En +
        `
  return (x < 0.0) ? 0.0 : x;
`,
    OO =
        En +
        `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,
    Ms = "return x;",
    XO = "return 1.0 / (1.0 + exp(-1.0 * x));";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KO = "return x;",
    ZO = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,
    BO = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    HO = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    _O = "return 1.0 / (1.0 + exp(-1.0 * x));";
class Vs {
    constructor(t, e) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t),
            (this.enableShapeUniforms = Me(this.outputShape.length)),
            (this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UO {
    constructor(t) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !1),
            (this.outputShape = t),
            (this.enableShapeUniforms = Me(this.outputShape.length));
        const e = t.length,
            s = Fe("rc", e),
            o = Vt(e),
            r = EO(e, s),
            i = s.slice(-2),
            a = e <= 1 ? "rc" : `vec2(${i.join(",")})`;
        this.userCode = `
      void main() {
        ${o} rc = getOutputCoords();
        vec4 packedInput = getA(${r});

        setOutput(getChannel(packedInput, ${a}));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YO = C0,
    QO = 1e-7,
    JO = 1e-4,
    ja = {};
function jO(n) {
    return n in ja || (ja[n] = {}), ja[n];
}
const qO = F().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),
    tX = 600;
function eX() {
    return F().global.screen == null
        ? 1024
        : (F().global.screen.height *
              F().global.screen.width *
              window.devicePixelRatio *
              tX) /
              1024 /
              1024;
}
class Cu extends _d {
    nextDataId() {
        return Cu.nextDataId++;
    }
    constructor(t) {
        if (
            (super(),
            (this.pendingRead = /* @__PURE__ */ new WeakMap()),
            (this.pendingDisposal = /* @__PURE__ */ new WeakSet()),
            (this.dataRefCount = /* @__PURE__ */ new WeakMap()),
            (this.numBytesInGPU = 0),
            (this.uploadWaitMs = 0),
            (this.downloadWaitMs = 0),
            (this.lastGlFlushTime = 0),
            (this.warnedAboutMemory = !1),
            (this.pendingDeletes = 0),
            (this.disposed = !1),
            !F().getBool("HAS_WEBGL"))
        )
            throw new Error("WebGL is not supported on this device");
        let e;
        if (t != null) {
            if (t instanceof Au) e = t;
            else {
                const s = Bn(F().getNumber("WEBGL_VERSION"), t);
                e = new Au(s);
            }
            (this.binaryCache = {}), (this.gpgpuCreatedLocally = !1);
        } else {
            const s = Bn(F().getNumber("WEBGL_VERSION"));
            (e = new Au(s)),
                (this.binaryCache = jO(F().getNumber("WEBGL_VERSION"))),
                (this.gpgpuCreatedLocally = !0);
        }
        (this.gpgpu = e),
            (this.canvas = this.gpgpu.gl.canvas),
            (this.textureManager = new WO(this.gpgpu)),
            (this.numMBBeforeWarning = eX()),
            (this.texData = new qg(this, Ot()));
    }
    numDataIds() {
        return this.texData.numDataIds() - this.pendingDeletes;
    }
    // Writes a new entry to the data store with a WebGL texture, and registers it
    // to the texture manager.
    writeTexture(t, e, s, o, r, i) {
        const a = this.makeTensorInfo(e, s),
            l = this.texData.get(a.dataId);
        (l.isPacked = !1),
            (l.texture = { texture: t, texShape: [o, r] }),
            (l.texShape = [o, r]);
        const c = ti(e),
            u = new wg(c, !1, i),
            d = this.runWebGLProgram(u, [a], s, [[o, r]]);
        return (
            (d.shape = e),
            (l.texture = null),
            this.disposeIntermediateTensorInfo(a),
            d.dataId
        );
    }
    write(t, e, s) {
        if (
            ((F().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") ||
                F().getBool("DEBUG")) &&
                this.checkNumericalProblems(t),
            s === "complex64" && t != null)
        )
            throw new Error(
                "Cannot write to a complex64 dtype. Please use tf.complex(real, imag)."
            );
        const o = { id: this.nextDataId() };
        return (
            this.texData.set(o, {
                shape: e,
                dtype: s,
                values: t,
                usage: un.UPLOAD,
                refCount: 1,
            }),
            o
        );
    }
    /** Return refCount of a `TensorData`. */
    refCount(t) {
        return this.texData.has(t) ? this.texData.get(t).refCount : 0;
    }
    /** Increase refCount of a `TextureData`. */
    incRef(t) {
        const e = this.texData.get(t);
        e.refCount++;
    }
    /** Decrease refCount of a `TextureData`. */
    decRef(t) {
        if (this.texData.has(t)) {
            const e = this.texData.get(t);
            e.refCount--;
        }
    }
    move(t, e, s, o, r) {
        if (
            (F().getBool("DEBUG") && this.checkNumericalProblems(e),
            o === "complex64")
        )
            throw new Error(
                "Cannot write to a complex64 dtype. Please use tf.complex(real, imag)."
            );
        this.texData.set(t, {
            shape: s,
            dtype: o,
            values: e,
            usage: un.UPLOAD,
            refCount: r,
        });
    }
    disposeIntermediateTensorInfo(t) {
        this.disposeData(t.dataId);
    }
    readSync(t) {
        const e = this.texData.get(t),
            {
                values: s,
                dtype: o,
                complexTensorInfos: r,
                slice: i,
                shape: a,
                isPacked: l,
            } = e;
        if (i != null) {
            let h;
            l ? (h = new Vs(a, Ms)) : (h = new qn(a, Ms));
            const p = this.runWebGLProgram(
                    h,
                    [{ dataId: t, shape: a, dtype: o }],
                    o
                ),
                f = this.readSync(p.dataId);
            return this.disposeIntermediateTensorInfo(p), f;
        }
        if (s != null) return this.convertAndCacheOnCPU(t);
        if (o === "string") return s;
        const c = this.activeTimers != null;
        let u;
        c && (u = Ie());
        let d;
        if (o === "complex64") {
            const h = this.readSync(r.real.dataId),
                p = this.readSync(r.imag.dataId);
            d = xs(h, p);
        } else d = this.getValuesFromTexture(t);
        return (
            c && (this.downloadWaitMs += Ie() - u),
            this.convertAndCacheOnCPU(t, d)
        );
    }
    async read(t) {
        if (this.pendingRead.has(t)) {
            const f = this.pendingRead.get(t);
            return new Promise((m) => f.push(m));
        }
        const e = this.texData.get(t),
            {
                values: s,
                shape: o,
                slice: r,
                dtype: i,
                complexTensorInfos: a,
                isPacked: l,
            } = e;
        if (r != null) {
            let f;
            l ? (f = new Vs(o, Ms)) : (f = new qn(o, Ms));
            const m = this.runWebGLProgram(
                    f,
                    [{ dataId: t, shape: o, dtype: i }],
                    i
                ),
                g = this.read(m.dataId);
            return this.disposeIntermediateTensorInfo(m), g;
        }
        if (s != null) return this.convertAndCacheOnCPU(t);
        if (
            F().getBool("DEBUG") &&
            !F().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") &&
            F().getNumber("WEBGL_VERSION") === 2
        )
            throw new Error(
                "tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported."
            );
        let c = null,
            u;
        if (i !== "complex64" && F().get("WEBGL_BUFFER_SUPPORTED")) {
            u = this.decode(t);
            const f = this.texData.get(u.dataId);
            c = this.gpgpu.createBufferFromTexture(f.texture.texture, ...Qa(o));
        }
        this.pendingRead.set(t, []),
            i !== "complex64" && (await this.gpgpu.createAndWaitForFence());
        let d;
        if (i === "complex64") {
            const f = await Promise.all([
                    this.read(a.real.dataId),
                    this.read(a.imag.dataId),
                ]),
                m = f[0],
                g = f[1];
            d = xs(m, g);
        } else if (c == null) d = this.getValuesFromTexture(t);
        else {
            const f = X(o);
            d = this.gpgpu.downloadFloat32MatrixFromBuffer(c, f);
        }
        if ((u != null && this.disposeIntermediateTensorInfo(u), c != null)) {
            const f = this.gpgpu.gl;
            nt(f, () => f.deleteBuffer(c));
        }
        const h = this.convertAndCacheOnCPU(t, d),
            p = this.pendingRead.get(t);
        return (
            this.pendingRead.delete(t),
            p.forEach((f) => f(h)),
            this.pendingDisposal.has(t) &&
                (this.pendingDisposal.delete(t),
                this.disposeData(t) && Ot().removeDataId(t, this),
                this.pendingDeletes--),
            h
        );
    }
    /**
     * Read tensor to a new texture that is densely packed for ease of use.
     * @param dataId The source tensor.
     * @param options
     *     customTexShape: Optional. If set, will use the user defined texture
     *     shape to create the texture.
     */
    readToGPU(t, e = {}) {
        const s = this.texData.get(t),
            {
                values: o,
                shape: r,
                slice: i,
                dtype: a,
                isPacked: l,
                texture: c,
            } = s;
        if (a === "complex64")
            throw new Error(
                "Does not support reading texture for complex64 dtype."
            );
        if (i != null) {
            let p;
            l ? (p = new Vs(r, Ms)) : (p = new qn(r, Ms));
            const f = this.runWebGLProgram(
                    p,
                    [{ dataId: t, shape: r, dtype: a }],
                    a
                ),
                m = this.readToGPU(f, e);
            return this.disposeIntermediateTensorInfo(f), m;
        }
        if (c == null)
            throw o != null
                ? new Error("Data is not on GPU but on CPU.")
                : new Error("There is no data on GPU or CPU.");
        const u = this.decode(t, e.customTexShape),
            d = Ot().makeTensorFromTensorInfo(u),
            h = this.texData.get(u.dataId);
        return Object.assign({ tensorRef: d }, h.texture);
    }
    bufferSync(t) {
        const e = this.readSync(t.dataId);
        if (t.dtype === "string")
            try {
                const s = e.map((o) => gs(o));
                return vt(t.shape, t.dtype, s);
            } catch {
                throw new Error(
                    "Failed to decode encoded string bytes into utf-8"
                );
            }
        return vt(t.shape, t.dtype, e);
    }
    checkNumericalProblems(t) {
        if (t != null)
            for (let e = 0; e < t.length; e++) {
                const s = t[e];
                if (!Qw(s))
                    throw F().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")
                        ? Error(
                              `The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`
                          )
                        : Error(
                              `The value ${s} cannot be represented on this device.`
                          );
            }
    }
    getValuesFromTexture(t) {
        const { shape: e, dtype: s, isPacked: o } = this.texData.get(t),
            r = X(e);
        if (F().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
            const h = this.decode(t),
                p = this.texData.get(h.dataId),
                f = this.gpgpu
                    .downloadMatrixFromPackedTexture(
                        p.texture.texture,
                        ...Qa(e)
                    )
                    .subarray(0, r);
            return this.disposeIntermediateTensorInfo(h), f;
        }
        const i = F().getBool("WEBGL_PACK") && o === !0,
            a = i ? ti(e) : e,
            l = i ? new FA(a) : new DA(a),
            c = this.runWebGLProgram(
                l,
                [{ shape: a, dtype: s, dataId: t }],
                "float32"
            ),
            u = this.texData.get(c.dataId),
            d = this.gpgpu
                .downloadByteEncodedFloatMatrixFromOutputTexture(
                    u.texture.texture,
                    u.texShape[0],
                    u.texShape[1]
                )
                .subarray(0, r);
        return this.disposeIntermediateTensorInfo(c), d;
    }
    timerAvailable() {
        return (
            F().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0
        );
    }
    time(t) {
        const e = this.activeTimers,
            s = [];
        let o = !1;
        this.programTimersStack == null
            ? ((this.programTimersStack = s), (o = !0))
            : this.activeTimers.push(s),
            (this.activeTimers = s),
            t();
        const r = Ks(this.activeTimers.map((l) => l.query)).filter(
                (l) => l != null
            ),
            i = Ks(this.activeTimers.map((l) => l.name)).filter(
                (l) => l != null
            );
        (this.activeTimers = e), o && (this.programTimersStack = null);
        const a = {
            uploadWaitMs: this.uploadWaitMs,
            downloadWaitMs: this.downloadWaitMs,
            kernelMs: null,
            wallMs: null,
            // will be filled by the engine
        };
        return (async () => {
            if (
                F().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") >
                0
            ) {
                const l = await Promise.all(r);
                (a.kernelMs = tb(l)),
                    (a.getExtraProfileInfo = () =>
                        l
                            .map((c, u) => ({ name: i[u], ms: c }))
                            .map((c) => `${c.name}: ${c.ms}`)
                            .join(", "));
            } else
                a.kernelMs = {
                    error: "WebGL query timers are not supported in this environment.",
                };
            return (this.uploadWaitMs = 0), (this.downloadWaitMs = 0), a;
        })();
    }
    memory() {
        return {
            unreliable: !1,
            numBytesInGPU: this.numBytesInGPU,
            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
            numBytesInGPUFree: this.textureManager.numBytesFree,
        };
    }
    startTimer() {
        return F().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") >
            0
            ? this.gpgpu.beginQuery()
            : { startMs: Ie(), endMs: null };
    }
    endTimer(t) {
        return F().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") >
            0
            ? (this.gpgpu.endQuery(), t)
            : ((t.endMs = Ie()), t);
    }
    async getQueryTime(t) {
        if (F().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
            return this.gpgpu.waitForQueryAndGetTime(t);
        const e = t;
        return e.endMs - e.startMs;
    }
    /**
     * Decrease the RefCount on the dataId and dispose the memory if the dataId
     * has 0 refCount. If there are pending read on the data, the disposal would
     * added to the pending delete queue. Return true if the dataId is removed
     * from backend or the backend does not contain the dataId, false if the
     * dataId is not removed. Memory may or may not be released even when dataId
     * is removed, which also depends on dataRefCount, see `releaseGPU`.
     * @param dataId
     * @oaram force Optional, remove the data regardless of refCount
     */
    disposeData(t, e = !1) {
        if (this.pendingDisposal.has(t)) return !1;
        if (!this.texData.has(t)) return !0;
        if (
            (e
                ? (this.texData.get(t).refCount = 0)
                : this.texData.get(t).refCount--,
            !e && this.texData.get(t).refCount > 0)
        )
            return !1;
        if (this.pendingRead.has(t))
            return this.pendingDisposal.add(t), this.pendingDeletes++, !1;
        this.releaseGPUData(t);
        const { complexTensorInfos: s } = this.texData.get(t);
        return (
            s != null &&
                (this.disposeData(s.real.dataId, e),
                this.disposeData(s.imag.dataId, e)),
            this.texData.delete(t),
            !0
        );
    }
    releaseGPUData(t) {
        const {
                texture: e,
                dtype: s,
                texShape: o,
                usage: r,
                isPacked: i,
                slice: a,
            } = this.texData.get(t),
            l = (a && a.origDataId) || t,
            c = this.dataRefCount.get(l);
        c > 1
            ? this.dataRefCount.set(l, c - 1)
            : (this.dataRefCount.delete(l),
              e != null &&
                  ((this.numBytesInGPU -= this.computeBytes(o, s)),
                  this.textureManager.releaseTexture(e, o, r, i)));
        const u = this.texData.get(t);
        (u.texture = null),
            (u.texShape = null),
            (u.isPacked = !1),
            (u.slice = null);
    }
    getTexture(t) {
        return this.uploadToGPU(t), this.texData.get(t).texture.texture;
    }
    /**
     * Returns internal information for the specific data bucket. Used in unit
     * tests.
     */
    getDataInfo(t) {
        return this.texData.get(t);
    }
    /*
  Tests whether all the inputs to an op are small and on the CPU. This heuristic
  determines when it would be faster to execute a kernel on the CPU. WebGL
  kernels opt into running this check and forwarding when appropriate.
  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
  sustainable strategy for optimizing backend execution of ops.
   */
    shouldExecuteOnCPU(t, e = qO) {
        return (
            F().getBool("WEBGL_CPU_FORWARD") &&
            t.every(
                (s) =>
                    this.texData.get(s.dataId).texture == null && X(s.shape) < e
            )
        );
    }
    getGPGPUContext() {
        return this.gpgpu;
    }
    where(t) {
        ln(
            "tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead"
        );
        const e = t.dataSync();
        return YO(t.shape, e);
    }
    packedUnaryOp(t, e, s) {
        const o = new Vs(t.shape, e),
            r = this.compileAndRun(o, [t], s);
        return Ot().makeTensorFromTensorInfo(r);
    }
    // TODO(msoulanille) remove this once the backend has been modularized
    // a copy is needed here to break a circular dependency.
    // Also remove the op from unary_op.
    abs(t) {
        if (this.shouldExecuteOnCPU([t]) && t.dtype !== "complex64") {
            const o = XI(this.texData.get(t.dataId).values);
            return this.makeOutput(t.shape, t.dtype, o);
        }
        if (F().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
            return this.packedUnaryOp(t, Sg, t.dtype);
        const e = new qn(t.shape, Sg),
            s = this.compileAndRun(e, [t]);
        return Ot().makeTensorFromTensorInfo(s);
    }
    makeTensorInfo(t, e, s) {
        let o;
        if (e === "string" && s != null && s.length > 0 && vr(s[0])) {
            const r = s.map((i) => ms(i));
            o = this.write(r, t, e);
        } else o = this.write(s, t, e);
        return (
            (this.texData.get(o).usage = null),
            { dataId: o, shape: t, dtype: e }
        );
    }
    makeOutput(t, e, s) {
        return Ot().makeTensorFromTensorInfo(
            this.makeTensorInfo(t, e, s),
            this
        );
    }
    unpackTensor(t) {
        const e = new UO(t.shape);
        return this.runWebGLProgram(e, [t], t.dtype);
    }
    packTensor(t) {
        const e = new LO(t.shape);
        return this.runWebGLProgram(e, [t], t.dtype, null, !0);
    }
    packedReshape(t, e) {
        const s = [Vo(t.shape), ...zo(t.shape)],
            o = {
                dtype: t.dtype,
                shape: s,
                dataId: t.dataId,
            },
            r = [Vo(e), ...zo(e)],
            i = new BI(r, s),
            a = !0,
            l = [s],
            c = this.runWebGLProgram(i, [o], t.dtype, l, a);
        return { dataId: c.dataId, shape: e, dtype: c.dtype };
    }
    decode(t, e) {
        const s = this.texData.get(t),
            { isPacked: o, shape: r, dtype: i } = s;
        if (e != null) {
            const h = X(r),
                p = e[0] * e[1] * 4;
            C(
                h <= p,
                () =>
                    "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."
            );
        }
        const a = ti(r);
        let l;
        o ? (l = new WA(a)) : (l = new MA(a));
        const c = !0,
            u = [e ?? Qa(a)],
            d = this.runWebGLProgram(
                l,
                [{ shape: a, dtype: i, dataId: t }],
                i,
                u,
                c,
                e
            );
        return { dtype: i, shape: r, dataId: d.dataId };
    }
    runWebGLProgram(t, e, s, o, r = !1, i) {
        const a = this.makeTensorInfo(t.outputShape, s),
            l = this.texData.get(a.dataId);
        if (
            (t.packedOutput && (l.isPacked = !0),
            t.outPackingScheme === bi.DENSE)
        ) {
            const b = i ?? Qa(t.outputShape);
            l.texShape = b.map((x) => x * 2);
        }
        if (
            (t.outTexUsage != null && (l.usage = t.outTexUsage),
            X(a.shape) === 0)
        )
            return (l.values = Se(a.dtype, 0)), a;
        const c = [],
            u = e.map((b) => {
                if (b.dtype === "complex64")
                    throw new Error(
                        "GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts."
                    );
                let x = this.texData.get(b.dataId);
                if (x.texture == null) {
                    if (
                        !t.packedInputs &&
                        X(b.shape) <= F().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")
                    )
                        return {
                            shape: b.shape,
                            texData: null,
                            isUniform: !0,
                            uniformValues: x.values,
                        };
                    t.packedInputs && ((x.isPacked = !0), (x.shape = b.shape));
                }
                if (
                    (this.uploadToGPU(b.dataId),
                    !!x.isPacked != !!t.packedInputs)
                )
                    (b = x.isPacked
                        ? this.unpackTensor(b)
                        : this.packTensor(b)),
                        c.push(b),
                        (x = this.texData.get(b.dataId));
                else if (x.isPacked && !xi(x.shape, b.shape)) {
                    const w = b,
                        y = b.shape;
                    (b.shape = x.shape),
                        (b = this.packedReshape(b, y)),
                        c.push(b),
                        (x = this.texData.get(b.dataId)),
                        (w.shape = y);
                }
                return { shape: b.shape, texData: x, isUniform: !1 };
            });
        this.uploadToGPU(a.dataId);
        const d = { shape: a.shape, texData: l, isUniform: !1 },
            h = LA(t, u, d),
            p = this.getAndSaveBinary(h, () => GA(this.gpgpu, t, u, d)),
            f = this.activeTimers != null;
        let m;
        f && (m = this.startTimer()),
            F().get("ENGINE_COMPILE_ONLY") || EA(this.gpgpu, p, u, d, o),
            c.forEach((b) => this.disposeIntermediateTensorInfo(b)),
            f &&
                ((m = this.endTimer(m)),
                this.activeTimers.push({
                    name: t.constructor.name,
                    query: this.getQueryTime(m),
                }));
        const g = F().getNumber("WEBGL_FLUSH_THRESHOLD");
        if (g > 0) {
            const b = Ie();
            b - this.lastGlFlushTime > g &&
                (this.gpgpu.gl.flush(), (this.lastGlFlushTime = b));
        }
        if (!F().getBool("WEBGL_LAZILY_UNPACK") && l.isPacked && r === !1) {
            const b = this.unpackTensor(a);
            return this.disposeIntermediateTensorInfo(a), b;
        }
        return a;
    }
    compileAndRun(t, e, s, o, r = !1) {
        return (s = s || e[0].dtype), this.runWebGLProgram(t, e, s, o, r);
    }
    getAndSaveBinary(t, e) {
        return (
            t in this.binaryCache || (this.binaryCache[t] = e()),
            this.binaryCache[t]
        );
    }
    getTextureManager() {
        return this.textureManager;
    }
    dispose() {
        this.disposed ||
            (F().getBool("IS_TEST") ||
                Object.keys(this.binaryCache).forEach((e) => {
                    this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),
                        delete this.binaryCache[e];
                }),
            this.textureManager.dispose(),
            this.canvas != null &&
            typeof HTMLCanvasElement < "u" &&
            this.canvas instanceof HTMLCanvasElement
                ? this.canvas.remove()
                : (this.canvas = null),
            this.gpgpuCreatedLocally &&
                ((this.gpgpu.program = null), this.gpgpu.dispose()),
            (this.disposed = !0));
    }
    floatPrecision() {
        return (
            this.floatPrecisionValue == null &&
                (this.floatPrecisionValue = D(() => {
                    if (!F().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
                        const t = F().getBool("DEBUG");
                        F().set("DEBUG", !1);
                        const e = this.abs(gt(1e-8)).dataSync()[0];
                        if ((F().set("DEBUG", t), e > 0)) return 32;
                    }
                    return 16;
                })),
            this.floatPrecisionValue
        );
    }
    /** Returns the smallest representable number.  */
    epsilon() {
        return this.floatPrecision() === 32 ? QO : JO;
    }
    uploadToGPU(t) {
        const e = this.texData.get(t),
            {
                shape: s,
                dtype: o,
                values: r,
                texture: i,
                usage: a,
                isPacked: l,
            } = e;
        if (i != null) return;
        const c = this.activeTimers != null;
        let u;
        c && (u = Ie());
        let d = e.texShape;
        if ((d == null && ((d = pI(s, l)), (e.texShape = d)), r != null)) {
            const h = ti(s);
            let p,
                f = d[1],
                m = d[0];
            const g = r instanceof Uint8Array || r instanceof Uint8ClampedArray;
            (l || !g) && ([f, m] = Gr(d[0], d[1])),
                l ? (p = new zA(h, g)) : (p = new wg(h, g));
            const b = g ? [m, f] : d,
                x = this.makeTensorInfo(b, o),
                w = this.texData.get(x.dataId);
            g ? (w.usage = un.PIXELS) : (w.usage = un.UPLOAD),
                (w.texShape = b),
                this.gpgpu.uploadDenseMatrixToTexture(
                    this.getTexture(x.dataId),
                    f,
                    m,
                    r
                );
            const y = [[m, f]],
                v = this.runWebGLProgram(p, [x], o, y, !0),
                k = this.texData.get(v.dataId);
            (e.texShape = k.texShape),
                (e.isPacked = k.isPacked),
                (e.usage = k.usage),
                F().get("ENGINE_COMPILE_ONLY")
                    ? this.disposeData(v.dataId)
                    : ((e.texture = k.texture),
                      (e.values = null),
                      this.texData.delete(v.dataId)),
                this.disposeIntermediateTensorInfo(x),
                c && (this.uploadWaitMs += Ie() - u);
        } else {
            const h = this.acquireTexture(d, a, o, l);
            e.texture = h;
        }
    }
    convertAndCacheOnCPU(t, e) {
        const s = this.texData.get(t),
            { dtype: o } = s;
        return e != null && (s.values = nX(e, o)), s.values;
    }
    acquireTexture(t, e, s, o) {
        if (
            ((this.numBytesInGPU += this.computeBytes(t, s)),
            !this.warnedAboutMemory &&
                this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024)
        ) {
            const r = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
            (this.warnedAboutMemory = !0),
                console.warn(
                    `High memory usage in GPU: ${r} MB, most likely due to a memory leak`
                );
        }
        return this.textureManager.acquireTexture(t, e, o);
    }
    computeBytes(t, e) {
        return t[0] * t[1] * ri(e);
    }
    checkCompileCompletion() {
        for (const [, t] of Object.entries(this.binaryCache))
            this.checkCompletion_(t);
    }
    async checkCompileCompletionAsync() {
        const t = [];
        if (this.gpgpu.parallelCompilationExtension) {
            for (const [, e] of Object.entries(this.binaryCache))
                t.push(this.checkCompletionAsync_(e));
            return Promise.all(t);
        } else {
            for (const [, e] of Object.entries(this.binaryCache)) {
                const s = new Promise((o) => {
                    try {
                        this.checkCompletion_(e), o(!0);
                    } catch (r) {
                        throw r;
                    }
                });
                t.push(s);
            }
            return Promise.all(t);
        }
    }
    async checkCompletionAsync_(t) {
        return this.gpgpu.gl.getProgramParameter(
            t.webGLProgram,
            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR
        )
            ? this.checkCompletion_(t)
            : (await su(), this.checkCompletionAsync_(t));
    }
    checkCompletion_(t) {
        if (
            this.gpgpu.gl.getProgramParameter(
                t.webGLProgram,
                this.gpgpu.gl.LINK_STATUS
            ) === !1
        )
            throw (
                (console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)),
                this.gpgpu.gl.getShaderParameter(
                    t.fragmentShader,
                    this.gpgpu.gl.COMPILE_STATUS
                ) === !1
                    ? (Yf(
                          t.source,
                          this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)
                      ),
                      new Error("Failed to compile fragment shader."))
                    : new Error("Failed to link vertex and fragment shaders."))
            );
        return !0;
    }
    getUniformLocations() {
        for (const t of Object.values(this.binaryCache)) {
            this.gpgpu.buildVao(t.webGLProgram);
            const {
                variablesLocations: e,
                customUniformLocations: s,
                infLoc: o,
                nanLoc: r,
                outShapeLocation: i,
                outShapeStridesLocation: a,
                outTexShapeLocation: l,
            } = SI(this.gpgpu, t.program, t.webGLProgram);
            (t.variablesLocations = e),
                (t.customUniformLocations = s),
                (t.infLoc = o),
                (t.nanLoc = r),
                (t.outShapeLocation = i),
                (t.outShapeStridesLocation = a),
                (t.outTexShapeLocation = l);
        }
    }
    /**
     * Create a TF.js tensor out of an existing WebGL texture. A new texture will
     * be created.
     */
    createTensorFromGPUData(t, e, s) {
        t.channels = t.channels || "RGBA";
        const { texture: o, height: r, width: i, channels: a } = t,
            l = Ot().backend;
        if (!l.gpgpu.gl.isTexture(o))
            throw new Error(
                "The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'."
            );
        const c = l.writeTexture(o, e, s, r, i, a);
        return Ot().makeTensorFromDataId(c, e, s, l);
    }
}
Cu.nextDataId = 0;
function nX(n, t) {
    if (t === "float32" || t === "complex64") return n;
    if (t === "int32" || t === "bool") {
        const e =
            t === "int32" ? new Int32Array(n.length) : new Uint8Array(n.length);
        for (let s = 0; s < e.length; ++s) e[s] = Math.round(n[s]);
        return e;
    } else throw new Error(`Unknown dtype ${t}`);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sX() {
    F().set("WEBGL_FORCE_F16_TEXTURES", !0);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Jh() &&
    Pb(
        "webgl",
        () => new Cu(),
        2
        /* priority */
    );
const YQ = { forceHalfFloat: sX };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rm = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
class Po {
    constructor(t, e, s) {
        (this.variableNames = ["A", "B"]),
            (this.outputShape = bt(e, s)),
            (this.enableShapeUniforms = Me(this.outputShape.length)),
            (this.userCode = `
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jo = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
class Fr {
    constructor(t, e, s, o = !1) {
        (this.variableNames = ["A", "B"]),
            (this.supportsBroadcasting = !0),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = bt(e, s));
        const r = this.outputShape.length;
        this.enableShapeUniforms = Me(r);
        let i = "";
        if (o)
            if (r === 0 || X(this.outputShape) === 1)
                i = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
            else if (
                ((i = `
          ${Vt(r)} coords = getOutputCoords();
        `),
                r === 1)
            )
                this.enableShapeUniforms
                    ? (i += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `)
                    : (i += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `);
            else {
                const l = Fe("coords", r);
                this.enableShapeUniforms
                    ? (i += `
            bool nextRowOutOfBounds =
              (${l[r - 2]} + 1) >= outShape[${r} - 2];
            bool nextColOutOfBounds =
              (${l[r - 1]} + 1) >= outShape[${r} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `)
                    : (i += `
            bool nextRowOutOfBounds =
              (${l[r - 2]} + 1) >= ${this.outputShape[r - 2]};
            bool nextColOutOfBounds =
              (${l[r - 1]} + 1) >= ${this.outputShape[r - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `);
            }
        this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nn(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    return (
        e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype }
    );
}
const oX = {
    kernelName: Ki,
    backendName: "webgl",
    kernelFunc: nn,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oo(n) {
    const { inputs: t, backend: e } = n,
        { real: s, imag: o } = t,
        r = e.makeTensorInfo(s.shape, "complex64"),
        i = e.texData.get(r.dataId),
        a = nn({ inputs: { x: s }, backend: e }),
        l = nn({ inputs: { x: o }, backend: e });
    return (i.complexTensorInfos = { real: a, imag: l }), r;
}
const rX = {
    kernelName: ih,
    backendName: "webgl",
    kernelFunc: oo,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HI = "return (a < 0.) ? b * a : a;",
    _I = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function iX(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { alpha: r } = s,
        i = e.makeTensorInfo([], "float32", Is(r, "float32")),
        a = F().getBool("WEBGL_PACK_BINARY_OPERATIONS")
            ? new Fr(_I, o.shape, i.shape)
            : new Po(HI, o.shape, i.shape),
        l = e.runWebGLProgram(a, [o, i], "float32");
    return e.disposeIntermediateTensorInfo(i), l;
}
const aX = {
    kernelName: fc,
    backendName: "webgl",
    kernelFunc: iX,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UI = "return (a < 0.) ? b * a : a;",
    YI = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function lX(n) {
    const { inputs: t, backend: e } = n,
        { x: s, alpha: o } = t,
        r = F().getBool("WEBGL_PACK_BINARY_OPERATIONS")
            ? new Fr(YI, s.shape, o.shape)
            : new Po(UI, s.shape, o.shape);
    return e.runWebGLProgram(r, [s, o], "float32");
}
const cX = {
    kernelName: Mc,
    backendName: "webgl",
    kernelFunc: lX,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Vr = "if (isnan(x)) return x;";
function Nt({ opSnippet: n, packedOpSnippet: t, cpuKernelImpl: e, dtype: s }) {
    return ({ inputs: o, backend: r }) => {
        const { x: i } = o,
            a = r,
            l = s || i.dtype;
        if (a.shouldExecuteOnCPU([i]) && e != null) {
            const d = a.texData.get(i.dataId),
                h = e(d.values, l);
            return a.makeTensorInfo(i.shape, l, h);
        }
        const c = F().getBool("WEBGL_PACK_UNARY_OPERATIONS") && t != null;
        let u;
        return (
            c ? (u = new Vs(i.shape, t)) : (u = new qn(i.shape, n)),
            a.runWebGLProgram(u, [i], l)
        );
    };
}
function Re({
    opSnippet: n,
    packedOpSnippet: t,
    checkOutOfBounds: e = !1,
    supportsComplex: s = !1,
    cpuKernelImpl: o,
    dtype: r,
}) {
    return ({ inputs: i, backend: a }) => {
        const { a: l, b: c } = i,
            u = a;
        if (s && l.dtype === "complex64") {
            const f = u.texData.get(l.dataId),
                m = u.texData.get(c.dataId),
                [g, b] = [
                    [f.complexTensorInfos.real, m.complexTensorInfos.real],
                    [f.complexTensorInfos.imag, m.complexTensorInfos.imag],
                ].map((w) => {
                    const [y, I] = w,
                        v = {
                            dataId: y.dataId,
                            dtype: y.dtype,
                            shape: l.shape,
                        },
                        k = {
                            dataId: I.dataId,
                            dtype: I.dtype,
                            shape: c.shape,
                        },
                        S = new Po(n, l.shape, c.shape);
                    return u.runWebGLProgram(S, [v, k], tn(y.dtype, I.dtype));
                }),
                x = oo({ inputs: { real: g, imag: b }, backend: u });
            return (
                u.disposeIntermediateTensorInfo(g),
                u.disposeIntermediateTensorInfo(b),
                x
            );
        }
        const d = r || tn(l.dtype, c.dtype);
        if (
            (l.dtype === "string" ||
                c.dtype === "string" ||
                u.shouldExecuteOnCPU([l, c])) &&
            o != null
        ) {
            const f = u.texData.get(l.dataId).values,
                m = u.texData.get(c.dataId).values,
                g =
                    l.dtype === "string"
                        ? // tslint:disable-next-line: no-any
                          ys(f)
                        : f,
                b =
                    l.dtype === "string"
                        ? // tslint:disable-next-line: no-any
                          ys(m)
                        : m,
                [x, w] = o(l.shape, c.shape, g, b, d),
                y = u.makeTensorInfo(w, d),
                I = u.texData.get(y.dataId);
            return (I.values = x), y;
        }
        const h = F().getBool("WEBGL_PACK_BINARY_OPERATIONS") && t != null;
        let p;
        return (
            h
                ? (p = new Fr(t, l.shape, c.shape, e))
                : (p = new Po(n, l.shape, c.shape)),
            u.runWebGLProgram(p, [l, c], d)
        );
    };
}
function yi(n, t = !1) {
    if (n === "linear") return t ? KO : zO;
    if (n === "relu") return t ? BO : AO;
    if (n === "elu") return t ? ZO : PO;
    if (n === "relu6") return t ? HO : OO;
    if (n === "prelu") return t ? YI : UI;
    if (n === "leakyrelu") return t ? _I : HI;
    if (n === "sigmoid") return t ? _O : XO;
    throw new Error(
        `Activation ${n} has not been implemented for the WebGL backend.`
    );
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class QI {
    constructor(t, e, s, o = !1, r = !1, i = !1, a = null, l = !1, c = !1) {
        (this.variableNames = ["matrixA", "matrixB"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = s),
            (this.enableShapeUniforms = Me(this.outputShape.length));
        const u = o ? t[1] : t[2],
            d = Math.ceil(u / 2),
            h = o ? "i * 2, rc.y" : "rc.y, i * 2",
            p = r ? "rc.z, i * 2" : "i * 2, rc.z",
            f = o ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"],
            m = r ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"];
        let g = "",
            b = "";
        a &&
            (l
                ? (g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }`)
                : c
                ? (g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }`)
                : (g = `vec4 activation(vec4 x) {
          ${a}
        }`),
            (b = "result = activation(result);"));
        const x = i ? "result += getBiasAtOutCoords();" : "";
        i && this.variableNames.push("bias"),
            l && this.variableNames.push("preluActivationWeights"),
            c && this.variableNames.push("leakyreluAlpha");
        let w = "rc.x",
            y = "rc.x";
        t[0] < e[0]
            ? (w = `imod(rc.x, ${t[0]})`)
            : e[0] < t[0] && (y = `imod(rc.x, ${e[0]})`),
            (this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${d}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${w};
        int batchB = ${y};
        for (int i = 0; i < ${d}; i++) {
          vec4 a = getMatrixA(batchA, ${h});
          vec4 b = getMatrixB(batchB, ${p});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${m[0]});
          result += (${f[1]} * ${m[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${x}

        ${b}

        setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kg = {
    REAL: "return areal * breal - aimag * bimag;",
    IMAG: "return areal * bimag + aimag * breal;",
};
class Tg {
    constructor(t, e, s) {
        (this.variableNames = ["AReal", "AImag", "BReal", "BImag"]),
            (this.outputShape = bt(e, s)),
            (this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ng = "return a * b;";
function im(n) {
    const { inputs: t, backend: e } = n,
        { a: s, b: o } = t,
        r = tn(s.dtype, o.dtype);
    if (s.dtype === "complex64") {
        const a = e.texData.get(s.dataId),
            l = e.texData.get(o.dataId),
            c = new Tg(kg.REAL, s.shape, o.shape),
            u = new Tg(kg.IMAG, s.shape, o.shape),
            d = [
                {
                    dataId: a.complexTensorInfos.real.dataId,
                    dtype: a.complexTensorInfos.real.dtype,
                    shape: s.shape,
                },
                {
                    dataId: a.complexTensorInfos.imag.dataId,
                    dtype: a.complexTensorInfos.imag.dtype,
                    shape: s.shape,
                },
                {
                    dataId: l.complexTensorInfos.real.dataId,
                    dtype: l.complexTensorInfos.real.dtype,
                    shape: o.shape,
                },
                {
                    dataId: l.complexTensorInfos.imag.dataId,
                    dtype: l.complexTensorInfos.imag.dtype,
                    shape: o.shape,
                },
            ],
            h = e.runWebGLProgram(c, d, "float32"),
            p = e.runWebGLProgram(u, d, "float32"),
            f = oo({ inputs: { real: h, imag: p }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(h),
            e.disposeIntermediateTensorInfo(p),
            f
        );
    }
    if (e.shouldExecuteOnCPU([s, o])) {
        const a = e.texData.get(s.dataId),
            l = e.texData.get(o.dataId),
            [c, u] = aO(s.shape, o.shape, a.values, l.values, r),
            d = e.makeTensorInfo(u, r),
            h = e.texData.get(d.dataId);
        return (h.values = c), d;
    }
    let i;
    return (
        F().getBool("WEBGL_PACK_BINARY_OPERATIONS")
            ? (i = new Fr(Ng, s.shape, o.shape))
            : (i = new Po(Ng, s.shape, o.shape)),
        e.runWebGLProgram(i, [s, o], r)
    );
}
const uX = {
    kernelName: ji,
    backendName: "webgl",
    kernelFunc: im,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dX(n, t, e) {
    const s = [Vo(n.shape), ...zo(n.shape)],
        o = {
            dtype: n.dtype,
            shape: s,
            dataId: n.dataId,
        },
        r = [Vo(t), ...zo(t)],
        i = new BI(r, s),
        a = !0,
        l = [s],
        c = e.runWebGLProgram(i, [o], n.dtype, l, a);
    return { dataId: c.dataId, shape: t, dtype: c.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function et(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { shape: r } = s,
        i = e,
        a = X(o.shape),
        l = Yd(r, a),
        c = X(l);
    C(
        a === c,
        () =>
            `The new shape (${l}) has ${c} elements and the old shape (${o.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`
    );
    const u = i.texData.get(o.dataId);
    return u.isPacked &&
        !xi(o.shape, l) &&
        !(u.texture !== null && xi(u.shape, l))
        ? dX(o, l, i)
        : (i.incRef(o.dataId), { dataId: o.dataId, shape: l, dtype: o.dtype });
}
const hX = {
    kernelName: Dc,
    backendName: "webgl",
    kernelFunc: et,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Rg {
    constructor(t, e) {
        this.variableNames = ["x"];
        const { windowSize: s, batchSize: o, inSize: r, outSize: i } = t;
        this.outputShape = [o, i];
        const a = Math.floor(s / 4) * 4,
            l = s % 4;
        let c = "sumValue += dot(values, ones);";
        if (e != null) {
            const d = 1 / e;
            c = `sumValue += dot(values * ${
                Co(d) ? d.toPrecision(2) : d
            }, ones);`;
        }
        let u = "";
        r % s > 0 &&
            (u = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return 0.0;
        }
      `),
            (this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${a};
        if (${l === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${c}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${c}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${c}
        }
        setOutput(sumValue);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class pX {
    constructor(t, e) {
        this.variableNames = ["x"];
        const { windowSize: s, batchSize: o, inSize: r, outSize: i } = t;
        this.outputShape = [o, i];
        let a = "0.0",
            l = "";
        e === "prod"
            ? (a = "1.0")
            : e === "min"
            ? ((a = "1.0 / 1e-20"), (l = "min"))
            : e === "max" && ((a = "-1.0 / 1e-20"), (l = "max"));
        let c = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
        e === "sum"
            ? (c = "sumValue")
            : e === "prod"
            ? (c = "prodValue")
            : e === "all"
            ? (c = "allValue")
            : e === "any" && (c = "anyValue");
        const u = Math.floor(s / 4) * 4,
            d = s % 4;
        let h = `
      if (${e === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${e === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e === "min"} || ${e === "max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,
            p = "vec4";
        e === "all"
            ? ((a = "1.0"),
              (h = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `),
              (p = "bvec4"))
            : e === "any" &&
              ((a = "0.0"),
              (h = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `),
              (p = "bvec4"));
        let f = "";
        r % s > 0 &&
            (f = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `),
            (this.userCode = `
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${h}
        }

        int inIdx = inOffset + ${u};
        if (${d === 1}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${h}
        } else if (${d === 2}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${h}
        } else if (${d === 3}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${h}
        }
        setOutput(${c});
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fX(n) {
    const t = [];
    for (; t.length === 0 || t[t.length - 1].outSize !== 1; ) {
        const e = t.length ? t[t.length - 1].outSize : n[1],
            s = ou(e);
        t.push({
            inSize: e,
            windowSize: s,
            outSize: Math.ceil(e / s),
        });
    }
    return t;
}
function qo(n, t, e, s) {
    const o = fX(n.shape);
    let r = n;
    for (let i = 0; i < o.length; i++) {
        const { inSize: a, windowSize: l, outSize: c } = o[i];
        let u, d;
        e === "mean"
            ? (u =
                  i === 0
                      ? new Rg(
                            {
                                windowSize: l,
                                inSize: a,
                                batchSize: n.shape[0],
                                outSize: c,
                            },
                            a
                        )
                      : new Rg({
                            windowSize: l,
                            inSize: a,
                            batchSize: n.shape[0],
                            outSize: c,
                        }))
            : (u = new pX(
                  {
                      windowSize: l,
                      inSize: a,
                      batchSize: n.shape[0],
                      outSize: c,
                  },
                  e
              )),
            (d = r),
            (r = s.runWebGLProgram(u, [r], t)),
            d.dataId !== n.dataId && s.disposeIntermediateTensorInfo(d);
    }
    return r;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class mX {
    constructor(t, e) {
        this.variableNames = ["A"];
        const s = new Array(t.length);
        for (let i = 0; i < s.length; i++) s[i] = t[e[i]];
        (this.outputShape = s), (this.rank = s.length);
        const o = Vt(this.rank),
            r = gX(e);
        this.userCode = `
    void main() {
      ${o} resRC = getOutputCoords();
      setOutput(getA(${r}));
    }
    `;
    }
}
function gX(n) {
    const t = n.length;
    if (t > 6) throw Error(`Transpose for rank ${t} is not yet supported`);
    const e = [
            "resRC.x",
            "resRC.y",
            "resRC.z",
            "resRC.w",
            "resRC.u",
            "resRC.v",
        ],
        s = new Array(t);
    for (let o = 0; o < n.length; o++) s[n[o]] = e[o];
    return s.join();
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class bX {
    constructor(t, e) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0);
        const s = new Array(t.length);
        for (let u = 0; u < s.length; u++) s[u] = t[e[u]];
        if (((this.outputShape = s), (this.rank = s.length), this.rank > 6))
            throw Error(
                `Packed transpose for rank ${this.rank} is not yet supported.`
            );
        const o = Vt(this.rank),
            r = ZI("rc", this.rank),
            i = new Array(this.rank);
        for (let u = 0; u < e.length; u++) i[e[u]] = r[u];
        const a = `vec2(${i.slice(-2).join()})`,
            l = `++${r[this.rank - 1]} < ${s[this.rank - 1]}`,
            c = `getChannel(getA(${i.join()}), ${a})`;
        this.userCode = `
    void main() {
      ${o} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${c};
      if(${l}) {
        result[1] = ${c};
      }
      --${r[this.rank - 1]};
      if(++${r[this.rank - 2]} < ${s[this.rank - 2]}) {
        result[2] = ${c};
        if(${l}) {
          result[3] = ${c};
        }
      }
      setOutput(result);
    }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vu(n, t, e) {
    const s = F().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
        ? new bX(n.shape, t)
        : new mX(n.shape, t);
    return e.runWebGLProgram(s, [n], n.dtype);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xX(n, t, e, s) {
    const o = t,
        r = n.shape.length,
        i = Ct(o, n.shape);
    let a = i;
    const l = qt(a, r),
        c = l != null;
    let u = n;
    c && ((u = vu(n, l, s)), (a = ie(a.length, r))), Ne("sum", a, r);
    const [d, h] = ye(u.shape, a);
    let p = d;
    e && (p = re(d, i));
    const f = X(h),
        g = X(n.shape) / f,
        b = et({ inputs: { x: u }, attrs: { shape: [g, f] }, backend: s }),
        x = Yh(n.dtype),
        w = qo(b, x, "sum", s),
        y = et({ inputs: { x: w }, attrs: { shape: p }, backend: s });
    return (
        s.disposeIntermediateTensorInfo(b),
        s.disposeIntermediateTensorInfo(w),
        c && s.disposeIntermediateTensorInfo(u),
        y
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Su(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s;
    return xX(o, r, i, e);
}
const yX = {
    kernelName: Oc,
    backendName: "webgl",
    kernelFunc: Su,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ze(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { perm: r } = s,
        i = e,
        a = o.shape.length,
        l = new Array(a);
    for (let u = 0; u < l.length; u++) l[u] = o.shape[r[u]];
    let c;
    if (i.shouldExecuteOnCPU([o])) {
        const d = i.texData.get(o.dataId).values,
            h = om(d, o.shape, o.dtype, r, l);
        c = i.makeTensorInfo(l, o.dtype);
        const p = i.texData.get(c.dataId);
        p.values = h;
    } else c = vu(o, r, i);
    return c;
}
const wX = {
    kernelName: ar,
    backendName: "webgl",
    kernelFunc: ze,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JI = 1e3;
function Ol({
    a: n,
    b: t,
    transposeA: e,
    transposeB: s,
    backend: o,
    bias: r = null,
    preluActivationWeights: i = null,
    leakyreluAlpha: a = 0,
    activation: l = null,
}) {
    const c = n.shape.length,
        u = t.shape.length,
        d = e ? n.shape[c - 2] : n.shape[c - 1],
        h = s ? t.shape[u - 1] : t.shape[u - 2],
        p = e ? n.shape[c - 1] : n.shape[c - 2],
        f = s ? t.shape[u - 2] : t.shape[u - 1],
        m = n.shape.slice(0, -2),
        g = t.shape.slice(0, -2),
        b = X(m),
        x = X(g),
        y = bt(n.shape.slice(0, -2), t.shape.slice(0, -2)).concat([p, f]);
    C(
        d === h,
        () =>
            `Error in matMul: inner shapes (${d}) and (${h}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`
    );
    const I = e ? [b, d, p] : [b, p, d],
        v = s ? [x, f, h] : [x, h, f],
        k = et({ inputs: { x: n }, backend: o, attrs: { shape: I } }),
        S = et({ inputs: { x: t }, backend: o, attrs: { shape: v } }),
        N = [k, S],
        R = Math.max(b, x),
        M = e ? k.shape[1] : k.shape[2],
        V = r != null,
        z = i != null,
        P = l === "leakyrelu",
        A = l != null ? yi(l, !0) : null,
        O = V || z || P || A != null;
    let B;
    if ((p === 1 || f === 1) && M > JI && O === !1) {
        let H = k,
            Y = S;
        e &&
            ((H = ze({
                inputs: { x: k },
                backend: o,
                attrs: { perm: [0, 2, 1] },
            })),
            N.push(H)),
            s &&
                ((Y = ze({
                    inputs: { x: S },
                    backend: o,
                    attrs: { perm: [0, 2, 1] },
                })),
                N.push(Y));
        const Q = f !== 1,
            j = f === 1;
        let J = H;
        Q &&
            ((J = et({
                inputs: { x: H },
                backend: o,
                attrs: { shape: [R, M, 1] },
            })),
            N.push(J));
        const ot = f === 1 ? 2 : 1;
        let q = Y;
        j &&
            ((q = et({
                inputs: { x: Y },
                backend: o,
                attrs: { shape: [R, 1, M] },
            })),
            N.push(q));
        const rt = im({ inputs: { a: J, b: q }, backend: o });
        (B = Su({
            inputs: { x: rt },
            backend: o,
            attrs: { axis: ot, keepDims: !0 },
        })),
            N.push(rt);
    } else {
        const H = tn(n.dtype, t.dtype),
            Y = new QI(I, v, [R, p, f], e, s, V, A, z, P),
            Q = [k, S];
        if ((r != null && Q.push(r), z && Q.push(i), P)) {
            const j = o.makeTensorInfo([], "float32", Is(a, "float32"));
            Q.push(j), N.push(j);
        }
        B = o.runWebGLProgram(Y, Q, H);
    }
    const Z = et({ inputs: { x: B }, backend: o, attrs: { shape: y } });
    N.push(B);
    for (const H of N) o.disposeIntermediateTensorInfo(H);
    return Z;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IX(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { a: o, b: r, bias: i, preluActivationWeights: a } = t,
        { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: d } = s;
    return Ol({
        a: o,
        b: r,
        transposeA: l,
        transposeB: c,
        backend: e,
        bias: i,
        preluActivationWeights: a,
        leakyreluAlpha: d,
        activation: u,
    });
}
const CX = {
    kernelName: ml,
    backendName: "webgl",
    kernelFunc: IX,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $g = "return abs(x);";
function vX(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (e.shouldExecuteOnCPU([s]) && s.dtype !== "complex64") {
        const r = e.texData.get(s.dataId),
            i = XI(r.values);
        return e.makeTensorInfo(s.shape, s.dtype, i);
    }
    let o;
    return (
        F().getBool("WEBGL_PACK_UNARY_OPERATIONS")
            ? (o = new Vs(s.shape, $g))
            : (o = new qn(s.shape, $g)),
        e.runWebGLProgram(o, [s], s.dtype)
    );
}
const SX = {
    kernelName: Ul,
    backendName: "webgl",
    kernelFunc: vX,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kX =
        En +
        `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,
    TX = Nt({ opSnippet: kX }),
    NX = {
        kernelName: vi,
        backendName: "webgl",
        kernelFunc: TX,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RX =
        En +
        `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,
    $X = Nt({ opSnippet: RX }),
    GX = {
        kernelName: Si,
        backendName: "webgl",
        kernelFunc: $X,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Gg = "return a + b;",
    EX = Re({
        opSnippet: Gg,
        packedOpSnippet: Gg,
        supportsComplex: !0,
        cpuKernelImpl: AA,
    }),
    LX = {
        kernelName: Sr,
        backendName: "webgl",
        kernelFunc: EX,
    };
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MX {
    constructor(t, e) {
        (this.outputShape = []),
            (this.outputShape = t),
            (this.variableNames = e.map((r, i) => `T${i}`));
        const s = [];
        this.variableNames.forEach((r) => {
            s.push(`float v${r} = get${r}AtOutCoords();`);
        });
        const o = this.variableNames.map((r) => `v${r}`).join(" + ");
        this.userCode = `
      void main() {
        ${s.join(`
        `)}

        float result = ${o};
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class WX {
    constructor(t, e) {
        (this.outputShape = []),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t),
            (this.variableNames = e.map((r, i) => `T${i}`));
        const s = [];
        this.variableNames.forEach((r) => {
            s.push(`vec4 v${r} = get${r}AtOutCoords();`);
        });
        const o = this.variableNames.map((r) => `v${r}`).join(" + ");
        this.userCode = `
      void main() {
        ${s.join(`
        `)}

        vec4 result = ${o};
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dl(n) {
    const { inputs: t, backend: e } = n,
        s = t;
    if (s.length === 1) return nn({ inputs: { x: s[0] }, backend: e });
    if (s.length > F().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
        const l = Math.floor(s.length / 2),
            c = dl({ inputs: s.slice(0, l), backend: e }),
            u = dl({ inputs: s.slice(l), backend: e });
        return dl({ inputs: [c, u], backend: e });
    }
    const o = s.map((l) => l.dtype).reduce((l, c) => tn(l, c)),
        r = s.map((l) => l.shape),
        a = F().getBool("WEBGL_PACK")
            ? new WX(s[0].shape, r)
            : new MX(s[0].shape, r);
    return e.runWebGLProgram(a, s, o);
}
const DX = {
    kernelName: qd,
    backendName: "webgl",
    kernelFunc: dl,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FX(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s,
        a = o.shape.length,
        l = Ct(r, o.shape);
    let c = l;
    const u = qt(c, a);
    let d = o;
    u != null &&
        ((d = ze({ inputs: { x: o }, backend: e, attrs: { perm: u } })),
        (c = ie(c.length, a))),
        Ne("all", c, a);
    const [h, p] = ye(d.shape, c),
        f = X(p),
        m = et({ inputs: { x: d }, backend: e, attrs: { shape: [-1, f] } }),
        g = qo(m, m.dtype, "all", e);
    let b;
    if (i) {
        const x = re(h, l);
        b = et({ inputs: { x: g }, backend: e, attrs: { shape: x } });
    } else b = et({ inputs: { x: g }, backend: e, attrs: { shape: h } });
    return (
        e.disposeIntermediateTensorInfo(m),
        e.disposeIntermediateTensorInfo(g),
        u != null && e.disposeIntermediateTensorInfo(d),
        b
    );
}
const VX = {
    kernelName: th,
    backendName: "webgl",
    kernelFunc: FX,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zX(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s,
        a = o.shape.length,
        l = Ct(r, o.shape);
    let c = l;
    const u = qt(c, a);
    let d = o;
    u != null &&
        ((d = ze({ inputs: { x: o }, backend: e, attrs: { perm: u } })),
        (c = ie(c.length, a))),
        Ne("any", c, a);
    const [h, p] = ye(d.shape, c),
        f = X(p),
        m = et({ inputs: { x: d }, backend: e, attrs: { shape: [-1, f] } }),
        g = qo(m, m.dtype, "any", e);
    let b;
    if (i) {
        const x = re(h, l);
        b = et({ inputs: { x: g }, backend: e, attrs: { shape: x } });
    } else b = et({ inputs: { x: g }, backend: e, attrs: { shape: h } });
    return (
        e.disposeIntermediateTensorInfo(m),
        e.disposeIntermediateTensorInfo(g),
        u != null && e.disposeIntermediateTensorInfo(d),
        b
    );
}
const PX = {
    kernelName: eh,
    backendName: "webgl",
    kernelFunc: zX,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AX {
    constructor(t, e, s) {
        this.variableNames = ["A"];
        const { windowSize: o, batchSize: r, outSize: i } = t;
        s || this.variableNames.push("bestIndicesA"),
            (this.outputShape = [r, i]);
        const a = e === "max" ? ">" : "<",
            l = s
                ? "inOffset + i;"
                : "round(getBestIndicesA(batch, inOffset + i));";
        this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${o}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OX {
    constructor(t, e, s, o) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            C(
                t.length > 2,
                () =>
                    `Packed arg${
                        s.charAt(0).toUpperCase() + s.slice(1)
                    } supports only inputs with rank above 2.`
            );
        const r = t[t.length - 1],
            i = Math.ceil(r / e);
        (this.outputShape = t.slice(0, -1)),
            i > 1 && this.outputShape.push(i),
            o || this.variableNames.push("bestIndicesA");
        const a = this.outputShape,
            l = a.length,
            c = Vt(l),
            u = Fe("coords", l);
        let d, h;
        if (i === 1) {
            h = l + 1;
            const S = Vt(h);
            d = `
        ${S} sourceLocR = ${S}(${u.join()}, 0);
        ++${u[l - 1]};
        ${S} sourceLocG = ${S}(${u.join()}, 0);
        ++${u[l - 2]};
        ${S} sourceLocA = ${S}(${u.join()}, 0);
        --${u[l - 1]};
        ${S} sourceLocB = ${S}(${u.join()}, 0);
        --${u[l - 2]};`;
        } else
            (h = l),
                (d = `
        ${c} sourceLocR = coords;
        ++${u[l - 1]};
        ${c} sourceLocG = coords;
        ++${u[l - 2]};
        ${c} sourceLocA = coords;
        --${u[l - 1]};
        ${c} sourceLocB = coords;
        --${u[l - 2]};`);
        const p = ["x", "y", "z", "w", "u", "v"].slice(0, h),
            f = "." + p[h - 1],
            m = p.map((S) => "int " + S),
            g = Fe("sourceLocR", h - 1).concat("inIdx.r"),
            b = Fe("sourceLocG", h - 1).concat("inIdx.g"),
            x = Fe("sourceLocB", h - 1).concat("inIdx.b"),
            w = Fe("sourceLocA", h - 1).concat("inIdx.a"),
            y = s === "max" ? "greaterThan" : "lessThan",
            I = o
                ? ""
                : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${w.join()})));`,
            v = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${b.join()}) : 0.,
            hasNextRow ? getAChannel(${x.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`,
            k = o
                ? ""
                : `
      float getBestIndicesAChannel(${m.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;
        this.userCode = `
      float getAChannel(${m.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${k}
      void main() {
        ${c} coords = getOutputCoords();
        bool hasNextCol = ${u[l - 1]} < ${a[l - 1] - 1};
        bool hasNextRow = ${u[l - 2]} < ${a[l - 2] - 1};
        ${d}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${v};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${I}
          vec4 candidate = ${v};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${y}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jI(n, t, e, s = null) {
    let o = t.shape[0],
        r = t.shape[1];
    s != null && ((o = s.shape[0]), (r = s.shape[1]));
    const i = ou(r),
        a = {
            windowSize: i,
            inSize: r,
            batchSize: o,
            outSize: Math.ceil(r / i),
        },
        l = new AX(a, e, s == null),
        c = [t];
    s != null && c.push(s);
    const u = n.runWebGLProgram(l, c, "int32");
    if (u.shape[1] === 1) return u;
    const d = jI(n, t, e, u);
    return n.disposeIntermediateTensorInfo(u), d;
}
function qI(n, t, e, s = null) {
    const o = s != null ? s.shape : t.shape,
        r = o[o.length - 1],
        i = ou(r),
        a = new OX(o, i, e, s == null),
        l = s == null ? [t] : [t, s],
        c = n.runWebGLProgram(a, l, "int32");
    if (c.shape.length === t.shape.length) {
        const u = qI(n, t, e, c);
        return n.disposeIntermediateTensorInfo(c), u;
    }
    return c;
}
function tC(n, t, e, s) {
    const o = [e];
    if (
        (Ne("arg" + s.charAt(0).toUpperCase() + s.slice(1), o, t.shape.length),
        !F().getBool("WEBGL_PACK_REDUCE") || t.shape.length <= 2)
    ) {
        const r = [],
            i = n.texData.get(t.dataId),
            a = i !== null && i.isPacked;
        let l = t;
        a && ((l = n.unpackTensor(t)), r.push(l));
        const [c, u] = ye(l.shape, o),
            d = X(u),
            h = et({ inputs: { x: l }, backend: n, attrs: { shape: [-1, d] } });
        r.push(h);
        const p = jI(n, h, s);
        r.push(p);
        const f = et({ inputs: { x: p }, backend: n, attrs: { shape: c } });
        return r.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
    }
    return qI(n, t, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XX(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r } = s;
    let i = Ct(r, o.shape);
    const a = qt(i, o.shape.length);
    let l = o;
    const c = [];
    a != null &&
        ((l = ze({ inputs: { x: o }, backend: e, attrs: { perm: a } })),
        c.push(l),
        (i = ie(i.length, l.shape.length))),
        Ne("argMax", [i[0]], l.shape.length);
    const u = tC(e, l, i[0], "max");
    return c.forEach((d) => e.disposeIntermediateTensorInfo(d)), u;
}
const KX = {
    kernelName: Yl,
    backendName: "webgl",
    kernelFunc: XX,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZX(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r } = s;
    let i = Ct(r, o.shape);
    const a = qt(i, o.shape.length);
    let l = o;
    const c = [];
    a != null &&
        ((l = ze({ inputs: { x: o }, backend: e, attrs: { perm: a } })),
        c.push(l),
        (i = ie(i.length, l.shape.length))),
        Ne("argMin", [i[0]], l.shape.length);
    const u = tC(e, l, i[0], "min");
    return c.forEach((d) => e.disposeIntermediateTensorInfo(d)), u;
}
const BX = {
    kernelName: Ql,
    backendName: "webgl",
    kernelFunc: ZX,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HX =
        En +
        `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,
    _X = Nt({ opSnippet: HX }),
    UX = {
        kernelName: ki,
        backendName: "webgl",
        kernelFunc: _X,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YX = En + "return log(x + sqrt(x * x + 1.0));",
    QX = Nt({ opSnippet: YX }),
    JX = {
        kernelName: Ti,
        backendName: "webgl",
        kernelFunc: QX,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jX =
        En +
        `
  return atan(x);
`,
    qX = Nt({ opSnippet: jX }),
    tK = {
        kernelName: Ni,
        backendName: "webgl",
        kernelFunc: qX,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eK =
        rm +
        `
  return atan(a, b);
`,
    nK =
        `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` +
        jo +
        `
  return result;
`,
    sK = Re({ opSnippet: eK, packedOpSnippet: nK }),
    oK = {
        kernelName: $i,
        backendName: "webgl",
        kernelFunc: sK,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rK =
        En +
        `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,
    iK = Nt({ opSnippet: rK }),
    aK = {
        kernelName: Ri,
        backendName: "webgl",
        kernelFunc: iK,
    };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class wi {
    constructor(t, e, s, o = !1, r = !1) {
        if (((this.variableNames = ["x"]), e === "avg" && s))
            throw new Error("Cannot compute positions for average pool.");
        const i = t.filterWidth,
            a = t.strideHeight,
            l = t.strideWidth,
            c = t.dilationHeight,
            u = t.dilationWidth,
            d = t.effectiveFilterHeight,
            h = t.effectiveFilterWidth,
            p = t.padInfo.top,
            f = t.padInfo.left;
        this.outputShape = t.outShape;
        const m = e === "avg",
            g = `((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,
            b = `(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;
        let x = "0.0";
        if ((m || (x = "-1.0 / 1e-20"), s)) {
            const S = ">=";
            this.userCode = `
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${p}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${d};
              wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${h};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${S} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${o ? (r ? g : b) : `wR * ${h} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
            return;
        }
        const w = "max";
        let y = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
        e === "avg" && (y = "avgValue / max(count, 1.0)");
        const I = Math.floor(i / 4) * 4,
            v = i % 4,
            k = `
      if (${m}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;
        this.userCode = `
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${p}, ${f});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${d};
            wR += ${c}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${I}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${k}
          }

          int xC = xCCorner + ${I};
          if (${v === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${k}
          } else if (${v === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${k}
          } else if (${v === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${k}
          }
        }
        setOutput(${y});
      }
    `;
    }
}
class am {
    constructor(t, e, s, o = !1, r = !1) {
        if (((this.variableNames = ["x"]), e === "avg" && s))
            throw new Error("Cannot compute positions for average pool.");
        const i = t.filterWidth,
            a = t.strideDepth,
            l = t.strideHeight,
            c = t.strideWidth,
            u = t.dilationDepth,
            d = t.dilationHeight,
            h = t.dilationWidth,
            p = t.effectiveFilterDepth,
            f = t.effectiveFilterHeight,
            m = t.effectiveFilterWidth,
            g = t.padInfo.front,
            b = t.padInfo.top,
            x = t.padInfo.left;
        this.outputShape = t.outShape;
        const w = e === "avg";
        let y = "0.0";
        if ((w || (y = "-1.0 / 1e-20"), s)) {
            const R = ">=";
            this.userCode = `
        const ivec3 strides =
            ivec3(${a}, ${l}, ${c});
        const ivec3 pads = ivec3(${g}, ${b}, ${x});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${p};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${d}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${m};
                  wC += ${h}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${R} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${
                      o
                          ? r
                              ? `(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`
                              : `((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`
                          : `wD * ${f} * ${m} +
                      wR * ${m} + wC`
                  };
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
            return;
        }
        const I = "max";
        let v = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
        e === "avg" && (v = "avgValue / max(count, 1.0)");
        const k = Math.floor(i / 4) * 4,
            S = i % 4,
            N = `
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${I}(values, minMaxValue);
      }
    `;
        this.userCode = `
      const ivec3 strides =
        ivec3(${a}, ${l}, ${c});
      const ivec3 pads = ivec3(${g}, ${b}, ${x});
      const float initializationValue = ${y};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${y});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${d}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${k}; wC += 4) {
              int xC = xCCorner + wC * ${h};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                getValue(batch, xD, xR, xC + 2 * ${h}, ch),
                getValue(batch, xD, xR, xC + 3 * ${h}, ch)
              );

              ${N}
            }

            int xC = xCCorner + ${k};
            if (${S === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${N}
            } else if (${S === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                initializationValue,
                initializationValue
              );

              ${N}
            } else if (${S === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                getValue(batch, xD, xR, xC + 2 * ${h}, ch),
                initializationValue
              );

              ${N}
            }
          }
        }
        setOutput(${v});
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t;
    Er(o, "avgPool");
    const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s,
        c = 1;
    C(
        Le(i, c),
        () =>
            `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`
    );
    const u = $n(o.shape, r, i, c, a, l);
    if (
        u.filterWidth === 1 &&
        u.filterHeight === 1 &&
        $t(u.inShape, u.outShape)
    )
        return nn({ inputs: { x: o }, backend: e });
    const d = new wi(u, "avg", !1);
    return e.runWebGLProgram(d, [o], "float32");
}
const cK = {
    kernelName: Jl,
    backendName: "webgl",
    kernelFunc: lK,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        {
            filterSize: r,
            strides: i,
            pad: a,
            dimRoundingMode: l,
            dataFormat: c,
        } = s,
        u = [1, 1, 1],
        d = vs(o.shape, r, i, u, a, l, c),
        h = new am(d, "avg", !1);
    return e.runWebGLProgram(h, [o], "float32");
}
const dK = {
    kernelName: jl,
    backendName: "webgl",
    kernelFunc: uK,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class hK {
    constructor(t) {
        (this.variableNames = ["dy"]), (this.outputShape = t.inShape);
        const e = t.filterHeight,
            s = t.filterWidth,
            o = t.strideHeight,
            r = t.strideWidth,
            i = t.dilationHeight,
            a = t.dilationWidth,
            l = t.effectiveFilterHeight,
            c = t.effectiveFilterWidth,
            u = l - 1 - t.padInfo.top,
            d = c - 1 - t.padInfo.left,
            h = 1 / (e * s);
        this.userCode = `
      const ivec2 pads = ivec2(${u}, ${d});
      const float avgMultiplier = float(${h});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class pK {
    constructor(t) {
        (this.variableNames = ["dy"]), (this.outputShape = t.inShape);
        const e = t.filterDepth,
            s = t.filterHeight,
            o = t.filterWidth,
            r = t.strideDepth,
            i = t.strideHeight,
            a = t.strideWidth,
            l = t.dilationDepth,
            c = t.dilationHeight,
            u = t.dilationWidth,
            d = t.effectiveFilterDepth,
            h = t.effectiveFilterHeight,
            p = t.effectiveFilterWidth,
            f = d - 1 - t.padInfo.front,
            m = h - 1 - t.padInfo.top,
            g = p - 1 - t.padInfo.left,
            b = 1 / (e * s * o);
        this.userCode = `
      const ivec3 pads = ivec3(${f}, ${m}, ${g});
      const float avgMultiplier = float(${b});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${r}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${h};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, input: r } = t,
        i = r,
        { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s,
        d = [1, 1, 1],
        h = vs(i.shape, a, l, d, c, u),
        p = new pK(h);
    return e.runWebGLProgram(p, [o], i.dtype);
}
const mK = {
    kernelName: sh,
    backendName: "webgl",
    kernelFunc: fK,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, input: r } = t,
        i = r;
    Er([o, r], "avgPoolGrad");
    const { filterSize: a, strides: l, pad: c } = s,
        u = $n(i.shape, a, l, 1, c),
        d = new hK(u);
    return e.runWebGLProgram(d, [o], i.dtype);
}
const bK = {
    kernelName: nh,
    backendName: "webgl",
    kernelFunc: gK,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { a: o, b: r } = t,
        { transposeA: i, transposeB: a } = s;
    return Ol({ a: o, b: r, transposeA: i, transposeB: a, backend: e });
}
const yK = {
    kernelName: ql,
    backendName: "webgl",
    kernelFunc: xK,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class wK {
    constructor(t, e, s, o, r, i) {
        (this.outputShape = []),
            (this.variableNames = ["x", "mean", "variance"]),
            bt(t, e),
            bt(t, s);
        let a = "0.0";
        o != null &&
            (bt(t, o),
            this.variableNames.push("offset"),
            (a = "getOffsetAtOutCoords()"));
        let l = "1.0";
        r != null &&
            (bt(t, r),
            this.variableNames.push("scale"),
            (l = "getScaleAtOutCoords()")),
            (this.outputShape = t),
            (this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class IK {
    constructor(t, e, s, o, r, i) {
        (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.variableNames = ["x", "mean", "variance"]),
            bt(t, e),
            bt(t, s);
        let a = "vec4(0.0)";
        o != null &&
            (bt(t, o),
            this.variableNames.push("offset"),
            (a = "getOffsetAtOutCoords()"));
        let l = "vec4(1.0)";
        r != null &&
            (bt(t, r),
            this.variableNames.push("scale"),
            (l = "getScaleAtOutCoords()")),
            (this.outputShape = t),
            (this.userCode = `
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CK = ({ inputs: n, backend: t, attrs: e }) => {
        const { x: s, mean: o, variance: r, offset: i, scale: a } = n;
        C(
            o.shape.length === r.shape.length,
            () =>
                "Batch normalization gradient requires mean and variance to have equal ranks."
        ),
            C(
                i == null || o.shape.length === i.shape.length,
                () =>
                    "Batch normalization gradient requires mean and offset to have equal ranks."
            ),
            C(
                a == null || o.shape.length === a.shape.length,
                () =>
                    "Batch normalization gradient requires mean and scale to have equal ranks."
            );
        let { varianceEpsilon: l } = e;
        l == null && (l = 1e-3);
        const c = [s, o, r];
        let u = null;
        i != null && ((u = i.shape), c.push(i));
        let d = null;
        a != null && ((d = a.shape), c.push(a));
        const h = F().getBool("WEBGL_PACK_NORMALIZATION")
            ? new IK(s.shape, o.shape, r.shape, u, d, l)
            : new wK(s.shape, o.shape, r.shape, u, d, l);
        return t.runWebGLProgram(h, c, c[0].dtype);
    },
    vK = {
        kernelName: dc,
        backendName: "webgl",
        kernelFunc: CK,
    };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SK {
    constructor(t) {
        (this.variableNames = ["source"]),
            (this.outputShape = t),
            (this.rank = t.length);
        const e = Vt(this.rank);
        this.customUniforms = [
            { name: "start", arrayIndex: this.rank, type: "int" },
        ];
        const s = kK(this.rank);
        let o;
        const r = t.map(
            (i, a) => `sourceLoc.${Xd[a]} = start[${a}] + coords.${Xd[a]};`
        );
        (o = `
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${r.join(`
`)}
      `),
            (this.userCode = `
      void main() {
        ${o}
        setOutput(getSource(${s}));
      }
    `);
    }
}
const Xd = ["x", "y", "z", "w", "u", "v"];
function kK(n) {
    if (n === 1) return "sourceLoc";
    if (n <= 6)
        return Xd.slice(0, n)
            .map((t) => "sourceLoc." + t)
            .join(",");
    throw Error(`Slicing for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TK {
    constructor(t) {
        (this.variableNames = ["source"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t),
            (this.rank = t.length),
            (this.customUniforms = [
                { name: "start", arrayIndex: this.rank, type: "int" },
            ]);
        const e = Vt(this.rank),
            s = Fe("coords", this.rank),
            o = Fe("sourceLoc", this.rank),
            r = this.rank === 1 ? "sourceLoc" : `vec2(${o.slice(-2).join()})`,
            i = `getChannel(getSource(${o.join()}), ${r})`,
            a = `
      result.x = ${i};
      if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
        ++${o[this.rank - 1]};
        result.y = ${i};
        --${o[this.rank - 1]};
      }
    `,
            l =
                this.rank === 1
                    ? ""
                    : `
      --${s[this.rank - 1]};
      if (++${s[this.rank - 2]} < ${t[this.rank - 2]}) {
        ++${o[this.rank - 2]};
        result.z = ${i};
        if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
          ++${o[this.rank - 1]};
          result.w = ${i};
        }
      }
    `,
            c =
                this.rank <= 4
                    ? `sourceLoc = coords +
            ${e}(${t.map((u, d) => `start[${d}]`).join()});`
                    : t.map((u, d) => `${o[d]} = ${s[d]} + start[${d}];`).join(`
`);
        this.userCode = `
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${c}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NK(n, t, e, s) {
    const o = s.texData.get(n.dataId),
        r = s.makeTensorInfo(e, n.dtype),
        i = s.texData.get(r.dataId);
    Object.assign(i, o), (i.refCount = 1), (i.shape = e), (i.dtype = n.dtype);
    let a = _p(t, dt(n.shape));
    o.slice && (a += o.slice.flatOffset),
        (i.slice = {
            flatOffset: a,
            // Point to the original dataId, which is used to do ref counting.
            origDataId: (o.slice && o.slice.origDataId) || n.dataId,
        });
    const l = s.dataRefCount.get(i.slice.origDataId) || 1;
    return s.dataRefCount.set(i.slice.origDataId, l + 1), r;
}
function zr(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { begin: r, size: i } = s,
        [a, l] = nu(o, r, i);
    if ((Zp(o, a, l), X(l) === 0)) return e.makeTensorInfo(l, o.dtype, []);
    if (e.shouldExecuteOnCPU([o]) || o.dtype === "string") {
        const d = e.texData.get(o.dataId),
            h = xO(d.values, a, l, o.shape, o.dtype);
        return e.makeTensorInfo(l, o.dtype, h);
    }
    const { isPacked: c } = e.texData.get(o.dataId),
        u = Hp(o.shape, a, l);
    if (c || !u) {
        const d = F().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
                ? new TK(l)
                : new SK(l),
            h = [a];
        return e.runWebGLProgram(d, [o], o.dtype, h);
    }
    return e.uploadToGPU(o.dataId), NK(o, a, l, e);
}
const RK = {
    kernelName: Ac,
    backendName: "webgl",
    kernelFunc: zr,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $K = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { x: o } = t,
            { blockShape: r, crops: i } = s;
        C(
            o.shape.length <= 4,
            () =>
                "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"
        );
        const a = r.reduce((x, w) => x * w),
            l = Na(o.shape, r, a),
            c = Ra(l.length, r.length),
            u = $a(o.shape, r, a),
            d = jp(i, r.length),
            h = qp(u, i, r.length),
            p = [],
            f = et({ inputs: { x: o }, backend: e, attrs: { shape: l } }),
            m = ze({ inputs: { x: f }, backend: e, attrs: { perm: c } }),
            g = et({
                inputs: { x: m },
                backend: e,
                attrs: { shape: u },
            }),
            b = zr({
                inputs: { x: g },
                backend: e,
                attrs: { begin: d, size: h },
            });
        return (
            p.push(f),
            p.push(m),
            p.push(g),
            p.forEach((x) => e.disposeIntermediateTensorInfo(x)),
            b
        );
    },
    GK = {
        kernelName: tc,
        backendName: "webgl",
        kernelFunc: $K,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, weights: r } = t,
        { size: i } = s,
        a = e.readSync(o.dataId),
        l = e.readSync(r.dataId),
        c = OI(a, l, r.dtype, r.shape, i);
    return e.makeTensorInfo([i], r.dtype, c);
}
const LK = {
    kernelName: oh,
    backendName: "webgl",
    kernelFunc: EK,
};
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MK = `
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`,
    WK = `
  return float(int(a.r) & int(b.r));
`;
function DK(n) {
    const { inputs: t, backend: e } = n,
        { a: s, b: o } = t,
        r = F().getBool("WEBGL_PACK_BINARY_OPERATIONS"),
        i = F().getNumber("WEBGL_VERSION");
    if (e.shouldExecuteOnCPU([s, o]) || i === 1) {
        const l = e.texData.get(s.dataId).values,
            c = e.texData.get(o.dataId).values,
            [u, d] = XA(s.shape, o.shape, l, c, s.dtype),
            h = e.makeTensorInfo(d, s.dtype),
            p = e.texData.get(h.dataId);
        return (p.values = u), h;
    }
    let a;
    return (
        r
            ? (a = new Fr(MK, s.shape, o.shape, !1))
            : (a = new Po(WK, s.shape, o.shape)),
        e.runWebGLProgram(a, [s, o], s.dtype)
    );
}
const FK = {
    kernelName: rh,
    backendName: "webgl",
    kernelFunc: DK,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VK(n) {
    const { inputs: t, backend: e } = n,
        { s0: s, s1: o } = t,
        r = e.readSync(s.dataId),
        i = e.readSync(o.dataId),
        a = bt(Array.from(r), Array.from(i));
    return e.makeTensorInfo([a.length], "int32", Int32Array.from(a));
}
const zK = {
    kernelName: cb,
    backendName: "webgl",
    kernelFunc: VK,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PK = "return float(a != b);",
    eC = Re({ opSnippet: PK, cpuKernelImpl: cO, dtype: "bool" }),
    AK = {
        kernelName: Rc,
        backendName: "webgl",
        kernelFunc: eC,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Oa(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        o = e.texData.get(s.dataId);
    return nn({ inputs: { x: o.complexTensorInfos.real }, backend: e });
}
const OK = {
    kernelName: Eh,
    backendName: "webgl",
    kernelFunc: Oa,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XK = "return float(int(x));";
function KK(n, t) {
    const e = new qn(n.shape, XK),
        s = t.runWebGLProgram(e, [n], "int32");
    return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kd(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { dtype: r } = s;
    if (r === "complex64") {
        if (o.dtype === "complex64")
            return nn({ inputs: { x: o }, backend: e });
        const i = be(o.shape),
            a = Kd({
                inputs: { x: o },
                backend: e,
                attrs: { dtype: "float32" },
            }),
            l = oo({ inputs: { real: a, imag: i }, backend: e });
        return i.dispose(), e.disposeIntermediateTensorInfo(a), l;
    }
    if (o.dtype === "complex64") {
        const i = Oa({ inputs: { input: o }, backend: e }),
            a = Kd({ inputs: { x: i }, backend: e, attrs: { dtype: r } });
        return e.disposeIntermediateTensorInfo(i), a;
    }
    if (!Qd(o.dtype, r)) {
        const i = nn({ inputs: { x: o }, backend: e });
        return { dataId: i.dataId, shape: i.shape, dtype: r };
    }
    if (e.shouldExecuteOnCPU([o])) {
        const i = e.texData.get(o.dataId).values,
            [a, l, c] = KA(i, o.shape, o.dtype, r);
        return e.makeTensorInfo(a, l, c);
    }
    if (r === "int32") return KK(o, e);
    if (r === "bool") {
        const i = e.makeTensorInfo([], "bool", Se("bool", 1)),
            l = eC({ inputs: { a: o, b: i }, backend: e });
        return e.disposeIntermediateTensorInfo(i), l;
    }
    throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${r}`);
}
const ZK = {
    kernelName: Gi,
    backendName: "webgl",
    kernelFunc: Kd,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Eg = "return ceil(x);",
    BK = Nt({ opSnippet: Eg, packedOpSnippet: Eg, cpuKernelImpl: ZA }),
    HK = {
        kernelName: Ei,
        backendName: "webgl",
        kernelFunc: BK,
    };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class _K {
    constructor(t) {
        (this.variableNames = ["A"]),
            (this.customUniforms = [
                { name: "minVal", type: "float" },
                { name: "maxVal", type: "float" },
            ]),
            (this.outputShape = t),
            (this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UK {
    constructor(t) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [
                { name: "minVal", type: "float" },
                { name: "maxVal", type: "float" },
            ]),
            (this.outputShape = t),
            (this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { clipValueMin: r, clipValueMax: i } = s;
    let a;
    F().getBool("WEBGL_PACK_CLIP")
        ? (a = new UK(o.shape))
        : (a = new _K(o.shape));
    const l = [[r], [i]];
    return e.runWebGLProgram(a, [o], o.dtype, l);
}
const QK = {
    kernelName: Li,
    backendName: "webgl",
    kernelFunc: YK,
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class JK {
    constructor(t) {
        (this.variableNames = ["real", "imag"]),
            (this.outputShape = t),
            (this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lg(n, t) {
    return {
        dataId: t.dataId,
        dtype: t.dtype,
        shape: n.shape,
    };
}
function jK(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t,
        o = e.texData.get(s.dataId),
        r = new JK(s.shape),
        i = [
            Lg(s, o.complexTensorInfos.real),
            Lg(s, o.complexTensorInfos.imag),
        ];
    return e.runWebGLProgram(r, i, i[0].dtype);
}
const qK = {
    kernelName: ec,
    backendName: "webgl",
    kernelFunc: jK,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tZ {
    // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
    constructor(t) {
        (this.outputShape = []),
            (this.outputShape = ts(
                t,
                1
                /* axis */
            )),
            (this.variableNames = t.map((i, a) => `T${a}`));
        const e = new Array(t.length - 1);
        e[0] = t[0][1];
        for (let i = 1; i < e.length; i++) e[i] = e[i - 1] + t[i][1];
        const s = [`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];
        for (let i = 1; i < e.length; i++) {
            const a = e[i - 1];
            s.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`);
        }
        const o = e.length,
            r = e[e.length - 1];
        s.push(`else setOutput(getT${o}(yR, yC-${r}));`),
            (this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${s.join(`
        `)}
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class eZ {
    constructor(t, e) {
        (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = []),
            (this.outputShape = ts(t, e));
        const s = this.outputShape,
            o = s.length,
            r = Vt(o),
            i = Fe("coords", o),
            a = ["x", "y", "z", "w", "u", "v"].slice(0, o);
        this.variableNames = t.map((m, g) => `T${g}`);
        const l = new Array(t.length - 1);
        l[0] = t[0][e];
        for (let m = 1; m < l.length; m++) l[m] = l[m - 1] + t[m][e];
        const c = a[e],
            u = a.slice(-2),
            d = a.join();
        let h = `if (${c} < ${l[0]}) {
        return getChannel(
            getT0(${d}), vec2(${u.join()}));
        }`;
        for (let m = 1; m < l.length; m++) {
            const g = l[m - 1];
            h += `
        if (${c} < ${l[m]}  && ${c} >= ${l[m - 1]}) {
          return getChannel(
            getT${m}(${qa(a, c, g)}),
            vec2(${qa(u, c, g)}));
        }`;
        }
        const p = l.length,
            f = l[l.length - 1];
        (h += `
        return getChannel(
          getT${p}(${qa(a, c, f)}),
          vec2(${qa(u, c, f)}));`),
            (this.userCode = `
      float getValue(${a.map((m) => "int " + m)}) {
        ${h}
      }

      void main() {
        ${r} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[o - 1]} = ${i[o - 1]} + 1;
        if (${i[o - 1]} < ${s[o - 1]}) {
          result.g = getValue(${i});
        }

        ${i[o - 2]} = ${i[o - 2]} + 1;
        if (${i[o - 2]} < ${s[o - 2]}) {
          result.a = getValue(${i});
        }

        ${i[o - 1]} = ${i[o - 1]} - 1;
        if (${i[o - 2]} < ${s[o - 2]} &&
            ${i[o - 1]} < ${s[o - 1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `);
    }
}
function qa(n, t, e) {
    const s = n.indexOf(t);
    return n.map((r, i) => (i === s ? `${r} - ${e}` : r)).join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ku(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        o = e.texData.get(s.dataId);
    return nn({ inputs: { x: o.complexTensorInfos.imag }, backend: e });
}
const nZ = {
    kernelName: vh,
    backendName: "webgl",
    kernelFunc: ku,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ei(n, t, e) {
    const s = n[0].dtype;
    if (s === "complex64") {
        const p = n.map((x) => Oa({ inputs: { input: x }, backend: e })),
            f = n.map((x) => ku({ inputs: { input: x }, backend: e })),
            m = ei(p, t, e),
            g = ei(f, t, e),
            b = oo({ inputs: { real: m, imag: g }, backend: e });
        return (
            p.forEach((x) => e.disposeIntermediateTensorInfo(x)),
            f.forEach((x) => e.disposeIntermediateTensorInfo(x)),
            e.disposeIntermediateTensorInfo(m),
            e.disposeIntermediateTensorInfo(g),
            b
        );
    }
    let o = e.shouldExecuteOnCPU(n);
    if ((s === "string" && (o = !0), o)) {
        const p = n.map((y) => {
                const v = [-1, X(y.shape.slice(t))];
                return et({
                    inputs: { x: y },
                    backend: e,
                    attrs: { shape: v },
                });
            }),
            f = p.map((y) => ({ vals: e.readSync(y.dataId), shape: y.shape })),
            m = ts(
                p.map((y) => y.shape),
                1
                /* axis */
            ),
            g = p[0].shape[0] === 1,
            b = BA(f, m, s, g),
            x = ts(
                n.map((y) => y.shape),
                t
            ),
            w = e.makeTensorInfo(x, s, b);
        return p.forEach((y) => e.disposeIntermediateTensorInfo(y)), w;
    }
    const r = n.filter((p) => X(p.shape) > 0),
        i = F().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && r[0].shape.length > 1;
    if (r.length === 1) {
        const p = i ? new qn(n[0].shape, Ms) : new Vs(n[0].shape, Ms);
        return e.runWebGLProgram(p, n, s);
    }
    const a = F().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
    if (r.length > a) {
        const p = [];
        for (let m = 0; m < r.length; m += a) {
            const g = r.slice(m, m + a);
            p.push(ei(g, t, e));
        }
        const f = ei(p, t, e);
        for (const m of p) e.disposeIntermediateTensorInfo(m);
        return f;
    }
    if (i) {
        const p = new eZ(
            r.map((f) => f.shape),
            t
        );
        return e.runWebGLProgram(p, r, s);
    }
    const { tensors2D: l, outShape: c } = sZ(r, t, e),
        u = new tZ(l.map((p) => p.shape)),
        d = e.runWebGLProgram(u, l, s);
    l.forEach((p) => e.disposeIntermediateTensorInfo(p));
    const h = et({ inputs: { x: d }, attrs: { shape: c }, backend: e });
    return e.disposeIntermediateTensorInfo(d), h;
}
function sZ(n, t, e) {
    const s = ts(
        n.map((r) => r.shape),
        t
    );
    return {
        tensors2D: n.map((r) =>
            et({
                inputs: { x: r },
                attrs: { shape: [-1, X(r.shape.slice(t))] },
                backend: e,
            })
        ),
        outShape: s,
    };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nC(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { axis: o } = s,
        r = Ct(o, t[0].shape)[0],
        i = t.map((c) => c.shape);
    Yp(i, r);
    const a = ts(
        t.map((c) => c.shape),
        r
    );
    if (X(a) === 0) return e.makeTensorInfo(a, t[0].dtype, []);
    const l = t.filter((c) => X(c.shape) > 0);
    return l.length === 1
        ? nn({ inputs: { x: l[0] }, backend: e })
        : ei(l, r, e);
}
const oZ = {
    kernelName: nc,
    backendName: "webgl",
    kernelFunc: nC,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class sC {
    constructor(t, e = !1, s = null, o = !1, r = !1) {
        (this.variableNames = ["x", "W"]), (this.outputShape = t.outShape);
        const i = t.padInfo.top,
            a = t.padInfo.left,
            l = t.strideHeight,
            c = t.strideWidth,
            u = t.dilationHeight,
            d = t.dilationWidth,
            h = t.filterHeight,
            p = t.filterWidth,
            f = Math.floor(t.inChannels / 4) * 4,
            m = t.inChannels % 4,
            g = t.dataFormat === "channelsLast",
            b = g ? 1 : 2,
            x = g ? 2 : 3,
            w = g ? 3 : 1;
        let y = "",
            I = "";
        s &&
            (o
                ? (y = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`)
                : r
                ? (y = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`)
                : (y = `
          float activation(float x) {
            ${s}
          }
        `),
            (I = "result = activation(result);"));
        const v = e ? "result += getBiasAtOutCoords();" : "";
        e && this.variableNames.push("bias"),
            o && this.variableNames.push("preluActivationWeights"),
            r && this.variableNames.push("leakyreluAlpha"),
            (this.userCode = `
      ${y}

      const ivec2 strides = ivec2(${l}, ${c});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${b}], coords[${x}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${h}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${p}; wC++) {
            int xC = xCCorner + wC * ${d};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${m === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${m === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${m === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${v}
        ${I}
        setOutput(result);
      }
    `);
    }
}
class rZ {
    constructor(t) {
        (this.variableNames = ["x", "W"]), (this.outputShape = t.outShape);
        const e = t.padInfo.front,
            s = t.padInfo.top,
            o = t.padInfo.left,
            r = t.strideDepth,
            i = t.strideHeight,
            a = t.strideWidth,
            l = t.dilationDepth,
            c = t.dilationHeight,
            u = t.dilationWidth,
            d = t.filterDepth,
            h = t.filterHeight,
            p = t.filterWidth,
            f = Math.floor(t.inChannels / 4) * 4,
            m = t.inChannels % 4;
        this.userCode = `
      const ivec3 strides = ivec3(${r}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${s}, ${o});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${d}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h}; wR++) {
            int xR = xRCorner + wR * ${c};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${m === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${m === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${m === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class oC {
    constructor(t, e = !1, s = null, o = !1, r = !1) {
        (this.variableNames = ["x", "W"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [
                { name: "pads", type: "ivec2" },
                { name: "strides", type: "ivec2" },
                { name: "dilations", type: "ivec2" },
                { name: "inDims", type: "ivec2" },
            ]),
            (this.outputShape = t.outShape),
            (this.enableShapeUniforms = Me(this.outputShape.length));
        const i = t.padInfo.left,
            a = t.strideWidth,
            l = t.dilationWidth,
            c = t.filterHeight,
            u = t.filterWidth,
            d = u;
        let h = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
        for (let g = 0; g < u; g++)
            h += `
           vec4 xTexelC${g * 2};
           int xTexelC${g * 2}Ready;
           vec4 xTexelC${g * 2 + 1};
           int xTexelC${g * 2 + 1}Ready;
           vec4 xC${g};`;
        h += `
     for (int r = 0; r < ${c}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;
        for (let g = 0; g < u; g++)
            h += `
           xTexelC${g * 2} = vec4(0.0);
           xTexelC${g * 2}Ready = 0;
           xTexelC${g * 2 + 1} = vec4(0.0);
           xTexelC${g * 2 + 1}Ready = 0;
           xC${g} = vec4(0.0);`;
        h += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
        for (let g = 0; g < (d + 1) / 2; g++) {
            const b = g * 2;
            if (
                ((h += `
           xC = xCCorner + ${b * l};
           `),
                a === 1)
            ) {
                if (
                    b < u &&
                    (i % 2 === 1
                        ? ((h += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }
               `),
                          l === 1 && b > 0
                              ? (h += `
                 xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                 `)
                              : (h += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                   } else {
                     xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                   }
                   `))
                        : (h += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }

                 xC${b} = xTexelC${b};
                 `),
                    b + 1 < u)
                ) {
                    const x = i % 2 === 0 ? Bl(l) : l;
                    (l % 2 === 0 && i % 2 === 1) || (l % 2 !== 0 && i % 2 !== 1)
                        ? ((h += `
                   xCOffset = xC + imod(pads[1], 2) + ${x};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                       b + 1
                   }Ready == 0) {
                     xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${b + 1}.zw = vec2(0.0);
                     }
                     xTexelC${b + 1}Ready = 1;
                   }
                   `),
                          l > 1
                              ? (h += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                     } else {
                      xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                     }
                     `)
                              : (h += `
                     xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                     `))
                        : x === 1
                        ? (h += `
                     xC${b + 1} = xTexelC${b};
                     `)
                        : (h += `
                     xCOffset = xC + ${x};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                         b + 1
                     }Ready == 0) {
                       xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${b + 1}.zw = vec2(0.0);
                       }
                       xTexelC${b + 1}Ready = 1;
                     }

                     xC${b + 1} = xTexelC${b + 1};
                     `);
                }
            } else
                b < u &&
                    (i % 2 === 1
                        ? ((h += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${
                     b + 1
                 }Ready == 0) {
                   xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${b + 1}.zw = vec2(0.0);
                   }
                   xTexelC${b + 1}Ready = 1;
                 }

                 xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
               `),
                          b + 1 < u &&
                              (h += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                 `))
                        : ((h += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                     b + 1
                 }Ready == 0) {
                   xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${b + 1}.zw = vec2(0.);
                   }
                   xTexelC${b + 1}Ready = 1;
                 }

                 xC${b} = vec4(
                   xTexelC${b}.xy, xTexelC${b + 1}.xy);
               `),
                          b + 1 < u &&
                              (h += `
                   xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                 `)));
            b < u &&
                ((h += `
             wTexel = getW(r, ${b}, d1, d2);
             dotProd += xC${b}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${b}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `),
                b + 1 < u &&
                    (h += `
               wTexel = getW(r, ${b + 1}, d1, d2);
               dotProd += xC${b + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${b + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
        }
        (h += `
     }
   `),
            (h += `
     }
   `),
            (h += `
     }
   `);
        let p = "",
            f = "";
        s &&
            (o
                ? (p = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${s}
         }`)
                : r
                ? (p = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${s}
         }`)
                : (p = `vec4 activation(vec4 x) {
           ${s}
         }`),
            (f = "result = activation(result);"));
        const m = e ? "result += getBiasAtOutCoords();" : "";
        e && this.variableNames.push("bias"),
            o && this.variableNames.push("preluActivationWeights"),
            r && this.variableNames.push("leakyreluAlpha"),
            (this.userCode = `
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${h}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${m}
         ${f}
         setOutput(result);
       }
     `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class iZ {
    constructor(t, e) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [
                { name: "inputShape", type: "ivec4" },
                { name: "pad", type: "ivec2" },
                { name: "stride", type: "ivec2" },
                { name: "dilation", type: "ivec2" },
                { name: "inChannels", type: "int" },
                { name: "itemsPerBlockRow", type: "int" },
                { name: "outWidth", type: "int" },
            ]),
            (this.outputShape = t),
            (this.enableShapeUniforms = Me(this.outputShape.length));
        const { dataFormat: s } = e,
            o = Ae(),
            r = s === "channelsLast",
            i = r ? 1 : 2,
            a = r ? 2 : 3,
            l = this.enableShapeUniforms
                ? "if(blockIndex < outShape[2] && pos < outShape[1]) {"
                : `if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;
        let c = "";
        for (let u = 0; u <= 1; u++)
            for (let d = 0; d <= 1; d++)
                c += `
          blockIndex = rc.z + ${d};
          pos = rc.y + ${u};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${r}) {
                  innerDims = vec2(d1, ch);
                  result[${u * 2 + d}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u * 2 + d}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
        this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${c}

        ${o.output} = result;
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xl(n, t) {
    const e = n.length;
    return e >= 3
        ? t
            ? [
                  ...n.slice(0, -3),
                  n[e - 3] * n[e - 2],
                  n[e - 1],
                  /* channel */
              ]
            : [
                  ...n.slice(0, -3),
                  n[e - 3],
                  n[e - 2] * n[e - 1],
                  /* height * width */
              ]
        : !t && e === 1 && n[0] > 1
        ? [n[0], 1]
        : null;
}
function rC({
    x: n,
    filter: t,
    convInfo: e,
    backend: s,
    bias: o = null,
    preluActivationWeights: r = null,
    leakyreluAlpha: i = 0,
    activation: a = null,
}) {
    const l = n.shape,
        c = s.texData.get(n.dataId),
        u = e.inChannels,
        d = l[0] * l[1] * l[2],
        h = e.outChannels,
        p = e.dataFormat === "channelsLast",
        f = !1,
        m = !1;
    let g;
    const b = [];
    if (r != null) {
        const y = Xl(r.shape, p);
        y != null &&
            ((r = et({
                inputs: { x: r },
                backend: s,
                attrs: { shape: y },
            })),
            b.push(r));
    }
    if (o != null) {
        const y = Xl(o.shape, p);
        y != null &&
            ((o = et({ inputs: { x: o }, backend: s, attrs: { shape: y } })),
            b.push(o));
    }
    if (
        !((d === 1 || h === 1) && u > JI) &&
        c.isPacked &&
        p &&
        c.texture != null &&
        l[2] % 2 !== 0 &&
        $t(c.shape.slice(-3), l.slice(-3))
    ) {
        const y = l[0] * l[1] * (l[2] + 1),
            I = {
                dataId: n.dataId,
                shape: [1, y, e.inChannels],
                dtype: n.dtype,
            },
            v = c.shape;
        (c.shape = c.shape.slice()),
            c.shape[c.shape.length - 2]++,
            C(
                xi(c.shape, I.shape),
                () => `packed reshape ${c.shape} to ${I.shape} isn't free`
            );
        const k = et({
            inputs: { x: t },
            backend: s,
            attrs: { shape: [1, e.inChannels, e.outChannels] },
        });
        b.push(k);
        const S = Ol({
                a: I,
                b: k,
                backend: s,
                transposeA: f,
                transposeB: m,
                bias: o,
                activation: a,
                preluActivationWeights: r,
                leakyreluAlpha: i,
            }),
            N = s.texData.get(S.dataId);
        C(N.isPacked, () => "batchMatMul result is expected to be packed"),
            (c.shape = v),
            (N.shape = e.outShape),
            (g = nn({ inputs: { x: S }, backend: s })),
            (g.shape = e.outShape),
            b.push(S);
    } else {
        const y = e.outHeight * e.outWidth,
            I = et({
                inputs: { x: n },
                backend: s,
                attrs: {
                    shape: p
                        ? [e.batchSize, y, e.inChannels]
                        : [e.batchSize, e.inChannels, y],
                },
            }),
            v = et({
                inputs: { x: t },
                backend: s,
                attrs: { shape: [1, e.inChannels, e.outChannels] },
            }),
            k = Ol({
                a: p ? I : v,
                b: p ? v : I,
                transposeA: !p,
                transposeB: m,
                backend: s,
                bias: o,
                activation: a,
                preluActivationWeights: r,
                leakyreluAlpha: i,
            });
        (g = et({
            inputs: { x: k },
            backend: s,
            attrs: { shape: e.outShape },
        })),
            b.push(I),
            b.push(v),
            b.push(k);
    }
    for (const y of b) s.disposeIntermediateTensorInfo(y);
    return g;
}
function iC({
    x: n,
    filter: t,
    convInfo: e,
    backend: s,
    bias: o = null,
    preluActivationWeights: r = null,
    leakyreluAlpha: i = 0,
    activation: a = null,
}) {
    const {
            filterWidth: l,
            filterHeight: c,
            inChannels: u,
            outWidth: d,
            outHeight: h,
            dataFormat: p,
        } = e,
        f = p === "channelsLast",
        m = l * c * u,
        g = h * d,
        b = [e.batchSize, m, g],
        x = !0,
        w = !1,
        y = [];
    if (r != null) {
        const Z = Xl(r.shape, f);
        Z != null &&
            ((r = et({
                inputs: { x: r },
                backend: s,
                attrs: { shape: Z },
            })),
            y.push(r));
    }
    if (o != null) {
        const Z = Xl(o.shape, f);
        Z != null &&
            ((o = et({ inputs: { x: o }, backend: s, attrs: { shape: Z } })),
            y.push(o));
    }
    const I = et({
        inputs: { x: t },
        backend: s,
        attrs: { shape: [1, m, X(t.shape) / m] },
    });
    y.push(I);
    const v = new iZ(b, e),
        k = [
            n.shape,
            [e.padInfo.top, e.padInfo.left],
            [e.strideHeight, e.strideWidth],
            [e.dilationHeight, e.dilationWidth],
            [e.inChannels],
            [e.filterWidth * e.inChannels],
            [e.outWidth],
        ],
        S = s.runWebGLProgram(v, [n], "float32", k),
        N = et({ inputs: { x: S }, backend: s, attrs: { shape: b } });
    y.push(S), y.push(N);
    const R = o != null,
        M = r != null,
        V = a === "leakyrelu",
        z = a ? yi(a, !0) : null,
        P = new QI(
            f ? N.shape : I.shape,
            f ? I.shape : N.shape,
            f
                ? [e.batchSize, g, e.outChannels]
                : [e.batchSize, e.outChannels, g],
            x,
            w,
            R,
            z,
            M,
            V
        ),
        A = f ? [N, I] : [I, N];
    if ((o && A.push(o), M && A.push(r), V)) {
        const Z = s.makeTensorInfo([], "float32", Is(i, "float32"));
        A.push(Z), y.push(Z);
    }
    const O = s.runWebGLProgram(P, A, "float32"),
        B = et({ inputs: { x: O }, backend: s, attrs: { shape: e.outShape } });
    y.push(O);
    for (const Z of y) s.disposeIntermediateTensorInfo(Z);
    return B;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r } = t,
        {
            strides: i,
            pad: a,
            dataFormat: l,
            dilations: c,
            dimRoundingMode: u,
        } = s,
        d = Ss(l),
        h = Te(o.shape, r.shape, i, c, a, u, !1, d);
    let p;
    if (
        h.filterHeight === 1 &&
        h.filterWidth === 1 &&
        h.dilationHeight === 1 &&
        h.dilationWidth === 1 &&
        h.strideHeight === 1 &&
        h.strideWidth === 1 &&
        (h.padInfo.type === "SAME" || h.padInfo.type === "VALID")
    )
        p = rC({ x: o, filter: r, convInfo: h, backend: e });
    else if (
        h.strideWidth <= 2 &&
        d === "channelsLast" &&
        F().getBool("WEBGL_EXP_CONV")
    ) {
        const m = new oC(h),
            g = [
                [h.padInfo.top, h.padInfo.left],
                [h.strideHeight, h.strideWidth],
                [h.dilationHeight, h.dilationWidth],
                [h.inHeight, h.inWidth],
            ];
        p = e.runWebGLProgram(m, [o, r], "float32", g);
    } else if (F().getBool("WEBGL_CONV_IM2COL"))
        p = iC({ x: o, filter: r, convInfo: h, backend: e });
    else {
        const m = new sC(h);
        p = e.runWebGLProgram(m, [o, r], "float32");
    }
    const f = et({
        inputs: { x: p },
        backend: e,
        attrs: { shape: h.outShape },
    });
    return e.disposeIntermediateTensorInfo(p), f;
}
const lZ = {
    kernelName: sc,
    backendName: "webgl",
    kernelFunc: aZ,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class cZ {
    constructor(t) {
        (this.variableNames = ["x", "dy"]), (this.outputShape = t.filterShape);
        const e = t.strideHeight,
            s = t.strideWidth,
            o = t.padInfo.top,
            r = t.padInfo.left,
            i = t.dataFormat === "channelsLast";
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${o};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${r};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              ${
                  i
                      ? `float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`
                      : `float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class uZ {
    constructor(t) {
        (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
        const e = t.filterHeight,
            s = t.filterWidth,
            o = t.strideHeight,
            r = t.strideWidth,
            i = t.dataFormat === "channelsLast",
            a = e - 1 - t.padInfo.top,
            l = s - 1 - t.padInfo.left,
            c = i ? 1 : 2,
            u = i ? 2 : 3,
            d = i ? 3 : 1;
        this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${d}];

        ivec2 dyCorner = ivec2(coords[${c}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class dZ {
    constructor(t) {
        (this.variableNames = ["x", "dy"]), (this.outputShape = t.filterShape);
        const e = t.strideDepth,
            s = t.strideHeight,
            o = t.strideWidth,
            r = t.padInfo.front,
            i = t.padInfo.top,
            a = t.padInfo.left;
        this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${r};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${s} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${o} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class hZ {
    constructor(t) {
        (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
        const e = t.filterDepth,
            s = t.filterHeight,
            o = t.filterWidth,
            r = t.strideDepth,
            i = t.strideHeight,
            a = t.strideWidth,
            l = e - 1 - t.padInfo.front,
            c = s - 1 - t.padInfo.top,
            u = o - 1 - t.padInfo.left;
        this.userCode = `
      const ivec3 pads = ivec3(${l}, ${c}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${r}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${s}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${s} - 1 - wR;

            for (int wC = 0; wC < ${o}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${o} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, dy: r } = t,
        {
            strides: i,
            pad: a,
            dataFormat: l,
            dimRoundingMode: c,
            filterShape: u,
        } = s,
        d = Ss(l),
        h = Te(o.shape, u, i, 1, a, c, !1, d),
        p = new cZ(h);
    return e.runWebGLProgram(p, [o, r], "float32");
}
const fZ = {
    kernelName: ah,
    backendName: "webgl",
    kernelFunc: pZ,
};
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class mZ {
    constructor(t) {
        (this.variableNames = ["dy", "W"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [{ name: "strides", type: "vec2" }]),
            (this.outputShape = t.inShape),
            (this.enableShapeUniforms = Me(this.outputShape.length));
        const e = t.filterHeight,
            s = t.filterWidth,
            o = e - 1 - t.padInfo.top,
            r = s - 1 - t.padInfo.left;
        this.userCode = `
      const ivec2 pads = ivec2(${o}, ${r});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            int wCPerm = ${s} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, filter: r } = t,
        {
            inputShape: i,
            strides: a,
            pad: l,
            dataFormat: c,
            dimRoundingMode: u,
        } = s,
        d = Ss(c),
        h = Te(i, r.shape, a, 1, l, u, !1, d);
    if (F().getBool("WEBGL_PACK_CONV2DTRANSPOSE") && d === "channelsLast") {
        const p = [[h.strideHeight, h.strideWidth]],
            f = new mZ(h);
        return e.runWebGLProgram(f, [o, r], "float32", p);
    } else {
        const p = new uZ(h);
        return e.runWebGLProgram(p, [o, r], "float32");
    }
}
const bZ = {
    kernelName: oc,
    backendName: "webgl",
    kernelFunc: gZ,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r } = t,
        { strides: i, pad: a, dilations: l } = s,
        c = Js(o.shape, r.shape, i, l, a),
        u = new rZ(c);
    return e.runWebGLProgram(u, [o, r], "float32");
}
const yZ = {
    kernelName: rc,
    backendName: "webgl",
    kernelFunc: xZ,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, dy: r } = t,
        { strides: i, pad: a, filterShape: l } = s,
        c = Js(o.shape, l, i, 1, a),
        u = new dZ(c);
    return e.runWebGLProgram(u, [o, r], "float32");
}
const IZ = {
    kernelName: lh,
    backendName: "webgl",
    kernelFunc: wZ,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, filter: r } = t,
        { pad: i, strides: a, inputShape: l } = s,
        c = Js(l, r.shape, a, 1, i),
        u = new hZ(c);
    return e.runWebGLProgram(u, [o, r], "float32");
}
const vZ = {
    kernelName: ch,
    backendName: "webgl",
    kernelFunc: CZ,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SZ =
        Vr +
        `
  return cos(x);
`,
    kZ = `
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${jo}
  return result;
`,
    TZ = Nt({ opSnippet: SZ, packedOpSnippet: kZ }),
    NZ = {
        kernelName: Mi,
        backendName: "webgl",
        kernelFunc: TZ,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RZ = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,
    $Z = Nt({ opSnippet: RZ }),
    GZ = {
        kernelName: Wi,
        backendName: "webgl",
        kernelFunc: $Z,
    };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EZ {
    constructor(t, e, s, o, r) {
        (this.variableNames = ["Image", "Boxes", "BoxInd"]),
            (this.outputShape = []);
        const [i, a, l, c] = t,
            [u] = e,
            [d, h] = s;
        this.outputShape = [u, d, h, c];
        const p = o === "bilinear" ? 1 : 0,
            [f, m] = [`${a - 1}.0`, `${l - 1}.0`],
            [g, b, x] =
                d > 1
                    ? [
                          `${(a - 1) / (d - 1)}`,
                          "(y2-y1) * height_ratio",
                          `y1*${f} + float(y)*(height_scale)`,
                      ]
                    : ["0.0", "0.0", `0.5 * (y1+y2) * ${f}`],
            [w, y, I] =
                h > 1
                    ? [
                          `${(l - 1) / (h - 1)}`,
                          "(x2-x1) * width_ratio",
                          `x1*${m} + float(x)*(width_scale)`,
                      ]
                    : ["0.0", "0.0", `0.5 * (x1+x2) * ${m}`];
        this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${b};
        float width_scale = ${y};

        float in_y = ${x};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${r}));
          return;
        }
        float in_x = ${I};
        if( in_x < 0.0 || in_x > ${m} ) {
          setOutput(float(${r}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${p} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LZ = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { image: o, boxes: r, boxInd: i } = t,
            { cropSize: a, method: l, extrapolationValue: c } = s,
            u = new EZ(o.shape, r.shape, a, l, c);
        return e.runWebGLProgram(u, [o, r, i], "float32");
    },
    MZ = {
        kernelName: dh,
        backendName: "webgl",
        kernelFunc: LZ,
    };
var Ii;
(function (n) {
    (n.Prod = "*"), (n.Sum = "+");
})(Ii || (Ii = {}));
class Mg {
    constructor(t, e, s, o) {
        (this.op = t),
            (this.outputShape = e),
            (this.variableNames = ["x"]),
            (this.customUniforms = [{ name: "index", type: "float" }]);
        const r = this.outputShape.length,
            i = this.op === Ii.Prod ? "1.0" : "0.0",
            a = s ? i : `getX(${Wg(r, "coords", this.op)})`,
            l = this.outputShape[this.outputShape.length - 1];
        let c = "",
            u = "";
        s
            ? ((c = o ? `end != ${l - 1}` : "end != 0"),
              (u = o ? "end + 1" : "end - 1"))
            : ((c = o ? `end + pow2 < ${l}` : "end >= pow2"),
              (u = o ? "end + pow2" : "end - pow2")),
            (this.userCode = `
      void main() {
        ${Vt(r)} coords = getOutputCoords();
        int end = ${Dg(r, "coords", this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${c}) {
          int idx = ${u};
          ${Dg(r, "coords", this.op)} = idx;
          val ${this.op}= getX(${Wg(r, "coords", this.op)});
        }
        setOutput(val);
      }
    `);
    }
}
function Wg(n, t, e) {
    if (n === 1) return `${t}`;
    if (n === 2) return `${t}.x, ${t}.y`;
    if (n === 3) return `${t}.x, ${t}.y, ${t}.z`;
    if (n === 4) return `${t}.x, ${t}.y, ${t}.z, ${t}.w`;
    throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
function Dg(n, t, e) {
    if (n === 1) return `${t}`;
    if (n === 2) return `${t}.y`;
    if (n === 3) return `${t}.z`;
    if (n === 4) return `${t}.w`;
    throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aC(n, t, e, s, o, r) {
    const i = t.shape.length,
        a = qt([s], i);
    let l = t;
    a != null && (l = ze({ inputs: { x: t }, backend: e, attrs: { perm: a } }));
    const c = ie(1, i)[0];
    if (c !== i - 1)
        throw new Error(
            `WebGL cumprod shader expects an inner-most axis=${
                t.shape.length - 1
            } but got axis=${s}`
        );
    const u = l.shape[c];
    let d = nn({ inputs: { x: l }, backend: e });
    for (let h = 0; h <= Math.ceil(Math.log2(u)) - 1; h++) {
        const p = new Mg(n, l.shape, !1, r),
            f = [[h]],
            m = d;
        (d = e.runWebGLProgram(p, [d], d.dtype, f)),
            e.disposeIntermediateTensorInfo(m);
    }
    if (o) {
        const h = new Mg(n, l.shape, o, r),
            p = d;
        (d = e.runWebGLProgram(h, [d], d.dtype)),
            e.disposeIntermediateTensorInfo(p);
    }
    if (a != null) {
        const h = js(a),
            p = ze({ inputs: { x: d }, backend: e, attrs: { perm: h } });
        return (
            e.disposeIntermediateTensorInfo(d),
            e.disposeIntermediateTensorInfo(l),
            p
        );
    }
    return d;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, exclusive: i, reverse: a } = s;
    return aC(Ii.Prod, o, e, r, i, a);
}
const DZ = {
    kernelName: uh,
    backendName: "webgl",
    kernelFunc: WZ,
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, exclusive: i, reverse: a } = s;
    return aC(Ii.Sum, o, e, r, i, a);
}
const VZ = {
    kernelName: ic,
    backendName: "webgl",
    kernelFunc: FZ,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, weights: r } = t,
        { size: i, binaryOutput: a } = s;
    if (o.shape.length === 1) {
        const l = e.readSync(o.dataId),
            c = e.readSync(r.dataId),
            u = OI(l, c, r.dtype, r.shape, i);
        return e.makeTensorInfo([i], r.dtype, u);
    } else if (o.shape.length === 2) {
        const l = e.bufferSync(o),
            c = e.bufferSync(r),
            u = OA(l, c, i, a);
        return e.makeTensorInfo(u.shape, r.dtype, u.values);
    }
    throw new Error(
        `Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`
    );
}
const PZ = {
    kernelName: hh,
    backendName: "webgl",
    kernelFunc: zZ,
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AZ {
    constructor(t, e, s) {
        (this.variableNames = ["x"]),
            (this.outputShape = []),
            (this.outputShape = t),
            (this.blockSize = e),
            (this.dataFormat = s),
            (this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `);
    }
    getHeightCoordString() {
        return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
    }
    getWidthCoordString() {
        return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
    }
    getDepthCoordString() {
        return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
    }
    getOutputDepthSize() {
        return this.dataFormat === "NHWC"
            ? this.outputShape[3]
            : this.outputShape[1];
    }
    getInputSamplingString() {
        return this.dataFormat === "NHWC"
            ? "getX(b, in_h, in_w, in_d)"
            : "getX(b, in_d, in_h, in_w)";
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { blockSize: r, dataFormat: i } = s,
        a = o.shape[0],
        l = i === "NHWC" ? o.shape[1] : o.shape[2],
        c = i === "NHWC" ? o.shape[2] : o.shape[3],
        u = i === "NHWC" ? o.shape[3] : o.shape[1],
        d = l * r,
        h = c * r,
        p = u / (r * r),
        f = i === "NHWC" ? [a, d, h, p] : [a, p, d, h],
        m = new AZ(f, r, i);
    return e.runWebGLProgram(m, [o], o.dtype);
}
const XZ = {
    kernelName: ph,
    backendName: "webgl",
    kernelFunc: OZ,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class lC {
    constructor(t, e = !1, s = null, o = !1, r = !1) {
        (this.variableNames = ["x", "W"]),
            (this.customUniforms = [
                { name: "pads", type: "ivec2" },
                { name: "strides", type: "ivec2" },
                { name: "dilations", type: "ivec2" },
                { name: "inDims", type: "ivec2" },
            ]),
            (this.outputShape = t.outShape),
            (this.enableShapeUniforms = Me(this.outputShape.length));
        const i = t.filterHeight,
            a = t.filterWidth,
            l = t.outChannels / t.inChannels;
        let c = "",
            u = "";
        s &&
            (o
                ? (c = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`)
                : r
                ? (c = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`)
                : (c = `
          float activation(float x) {
            ${s}
          }
        `),
            (u = "result = activation(result);"));
        const d = e ? "result += getBiasAtOutCoords();" : "";
        e && this.variableNames.push("bias"),
            o && this.variableNames.push("preluActivationWeights"),
            r && this.variableNames.push("leakyreluAlpha"),
            (this.userCode = `
      ${c}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${d}
        ${u}
        setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class cC {
    constructor(t, e = !1, s = null, o = !1, r = !1) {
        (this.variableNames = ["x", "W"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [
                { name: "pads", type: "ivec2" },
                { name: "strides", type: "ivec2" },
                { name: "dilations", type: "ivec2" },
                { name: "inDims", type: "ivec2" },
            ]),
            (this.outputShape = t.outShape),
            (this.enableShapeUniforms = Me(this.outputShape.length));
        const i = t.outChannels / t.inChannels,
            a = t.padInfo.left,
            l = t.strideWidth,
            c = t.dilationWidth,
            u = t.filterHeight,
            d = t.filterWidth,
            h = d;
        let p = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
        for (let b = 0; b < d; b++)
            p += `
          vec4 xTexelC${b * 2};
          int xTexelC${b * 2}Ready;
          vec4 xTexelC${b * 2 + 1};
          int xTexelC${b * 2 + 1}Ready;
          vec4 xC${b};`;
        p += `
    for (int r = 0; r < ${u}; r++) {
      `;
        for (let b = 0; b < d; b++)
            p += `
          xTexelC${b * 2} = vec4(0.0);
          xTexelC${b * 2}Ready = 0;
          xTexelC${b * 2 + 1} = vec4(0.0);
          xTexelC${b * 2 + 1}Ready = 0;
          xC${b} = vec4(0.0);`;
        p += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
        for (let b = 0; b < (h + 1) / 2; b++) {
            const x = b * 2;
            if (
                ((p += `
          xC = xCCorner + ${x * c};
          `),
                l === 1)
            ) {
                if (
                    x < d &&
                    (a % 2 === 1
                        ? ((p += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }
              `),
                          c === 1 && x > 0
                              ? (p += `
                xC${x} = vec4(xTexelC${x - 2}.zw, xTexelC${x}.xy);
                `)
                              : (p += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                  } else {
                    xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                  }
                  `))
                        : (p += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                xC${x} = xTexelC${x};
                `),
                    x + 1 < d)
                ) {
                    const w = a % 2 === 0 ? Bl(c) : c;
                    (c % 2 === 0 && a % 2 === 1) || (c % 2 !== 0 && a % 2 !== 1)
                        ? ((p += `
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                      x + 1
                  }Ready == 0) {
                    xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${x + 1}.zw = vec2(0.0);
                    }
                    xTexelC${x + 1}Ready = 1;
                  }
                  `),
                          c > 1
                              ? (p += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${x + 1} = vec4(previous.zw, xTexelC${x + 1}.xy);
                    } else {
                     xC${x + 1} = vec4(0.0, 0.0, xTexelC${x + 1}.xy);
                    }
                    `)
                              : (p += `
                    xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.xy);
                    `))
                        : w === 1
                        ? (p += `
                    xC${x + 1} = xTexelC${x};
                    `)
                        : (p += `
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                        x + 1
                    }Ready == 0) {
                      xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${x + 1}.zw = vec2(0.0);
                      }
                      xTexelC${x + 1}Ready = 1;
                    }

                    xC${x + 1} = xTexelC${x + 1};
                    `);
                }
            } else
                x < d &&
                    (a % 2 === 1
                        ? ((p += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${
                    x + 1
                }Ready == 0) {
                  xTexelC${x + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${x + 1}.zw = vec2(0.0);
                  }
                  xTexelC${x + 1}Ready = 1;
                }

                xC${x} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
              `),
                          x + 1 < d &&
                              (p += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${x + 1} = vec4(xTexelC${x + 1}.xy, final.xy);
                `))
                        : ((p += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                    x + 1
                }Ready == 0) {
                  xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x + 1}.zw = vec2(0.);
                  }
                  xTexelC${x + 1}Ready = 1;
                }

                xC${x} = vec4(
                  xTexelC${x}.xy, xTexelC${x + 1}.xy);
              `),
                          x + 1 < d &&
                              (p += `
                  xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
                `)));
            x < d &&
                ((p += `
            wTexel = getW(r, ${x}, d1, q);
            dotProd += xC${x} * vec4(wTexel.xz, wTexel.xz);
          `),
                x + 1 < d &&
                    (p += `
              wTexel = getW(r, ${x + 1}, d1, q);
              dotProd += xC${x + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
        }
        (p += `
    }
  `),
            (p += `
      }
    `);
        let f = "",
            m = "";
        s &&
            (o
                ? (f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`)
                : r
                ? (f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`)
                : (f = `vec4 activation(vec4 x) {
          ${s}
        }`),
            (m = "result = activation(result);"));
        const g = e ? "result += getBiasAtOutCoords();" : "";
        e && this.variableNames.push("bias"),
            o && this.variableNames.push("preluActivationWeights"),
            r && this.variableNames.push("leakyreluAlpha"),
            (this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${m}
        setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r } = t,
        { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
    let u = l;
    u == null && (u = [1, 1]),
        C(
            Le(i, u),
            () =>
                `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`
        );
    const d = Te(
        o.shape,
        r.shape,
        i,
        u,
        a,
        c,
        !0
        /* depthwise */
    );
    let h;
    F().getBool("WEBGL_PACK_DEPTHWISECONV") &&
    d.strideWidth <= 2 &&
    d.outChannels / d.inChannels === 1
        ? (h = new cC(d))
        : (h = new lC(d));
    const p = [
        [d.padInfo.top, d.padInfo.left],
        [d.strideHeight, d.strideWidth],
        [d.dilationHeight, d.dilationWidth],
        [d.inHeight, d.inWidth],
    ];
    return e.runWebGLProgram(h, [o, r], "float32", p);
}
const ZZ = {
    kernelName: ac,
    backendName: "webgl",
    kernelFunc: KZ,
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BZ {
    constructor(t) {
        (this.variableNames = ["x", "dy"]), (this.outputShape = t.filterShape);
        const e = t.strideHeight,
            s = t.strideWidth,
            o = t.padInfo.top,
            r = t.padInfo.left,
            i = t.outChannels / t.inChannels;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${o};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${r};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class HZ {
    constructor(t) {
        (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
        const e = t.filterHeight,
            s = t.filterWidth,
            o = t.strideHeight,
            r = t.strideWidth,
            i = e - 1 - t.padInfo.top,
            a = s - 1 - t.padInfo.left,
            l = t.outChannels / t.inChannels;
        this.userCode = `
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _Z(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, dy: r } = t,
        {
            strides: i,
            dilations: a,
            pad: l,
            dimRoundingMode: c,
            filterShape: u,
        } = s,
        d = Te(
            o.shape,
            u,
            i,
            a,
            l,
            c,
            !0
            /* depthwise */
        ),
        h = new BZ(d);
    return e.runWebGLProgram(h, [o, r], "float32");
}
const UZ = {
    kernelName: fh,
    backendName: "webgl",
    kernelFunc: _Z,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YZ(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, filter: r } = t,
        {
            strides: i,
            dilations: a,
            pad: l,
            dimRoundingMode: c,
            inputShape: u,
        } = s,
        d = Te(
            u,
            r.shape,
            i,
            a,
            l,
            c,
            !0
            /* depthwise */
        ),
        h = new HZ(d);
    return e.runWebGLProgram(h, [o, r], "float32");
}
const QZ = {
    kernelName: mh,
    backendName: "webgl",
    kernelFunc: YZ,
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class JZ {
    constructor(t) {
        (this.variableNames = ["X"]),
            (this.outputShape = [t, t]),
            (this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jZ(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t,
        o = [...s.shape, ...s.shape],
        r = X(s.shape),
        i = et({ inputs: { x: s }, backend: e, attrs: { shape: [r] } }),
        a = new JZ(r),
        l = e.runWebGLProgram(a, [i], i.dtype),
        c = et({ inputs: { x: l }, backend: e, attrs: { shape: o } });
    return (
        e.disposeIntermediateTensorInfo(i),
        e.disposeIntermediateTensorInfo(l),
        c
    );
}
const qZ = {
    kernelName: ub,
    backendName: "webgl",
    kernelFunc: jZ,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tB {
    constructor(t) {
        (this.variableNames = ["x", "W"]), (this.outputShape = t.outShape);
        const {
                inHeight: e,
                inWidth: s,
                padInfo: o,
                strideHeight: r,
                strideWidth: i,
                filterHeight: a,
                filterWidth: l,
                dilationHeight: c,
                dilationWidth: u,
            } = t,
            { top: d, left: h } = o;
        this.userCode = `
      const ivec2 strides = ivec2(${r}, ${i});
      const ivec2 pads = ivec2(${d}, ${h});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${c};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${s}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r } = t,
        { strides: i, pad: a, dilations: l } = s,
        c = Ia(o.shape, r.shape, i, a, "NHWC", l);
    let u;
    const d = new tB(c);
    u = e.runWebGLProgram(d, [o, r], "float32");
    const h = et({
        inputs: { x: u },
        backend: e,
        attrs: { shape: c.outShape },
    });
    return e.disposeIntermediateTensorInfo(u), h;
}
const nB = {
    kernelName: lc,
    backendName: "webgl",
    kernelFunc: eB,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { equation: o } = s,
        r = t,
        { allDims: i, summedDims: a, idDims: l } = lf(o, r.length);
    uf(i.length, l, r);
    const { path: c, steps: u } = df(a, l),
        d = u.length;
    let h = null,
        p = i.length;
    const f = [];
    for (let m = 0; m < d; ++m) {
        for (const g of u[m]) {
            const { permutationIndices: b, expandDims: x } = cf(p, l[g]);
            let w;
            hf(b)
                ? (w = r[g])
                : ((w = ze({
                      inputs: { x: r[g] },
                      backend: e,
                      attrs: { perm: b },
                  })),
                  f.push(w));
            const y = w.shape.slice();
            for (let I = 0; I < x.length; ++I) y.splice(x[I], 0, 1);
            $t(w.shape, y) ||
                ((w = et({
                    inputs: { x: w },
                    backend: e,
                    attrs: { shape: y },
                })),
                f.push(w)),
                h === null
                    ? (h = w)
                    : ((h = im({ inputs: { a: w, b: h }, backend: e })),
                      f.push(h));
        }
        m < d - 1 &&
            (c[m] >= 0 &&
                ((h = Su({
                    inputs: { x: h },
                    backend: e,
                    attrs: {
                        axis: c[m] - (i.length - p),
                        keepDims: !1,
                    },
                })),
                f.push(h)),
            p--);
    }
    for (const m of f) m !== h && e.disposeIntermediateTensorInfo(m);
    return h;
}
const oB = {
    kernelName: bh,
    backendName: "webgl",
    kernelFunc: sB,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rB = "return (x >= 0.0) ? x : (exp(x) - 1.0);",
    iB = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,
    aB = Nt({ opSnippet: rB, packedOpSnippet: iB }),
    lB = {
        kernelName: Fi,
        backendName: "webgl",
        kernelFunc: aB,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cB = "return (b >= 0.0) ? a : a * (b + 1.0);",
    uB = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,
    dB = (n) => {
        const { inputs: t, backend: e } = n,
            { dy: s, y: o } = t,
            r = F().getBool("WEBGL_PACK_BINARY_OPERATIONS")
                ? new Fr(uB, s.shape, o.shape)
                : new Po(cB, s.shape, o.shape);
        return e.runWebGLProgram(r, [s, o], s.dtype);
    },
    hB = {
        kernelName: xh,
        backendName: "webgl",
        kernelFunc: dB,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pB = `
  return vec4(equal(a, b));
`,
    fB = "return float(a == b);",
    mB = Re({
        opSnippet: fB,
        packedOpSnippet: pB,
        dtype: "bool",
        cpuKernelImpl: HA,
    }),
    gB = {
        kernelName: cc,
        backendName: "webgl",
        kernelFunc: mB,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bB = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${tf};
  float a1 = ${ef};
  float a2 = ${nf};
  float a3 = ${sf};
  float a4 = ${of};
  float a5 = ${rf};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,
    xB = Nt({ opSnippet: bB }),
    yB = {
        kernelName: Vi,
        backendName: "webgl",
        kernelFunc: xB,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wB =
        Vr +
        `
  return exp(x);
`,
    IB = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    uC = Nt({
        opSnippet: wB,
        packedOpSnippet: IB,
        cpuKernelImpl: _A,
        dtype: "float32",
    }),
    CB = {
        kernelName: zi,
        backendName: "webgl",
        kernelFunc: uC,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zd(n) {
    const { inputs: t, attrs: e, backend: s } = n,
        { dim: o } = e,
        { input: r } = t,
        i = r.shape.length,
        a = r.shape.slice();
    let l = o;
    return (
        o < 0 &&
            (C(
                -(i + 1) <= o,
                () => `Axis must be in the interval [${-(i + 1)}, ${i}]`
            ),
            (l = i + o + 1)),
        a.splice(l, 0, 1),
        et({ inputs: { x: r }, backend: s, attrs: { shape: a } })
    );
}
const vB = {
    kernelName: uc,
    backendName: "webgl",
    kernelFunc: Zd,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Fg = "return exp(x) - 1.0;",
    SB = Nt({ opSnippet: Fg, packedOpSnippet: Fg, cpuKernelImpl: UA }),
    kB = {
        kernelName: Pi,
        backendName: "webgl",
        kernelFunc: SB,
    };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Vg {
    constructor(t, e, s) {
        this.variableNames = ["real", "imag"];
        const o = e[1];
        this.outputShape = e;
        const r = s ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`,
            i = s ? `${o}.0` : "1.0";
        let a;
        if (t === "real") a = "return real * expR - imag * expI;";
        else if (t === "imag") a = "return real * expI + imag * expR;";
        else
            throw new Error(
                `FFT component must be either "real" or "imag", got ${t}.`
            );
        this.userCode = `
      const float exponentMultiplier = ${r};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${o});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${o}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dC(n, t, e) {
    const s = e.texData.get(n.dataId),
        o = X(n.shape),
        r = n.shape[n.shape.length - 1],
        i = o / r,
        a = et({ inputs: { x: n }, backend: e, attrs: { shape: [i, r] } }),
        l = a.shape,
        c = new Vg("real", l, t),
        u = new Vg("imag", l, t),
        d = [
            {
                dataId: s.complexTensorInfos.real.dataId,
                dtype: s.complexTensorInfos.real.dtype,
                shape: l,
            },
            {
                dataId: s.complexTensorInfos.imag.dataId,
                dtype: s.complexTensorInfos.imag.dtype,
                shape: l,
            },
        ],
        h = e.runWebGLProgram(c, d, "float32"),
        p = e.runWebGLProgram(u, d, "float32"),
        f = oo({ inputs: { real: h, imag: p }, backend: e });
    e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(p);
    const m = et({ inputs: { x: f }, backend: e, attrs: { shape: n.shape } });
    return (
        e.disposeIntermediateTensorInfo(a),
        e.disposeIntermediateTensorInfo(f),
        m
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TB(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t;
    return dC(s, !1, e);
}
const NB = {
    kernelName: yh,
    backendName: "webgl",
    kernelFunc: TB,
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RB {
    constructor(t, e) {
        (this.outputShape = []),
            (this.customUniforms = [{ name: "value", type: "float" }]),
            (this.variableNames = ["x"]),
            (this.outputShape = t),
            (this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xa(n) {
    const { backend: t, attrs: e } = n,
        { shape: s, value: o } = e;
    let { dtype: r } = e;
    if (((r = r || Oo(o)), r === "string")) {
        const i = ne(r, X(s));
        return i.fill(o), t.makeTensorInfo(s, r, i);
    } else {
        const i = new RB(s, o),
            a = [[o]];
        return t.runWebGLProgram(i, [], r, a);
    }
}
const $B = {
    kernelName: wh,
    backendName: "webgl",
    kernelFunc: Xa,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GB {
    constructor(t) {
        (this.variableNames = ["Image"]), (this.outputShape = []);
        const e = t[2];
        (this.outputShape = t),
            (this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EB = {
    kernelName: Ih,
    backendName: "webgl",
    kernelFunc: ({ inputs: n, backend: t }) => {
        const { image: e } = n,
            s = t,
            o = new GB(e.shape);
        return s.runWebGLProgram(o, [e], e.dtype);
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zg = "return floor(x);",
    LB = Nt({ opSnippet: zg, packedOpSnippet: zg, cpuKernelImpl: YA }),
    MB = {
        kernelName: Ai,
        backendName: "webgl",
        kernelFunc: LB,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WB = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,
    DB = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,
    FB = Re({ opSnippet: WB, packedOpSnippet: DB, dtype: "int32" }),
    VB = {
        kernelName: Oi,
        backendName: "webgl",
        kernelFunc: FB,
    };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class zB {
    constructor(t) {
        this.variableNames = ["A"];
        const e = Ae(),
            [s, o] = t;
        (this.outputShape = t),
            (this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}.0, ${s}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PB {
    constructor(t) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !1),
            (this.packedOutput = !0);
        const e = Ae(),
            [s, o] = t;
        (this.outputShape = t),
            (this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${o}.0, ${s}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AB = {
    kernelName: cd,
    backendName: "webgl",
    kernelFunc: OB,
};
let nr,
    Ou = F().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function OB(n) {
    const { inputs: t, backend: e, attrs: s } = n;
    let { pixels: o } = t;
    const { numChannels: r } = s,
        i = typeof HTMLVideoElement < "u" && o instanceof HTMLVideoElement,
        a = typeof HTMLImageElement < "u" && o instanceof HTMLImageElement,
        [l, c] = i ? [o.videoWidth, o.videoHeight] : [o.width, o.height],
        u = [c, l],
        d = [c, l, r];
    if (a || i) {
        const m = F().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
        (nr == null || m !== Ou) &&
            ((Ou = m),
            (nr = document
                .createElement("canvas")
                .getContext("2d", { willReadFrequently: Ou }))),
            (nr.canvas.width = l),
            (nr.canvas.height = c),
            nr.drawImage(o, 0, 0, l, c),
            (o = nr.canvas);
    }
    const h = e.makeTensorInfo(u, "int32");
    (e.texData.get(h.dataId).usage = un.PIXELS),
        e.gpgpu.uploadPixelDataToTexture(e.getTexture(h.dataId), o);
    const p = F().getBool("WEBGL_PACK") ? new PB(d) : new zB(d),
        f = e.runWebGLProgram(p, [h], "int32");
    return e.disposeData(h.dataId), f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r, bias: i, preluActivationWeights: a } = t,
        {
            strides: l,
            pad: c,
            dataFormat: u,
            dilations: d,
            dimRoundingMode: h,
            activation: p,
            leakyreluAlpha: f,
        } = s,
        m = Ss(u),
        g = Te(o.shape, r.shape, l, d, c, h, !1, m);
    let b;
    const x = [],
        w = i != null,
        y = a != null,
        I = p === "leakyrelu",
        v = () => {
            const S = [o, r],
                N = (R, M) => {
                    if (
                        M === "NCHW" &&
                        R.shape.length === 1 &&
                        R.shape[0] !== 1
                    ) {
                        const V = et({
                            inputs: { x: R },
                            backend: e,
                            attrs: { shape: [R.shape[0], 1, 1] },
                        });
                        return x.push(V), V;
                    }
                    return R;
                };
            if ((w && S.push(N(i, u)), y && S.push(N(a, u)), I)) {
                const R = e.makeTensorInfo([], "float32", Is(f, "float32"));
                S.push(R), x.push(R);
            }
            return S;
        };
    if (
        g.filterHeight === 1 &&
        g.filterWidth === 1 &&
        g.dilationHeight === 1 &&
        g.dilationWidth === 1 &&
        g.strideHeight === 1 &&
        g.strideWidth === 1 &&
        (g.padInfo.type === "SAME" || g.padInfo.type === "VALID")
    )
        b = rC({
            x: o,
            filter: r,
            convInfo: g,
            backend: e,
            bias: i,
            activation: p,
            preluActivationWeights: a,
            leakyreluAlpha: f,
        });
    else if (
        g.strideWidth <= 2 &&
        m === "channelsLast" &&
        F().getBool("WEBGL_EXP_CONV")
    ) {
        const S = p ? yi(p, !0) : null,
            N = new oC(g, w, S, y, I),
            R = [
                [g.padInfo.top, g.padInfo.left],
                [g.strideHeight, g.strideWidth],
                [g.dilationHeight, g.dilationWidth],
                [g.inHeight, g.inWidth],
            ],
            M = v();
        b = e.runWebGLProgram(N, M, "float32", R);
    } else if (F().getBool("WEBGL_CONV_IM2COL"))
        b = iC({
            x: o,
            filter: r,
            convInfo: g,
            backend: e,
            bias: i,
            activation: p,
            preluActivationWeights: a,
            leakyreluAlpha: f,
        });
    else {
        const S = p ? yi(p, !1) : null,
            N = new sC(g, w, S, y, I),
            R = v();
        b = e.runWebGLProgram(N, R, "float32");
    }
    const k = et({
        inputs: { x: b },
        backend: e,
        attrs: { shape: g.outShape },
    });
    return x.push(b), x.forEach((S) => e.disposeIntermediateTensorInfo(S)), k;
}
const KB = {
    kernelName: gl,
    backendName: "webgl",
    kernelFunc: XB,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, filter: r, bias: i, preluActivationWeights: a } = t,
        {
            strides: l,
            pad: c,
            dilations: u,
            dimRoundingMode: d,
            activation: h,
            leakyreluAlpha: p,
        } = s,
        f = [];
    let m = u;
    m == null && (m = [1, 1]),
        C(
            Le(l, m),
            () =>
                `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`
        );
    const g = Te(
            o.shape,
            r.shape,
            l,
            m,
            c,
            d,
            !0
            /* depthwise */
        ),
        b =
            F().getBool("WEBGL_PACK_DEPTHWISECONV") &&
            g.strideWidth <= 2 &&
            g.outChannels / g.inChannels === 1,
        x = h ? yi(h, b) : null,
        w = [o, r],
        y = i != null,
        I = a != null,
        v = h === "leakyrelu";
    if ((y && w.push(i), I && w.push(a), v)) {
        const R = e.makeTensorInfo([], "float32", Is(p, "float32"));
        w.push(R), f.push(R);
    }
    let k;
    b ? (k = new cC(g, y, x, I, v)) : (k = new lC(g, y, x, I, v));
    const S = [
            [g.padInfo.top, g.padInfo.left],
            [g.strideHeight, g.strideWidth],
            [g.dilationHeight, g.dilationWidth],
            [g.inHeight, g.inWidth],
        ],
        N = e.runWebGLProgram(k, w, "float32", S);
    return f.forEach((R) => e.disposeIntermediateTensorInfo(R)), N;
}
const BB = {
    kernelName: Cb,
    backendName: "webgl",
    kernelFunc: ZB,
};
class HB {
    constructor(t, e, s, o) {
        (this.sliceDim = t),
            (this.strides = e),
            (this.paramsShape = o),
            (this.variableNames = ["x", "indices"]),
            (this.outputShape = s);
        const r = Vt(s.length);
        let i = `
    int index;`;
        for (let a = 0; a < this.sliceDim; a++)
            i += `
          index = round(getIndices(coords[0], ${a}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};
          flattenIndex += index * ${this.strides[a]};`;
        this.userCode = `
         void main() {
          ${r} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _B(n) {
    const { inputs: t, backend: e } = n,
        { params: s, indices: o } = t,
        r = o.shape,
        i = r[r.length - 1],
        a = X(s.shape),
        [l, c, u, d] = eu(s, o),
        h = et({ inputs: { x: o }, backend: e, attrs: { shape: [c, i] } }),
        p = et({
            inputs: { x: s },
            backend: e,
            attrs: { shape: [X(s.shape) / u, u] },
        });
    if (e.shouldExecuteOnCPU([s, o]) || s.dtype === "string") {
        const b = e.readSync(o.dataId),
            x = e.bufferSync(s),
            w = QA(b, x, s.dtype, c, i, u, d, s.shape, a);
        return e.makeTensorInfo(l, s.dtype, w.values);
    }
    const f = new HB(i, d, [c, u], s.shape),
        m = e.runWebGLProgram(f, [p, h], p.dtype),
        g = et({ inputs: { x: m }, backend: e, attrs: { shape: l } });
    return (
        e.disposeIntermediateTensorInfo(h),
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(m),
        g
    );
}
const UB = {
    kernelName: db,
    backendName: "webgl",
    kernelFunc: _B,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class YB {
    constructor(t, e) {
        (this.variableNames = ["A", "indices"]),
            (this.outputShape = e),
            (this.rank = e.length);
        const s = Vt(this.rank),
            o = QB(t);
        this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${o}));
      }
    `;
    }
}
function QB(n, t) {
    const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"],
        s = [];
    for (let o = 0; o < n.length; o++)
        o === 2 ? s.push("index") : s.push(`${e[o]}`);
    return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hC(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, indices: r } = t,
        { axis: i, batchDims: a } = s,
        l = Ct(i, o.shape)[0];
    if (F().get("DEBUG")) {
        const x = e.readSync(r.dataId),
            w = o.shape[l];
        for (let y = 0; y < x.length; ++y) {
            const I = x[y];
            C(
                I <= w - 1 && I >= 0,
                () => `GatherV2: the index value ${I} is not in [0, ${w - 1}]`
            );
        }
    }
    const c = ff(o, r, l, a),
        u = X(r.shape),
        d = [],
        h = et({
            inputs: { x: o },
            backend: e,
            attrs: {
                shape: [c.batchSize, c.outerSize, c.dimSize, c.sliceSize],
            },
        }),
        p = et({
            inputs: { x: r },
            backend: e,
            attrs: { shape: [c.batchSize, u / c.batchSize] },
        });
    d.push(h), d.push(p);
    const f = [c.batchSize, c.outerSize, u / c.batchSize, c.sliceSize];
    if (e.shouldExecuteOnCPU([o, r]) || o.dtype === "string") {
        const x = e.bufferSync(p),
            w = e.bufferSync(h),
            y = JA(w, x, f);
        return (
            d.forEach((I) => e.disposeIntermediateTensorInfo(I)),
            e.makeTensorInfo(c.outputShape, y.dtype, y.values)
        );
    }
    const m = new YB(h.shape, f),
        g = e.runWebGLProgram(m, [h, p], h.dtype);
    d.push(g);
    const b = et({
        inputs: { x: g },
        backend: e,
        attrs: { shape: c.outputShape },
    });
    return d.forEach((x) => e.disposeIntermediateTensorInfo(x)), b;
}
const JB = {
    kernelName: hc,
    backendName: "webgl",
    kernelFunc: hC,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jB = "return float(a > b);",
    qB = `
  return vec4(greaterThan(a, b));
`,
    tH = Re({
        opSnippet: jB,
        packedOpSnippet: qB,
        cpuKernelImpl: jA,
        dtype: "bool",
    }),
    eH = {
        kernelName: pc,
        backendName: "webgl",
        kernelFunc: tH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nH = "return float(a >= b);",
    sH = `
  return vec4(greaterThanEqual(a, b));
`,
    oH = Re({
        opSnippet: nH,
        packedOpSnippet: sH,
        dtype: "bool",
        cpuKernelImpl: qA,
    }),
    rH = {
        kernelName: Xi,
        backendName: "webgl",
        kernelFunc: oH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iH(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t;
    return dC(s, !0, e);
}
const aH = {
    kernelName: Ch,
    backendName: "webgl",
    kernelFunc: iH,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lH = "return float(!isnan(x) && !isinf(x));",
    cH = Nt({ opSnippet: lH, dtype: "bool" }),
    uH = {
        kernelName: Zi,
        backendName: "webgl",
        kernelFunc: cH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dH = "return float(isinf(x));",
    hH = Nt({ opSnippet: dH, dtype: "bool" }),
    pH = {
        kernelName: Bi,
        backendName: "webgl",
        kernelFunc: hH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fH = "return float(isnan(x));",
    mH = Nt({ opSnippet: fH, dtype: "bool" }),
    gH = {
        kernelName: Hi,
        backendName: "webgl",
        kernelFunc: mH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bH = "return float(a < b);",
    xH = `
  return vec4(lessThan(a, b));
`,
    yH = Re({
        opSnippet: bH,
        packedOpSnippet: xH,
        cpuKernelImpl: tO,
        dtype: "bool",
    }),
    wH = {
        kernelName: mc,
        backendName: "webgl",
        kernelFunc: yH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IH = "return float(a <= b);",
    CH = `
  return vec4(lessThanEqual(a, b));
`,
    vH = Re({
        opSnippet: IH,
        packedOpSnippet: CH,
        cpuKernelImpl: eO,
        dtype: "bool",
    }),
    SH = {
        kernelName: gc,
        backendName: "webgl",
        kernelFunc: vH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kH(n) {
    const { backend: t, attrs: e } = n,
        { start: s, stop: o, num: r } = e,
        i = nO(s, o, r);
    return t.makeTensorInfo([i.length], "float32", i);
}
const TH = {
    kernelName: hb,
    backendName: "webgl",
    kernelFunc: kH,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NH =
        Vr +
        `
  return x < 0.0 ? 0./0. : log(x);
`,
    RH = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,
    $H = Nt({ opSnippet: NH, packedOpSnippet: RH, cpuKernelImpl: sO }),
    GH = {
        kernelName: _i,
        backendName: "webgl",
        kernelFunc: $H,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EH =
        Vr +
        `
  return log(1.0 + x);
`,
    LH = Nt({ opSnippet: EH }),
    MH = {
        kernelName: Ui,
        backendName: "webgl",
        kernelFunc: LH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WH = "return float(a >= 1.0 && b >= 1.0);",
    DH = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,
    FH = Re({
        opSnippet: WH,
        packedOpSnippet: DH,
        dtype: "bool",
    }),
    VH = {
        kernelName: bc,
        backendName: "webgl",
        kernelFunc: FH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zH = "return float(!(x >= 1.0));",
    PH = Nt({ opSnippet: zH }),
    AH = {
        kernelName: xc,
        backendName: "webgl",
        kernelFunc: PH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OH = "return float(a >= 1.0 || b >= 1.0);",
    XH = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,
    KH = Re({ opSnippet: OH, packedOpSnippet: XH, dtype: "bool" }),
    ZH = {
        kernelName: yc,
        backendName: "webgl",
        kernelFunc: KH,
    };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BH {
    constructor(t, e, s, o, r) {
        (this.variableNames = ["x"]), (this.outputShape = []);
        const i = e,
            a = t[3] - 1;
        this.outputShape = t;
        let l;
        const c = `float(${s}) + float(${o}) * sum`;
        r === 0.5
            ? (l = `inversesqrt(${c})`)
            : r === 1
            ? (l = `1.0/(${c})`)
            : (l = `exp(log(${c}) * float(-${r}));`),
            (this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class HH {
    constructor(t, e, s, o, r) {
        (this.variableNames = ["x"]),
            (this.outputShape = []),
            (this.packedInputs = !0),
            (this.packedOutput = !0);
        const i = e,
            a = t[3] - 1;
        this.outputShape = t;
        let l;
        const c = `float(${s}) + float(${o}) * sum`;
        r === 0.5
            ? (l = `inversesqrt(${c})`)
            : r === 1
            ? (l = `1.0/(${c})`)
            : (l = `exp(log(${c}) * float(-${r}));`),
            (this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _H = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { x: o } = t,
            { depthRadius: r, bias: i, alpha: a, beta: l } = s,
            c = F().getBool("WEBGL_PACK_NORMALIZATION")
                ? new HH(o.shape, r, i, a, l)
                : new BH(o.shape, r, i, a, l);
        return e.runWebGLProgram(c, [o], o.dtype);
    },
    UH = {
        kernelName: wc,
        backendName: "webgl",
        kernelFunc: _H,
    };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class YH {
    constructor(t, e, s, o, r) {
        (this.variableNames = ["inputImage", "outputImage", "dy"]),
            (this.outputShape = []),
            (this.outputShape = t),
            (this.depth = t[3]),
            (this.depthRadius = e),
            (this.bias = s),
            (this.alpha = o),
            (this.beta = r),
            (this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${o}) * norm + float(${s});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${o})
                * float(${r})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${r});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QH = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { x: o, y: r, dy: i } = t,
            { depthRadius: a, bias: l, alpha: c, beta: u } = s,
            d = new YH(o.shape, a, l, c, u);
        return e.runWebGLProgram(d, [o, r, i], o.dtype);
    },
    JH = {
        kernelName: Sh,
        backendName: "webgl",
        kernelFunc: QH,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jH(n, t, e, s) {
    const o = X(t),
        i = X(n.shape) / o,
        a = et({ inputs: { x: n }, attrs: { shape: [i, o] }, backend: s }),
        l = qo(a, n.dtype, "max", s),
        c = et({ inputs: { x: l }, attrs: { shape: e }, backend: s });
    return (
        s.disposeIntermediateTensorInfo(a),
        s.disposeIntermediateTensorInfo(l),
        c
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pC(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { reductionIndices: r, keepDims: i } = s,
        a = o.shape.length,
        l = Ct(r, o.shape);
    let c = l;
    const u = qt(c, a),
        d = u != null,
        h = e.shouldExecuteOnCPU([o]);
    let p = o;
    if (d) {
        if (h) {
            const w = e.texData.get(p.dataId).values,
                y = new Array(a);
            for (let k = 0; k < y.length; k++) y[k] = o.shape[u[k]];
            const I = om(w, o.shape, o.dtype, u, y);
            p = e.makeTensorInfo(y, o.dtype);
            const v = e.texData.get(p.dataId);
            v.values = I;
        } else p = vu(o, u, e);
        c = ie(c.length, a);
    }
    Ne("max", c, a);
    const [f, m] = ye(p.shape, c);
    let g = f;
    i && (g = re(f, l));
    let b;
    if (h) {
        const w = e.texData.get(p.dataId).values,
            y = oO(w, X(m), g, o.dtype);
        b = e.makeTensorInfo(g, o.dtype);
        const I = e.texData.get(b.dataId);
        I.values = y;
    } else b = jH(p, m, g, e);
    return d && e.disposeIntermediateTensorInfo(p), b;
}
const qH = {
    kernelName: Ic,
    backendName: "webgl",
    kernelFunc: pC,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t_ =
        rm +
        `
  return max(a, b);
`,
    e_ =
        `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` +
        jo +
        `
  return result;
`,
    n_ = Re({
        opSnippet: t_,
        packedOpSnippet: e_,
        cpuKernelImpl: rO,
    }),
    s_ = {
        kernelName: Yi,
        backendName: "webgl",
        kernelFunc: n_,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o_(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t;
    Er(o, "maxPool");
    const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s,
        c = 1;
    C(
        Le(i, c),
        () =>
            `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`
    );
    const u = $n(o.shape, r, i, c, a, l);
    if (
        u.filterWidth === 1 &&
        u.filterHeight === 1 &&
        $t(u.inShape, u.outShape)
    )
        return nn({ inputs: { x: o }, backend: e });
    const d = new wi(u, "max", !1);
    return e.runWebGLProgram(d, [o], o.dtype);
}
const r_ = {
    kernelName: Cc,
    backendName: "webgl",
    kernelFunc: o_,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i_(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        {
            filterSize: r,
            strides: i,
            pad: a,
            dataFormat: l,
            dimRoundingMode: c,
        } = s,
        u = [1, 1, 1],
        d = vs(o.shape, r, i, u, a, c, l),
        h = new am(d, "max", !1);
    return e.runWebGLProgram(h, [o], o.dtype);
}
const a_ = {
    kernelName: vc,
    backendName: "webgl",
    kernelFunc: i_,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class l_ {
    constructor(t) {
        (this.variableNames = ["dy", "maxPos"]), (this.outputShape = t.inShape);
        const e = t.strideHeight,
            s = t.strideWidth,
            o = t.dilationHeight,
            r = t.effectiveFilterHeight,
            i = t.effectiveFilterWidth,
            a = r - 1 - t.padInfo.top,
            l = i - 1 - t.padInfo.left,
            c = r * i - 1;
        this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${r};
          wR += ${o}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${c} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class c_ {
    constructor(t) {
        (this.variableNames = ["dy", "maxPos"]), (this.outputShape = t.inShape);
        const e = t.strideDepth,
            s = t.strideHeight,
            o = t.strideWidth,
            r = t.dilationDepth,
            i = t.dilationHeight,
            a = t.dilationWidth,
            l = t.effectiveFilterDepth,
            c = t.effectiveFilterHeight,
            u = t.effectiveFilterWidth,
            d = l - 1 - t.padInfo.front,
            h = c - 1 - t.padInfo.top,
            p = u - 1 - t.padInfo.left,
            f = l * c * u - 1;
        this.userCode = `
      const ivec3 pads = ivec3(${d}, ${h}, ${p});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${r}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${o}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${c} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function u_(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, input: r } = t,
        i = r,
        { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s,
        d = [1, 1, 1],
        h = vs(i.shape, a, l, d, c, u),
        p = new am(
            h,
            "max",
            !0
            /* get positions */
        ),
        f = e.runWebGLProgram(p, [i], i.dtype),
        m = new c_(h),
        g = e.runWebGLProgram(m, [o, f], i.dtype);
    return e.disposeIntermediateTensorInfo(f), g;
}
const d_ = {
    kernelName: Th,
    backendName: "webgl",
    kernelFunc: u_,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h_(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: o, input: r, output: i } = t,
        a = r;
    Er([r, i], "maxPoolGrad");
    const { filterSize: l, strides: c, pad: u, dimRoundingMode: d } = s,
        h = $n(a.shape, l, c, 1, u, d),
        p = !0,
        f = new wi(h, "max", p),
        m = e.runWebGLProgram(f, [a], a.dtype),
        g = new l_(h),
        b = e.runWebGLProgram(g, [o, m], a.dtype);
    return e.disposeIntermediateTensorInfo(m), b;
}
const p_ = {
    kernelName: kh,
    backendName: "webgl",
    kernelFunc: h_,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f_(n, t, e, s) {
    let o = new wi(e, "max", !1);
    const r = s.runWebGLProgram(o, [n], "float32");
    o = new wi(e, "max", !0, !0, t);
    const i = s.runWebGLProgram(o, [n], "float32");
    return [r, i];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const m_ = {
    kernelName: pb,
    backendName: "webgl",
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { x: s } = n,
            { filterSize: o, strides: r, pad: i, includeBatchInIndex: a } = t,
            l = e;
        C(
            s.shape.length === 4,
            () =>
                `Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`
        );
        const c = [1, 1];
        C(
            Le(r, c),
            () =>
                `Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '${c}'`
        );
        const u = $n(s.shape, o, r, c, i),
            [d, h] = f_(s, a, u, l);
        return [d, h];
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g_(n, t, e, s) {
    const o = X(t),
        i = X(n.shape) / o,
        a = et({ inputs: { x: n }, attrs: { shape: [i, o] }, backend: s }),
        l = qo(a, "float32", "mean", s),
        c = et({ inputs: { x: l }, attrs: { shape: e }, backend: s });
    return (
        s.disposeIntermediateTensorInfo(a),
        s.disposeIntermediateTensorInfo(l),
        c
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const b_ = {
    kernelName: Sc,
    backendName: "webgl",
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { x: s } = n,
            { keepDims: o, axis: r } = t,
            i = e,
            a = s.shape.length,
            l = Ct(r, s.shape);
        let c = l;
        const u = qt(c, a),
            d = u != null,
            h = i.shouldExecuteOnCPU([s]),
            p = [];
        let f = s;
        if (d) {
            if (h) {
                const y = i.texData.get(f.dataId).values,
                    I = new Array(a);
                for (let S = 0; S < I.length; S++) I[S] = s.shape[u[S]];
                const v = om(y, s.shape, s.dtype, u, I);
                f = i.makeTensorInfo(I, s.dtype);
                const k = i.texData.get(f.dataId);
                k.values = v;
            } else f = vu(s, u, i);
            p.push(f), (c = ie(c.length, a));
        }
        Ne("sum", c, a);
        const [m, g] = ye(f.shape, c);
        let b = m;
        o && (b = re(m, l));
        const x = g_(f, g, b, i);
        for (const w of p) i.disposeIntermediateTensorInfo(w);
        return x;
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x_(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s,
        a = o.shape.length,
        l = Ct(r, o.shape);
    let c = l;
    const u = qt(c, a);
    let d = o;
    u != null &&
        ((d = ze({ inputs: { x: o }, backend: e, attrs: { perm: u } })),
        (c = ie(c.length, o.shape.length))),
        Ne("min", c, a);
    const [h, p] = ye(d.shape, c),
        f = X(p),
        m = et({ inputs: { x: d }, backend: e, attrs: { shape: [-1, f] } }),
        g = qo(m, m.dtype, "min", e);
    let b;
    if (i) {
        const x = re(h, l);
        b = et({ inputs: { x: g }, backend: e, attrs: { shape: x } });
    } else b = et({ inputs: { x: g }, backend: e, attrs: { shape: h } });
    return (
        e.disposeIntermediateTensorInfo(m),
        e.disposeIntermediateTensorInfo(g),
        u != null && e.disposeIntermediateTensorInfo(d),
        b
    );
}
const y_ = {
    kernelName: kc,
    backendName: "webgl",
    kernelFunc: x_,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const w_ =
        rm +
        `
  return min(a, b);
`,
    I_ =
        `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` +
        jo +
        `
  return result;
`,
    C_ = Re({
        opSnippet: w_,
        packedOpSnippet: I_,
        cpuKernelImpl: iO,
    }),
    v_ = {
        kernelName: Qi,
        backendName: "webgl",
        kernelFunc: C_,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class S_ {
    constructor(t, e, s) {
        (this.variableNames = ["x"]),
            (this.outputShape = e.map(
                (u, d) => u[0] + t[d] + u[1]
                /* afterPad */
            ));
        const o = t.length,
            r = Vt(o),
            i = e.map((u) => u[0]).join(","),
            a = e.map((u, d) => u[0] + t[d]).join(","),
            l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(
                0,
                o
            ),
            c = s === "reflect" ? 0 : 1;
        if (o === 1) {
            this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${c};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${c};
          }
          setOutput(getX(outC - start));
        }
      `;
            return;
        }
        this.userCode = `
      ${r} start = ${r}(${i});
      ${r} end = ${r}(${a});

      void main() {
        ${r} outC = getOutputCoords();
        for (int i = 0; i < ${o}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${c};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};
          }
        }
        ${r} coords = outC - start;
        setOutput(getX(${l}));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class k_ {
    constructor(t, e, s) {
        (this.variableNames = ["x"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = e.map(
                (f, m) => f[0] + t[m] + f[1]
                /* afterPad */
            ));
        const o = t.length,
            r = Vt(o),
            i = e.map((f) => f[0]).join(","),
            a = e.map((f, m) => f[0] + t[m]).join(","),
            l = Fe("rc", o),
            c = Fe("source", o),
            u = `${l[o - 1]} < ${this.outputShape[o - 1]}`,
            d = o === 1 ? "source" : `vec2(${c.slice(-2).join()})`,
            h = s === "reflect" ? 0 : 1;
        let p = "";
        if (o === 1) {
            const f = `
        ${r} source = rc;
        if (source < start) {
          source = start * 2 - source - ${h};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${h};
        }
        source -= start;
      `;
            p = `
        ${r} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${d});
        ${l[o - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${d});
        }
      `;
        } else {
            const f = `
        ${r} source = rc;
        ${r} lt = ${r}(lessThan(source, start));
        ${r} gte = ${r}(greaterThanEqual(source, end));
        ${r} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${h}) +
                gte * ((end - 1) * 2 - source + ${h});
        source -= start;
      `;
            p = `
        ${r} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${d});
        ${l[o - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${d});
        }
        rc = outputLoc;
        ${l[o - 2]} += 1;
        if(${l[o - 2]} < ${this.outputShape[o - 2]}) {
          ${f}
          result[2] = getChannel(getX(${c.join()}), ${d});
          ${l[o - 1]} += 1;
          if(${u}) {
            ${f}
            result[3] = getChannel(getX(${c.join()}), ${d});
          }
        }
      `;
        }
        this.userCode = `
      const ${r} start = ${r}(${i});
      const ${r} end = ${r}(${a});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${p}
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const T_ = ({ inputs: n, backend: t, attrs: e }) => {
        const { x: s } = n,
            { paddings: o, mode: r } = e,
            i = F().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
                ? new k_(s.shape, o, r)
                : new S_(s.shape, o, r);
        return t.runWebGLProgram(i, [s], s.dtype);
    },
    N_ = {
        kernelName: Tc,
        backendName: "webgl",
        kernelFunc: T_,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const R_ = `if (b == 0.0) return NAN;
  return mod(a, b);`,
    $_ =
        `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` +
        jo +
        `
  return result;
`,
    G_ = Re({
        opSnippet: R_,
        packedOpSnippet: $_,
    }),
    E_ = {
        kernelName: Ji,
        backendName: "webgl",
        kernelFunc: G_,
    };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class L_ {
    constructor(t, e, s) {
        (this.variableNames = ["probs"]),
            (this.customUniforms = [{ name: "seed", type: "float" }]),
            (this.outputShape = [t, s]),
            (this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e - 1}));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const M_ = `
if (a == b) {
  return 1.0;
};
return a / b;`,
    W_ = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,
    fC = Re({ opSnippet: M_, packedOpSnippet: W_, checkOutOfBounds: !0 }),
    D_ = {
        kernelName: Di,
        backendName: "webgl",
        kernelFunc: fC,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Pg = "return a - b;",
    mC = Re({
        opSnippet: Pg,
        packedOpSnippet: Pg,
        supportsComplex: !0,
        cpuKernelImpl: NO,
    }),
    F_ = {
        kernelName: pa,
        backendName: "webgl",
        kernelFunc: mC,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gC(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { logits: o } = t,
        { dim: r } = s,
        i = Ct([r], o.shape),
        a = pC({
            inputs: { x: o },
            backend: e,
            attrs: { reductionIndices: i, keepDims: !1 },
        }),
        l = re(a.shape, i),
        c = et({ inputs: { x: a }, backend: e, attrs: { shape: l } }),
        u = mC({ inputs: { a: o, b: c }, backend: e }),
        d = uC({ inputs: { x: u }, backend: e }),
        h = Su({
            inputs: { x: d },
            backend: e,
            attrs: { axis: i, keepDims: !1 },
        }),
        p = et({ inputs: { x: h }, backend: e, attrs: { shape: l } }),
        f = fC({ inputs: { a: d, b: p }, backend: e });
    return (
        e.disposeIntermediateTensorInfo(a),
        e.disposeIntermediateTensorInfo(c),
        e.disposeIntermediateTensorInfo(u),
        e.disposeIntermediateTensorInfo(d),
        e.disposeIntermediateTensorInfo(h),
        e.disposeIntermediateTensorInfo(p),
        f
    );
}
const V_ = {
    kernelName: Zc,
    backendName: "webgl",
    kernelFunc: gC,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function z_(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { logits: o } = t,
        { numSamples: r, seed: i, normalized: a } = s,
        l = a
            ? o
            : gC({
                  inputs: { logits: o },
                  backend: e,
                  attrs: { dim: o.shape.length - 1 },
              }),
        c = l.shape[0],
        u = l.shape[1],
        d = new L_(c, u, r),
        h = [[i]],
        p = e.runWebGLProgram(d, [l], "int32", h);
    return a || e.disposeIntermediateTensorInfo(l), p;
}
const P_ = {
    kernelName: fb,
    backendName: "webgl",
    kernelFunc: z_,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const A_ =
        En +
        `
  return -x;
`,
    O_ = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function X_(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (e.shouldExecuteOnCPU([s])) {
        const r = e.texData.get(s.dataId),
            [i, a] = lO(r.values, s.shape, s.dtype);
        return e.makeTensorInfo(a, s.dtype, i);
    }
    let o;
    return (
        F().getBool("WEBGL_PACK_UNARY_OPERATIONS")
            ? (o = new Vs(s.shape, O_))
            : (o = new qn(s.shape, A_)),
        e.runWebGLProgram(o, [s], s.dtype)
    );
}
const K_ = {
    kernelName: Nc,
    backendName: "webgl",
    kernelFunc: X_,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Z_ = zp;
function B_(n) {
    ln(
        "tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"
    );
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: o, scores: r } = t,
        { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s,
        c = e.readSync(o.dataId),
        u = e.readSync(r.dataId),
        { selectedIndices: d } = Z_(c, u, i, a, l);
    return e.makeTensorInfo([d.length], "int32", new Int32Array(d));
}
const H_ = {
    kernelName: Nh,
    backendName: "webgl",
    kernelFunc: B_,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const __ = Pp;
function U_(n) {
    ln(
        "tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"
    );
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: o, scores: r } = t,
        {
            maxOutputSize: i,
            iouThreshold: a,
            scoreThreshold: l,
            padToMaxOutputSize: c,
        } = s,
        u = e.readSync(o.dataId),
        d = e.readSync(r.dataId),
        { selectedIndices: h, validOutputs: p } = __(u, d, i, a, l, c);
    return [
        e.makeTensorInfo([h.length], "int32", new Int32Array(h)),
        e.makeTensorInfo([], "int32", new Int32Array([p])),
    ];
}
const Y_ = {
    kernelName: Rh,
    backendName: "webgl",
    kernelFunc: U_,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Q_ = Ap;
function J_(n) {
    ln(
        "tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"
    );
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: o, scores: r } = t,
        {
            maxOutputSize: i,
            iouThreshold: a,
            scoreThreshold: l,
            softNmsSigma: c,
        } = s,
        u = e.readSync(o.dataId),
        d = e.readSync(r.dataId),
        h = i,
        p = a,
        f = l,
        m = c,
        { selectedIndices: g, selectedScores: b } = Q_(u, d, h, p, f, m);
    return [
        e.makeTensorInfo([g.length], "int32", new Int32Array(g)),
        e.makeTensorInfo([b.length], "float32", new Float32Array(b)),
    ];
}
const j_ = {
    kernelName: $h,
    backendName: "webgl",
    kernelFunc: J_,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class q_ {
    constructor(t, e, s, o) {
        (this.variableNames = ["indices"]),
            (this.outputShape = [t, e]),
            (this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${o}), float(${s}),
                      float(index == coords.y)));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t9 = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { indices: o } = t,
            { dtype: r, depth: i, onValue: a, offValue: l } = s,
            c = X(o.shape),
            u = new q_(c, i, a, l),
            d = et({ inputs: { x: o }, backend: e, attrs: { shape: [c] } }),
            h = e.runWebGLProgram(u, [d], r);
        e.disposeIntermediateTensorInfo(d);
        const p = [...o.shape, i],
            f = et({ inputs: { x: h }, backend: e, attrs: { shape: p } });
        return e.disposeIntermediateTensorInfo(h), f;
    },
    e9 = {
        kernelName: Gc,
        backendName: "webgl",
        kernelFunc: t9,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kl(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (s.dtype === "complex64") {
        const o = Oa({ inputs: { input: s }, backend: e }),
            r = Kl({ inputs: { x: o }, backend: e }),
            i = ku({ inputs: { input: s }, backend: e }),
            a = Kl({ inputs: { x: i }, backend: e }),
            l = oo({ inputs: { real: r, imag: a }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(o),
            e.disposeIntermediateTensorInfo(r),
            e.disposeIntermediateTensorInfo(i),
            e.disposeIntermediateTensorInfo(a),
            l
        );
    } else
        return Xa({
            attrs: {
                shape: s.shape,
                dtype: s.dtype,
                value: s.dtype === "string" ? "" : 0,
            },
            backend: e,
        });
}
const n9 = {
    kernelName: Uc,
    backendName: "webgl",
    kernelFunc: Kl,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bC(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (s.dtype === "string")
        throw new Error("onesLike is not supported under string dtype");
    if (s.dtype === "complex64") {
        const o = Oa({ inputs: { input: s }, backend: e }),
            r = bC({ inputs: { x: o }, backend: e }),
            i = ku({ inputs: { input: s }, backend: e }),
            a = Kl({ inputs: { x: i }, backend: e }),
            l = oo({ inputs: { real: r, imag: a }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(o),
            e.disposeIntermediateTensorInfo(r),
            e.disposeIntermediateTensorInfo(i),
            e.disposeIntermediateTensorInfo(a),
            l
        );
    } else
        return Xa({
            attrs: { shape: s.shape, dtype: s.dtype, value: 1 },
            backend: e,
        });
}
const s9 = {
    kernelName: $c,
    backendName: "webgl",
    kernelFunc: bC,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o9(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { axis: o } = s;
    if (t.length === 1)
        return Zd({ inputs: { input: t[0] }, backend: e, attrs: { dim: o } });
    const r = t[0].shape,
        i = t[0].dtype;
    t.forEach((u) => {
        Pe(r, u.shape, "All tensors passed to stack must have matching shapes"),
            C(
                i === u.dtype,
                () => "All tensors passed to stack must have matching dtypes"
            );
    });
    const a = [],
        l = t.map((u) => {
            const d = Zd({
                inputs: { input: u },
                backend: e,
                attrs: { dim: o },
            });
            return a.push(d), d;
        }),
        c = nC({ inputs: l, backend: e, attrs: { axis: o } });
    return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const r9 = {
    kernelName: Ec,
    backendName: "webgl",
    kernelFunc: o9,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class i9 {
    constructor(t, e, s) {
        (this.variableNames = ["x"]),
            (this.customUniforms = [{ name: "value", type: "float" }]),
            (this.outputShape = e.map(
                (c, u) => c[0] + t[u] + c[1]
                /* afterPad */
            ));
        const o = t.length,
            r = Vt(o),
            i = e.map((c) => c[0]).join(","),
            a = e.map((c, u) => c[0] + t[u]).join(","),
            l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(
                0,
                o
            );
        if (o === 1) {
            this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
            return;
        }
        this.userCode = `
      ${r} start = ${r}(${i});
      ${r} end = ${r}(${a});

      void main() {
        ${r} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${r} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class a9 {
    constructor(t, e, s) {
        (this.variableNames = ["x"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [{ name: "value", type: "float" }]),
            (this.outputShape = e.map(
                (m, g) => m[0] + t[g] + m[1]
                /* afterPad */
            ));
        const o = t.length,
            r = Vt(o),
            i = e.map((m) => m[0]).join(","),
            a = e.map((m, g) => m[0] + t[g]).join(","),
            l = Fe("rc", o),
            c = Fe("source", o),
            u = `${l[o - 1]} < ${this.outputShape[o - 1]}`,
            d = o === 1 ? "source" : `vec2(${c.slice(-2).join()})`,
            h = [
                `${r} rc = outputLoc;`,
                `${l[o - 1]} += 1;
       if(${u}) {
      `,
                o === 1
                    ? ""
                    : `}
       rc = outputLoc;
       ${l[o - 2]} += 1;
       if(${l[o - 2]} < ${this.outputShape[o - 2]}) {`,
                o === 1
                    ? ""
                    : `  ${l[o - 1]} += 1;
         if(${u}) {`,
            ],
            p =
                o === 1
                    ? "rc < start || rc >= end"
                    : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
        let f = "";
        for (let m = 0, g = o === 1 ? 2 : 4; m < g; m++)
            f += `
        ${h[m]}
        if (${p}) {
          result[${m}] = float(value);
        } else {
          ${r} source = rc - start;
          result[${m}] = getChannel(getX(${c.join()}), ${d});
        }
      `;
        (f += o === 1 ? "} " : "}}"),
            (this.userCode = `
      const ${r} start = ${r}(${i});
      const ${r} end = ${r}(${a});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xC = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { x: o } = t,
            { paddings: r, constantValue: i } = s;
        if (X(o.shape) === 0) {
            const c = r.map(
                (u, d) => u[0] + o.shape[d] + u[1]
                /* afterPad */
            );
            return Xa({
                backend: e,
                attrs: { shape: c, value: i, dtype: o.dtype },
            });
        }
        const a = F().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
                ? new a9(o.shape, r, i)
                : new i9(o.shape, r, i),
            l = [[i]];
        return e.runWebGLProgram(a, [o], o.dtype, l);
    },
    l9 = {
        kernelName: Lc,
        backendName: "webgl",
        kernelFunc: xC,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const c9 = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,
    u9 =
        `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` +
        jo +
        `
  return result;
`,
    d9 = Re({ opSnippet: c9, packedOpSnippet: u9 }),
    h9 = {
        kernelName: qi,
        backendName: "webgl",
        kernelFunc: d9,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p9(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { axis: r, keepDims: i } = s,
        a = o.shape.length,
        l = [],
        c = Ct(r, o.shape);
    let u = c;
    const d = qt(u, a);
    let h = o;
    d != null &&
        ((h = ze({ inputs: { x: o }, backend: e, attrs: { perm: d } })),
        (u = ie(u.length, a)),
        l.push(h)),
        Ne("prod", u, a);
    let p;
    if (e.shouldExecuteOnCPU([h])) {
        const f = e.texData.get(h.dataId).values,
            {
                outVals: m,
                outShape: g,
                outDtype: b,
            } = uO(h.shape, h.dtype, f, u);
        p = e.makeTensorInfo(g, b, m);
    } else {
        const [f, m] = ye(h.shape, u),
            g = X(m),
            b = et({ inputs: { x: h }, backend: e, attrs: { shape: [-1, g] } }),
            x = Yh(o.dtype),
            w = qo(b, x, "prod", e);
        (p = et({ inputs: { x: w }, backend: e, attrs: { shape: f } })),
            l.push(b),
            l.push(w);
    }
    if (i) {
        l.push(p);
        const f = re(p.shape, c);
        p = et({ inputs: { x: p }, backend: e, attrs: { shape: f } });
    }
    return l.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const f9 = {
    kernelName: Wc,
    backendName: "webgl",
    kernelFunc: p9,
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function m9(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { paramsNestedSplits: o, paramsDenseValues: r, indices: i } = t,
        { outputRaggedRank: a } = s,
        l = o.map((b) => e.readSync(b.dataId)),
        c = o.map((b) => b.shape),
        u = e.readSync(r.dataId),
        d = e.readSync(i.dataId),
        [h, p, f] = dO(l, c, u, r.shape, r.dtype, d, i.shape, a),
        m = h.map((b) => e.makeTensorInfo([b.length], "int32", b)),
        g = e.makeTensorInfo(f, r.dtype, p);
    return m.concat([g]);
}
const g9 = {
    kernelName: mb,
    backendName: "webgl",
    kernelFunc: m9,
};
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b9(n) {
    const { inputs: t, backend: e } = n,
        { starts: s, limits: o, deltas: r } = t,
        i = e.readSync(s.dataId),
        a = e.readSync(o.dataId),
        l = e.readSync(r.dataId),
        [c, u] = hO(i, s.shape, s.dtype, a, o.shape, l, r.shape),
        d = e.makeTensorInfo([c.length], "int32", c),
        h = e.makeTensorInfo([u.length], s.dtype, u);
    return [d, h];
}
const x9 = {
    kernelName: gb,
    backendName: "webgl",
    kernelFunc: b9,
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function y9(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { shape: o, values: r, defaultValue: i, rowPartitionTensors: a } = t,
        { rowPartitionTypes: l } = s,
        c = e.readSync(o.dataId),
        u = e.readSync(r.dataId),
        d = e.readSync(i.dataId),
        h = a.map((g) => e.readSync(g.dataId)),
        p = a.map((g) => g.shape),
        [f, m] = pO(c, o.shape, u, r.shape, r.dtype, d, i.shape, h, p, l);
    return e.makeTensorInfo(f, r.dtype, m);
}
const w9 = {
    kernelName: bb,
    backendName: "webgl",
    kernelFunc: y9,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yC = (n) => {
        const { backend: t, attrs: e } = n,
            { start: s, stop: o, step: r, dtype: i } = e,
            a = fO(s, o, r, i);
        return t.makeTensorInfo([a.length], i, a);
    },
    I9 = {
        kernelName: Gh,
        backendName: "webgl",
        kernelFunc: yC,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const C9 = "return 1.0 / x;",
    v9 = Nt({ opSnippet: C9 }),
    S9 = {
        kernelName: ta,
        backendName: "webgl",
        kernelFunc: v9,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const k9 =
        En +
        `
  return (x < 0.0) ? 0.0 : x;
`,
    T9 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    N9 = Nt({ opSnippet: k9, packedOpSnippet: T9 }),
    R9 = {
        kernelName: ea,
        backendName: "webgl",
        kernelFunc: N9,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $9 =
        En +
        `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,
    G9 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    E9 = Nt({ opSnippet: $9, packedOpSnippet: G9 }),
    L9 = {
        kernelName: na,
        backendName: "webgl",
        kernelFunc: E9,
    };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class M9 {
    constructor(t, e, s, o, r) {
        (this.variableNames = ["A"]), (this.outputShape = []);
        const [i, a, l, c] = t;
        this.outputShape = [i, e, s, c];
        const u = [o && e > 1 ? a - 1 : a, o && s > 1 ? l - 1 : l],
            d = [o && e > 1 ? e - 1 : e, o && s > 1 ? s - 1 : s];
        let h;
        r
            ? (h =
                  "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)")
            : (h = "vec2(yRC) * effectiveInputOverOutputRatioRC"),
            (this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / d[0]},
          ${u[1] / d[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${h};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class W9 {
    constructor(t, e, s, o, r) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = []);
        const [i, a, l, c] = t;
        this.outputShape = [i, e, s, c];
        const u = [o && e > 1 ? a - 1 : a, o && s > 1 ? l - 1 : l],
            d = [o && e > 1 ? e - 1 : e, o && s > 1 ? s - 1 : s];
        let h;
        r
            ? (h =
                  "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)")
            : (h = "vec3(yRC) * effectiveInputOverOutputRatioRC"),
            (this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / d[0]},
          ${u[1] / d[1]},
          ${u[1] / d[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${h};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D9(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: o } = t,
        { alignCorners: r, halfPixelCenters: i, size: a } = s,
        [l, c] = a,
        u = F().getBool("WEBGL_PACK_IMAGE_OPERATIONS")
            ? new W9(o.shape, l, c, r, i)
            : new M9(o.shape, l, c, r, i);
    return e.runWebGLProgram(u, [o], "float32");
}
const F9 = {
    kernelName: Vc,
    backendName: "webgl",
    kernelFunc: D9,
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class V9 {
    constructor(t, e, s) {
        (this.variableNames = ["dy"]),
            (this.outputShape = []),
            (this.outputShape = e);
        const [, o, r] = e,
            [, i, a] = t,
            l = [s && i > 1 ? o - 1 : o, s && a > 1 ? r - 1 : r],
            c = [s && i > 1 ? i - 1 : i, s && a > 1 ? a - 1 : a],
            u = l[0] / c[0],
            d = l[1] / c[1],
            h = 1 / u,
            p = 1 / d,
            f = Math.ceil(h) * 2 + 2,
            m = Math.ceil(p) * 2 + 2;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${d});

        const float invHeightScale = float(${h});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${o - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${r - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function z9(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: o, dy: r } = t,
        { alignCorners: i } = s,
        a = new V9(r.shape, o.shape, i);
    return e.runWebGLProgram(a, [r], r.dtype);
}
const P9 = {
    kernelName: Mh,
    backendName: "webgl",
    kernelFunc: z9,
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class A9 {
    constructor(t, e, s, o, r) {
        (this.variableNames = ["A"]), (this.outputShape = []);
        const [i, a, l, c] = t;
        this.outputShape = [i, e, s, c];
        const u = [o && e > 1 ? a - 1 : a, o && s > 1 ? l - 1 : l],
            d = [o && e > 1 ? e - 1 : e, o && s > 1 ? s - 1 : s],
            h = o ? "0.5" : "0.0";
        let p;
        r
            ? (p =
                  "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))")
            : (p = "vec2(yRC) * effectiveInputOverOutputRatioRC"),
            (this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / d[0]},
          ${u[1] / d[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class O9 {
    constructor(t, e, s, o, r) {
        (this.variableNames = ["A"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = []);
        const [i, a, l, c] = t;
        this.outputShape = [i, e, s, c];
        const u = [o && e > 1 ? a - 1 : a, o && s > 1 ? l - 1 : l],
            d = [o && e > 1 ? e - 1 : e, o && s > 1 ? s - 1 : s],
            h = o ? "0.5" : "0.0";
        let p;
        r
            ? (p =
                  "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))")
            : (p = "vec3(yRC) * effectiveInputOverOutputRatioRC"),
            (this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / d[0]},
          ${u[1] / d[1]},
          ${u[1] / d[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function X9(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: o } = t,
        { alignCorners: r, halfPixelCenters: i, size: a } = s,
        [l, c] = a,
        u = F().getBool("WEBGL_PACK_IMAGE_OPERATIONS")
            ? new O9(o.shape, l, c, r, i)
            : new A9(o.shape, l, c, r, i);
    return e.runWebGLProgram(u, [o], o.dtype);
}
const K9 = {
    kernelName: Fc,
    backendName: "webgl",
    kernelFunc: X9,
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Z9 {
    constructor(t, e, s) {
        (this.variableNames = ["dy"]),
            (this.outputShape = []),
            (this.outputShape = e);
        const [, o, r] = e,
            [, i, a] = t,
            l = [s && i > 1 ? o - 1 : o, s && a > 1 ? r - 1 : r],
            c = [s && i > 1 ? i - 1 : i, s && a > 1 ? a - 1 : a],
            u = l[0] / c[0],
            d = l[1] / c[1],
            h = 1 / u,
            p = 1 / d,
            f = Math.ceil(h) * 2 + 2,
            m = Math.ceil(p) * 2 + 2;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${d});

        const float invHeightScale = float(${h});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${c[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${c[1]}));

            int sourceNearestRow = int(min(
                float(int(${o}) - 1),
                ${s} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${r}) - 1),
                ${s} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B9(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: o, dy: r } = t,
        { alignCorners: i } = s,
        a = new Z9(r.shape, o.shape, i);
    return e.runWebGLProgram(a, [r], r.dtype);
}
const H9 = {
    kernelName: Lh,
    backendName: "webgl",
    kernelFunc: B9,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class _9 {
    constructor(t, e) {
        this.variableNames = ["x"];
        const s = t.length;
        if (s > 4)
            throw new Error(
                `WebGL backend: Reverse of rank-${s} tensor is not yet supported`
            );
        if (((this.outputShape = t), s === 1)) {
            this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;
            return;
        }
        const o = (a) =>
                e.indexOf(a) !== -1 && t[a] !== 1
                    ? `${t[a]} - coords[${a}] - 1`
                    : `coords[${a}]`,
            r = t.map((a, l) => o(l)).join(","),
            i = Vt(s);
        this.userCode = `
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${r}));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class U9 {
    constructor(t, e) {
        (this.variableNames = ["x"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0);
        const s = t.length;
        if (s > 4)
            throw new Error(
                `WebGL backend: Reverse of rank-${s} tensor is not yet supported`
            );
        this.outputShape = t;
        const o = Fe("rc", s),
            r = `${o[s - 1]} + 1 < ${this.outputShape[s - 1]}`,
            i = `${o[s - 2]} + 1 < ${this.outputShape[s - 2]}`,
            a = Vt(s);
        s === 1
            ? (this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${r}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `)
            : (this.userCode = `
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(o.slice())};
          if(${r}){
            result.g = ${c(o.slice())};
          }
          if(${i}) {
            result.b = ${u(o.slice())};
            if(${r}) {
              result.a = ${d(o.slice())};
            }
          }
          setOutput(result);
        }
    `);
        function l(f) {
            return h(f);
        }
        function c(f) {
            return (f[s - 1] = "(" + f[s - 1] + " + 1)"), h(f);
        }
        function u(f) {
            return (f[s - 2] = "(" + f[s - 2] + " + 1)"), h(f);
        }
        function d(f) {
            return (
                (f[s - 1] = "(" + f[s - 1] + " + 1)"),
                (f[s - 2] = "(" + f[s - 2] + " + 1)"),
                h(f)
            );
        }
        function h(f) {
            const m = t.map((x, w) => p(w, f)),
                g = m.join(","),
                b = m.slice(-2).join(",");
            return `getChannel(getX(${g}), vec2(${b}))`;
        }
        function p(f, m) {
            return e.indexOf(f) !== -1 && t[f] !== 1
                ? `${t[f]} - ${m[f]} - 1`
                : `${m[f]}`;
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Y9(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { dims: r } = s,
        i = o.shape.length,
        a = Ct(r, o.shape);
    if (i === 0) return nn({ inputs: { x: o }, backend: e });
    const l = F().getBool("WEBGL_PACK_ARRAY_OPERATIONS")
        ? new U9(o.shape, a)
        : new _9(o.shape, a);
    return e.runWebGLProgram(l, [o], o.dtype);
}
const Q9 = {
    kernelName: zc,
    backendName: "webgl",
    kernelFunc: Y9,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class J9 {
    constructor(t, e) {
        (this.variableNames = ["Image"]),
            (this.outputShape = []),
            (this.customUniforms = [{ name: "params", type: "vec4" }]);
        const s = t[1],
            o = t[2];
        this.outputShape = t;
        let r = "";
        typeof e == "number"
            ? (r = `float outputValue = ${e.toFixed(2)};`)
            : (r = `
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`),
            (this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${r}
          if(coordX >= 0 && coordX < ${o} && coordY >= 0 && coordY < ${s}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j9 = {
    kernelName: Hh,
    backendName: "webgl",
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { image: s } = n,
            { radians: o, fillValue: r, center: i } = t,
            a = e,
            l = new J9(s.shape, r),
            [c, u] = Jp(i, s.shape[1], s.shape[2]),
            d = [[c, u, Math.sin(o), Math.cos(o)]];
        return a.runWebGLProgram(l, [s], s.dtype, d);
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const q9 = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,
    tU = Nt({ opSnippet: q9 }),
    eU = {
        kernelName: sa,
        backendName: "webgl",
        kernelFunc: tU,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nU = "return inversesqrt(x);",
    sU = Nt({ opSnippet: nU, cpuKernelImpl: mO }),
    oU = {
        kernelName: oa,
        backendName: "webgl",
        kernelFunc: sU,
    };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class lm {
    constructor(t, e, s, o, r, i, a = !0, l = !1) {
        (this.variableNames = ["updates", "indices", "defaultValue"]),
            (this.outputShape = i);
        const c = Vt(r.length),
            u = Vt(i.length);
        let d = "";
        s === 1 ? (d = "i") : s === 2 && (d = "i, j");
        const h = `getIndices(${d})`;
        let p = "";
        o === 1 ? (p = "i") : o === 2 && (p = "i, coords[1]");
        const f = `getUpdates(${p})`;
        let m = "";
        l && (m = "coords[0], coords[1]");
        const g = `getDefaultValue(${m})`,
            b = e > 1 ? "strides[j]" : "strides";
        this.userCode = `
        ${c} strides = ${c}(${r});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${h});
              flattenedIndex += index * ${b};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(${g}, sum, float(found)));
        }
      `;
    }
}
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class rU {
    constructor(t, e, s, o, r, i, a = !0, l = !1) {
        (this.variableNames = ["updates", "indices", "defaultValue"]),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = i);
        const c = Vt(r.length),
            u = Vt(i.length);
        let d = "";
        s === 1 ? (d = "i") : s === 2 && (d = "i, j");
        const h = `getIndices(${d})`;
        let p = "";
        o === 1 ? (p = "i") : o === 2 && (p = "i, coords[1]");
        const f = `getUpdates(${p})`;
        let m = "";
        l && (m = "coords[0], coords[1]");
        const g = `getDefaultValue(${m})`,
            b = e > 1 ? "strides[j]" : "strides",
            x = e > 1 ? "strides[j + 1]" : "strides";
        this.userCode = `
        ${c} strides = ${c}(${r});

        void main() {
          ${u} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${t}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${e}; j+=2) {
              ivec4 index = round(${h});
              flattenedIndex += index.xz * ${b};
              if (j + 1 < ${e}) {
                flattenedIndex += index.yw * ${x};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${f};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${g}, sum, found));
        }
      `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iU(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { indices: o, updates: r } = t,
        { shape: i } = s,
        {
            sliceRank: a,
            numUpdates: l,
            sliceSize: c,
            strides: u,
            outputSize: d,
        } = to(r, o, i),
        h = [d / c, c];
    if (d === 0) return e.makeTensorInfo(i, o.dtype);
    const p = et({ inputs: { x: o }, backend: e, attrs: { shape: [l, a] } }),
        f = et({ inputs: { x: r }, backend: e, attrs: { shape: [l, c] } }),
        m = e.makeTensorInfo([], "float32", new Float32Array([0]));
    let g;
    F().getBool("WEBGL_PACK")
        ? (g = new rU(l, a, p.shape.length, f.shape.length, u, h))
        : (g = new lm(l, a, p.shape.length, f.shape.length, u, h));
    const b = e.runWebGLProgram(g, [f, p, m], f.dtype),
        x = et({ inputs: { x: b }, backend: e, attrs: { shape: i } });
    return (
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(f),
        e.disposeIntermediateTensorInfo(b),
        e.disposeIntermediateTensorInfo(m),
        x
    );
}
const aU = {
    kernelName: xb,
    backendName: "webgl",
    kernelFunc: iU,
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class lU {
    constructor(t, e, s, o) {
        (this.variableNames = ["sortedSequence", "values"]),
            (this.customUniforms = [{ name: "numInputs", type: "int" }]),
            (this.outputShape = [t, s]);
        const r = "while (left < right) {",
            i = `for (int i = 0; i < ${Math.ceil(
                Math.log2(e + 1)
            )}; ++i) { if (left >= right) break;`,
            a = F().getNumber("WEBGL_VERSION") === 2 ? r : i,
            l = o === "left" ? "<" : "<=";
        this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
    }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cU(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { sortedSequence: o, values: r } = t,
        { side: i } = s,
        a = new lU(o.shape[0], o.shape[1], r.shape[1], i),
        l = [[o.shape[1]]];
    return e.runWebGLProgram(a, [o, r], "int32", l);
}
const uU = {
    kernelName: wb,
    backendName: "webgl",
    kernelFunc: cU,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class dU {
    constructor(t, e, s) {
        (this.variableNames = ["c", "a", "b"]), (this.outputShape = e);
        let o, r;
        if (s > 4) throw Error(`Where for rank ${s} is not yet supported`);
        if (s === 1) (r = "resRC"), (o = "resRC");
        else {
            const a = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"],
                l = [],
                c = [];
            for (let u = 0; u < e.length; u++)
                c.push(`${a[u]}`), u < t && l.push(`${a[u]}`);
            (o = l.join()), (r = c.join());
        }
        const i = Vt(s);
        this.userCode = `
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${o});
        if (cVal >= 1.0) {
          setOutput(getA(${r}));
        } else {
          setOutput(getB(${r}));
        }
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hU(n) {
    const { inputs: t, backend: e } = n,
        { condition: s, t: o, e: r } = t,
        i = new dU(s.shape.length, o.shape, o.shape.length);
    return e.runWebGLProgram(i, [s, o, r], tn(o.dtype, r.dtype));
}
const pU = {
    kernelName: Pc,
    backendName: "webgl",
    kernelFunc: hU,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fU = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${ru};
  float scale = ${iu};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,
    mU = Nt({ opSnippet: fU }),
    gU = {
        kernelName: ra,
        backendName: "webgl",
        kernelFunc: mU,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bU =
        Vr +
        `
  return 1.0 / (1.0 + exp(-1.0 * x));
`,
    xU = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    yU = Nt({
        opSnippet: bU,
        packedOpSnippet: xU,
        cpuKernelImpl: bO,
    }),
    wU = {
        kernelName: ca,
        backendName: "webgl",
        kernelFunc: yU,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IU = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,
    CU = Nt({ opSnippet: IU }),
    vU = {
        kernelName: la,
        backendName: "webgl",
        kernelFunc: CU,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SU =
        Vr +
        `
  return sin(x);
`,
    kU = `
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${jo}
  return result;
`,
    TU = Nt({ opSnippet: SU, packedOpSnippet: kU }),
    NU = {
        kernelName: ia,
        backendName: "webgl",
        kernelFunc: TU,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RU = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,
    $U = Nt({ opSnippet: RU }),
    GU = {
        kernelName: aa,
        backendName: "webgl",
        kernelFunc: $U,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EU = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,
    LU = Nt({ opSnippet: EU }),
    MU = {
        kernelName: ua,
        backendName: "webgl",
        kernelFunc: LU,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WU = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { x: o } = t,
            { blockShape: r, paddings: i } = s;
        C(
            o.shape.length <= 4,
            () =>
                "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"
        );
        const a = r.reduce((b, x) => b * x),
            l = [[0, 0]];
        l.push(...i);
        for (let b = 1 + r.length; b < o.shape.length; ++b) l.push([0, 0]);
        const c = [],
            u = xC({
                inputs: { x: o },
                backend: e,
                attrs: { paddings: l, constantValue: 0 },
            }),
            d = Na(u.shape, r, a, !1),
            h = Ra(d.length, r.length, !1),
            p = $a(u.shape, r, a, !1),
            f = et({ inputs: { x: u }, backend: e, attrs: { shape: d } }),
            m = ze({
                inputs: { x: f },
                backend: e,
                attrs: { perm: h },
            }),
            g = et({ inputs: { x: m }, backend: e, attrs: { shape: p } });
        return (
            c.push(u),
            c.push(f),
            c.push(m),
            c.forEach((b) => e.disposeIntermediateTensorInfo(b)),
            g
        );
    },
    DU = {
        kernelName: Xc,
        backendName: "webgl",
        kernelFunc: WU,
    };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FU(n) {
    const { inputs: t, backend: e } = n,
        { indices: s, values: o, denseShape: r, defaultValue: i } = t;
    if (r.shape.length !== 1)
        throw new Error(`Dense shape must be a vector, saw:
         ${r.shape}`);
    if (s.shape.length !== 2)
        throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);
    if (o.shape.length !== 1)
        throw new Error(`Values must be a vector, saw:
         ${o.shape}`);
    if (i.shape.length !== 0)
        throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
    const a = e.readSync(s.dataId),
        l = e.readSync(o.dataId),
        c = e.readSync(r.dataId),
        u = e.readSync(i.dataId)[0],
        [d, h, p, f, m] = yO(a, s.shape, s.dtype, l, o.dtype, c, u);
    return [
        e.makeTensorInfo(h, s.dtype, d),
        e.makeTensorInfo([h[0]], o.dtype, p),
        e.makeTensorInfo(
            [f.length],
            "bool",
            new Uint8Array(f.map((g) => Number(g)))
        ),
        e.makeTensorInfo([m.length], s.dtype, new Int32Array(m)),
    ];
}
const VU = {
    kernelName: Wh,
    backendName: "webgl",
    kernelFunc: FU,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zU(n) {
    const { inputs: t, backend: e } = n,
        { inputIndices: s, inputShape: o, newShape: r } = t;
    if (s.shape.length !== 2)
        throw new Error(
            `Input indices should be a matrix but received shape ${s.shape}`
        );
    if (o.shape.length !== 1)
        throw new Error(
            `Input shape should be a vector but received shape ${o.shape}`
        );
    if (r.shape.length !== 1)
        throw new Error(
            `Target shape should be a vector but received shape ${r.shape}`
        );
    const i = Array.from(e.readSync(o.dataId)),
        a = e.readSync(s.dataId),
        l = Array.from(e.readSync(r.dataId)),
        [c, u, d] = wO(a, s.shape, s.dtype, i, l);
    return [
        e.makeTensorInfo(u, s.dtype, c),
        e.makeTensorInfo([d.length], r.dtype, new Int32Array(d)),
    ];
}
const PU = {
    kernelName: Dh,
    backendName: "webgl",
    kernelFunc: zU,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AU(n) {
    const { inputs: t, backend: e } = n,
        { data: s, indices: o, segmentIds: r } = t;
    if (s.shape.length < 1)
        throw new Error(
            "Data should be at least 1 dimensional but received scalar"
        );
    if (o.shape.length !== 1)
        throw new Error(`Indices should be a vector but received shape
              ${o.shape}`);
    if (r.shape.length !== 1)
        throw new Error(`Segment ids should be a vector but received shape
              ${r.shape}`);
    const i = e.readSync(s.dataId),
        a = e.readSync(o.dataId),
        l = e.readSync(r.dataId),
        [c, u] = KI(i, s.shape, s.dtype, a, l, !0);
    return e.makeTensorInfo(u, s.dtype, c);
}
const OU = {
    kernelName: Fh,
    backendName: "webgl",
    kernelFunc: AU,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XU(n) {
    const { inputs: t, backend: e } = n,
        { data: s, indices: o, segmentIds: r } = t;
    if (s.shape.length < 1)
        throw new Error(
            "Data should be at least 1 dimensional but received scalar"
        );
    if (o.shape.length !== 1)
        throw new Error(`Indices should be a vector but received shape
             ${o.shape}`);
    if (r.shape.length !== 1)
        throw new Error(`Segment ids should be a vector but received shape
             ${r.shape}`);
    const i = e.readSync(s.dataId),
        a = e.readSync(o.dataId),
        l = e.readSync(r.dataId),
        [c, u] = KI(i, s.shape, s.dtype, a, l);
    return e.makeTensorInfo(u, s.dtype, c);
}
const KU = {
    kernelName: Vh,
    backendName: "webgl",
    kernelFunc: XU,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZU(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { sparseIndices: o, sparseValues: r, defaultValue: i } = t,
        { outputShape: a } = s,
        {
            sliceRank: l,
            numUpdates: c,
            sliceSize: u,
            strides: d,
            outputSize: h,
        } = to(r, o, a),
        p = !1;
    if (r.dtype === "string") {
        const b = e.bufferSync(o),
            x = e.bufferSync(r),
            w = gs(e.readSync(i.dataId)[0]),
            y = gO(b, x, a, h, u, c, l, d, w, p);
        return e.makeTensorInfo(a, y.dtype, y.values);
    }
    const f = new lm(c, l, o.shape.length, r.shape.length, d, [h, 1], p),
        m = e.runWebGLProgram(f, [r, o, i], r.dtype),
        g = et({ inputs: { x: m }, backend: e, attrs: { shape: a } });
    return e.disposeIntermediateTensorInfo(m), g;
}
const BU = {
    kernelName: Ib,
    backendName: "webgl",
    kernelFunc: ZU,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HU(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { numOrSizeSplits: r, axis: i } = s,
        a = Ct(i, o.shape)[0],
        l = pf(o, r, a),
        c = o.shape.length,
        u = new Array(c).fill(0),
        d = o.shape.slice();
    return l.map((h) => {
        const p = [...d];
        p[a] = h;
        const f = zr({
            inputs: { x: o },
            backend: e,
            attrs: { begin: u, size: p },
        });
        return (u[a] += h), f;
    });
}
const _U = {
    kernelName: Kc,
    backendName: "webgl",
    kernelFunc: HU,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ag = "return sqrt(x);",
    UU = Nt({ opSnippet: Ag, packedOpSnippet: Ag, cpuKernelImpl: IO }),
    YU = {
        kernelName: da,
        backendName: "webgl",
        kernelFunc: UU,
    };
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QU = "return x * x;",
    JU = Nt({ opSnippet: QU }),
    jU = {
        kernelName: zh,
        backendName: "webgl",
        kernelFunc: JU,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Og = "return (a - b) * (a - b);",
    qU = Re({ opSnippet: Og, packedOpSnippet: Og }),
    t5 = {
        kernelName: ha,
        backendName: "webgl",
        kernelFunc: qU,
    };
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t;
    if (o.dtype !== "string")
        throw new Error("Input must be of datatype string");
    const r = e.readSync(o.dataId),
        i = ys(r),
        a = CO(i, "string", s);
    return e.makeTensorInfo(o.shape, "string", a);
}
const n5 = {
    kernelName: Bc,
    backendName: "webgl",
    kernelFunc: e5,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s5({ inputs: n, attrs: t, backend: e }) {
    const { x: s } = n,
        o =
            En +
            `
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,
        r = new qn(s.shape, o);
    return e.runWebGLProgram(r, [s], s.dtype);
}
const o5 = {
    kernelName: ba,
    backendName: "webgl",
    kernelFunc: s5,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class r5 {
    constructor(t, e, s) {
        (this.variableNames = ["x"]), (this.outputShape = s);
        const o = s.length,
            r = Vt(s.length),
            i = Vt(s.length);
        let a = "";
        if (o === 1) a = "coords * strides + begin";
        else {
            let l = 0;
            a = s
                .map(
                    (c, u) => (
                        l++,
                        s.length === 1
                            ? `coords * strides[${u}] + begin[${u}]`
                            : `coords[${l - 1}] * strides[${u}] + begin[${u}]`
                    )
                )
                .join(",");
        }
        this.userCode = `
      ${r} begin = ${r}(${t});
      ${r} strides = ${r}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        {
            begin: r,
            end: i,
            strides: a,
            beginMask: l,
            endMask: c,
            ellipsisMask: u,
            newAxisMask: d,
            shrinkAxisMask: h,
        } = s,
        {
            finalShapeSparse: p,
            finalShape: f,
            isIdentity: m,
            sliceDim0: g,
            isSimpleSlice: b,
            begin: x,
            end: w,
            strides: y,
        } = Up(o.shape, r, i, a, l, c, u, d, h);
    let I;
    if (m) I = et({ inputs: { x: o }, backend: e, attrs: { shape: f } });
    else if (g || b) {
        C(
            o.shape.length >= 1,
            () => `Input must have rank at least 1, got: ${o.shape.length}`
        );
        const k = Bp(x, w, y),
            S = zr({
                inputs: { x: o },
                backend: e,
                attrs: { begin: x, size: k },
            });
        (I = et({ inputs: { x: S }, backend: e, attrs: { shape: f } })),
            e.disposeIntermediateTensorInfo(S);
    } else if (e.shouldExecuteOnCPU([o])) {
        const S = e.readSync(o.dataId),
            N = vt(o.shape, o.dtype, S),
            R = vO(p, N, y, x);
        I = e.makeTensorInfo(f, o.dtype, R.values);
    } else {
        const S = new r5(x, y, p);
        I = e.runWebGLProgram(S, [o], o.dtype);
    }
    const v = et({ inputs: { x: I }, backend: e, attrs: { shape: f } });
    return e.disposeIntermediateTensorInfo(I), v;
}
const a5 = {
    kernelName: Ph,
    backendName: "webgl",
    kernelFunc: i5,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function l5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        {
            separator: o,
            nGramWidths: r,
            leftPad: i,
            rightPad: a,
            padWidth: l,
            preserveShortSequences: c,
        } = s,
        { data: u, dataSplits: d } = t,
        h = e.readSync(u.dataId),
        p = e.readSync(d.dataId),
        [f, m] = SO(h, p, o, r, i, a, l, c);
    return [
        e.makeTensorInfo([f.length], "string", f),
        e.makeTensorInfo(d.shape, "int32", m),
    ];
}
const c5 = {
    kernelName: Ah,
    backendName: "webgl",
    kernelFunc: l5,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function u5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { skipEmpty: o } = s,
        { input: r, delimiter: i } = t;
    if (r.dtype !== "string")
        throw new Error("Input must be of datatype string");
    if (r.shape.length !== 1)
        throw new Error(`Input must be a vector, got shape: ${r.shape}`);
    if (i.shape.length !== 0)
        throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
    const a = e.readSync(r.dataId),
        l = e.readSync(i.dataId)[0],
        [c, u, d] = kO(a, l, o),
        h = u.length;
    return [
        e.makeTensorInfo([h, 2], "int32", c),
        e.makeTensorInfo([h], "string", u),
        e.makeTensorInfo([2], "int32", new Int32Array(d)),
    ];
}
const d5 = {
    kernelName: Oh,
    backendName: "webgl",
    kernelFunc: u5,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { numBuckets: o } = s,
        { input: r } = t;
    if (r.dtype !== "string")
        throw new Error("Input must be of datatype string");
    if (o <= 0) throw new Error("Number of buckets must be at least 1");
    const i = e.readSync(r.dataId),
        a = TO(i, o);
    return e.makeTensorInfo(r.shape, "int32", a);
}
const p5 = {
    kernelName: Xh,
    backendName: "webgl",
    kernelFunc: h5,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const f5 = "return tan(x);",
    m5 = Nt({ opSnippet: f5 }),
    g5 = {
        kernelName: fa,
        backendName: "webgl",
        kernelFunc: m5,
    };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const b5 = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,
    x5 = Nt({ opSnippet: b5 }),
    y5 = {
        kernelName: ma,
        backendName: "webgl",
        kernelFunc: x5,
    };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function w5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { tensor: o, indices: r, updates: i } = t,
        {
            sliceRank: a,
            numUpdates: l,
            sliceSize: c,
            strides: u,
            outputSize: d,
        } = to(i, r, o.shape),
        h = [d / c, c];
    if (d === 0) return e.makeTensorInfo(o.shape, r.dtype);
    const p = et({ inputs: { x: r }, backend: e, attrs: { shape: [l, a] } }),
        f = et({ inputs: { x: i }, backend: e, attrs: { shape: [l, c] } }),
        m = et({ inputs: { x: o }, backend: e, attrs: { shape: h } }),
        g = new lm(l, a, p.shape.length, f.shape.length, u, h, !1, !0),
        b = e.runWebGLProgram(g, [f, p, m], m.dtype),
        x = et({ inputs: { x: b }, backend: e, attrs: { shape: o.shape } });
    return (
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(f),
        e.disposeIntermediateTensorInfo(m),
        e.disposeIntermediateTensorInfo(b),
        x
    );
}
const I5 = {
    kernelName: yb,
    backendName: "webgl",
    kernelFunc: w5,
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class C5 {
    constructor(t, e) {
        this.variableNames = ["A"];
        const s = new Array(t.length);
        for (let i = 0; i < s.length; i++) s[i] = t[i] * e[i];
        (this.outputShape = s), (this.rank = s.length);
        const o = Vt(this.rank),
            r = v5(t);
        this.userCode = `
      void main() {
        ${o} resRC = getOutputCoords();
        setOutput(getA(${r}));
      }
    `;
    }
}
function v5(n) {
    const t = n.length;
    if (t > 5) throw Error(`Tile for rank ${t} is not yet supported`);
    if (t === 1) return `imod(resRC, ${n[0]})`;
    const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"],
        s = [];
    for (let o = 0; o < n.length; o++) s.push(`imod(${e[o]}, ${n[o]})`);
    return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wC(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { reps: r } = s;
    if (o.dtype === "string" || o.shape.length > 5) {
        const l = e.readSync(o.dataId),
            c = o.dtype === "string" ? l.map((h) => gs(h)) : l,
            u = vt(o.shape, o.dtype, c),
            d = RO(u, r);
        return e.makeTensorInfo(d.shape, d.dtype, d.values);
    }
    const i = new C5(o.shape, r);
    return e.runWebGLProgram(i, [o], o.dtype);
}
const S5 = {
    kernelName: ga,
    backendName: "webgl",
    kernelFunc: wC,
};
class k5 {
    /**
     * @param shape desired output shape (can be larger than input shape, output
     *                                    will be padded with -Infinity)
     */
    constructor(t) {
        (this.variableNames = ["x", "indices"]),
            (this.customUniforms = [
                { name: "n", type: "int" },
                { name: "firstPass", type: "int" },
                { name: "negativeInf", type: "float" },
                { name: "dir", type: "int" },
                { name: "inc", type: "int" },
            ]),
            (this.outputShape = t),
            (this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `);
    }
}
class T5 {
    /**
     * @param shape desired output shape (must be half of the input size)
     */
    constructor(t) {
        (this.variableNames = ["x", "indices"]),
            (this.customUniforms = [
                { name: "n", type: "int" },
                { name: "firstPass", type: "int" },
                { name: "k", type: "int" },
            ]),
            (this.outputShape = t),
            (this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lo(n, t) {
    t !== null && n.disposeIntermediateTensorInfo(t);
}
function Xg(n) {
    let t = 1;
    for (; t < n; ) t *= 2;
    return t;
}
function N5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o } = t,
        { k: r, sorted: i } = s,
        a = F().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),
        l = F().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),
        c = o.shape,
        u = c[c.length - 1];
    if (e.shouldExecuteOnCPU([o]) || u < a || r > l) {
        const R = e.readSync(o.dataId),
            [M, V] = $O(R, c, o.dtype, r, i);
        return [
            e.makeTensorInfo(M.shape, M.dtype, M.values),
            e.makeTensorInfo(V.shape, V.dtype, V.values),
        ];
    }
    if (r === 0)
        return (
            (c[c.length - 1] = 0),
            [e.makeTensorInfo(c, o.dtype, []), e.makeTensorInfo(c, "int32", [])]
        );
    if (u === 1)
        return [
            o,
            Xa({ attrs: { shape: c, dtype: "int32", value: 0 }, backend: e }),
        ];
    const d = e.texData.get(o.dataId),
        h = d !== null && d.isPacked,
        p = h ? e.unpackTensor(o) : o,
        m = X(c) / u,
        g = et({ inputs: { x: p }, attrs: { shape: [m, u] }, backend: e });
    h && lo(e, p);
    const b = Xg(r),
        x = Xg(u);
    let w = null;
    const y = () => (w === null ? [g, g] : [g, w]),
        I = (R, M, V) => {
            const z = y(),
                P = new k5(V),
                O = [
                    [u],
                    [w === null ? 1 : 0],
                    [Number.NEGATIVE_INFINITY],
                    [R],
                    [M],
                ],
                B = w;
            (w = e.runWebGLProgram(P, z, "int32", O)), lo(e, B);
        };
    for (let R = 1; R < b; R *= 2) {
        const M = R * 2;
        for (let V = R; V >= 1; V /= 2) I(M, V, [m, x]);
    }
    for (let R = x; R > b; R /= 2) {
        const M = y(),
            V = new T5([m, R / 2]),
            P = [[u], [w === null ? 1 : 0], [b]],
            A = w;
        (w = e.runWebGLProgram(V, M, "int32", P)), lo(e, A);
        const O = b / 2,
            B = O * 2;
        for (let Z = O; Z >= 1; Z /= 2) I(B, Z, w.shape);
    }
    let v = w;
    (w = zr({
        inputs: { x: w },
        backend: e,
        attrs: { begin: 0, size: [m, r] },
    })),
        lo(e, v);
    let k = hC({
        inputs: { x: g, indices: w },
        backend: e,
        attrs: { axis: 1, batchDims: 1 },
    });
    lo(e, g);
    const S = c.slice(0, -1);
    S.push(r),
        (v = w),
        (w = et({ inputs: { x: w }, attrs: { shape: S }, backend: e })),
        lo(e, v);
    const N = k;
    return (
        (k = et({ inputs: { x: k }, attrs: { shape: S }, backend: e })),
        lo(e, N),
        [k, w]
    );
}
const R5 = {
    kernelName: Kh,
    backendName: "webgl",
    kernelFunc: N5,
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class $5 {
    constructor(t, e, s, o, r, i) {
        (this.variableNames = ["Image", "Transforms"]), (this.outputShape = i);
        const a = s === "nearest" ? 1 : 2;
        let l;
        switch (o) {
            case "constant":
                l = 1;
                break;
            case "reflect":
                l = 2;
                break;
            case "wrap":
                l = 3;
                break;
            case "nearest":
                l = 4;
                break;
            default:
                l = 1;
                break;
        }
        this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${r});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${r});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
    }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function G5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { image: o, transforms: r } = t,
        { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = s,
        [u, d, h, p] = o.shape,
        [f, m] = c ?? [d, h],
        g = [u, f, m, p],
        b = new $5(d, h, i, a, l, g);
    return e.runWebGLProgram(b, [o, r], "float32");
}
const E5 = {
    kernelName: Zh,
    backendName: "webgl",
    kernelFunc: G5,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function L5(n) {
    const { inputs: t, attrs: e, backend: s } = n,
        { axis: o } = e,
        { x: r } = t;
    Er(r, "unique"),
        console.warn(
            "WARNING: ",
            "UI might be locked temporarily as data is being downloaded"
        );
    const i = s.readSync(r.dataId),
        {
            outputValues: a,
            outputShape: l,
            indices: c,
        } = GO(i, o, r.shape, r.dtype);
    return [
        s.makeTensorInfo(l, r.dtype, a),
        s.makeTensorInfo([c.length], "int32", c),
    ];
}
const M5 = {
    kernelName: Bh,
    backendName: "webgl",
    kernelFunc: L5,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function W5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { value: o } = t;
    let { axis: r } = s;
    r < 0 && (r += o.shape.length);
    const i = o,
        a = i.shape.length,
        l = o.shape[r],
        c = new Array(a - 1);
    let u = 0;
    for (let m = 0; m < a; m++) m !== r && (c[u++] = i.shape[m]);
    const d = [],
        h = new Array(a).fill(0),
        p = i.shape.slice();
    p[r] = 1;
    const f = new Array(l);
    for (let m = 0; m < f.length; m++) {
        h[r] = m;
        const g = zr({
                inputs: { x: i },
                backend: e,
                attrs: { begin: h, size: p },
            }),
            b = et({ inputs: { x: g }, backend: e, attrs: { shape: c } });
        (f[m] = b), d.push(g);
    }
    return d.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
}
const D5 = {
    kernelName: Hc,
    backendName: "webgl",
    kernelFunc: W5,
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class F5 {
    constructor(t, e) {
        this.variableNames = ["x", "segmentIds"];
        const s = t.windowSize,
            o = t.batchSize,
            r = t.inSize,
            i = t.numSegments,
            a = i * Math.ceil(r / s);
        this.outputShape = [o, a];
        const l = "0.0",
            c = "sumValue",
            u = Math.floor(s / 4) * 4,
            d = s % 4,
            h = `
        sumValue += dot(values, segFilter);
    `;
        let p = "";
        r % s > 0 &&
            (p = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `);
        let f = "";
        r % s > 0 &&
            (f = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return -1.0;
        }
      `),
            (this.userCode = `
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${s}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${h}
        }

        int inIdx = inOffset + ${u};
        if (${d === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${h}
        } else if (${d === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${h}
        } else if (${d === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${h}
        }
        setOutput(${c});
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function V5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: o, segmentIds: r } = t,
        { numSegments: i } = s,
        a = o.shape.length,
        l = [];
    let c = 0;
    const u = qt([c], a);
    let d = o;
    u != null &&
        ((d = ze({ inputs: { x: o }, backend: e, attrs: { perm: u } })),
        l.push(d),
        (c = ie(1, a)[0]));
    const h = gx(d.shape, c, i),
        p = X([d.shape[c]]),
        f = et({ inputs: { x: d }, backend: e, attrs: { shape: [-1, p] } });
    l.push(f);
    const m = Yh(o.dtype),
        g = (y, I, v, k, S) => {
            const N = y.shape[0],
                R = y.shape[1],
                M = mx(R, S),
                V = { windowSize: M, inSize: R, batchSize: N, numSegments: S },
                z = new F5(V, I),
                P = e.compileAndRun(z, [y, v], k);
            if ((l.push(P), P.shape[1] === S)) return P;
            const A = yC({
                    backend: e,
                    attrs: { start: 0, stop: S, step: 1, dtype: "float32" },
                }),
                O = wC({
                    inputs: { x: A },
                    backend: e,
                    attrs: { reps: [R / M] },
                });
            return l.push(A), l.push(O), g(P, I, O, k, S);
        },
        b = g(f, "unsortedSegmentSum", r, m, i),
        x = et({ inputs: { x: b }, backend: e, attrs: { shape: h } });
    let w = x;
    if (u != null) {
        l.push(x);
        const y = js(u);
        w = ze({ inputs: { x: w }, backend: e, attrs: { perm: y } });
    }
    return l.forEach((y) => e.disposeIntermediateTensorInfo(y)), w;
}
const z5 = {
    kernelName: _c,
    backendName: "webgl",
    kernelFunc: V5,
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P5 = [
    CX,
    SX,
    NX,
    GX,
    LX,
    DX,
    VX,
    PX,
    KX,
    BX,
    UX,
    JX,
    tK,
    oK,
    aK,
    cK,
    dK,
    mK,
    bK,
    yK,
    vK,
    GK,
    LK,
    FK,
    zK,
    ZK,
    HK,
    QK,
    rX,
    qK,
    oZ,
    lZ,
    fZ,
    bZ,
    yZ,
    IZ,
    vZ,
    NZ,
    GZ,
    MZ,
    DZ,
    VZ,
    PZ,
    XZ,
    ZZ,
    UZ,
    QZ,
    qZ,
    nB,
    oB,
    lB,
    hB,
    gB,
    yB,
    CB,
    vB,
    kB,
    NB,
    $B,
    EB,
    MB,
    VB,
    AB,
    KB,
    BB,
    UB,
    JB,
    eH,
    rH,
    oX,
    aH,
    nZ,
    uH,
    pH,
    gH,
    aX,
    wH,
    SH,
    TH,
    GH,
    MH,
    VH,
    AH,
    ZH,
    UH,
    JH,
    qH,
    s_,
    r_,
    a_,
    d_,
    p_,
    m_,
    b_,
    y_,
    v_,
    N_,
    E_,
    P_,
    uX,
    K_,
    H_,
    Y_,
    j_,
    AK,
    e9,
    s9,
    r9,
    l9,
    h9,
    cX,
    f9,
    g9,
    x9,
    w9,
    I9,
    OK,
    D_,
    S9,
    R9,
    L9,
    hX,
    F9,
    P9,
    K9,
    H9,
    Q9,
    j9,
    eU,
    oU,
    aU,
    uU,
    pU,
    gU,
    wU,
    vU,
    NU,
    GU,
    RK,
    V_,
    MU,
    DU,
    VU,
    PU,
    OU,
    KU,
    BU,
    _U,
    YU,
    jU,
    t5,
    n5,
    o5,
    a5,
    c5,
    d5,
    p5,
    F_,
    yX,
    g5,
    y5,
    I5,
    S5,
    R5,
    E5,
    wX,
    M5,
    D5,
    z5,
    n9,
];
for (const n of P5) sn(n);
const IC =
        "",
    Kg =
        typeof window < "u" &&
        window.Blob &&
        new Blob([atob(IC)], { type: "text/javascript;charset=utf-8" });
function A5(n) {
    let t;
    try {
        if (
            ((t = Kg && (window.URL || window.webkitURL).createObjectURL(Kg)),
            !t)
        )
            throw "";
        const e = new Worker(t, {
            name: n == null ? void 0 : n.name,
        });
        return (
            e.addEventListener("error", () => {
                (window.URL || window.webkitURL).revokeObjectURL(t);
            }),
            e
        );
    } catch {
        return new Worker("data:application/javascript;base64," + IC, {
            name: n == null ? void 0 : n.name,
        });
    } finally {
        t && (window.URL || window.webkitURL).revokeObjectURL(t);
    }
}
const O5 = (n, t) => [
        [
            n[0][0] * t[0][0] + n[0][2] * t[2][0],
            n[0][0] * t[0][1] + n[0][2] * t[2][1],
            n[0][0] * t[0][2] + n[0][2] * t[2][2],
            n[0][0] * t[0][3] + n[0][2] * t[2][3],
        ],
        [
            n[1][1] * t[1][0] + n[1][2] * t[2][0],
            n[1][1] * t[1][1] + n[1][2] * t[2][1],
            n[1][1] * t[1][2] + n[1][2] * t[2][2],
            n[1][1] * t[1][3] + n[1][2] * t[2][3],
        ],
        [t[2][0], t[2][1], t[2][2], t[2][3]],
    ],
    X5 = (n, t, e, s) => {
        const o = n[0][0] * t + n[0][1] * e + n[0][3],
            r = n[1][0] * t + n[1][1] * e + n[1][3],
            i = n[2][0] * t + n[2][1] * e + n[2][3];
        return { x: o, y: r, z: i };
    },
    K5 = (n, t, e, s) => {
        const { x: o, y: r, z: i } = X5(n, t, e);
        return { x: o / i, y: r / i };
    },
    Z5 = 6,
    B5 = 1,
    H5 = 10,
    _5 = 1,
    U5 = 0.8,
    Y5 = 1,
    Un = 1e3;
class Q5 {
    constructor(t, e, s, o, r, i = !1) {
        (this.markerDimensions = t),
            (this.trackingDataList = e),
            (this.projectionTransform = s),
            (this.debugMode = i),
            (this.trackingKeyframeList = []);
        for (let l = 0; l < e.length; l++)
            this.trackingKeyframeList.push(e[l][Y5]);
        let a = 0;
        for (let l = 0; l < this.trackingKeyframeList.length; l++)
            a = Math.max(a, this.trackingKeyframeList[l].points.length);
        (this.featurePointsListT = []),
            (this.imagePixelsListT = []),
            (this.imagePropertiesListT = []);
        for (let l = 0; l < this.trackingKeyframeList.length; l++) {
            const {
                featurePoints: c,
                imagePixels: u,
                imageProperties: d,
            } = this._prebuild(this.trackingKeyframeList[l], a);
            (this.featurePointsListT[l] = c),
                (this.imagePixelsListT[l] = u),
                (this.imagePropertiesListT[l] = d);
        }
        this.kernelCaches = {};
    }
    dummyRun(t) {
        let e = [
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1],
        ];
        for (let s = 0; s < this.featurePointsListT.length; s++)
            this.track(t, e, s);
    }
    track(t, e, s) {
        let o = {};
        const r = O5(this.projectionTransform, e),
            i = this._buildAdjustedModelViewTransform(r);
        this.markerDimensions[s][0],
            this.markerDimensions[s][1],
            this.trackingKeyframeList[s].width,
            this.trackingKeyframeList[s].height;
        const a = this.featurePointsListT[s],
            l = this.imagePixelsListT[s],
            c = this.imagePropertiesListT[s],
            u = this._computeProjection(i, t, s),
            { matchingPointsT: d, simT: h } = this._computeMatching(a, l, c, u),
            p = d.arraySync(),
            f = h.arraySync(),
            m = this.trackingKeyframeList[s],
            g = [],
            b = [],
            x = [];
        for (let w = 0; w < p.length; w++)
            if (f[w] > U5 && w < m.points.length) {
                x.push(w);
                const y = K5(r, p[w][0], p[w][1]);
                b.push(y),
                    g.push({
                        x: m.points[w].x / m.scale,
                        y: m.points[w].y / m.scale,
                        z: 0,
                    });
            }
        return (
            this.debugMode &&
                (o = {
                    projectedImage: u.arraySync(),
                    matchingPoints: d.arraySync(),
                    goodTrack: x,
                    trackedPoints: b,
                }),
            i.dispose(),
            u.dispose(),
            d.dispose(),
            h.dispose(),
            { worldCoords: g, screenCoords: b, debugExtra: o }
        );
    }
    _computeMatching(t, e, s, o) {
        const r = Z5,
            i = r * 2 + 1,
            l = H5 * B5,
            c = _5,
            u = l * 2 + 1,
            d = o.shape[0],
            h = o.shape[1],
            p = t.shape[0];
        if (!this.kernelCaches.computeMatching) {
            const f = {
                    variableNames: [
                        "features",
                        "markerPixels",
                        "markerProperties",
                        "targetPixels",
                    ],
                    outputShape: [p, u * u],
                    userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    int featureIndex = coords[0];
	    int searchOffsetIndex = coords[1];

	    int markerWidth = int(getMarkerProperties(0));
	    int markerHeight = int(getMarkerProperties(1));
	    float markerScale = getMarkerProperties(2);

	    int searchOffsetX = imod(searchOffsetIndex, ${u}) * ${c};
	    int searchOffsetY = searchOffsetIndex / ${u} * ${c};

	    int sCenterX = int(getFeatures(featureIndex, 0) * markerScale);
	    int sCenterY = int(getFeatures(featureIndex, 1) * markerScale);

	    int sx = sCenterX + searchOffsetX - ${l};
	    int sy = sCenterY + searchOffsetY - ${l};

	    if (sx < ${r} || sx >= (${h} - ${r}) || sy < ${r} || sy >= (${d} - ${r})) {
	      setOutput(-2.);
	    } 
	    else {
	      float sumPoint = 0.;
	      float sumPointSquare = 0.;
	      float sumTemplate = 0.;
	      float sumTemplateSquare = 0.;
	      float sumPointTemplate = 0.;

	      for (int templateOffsetY = 0; templateOffsetY < ${i}; templateOffsetY++) {
		for (int templateOffsetX = 0; templateOffsetX < ${i}; templateOffsetX++) {
		  int fx2 = sCenterX + templateOffsetX - ${r};
		  int fy2 = sCenterY + templateOffsetY - ${r};

		  int sx2 = sx + templateOffsetX - ${r};
		  int sy2 = sy + templateOffsetY - ${r};

		  int markerPixelIndex = fy2 * markerWidth + fx2;
		  float markerPixel = getMarkerPixels(markerPixelIndex);
		  float targetPixel = getTargetPixels(sy2, sx2);

		  sumTemplate += markerPixel;
		  sumTemplateSquare += markerPixel * markerPixel;
		  sumPoint += targetPixel;
		  sumPointSquare += targetPixel * targetPixel;
		  sumPointTemplate += targetPixel * markerPixel;
		}
	      }

	      // Normalized cross-correlation
	      // !important divide first avoid overflow (e.g. sumPoint / count * sumPoint)
	      float count = float(${i} * ${i});
	      float pointVariance = sqrt(sumPointSquare - sumPoint / count * sumPoint);
	      float templateVariance = sqrt(sumTemplateSquare - sumTemplate / count * sumTemplate);

	      if (pointVariance < 0.0000001) {
		setOutput(-3.);
	      } else if (templateVariance < 0.0000001) {
		//setOutput(sumTemplate);
		setOutput(-4.);
	      } else {
		sumPointTemplate -= sumPoint / count * sumTemplate;
		float sim = sumPointTemplate / pointVariance / templateVariance;  
		setOutput(sim);
	      }
	    }
	  }
	`,
                },
                m = {
                    variableNames: [
                        "featurePoints",
                        "markerProperties",
                        "maxIndex",
                    ],
                    outputShape: [p, 2],
                    // [x, y]
                    userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    float markerScale = getMarkerProperties(2);

	    int featureIndex = coords[0];

	    int maxIndex = int(getMaxIndex(featureIndex));
	    int searchLocationIndex = maxIndex / ${u * u};
	    int searchOffsetIndex = imod(maxIndex, ${u * u});

	    if (coords[1] == 0) {
	      int searchOffsetX = imod(searchOffsetIndex, ${u}) * ${c};
	      setOutput(getFeaturePoints(featureIndex, 0) + float(searchOffsetX - ${l}) / markerScale);
	    }
	    else if (coords[1] == 1) {
	      int searchOffsetY = searchOffsetIndex / ${u} * ${c};
	      setOutput(getFeaturePoints(featureIndex, 1) + float(searchOffsetY - ${l}) / markerScale);
	    }
	  }
	`,
                },
                g = {
                    variableNames: ["sims", "maxIndex"],
                    outputShape: [p],
                    userCode: `
	  void main() {
	    int featureIndex = getOutputCoords();
	    int maxIndex = int(getMaxIndex(featureIndex));
	    setOutput(getSims(featureIndex, maxIndex));
	  }
	`,
                };
            this.kernelCaches.computeMatching = [f, m, g];
        }
        return D(() => {
            const f = this.kernelCaches.computeMatching,
                m = this._compileAndRun(f[0], [t, e, s, o]),
                g = m.argMax(1),
                b = this._compileAndRun(f[1], [t, s, g]),
                x = this._compileAndRun(f[2], [m, g]);
            return { matchingPointsT: b, simT: x };
        });
    }
    _computeProjection(t, e, s) {
        const o = this.trackingKeyframeList[s].width,
            r = this.trackingKeyframeList[s].height,
            i = this.trackingKeyframeList[s].scale,
            a = o + "-" + r + "-" + i;
        if (
            (this.kernelCaches.computeProjection ||
                (this.kernelCaches.computeProjection = {}),
            !this.kernelCaches.computeProjection[a])
        ) {
            const l = {
                variableNames: ["M", "pixel"],
                outputShape: [r, o],
                userCode: `
	  void main() {
	      ivec2 coords = getOutputCoords();

	      float m00 = getM(0, 0) * ${Un}.;
	      float m01 = getM(0, 1) * ${Un}.;
	      float m03 = getM(0, 3) * ${Un}.;
	      float m10 = getM(1, 0) * ${Un}.;
	      float m11 = getM(1, 1) * ${Un}.;
	      float m13 = getM(1, 3) * ${Un}.;
	      float m20 = getM(2, 0) * ${Un}.;
	      float m21 = getM(2, 1) * ${Un}.;
	      float m23 = getM(2, 3) * ${Un}.;

	      float y = float(coords[0]) / float(${i});
	      float x = float(coords[1]) / float(${i});
	      float uz = (x * m20) + (y * m21) + m23;
	      float oneOverUz = 1. / uz;

	      float ux = (x * m00) + (y * m01) + m03;
	      float uy = (x * m10) + (y * m11) + m13;

	      ux = floor(ux * oneOverUz + 0.5);
	      uy = floor(uy * oneOverUz + 0.5);
	      setOutput(getPixel(int(uy), int(ux)));
	    }
	`,
            };
            this.kernelCaches.computeProjection[a] = l;
        }
        return D(() => {
            const l = this.kernelCaches.computeProjection[a];
            return this._compileAndRun(l, [t, e]);
        });
    }
    _buildAdjustedModelViewTransform(t) {
        return D(() => {
            let e = [];
            for (let o = 0; o < t.length; o++) {
                e.push([]);
                for (let r = 0; r < t[o].length; r++) e[o].push(t[o][r] / Un);
            }
            return $e(e, [3, 4]);
        });
    }
    _prebuild(t, e) {
        return D(() => {
            const s = t.scale,
                o = [];
            for (let l = 0; l < e; l++)
                l < t.points.length
                    ? o.push([t.points[l].x / s, t.points[l].y / s])
                    : o.push([-1, -1]);
            const r = $e(t.data, [t.width * t.height]),
                i = $e([t.width, t.height, t.scale], [3]);
            return {
                featurePoints: $e(o, [o.length, 2], "float32"),
                imagePixels: r,
                imageProperties: i,
            };
        });
    }
    _compileAndRun(t, e) {
        const s = ps().compileAndRun(t, e);
        return Ot().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
    }
}
const tl = [
        // ring 5
        {
            sigma: 0.55,
            points: [
                [-1, 0],
                [-0.5, -0.866025],
                [0.5, -0.866025],
                [1, -0],
                [0.5, 0.866025],
                [-0.5, 0.866025],
            ],
        },
        // ring 4
        {
            sigma: 0.475,
            points: [
                [0, 0.930969],
                [-0.806243, 0.465485],
                [-0.806243, -0.465485],
                [-0, -0.930969],
                [0.806243, -0.465485],
                [0.806243, 0.465485],
            ],
        },
        // ring 3
        {
            sigma: 0.4,
            points: [
                [0.847306, -0],
                [0.423653, 0.733789],
                [-0.423653, 0.733789],
                [-0.847306, 0],
                [-0.423653, -0.733789],
                [0.423653, -0.733789],
            ],
        },
        // ring 2
        {
            sigma: 0.325,
            points: [
                [-0, -0.741094],
                [0.641806, -0.370547],
                [0.641806, 0.370547],
                [0, 0.741094],
                [-0.641806, 0.370547],
                [-0.641806, -0.370547],
            ],
        },
        // ring 1
        {
            sigma: 0.25,
            points: [
                [-0.595502, 0],
                [-0.297751, -0.51572],
                [0.297751, -0.51572],
                [0.595502, -0],
                [0.297751, 0.51572],
                [-0.297751, 0.51572],
            ],
        },
        // ring 0
        {
            sigma: 0.175,
            points: [
                [0, 0.362783],
                [-0.314179, 0.181391],
                [-0.314179, -0.181391],
                [-0, -0.362783],
                [0.314179, -0.181391],
                [0.314179, 0.181391],
            ],
        },
        // center
        {
            sigma: 0.1,
            points: [[0, 0]],
        },
    ],
    Ao = [];
for (let n = 0; n < tl.length; n++) {
    const t = tl[n].sigma;
    for (let e = 0; e < tl[n].points.length; e++) {
        const s = tl[n].points[e];
        Ao.push([t, s[0], s[1]]);
    }
}
const Xu = {};
function J5(n) {
    const t = n.shape[1],
        e = n.shape[0],
        s = "w" + t + "h" + e;
    if (!Xu.hasOwnProperty(s)) {
        const o = {
                variableNames: ["p"],
                outputShape: [e, t],
                userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0], coords[1]-2);
          sum += getP(coords[0], coords[1]-1) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0], coords[1]+1) * 4.;
          sum += getP(coords[0], coords[1]+2);
          setOutput(sum);
        }
      `,
            },
            r = {
                variableNames: ["p"],
                outputShape: [e, t],
                userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0]-2, coords[1]);
          sum += getP(coords[0]-1, coords[1]) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0]+1, coords[1]) * 4.;
          sum += getP(coords[0]+2, coords[1]);
          sum /= 256.;
          setOutput(sum);
        }
      `,
            };
        Xu[s] = [o, r];
    }
    return Xu[s];
}
const j5 = (n) => {
        const t = n.inputs.image,
            e = n.backend,
            [s, o] = J5(t),
            r = e.runWebGLProgram(s, [t], t.dtype),
            i = e.runWebGLProgram(o, [r], t.dtype);
        return e.disposeIntermediateTensorInfo(r), i;
    },
    q5 = {
        //: KernelConfig
        kernelName: "BinomialFilter",
        backendName: "webgl",
        kernelFunc: j5,
        // as {} as KernelFunc,
    },
    el = 7,
    Zg = 3,
    t4 = Zg * Zg,
    Ku = 4,
    e4 = ((Ku + 1) * (Ku + 1)) / Ku,
    Zu = {};
function n4(n) {
    const t = n.shape[1],
        e = n.shape[0],
        s = "w" + t + "h" + e;
    if (!Zu.hasOwnProperty(s)) {
        const o = {
            variableNames: ["image0", "image1", "image2"],
            outputShape: [e, t],
            userCode: `
        void main() {
          ivec2 coords = getOutputCoords();
    
          int y = coords[0];
          int x = coords[1];
    
          float value = getImage1(y, x);
    
          // Step 1: find local maxima/minima
          if (value * value < ${t4}.) {
            setOutput(0.);
            return;
          }
          if (y < ${el} || y > ${e - 1 - el}) {
            setOutput(0.);
            return;
          }
          if (x < ${el} || x > ${t - 1 - el}) {
            setOutput(0.);
            return;
          }
    
          bool isMax = true;
          bool isMin = true;
          for (int dy = -1; dy <= 1; dy++) {
            for (int dx = -1; dx <= 1; dx++) {
              float value0 = getImage0(y+dy, x+dx);
              float value1 = getImage1(y+dy, x+dx);
              float value2 = getImage2(y+dy, x+dx);
    
        if (value < value0 || value < value1 || value < value2) {
          isMax = false;
        }
        if (value > value0 || value > value1 || value > value2) {
          isMin = false;
        }
            }
          }
    
          if (!isMax && !isMin) {
            setOutput(0.);
            return;
          }
    
          // compute edge score and reject based on threshold
          float dxx = getImage1(y, x+1) + getImage1(y, x-1) - 2. * getImage1(y, x);
          float dyy = getImage1(y+1, x) + getImage1(y-1, x) - 2. * getImage1(y, x);
          float dxy = 0.25 * (getImage1(y-1,x-1) + getImage1(y+1,x+1) - getImage1(y-1,x+1) - getImage1(y+1,x-1));
    
          float det = (dxx * dyy) - (dxy * dxy);
    
          if (abs(det) < 0.0001) { // determinant undefined. no solution
            setOutput(0.);
            return;
          }
    
          float edgeScore = (dxx + dyy) * (dxx + dyy) / det;
    
          if (abs(edgeScore) >= ${e4} ) {
            setOutput(0.);
            return;
          }
          setOutput(getImage1(y,x));
        }
      `,
        };
        Zu[s] = o;
    }
    return Zu[s];
}
const s4 = (n) => {
        let { image0: t, image1: e, image2: s } = n.inputs;
        const o = n.backend,
            r = n4(e);
        return (
            (t = Ot().runKernel("DownsampleBilinear", { image: t })),
            (s = Ot().runKernel("UpsampleBilinear", {
                image: s,
                targetImage: e,
            })),
            o.runWebGLProgram(r, [t, e, s], e.dtype)
        );
    },
    o4 = {
        //: KernelConfig
        kernelName: "BuildExtremas",
        backendName: "webgl",
        kernelFunc: s4,
        // as {} as KernelFunc,
    },
    Zr = 36,
    Bu = {};
function r4(n) {
    const t = n.shape[0];
    if (!Bu.hasOwnProperty(t)) {
        const e = {
            variableNames: ["histogram"],
            outputShape: [n.shape[0]],
            userCode: `
            void main() {
                int featureIndex = getOutputCoords();

                int maxIndex = 0;
                for (int i = 1; i < ${Zr}; i++) {
                    if (getHistogram(featureIndex, i) > getHistogram(featureIndex, maxIndex)) {
                        maxIndex = i;
                    }
                }

                int prev = imod(maxIndex - 1 + ${Zr}, ${Zr});
                int next = imod(maxIndex + 1, ${Zr});

                /**
                 * Fit a quatratic to 3 points. The system of equations is:
                 *
                 * y0 = A*x0^2 + B*x0 + C
                 * y1 = A*x1^2 + B*x1 + C
                 * y2 = A*x2^2 + B*x2 + C
                 *
                 * This system of equations is solved for A,B,C.
                 */
                float p10 = float(maxIndex - 1);
                float p11 = getHistogram(featureIndex, prev); 
                float p20 = float(maxIndex);
                float p21 = getHistogram(featureIndex, maxIndex); 
                float p30 = float(maxIndex + 1);
                float p31 = getHistogram(featureIndex, next); 

                float d1 = (p30-p20)*(p30-p10);
                float d2 = (p10-p20)*(p30-p10);
                float d3 = p10-p20;

                // If any of the denominators are zero then, just use maxIndex.
                    float fbin = float(maxIndex);
                if ( abs(d1) > 0.00001 && abs(d2) > 0.00001 && abs(d3) > 0.00001) {
                float a = p10*p10;
                float b = p20*p20;

                // Solve for the coefficients A,B,C
                float A = ((p31-p21)/d1)-((p11-p21)/d2);
                float B = ((p11-p21)+(A*(b-a)))/d3;
                float C = p11-(A*a)-(B*p10);
                fbin = -B / (2. * A);
                }

                float an = 2.0 *${Math.PI} * (fbin + 0.5) / ${Zr}. - ${Math.PI};
                setOutput(an);
            }
            `,
        };
        Bu[t] = e;
    }
    return Bu[t];
}
const i4 = (n) => {
        const { histograms: t } = n.inputs,
            e = n.backend,
            s = r4(t);
        return e.runWebGLProgram(s, [t], t.dtype);
    },
    a4 = {
        //: KernelConfig
        kernelName: "ComputeExtremaAngles",
        backendName: "webgl",
        kernelFunc: i4,
        // as {} as KernelFunc,
    },
    Bg = 7,
    Hu = {};
function l4(n, t) {
    const e = `${n}|${t.shape[0]}`;
    if (!Hu.hasOwnProperty(e)) {
        const s = [];
        for (let i = 1; i < n; i++) s.push("image" + i);
        let o = "float getPixel(int octave, int y, int x) {";
        for (let i = 1; i < n; i++)
            o += `
  if (octave == ${i}) {
	return getImage${i}(y, x);
  }
`;
        o += "}";
        const r = {
            variableNames: [...s, "extrema", "angles", "freakPoints"],
            outputShape: [t.shape[0], Ao.length],
            userCode: `
  ${o}
  void main() {
	ivec2 coords = getOutputCoords();
	int featureIndex = coords[0];
	int freakIndex = coords[1];

	float freakSigma = getFreakPoints(freakIndex, 0);
	float freakX = getFreakPoints(freakIndex, 1);
	float freakY = getFreakPoints(freakIndex, 2);

	int octave = int(getExtrema(featureIndex, 1));
	float inputY = getExtrema(featureIndex, 2);
	float inputX = getExtrema(featureIndex, 3);
	float inputAngle = getAngles(featureIndex);
	float cos = ${Bg}. * cos(inputAngle);
	float sin = ${Bg}. * sin(inputAngle);

	float yp = inputY + freakX * sin + freakY * cos;
	float xp = inputX + freakX * cos + freakY * -sin;

	int x0 = int(floor(xp));
	int x1 = x0 + 1;
	int y0 = int(floor(yp));
	int y1 = y0 + 1;

	float f1 = getPixel(octave, y0, x0);
	float f2 = getPixel(octave, y0, x1);
	float f3 = getPixel(octave, y1, x0);
	float f4 = getPixel(octave, y1, x1);

	float x1f = float(x1);
	float y1f = float(y1);
	float x0f = float(x0);
	float y0f = float(y0);

	// ratio for interpolation between four neighbouring points
	float value = (x1f - xp) * (y1f - yp) * f1
		+ (xp - x0f) * (y1f - yp) * f2
		+ (x1f - xp) * (yp - y0f) * f3
		+ (xp - x0f) * (yp - y0f) * f4;

	setOutput(value);
  }
`,
        };
        Hu[e] = r;
    }
    return Hu[e];
}
const c4 = (n) => {
        const {
                gaussianImagesT: t,
                prunedExtremas: e,
                prunedExtremasAngles: s,
                freakPointsT: o,
                pyramidImagesLength: r,
            } = n.inputs,
            i = n.backend,
            a = l4(r, e);
        return i.runWebGLProgram(a, [...t, e, s, o], "float32");
    },
    u4 = {
        //: KernelConfig
        kernelName: "ComputeExtremaFreak",
        backendName: "webgl",
        kernelFunc: c4,
        // as {} as KernelFunc,
    },
    CC = ((Ao.length - 1) * Ao.length) / 2,
    d4 = Math.ceil(CC / 8),
    _u = {};
function h4(n) {
    const t = `${n.shape[0]}`;
    if (!_u.hasOwnProperty(t)) {
        const e = {
            variableNames: ["freak", "p"],
            outputShape: [n.shape[0], d4],
            userCode: `
  void main() {
    ivec2 coords = getOutputCoords();
    int featureIndex = coords[0];
    int descIndex = coords[1] * 8;

    int sum = 0;
    for (int i = 0; i < 8; i++) {
      if (descIndex + i >= ${CC}) {
        continue;
      }

      int p1 = int(getP(descIndex + i, 0));
      int p2 = int(getP(descIndex + i, 1));

      float v1 = getFreak(featureIndex, p1);
      float v2 = getFreak(featureIndex, p2);

      if (v1 < v2 + 0.01) {
        sum += int(pow(2.0, float(7 - i)));
      }
    }
    setOutput(float(sum));
  }
`,
        };
        _u[t] = e;
    }
    return _u[t];
}
const p4 = (n) => {
        const { extremaFreaks: t, positionT: e } = n.inputs,
            { backend: s } = n,
            o = h4(t);
        return s.runWebGLProgram(o, [t, e], "int32");
    },
    f4 = {
        //: KernelConfig
        kernelName: "ComputeFreakDescriptors",
        backendName: "webgl",
        kernelFunc: p4,
        // as {} as KernelFunc,
    },
    Uu = {};
function m4(n, t) {
    const e = `${n}|${t}`;
    if (!Uu.hasOwnProperty(e)) {
        const s = [];
        let o = "float getPixel(int octave, int y, int x) {";
        for (let r = 1; r < n; r++)
            s.push("image" + r),
                (o += `
				if (octave == ${r}) {
					return getImage${r}(y, x);
				}
			`);
        (o += "}"),
            (Uu[e] = {
                variableNames: [...s, "extrema"],
                outputShape: [t, 3, 3],
                // 3x3 pixels around the extrema
                userCode: `
			${o}
		
			void main() {
				ivec3 coords = getOutputCoords();
				int featureIndex = coords[0];
				float score = getExtrema(featureIndex, 0);
				if (score == 0.0) {
					return;
				}
		
				int dy = coords[1]-1;
				int dx = coords[2]-1;
				int octave = int(getExtrema(featureIndex, 1));
				int y = int(getExtrema(featureIndex, 2));
				int x = int(getExtrema(featureIndex, 3));
				setOutput(getPixel(octave, y+dy, x+dx));
			}
			`,
            });
    }
    return Uu[e];
}
const g4 = (n) => {
        const { prunedExtremasList: t, dogPyramidImagesT: e } = n.inputs,
            s = n.backend,
            o = m4(e.length, t.length),
            r = $e(t, [t.length, t[0].length], "int32");
        return s.runWebGLProgram(o, [...e.slice(1), r], e[0].dtype);
    },
    b4 = {
        //: KernelConfig
        kernelName: "ComputeLocalization",
        backendName: "webgl",
        kernelFunc: g4,
        // as {} as KernelFunc,
    },
    x4 = 0.159154943091895,
    sr = 36,
    Yu = {};
function y4(n, t, e) {
    const s = `${e}|${n.shape[0]}|${t.shape[0]}`;
    if (!Yu.hasOwnProperty(s)) {
        const o = [];
        for (let l = 1; l < e; l++) o.push("image" + l);
        let r = "float getPixel(int octave, int y, int x) {";
        for (let l = 1; l < e; l++)
            r += `
            if (octave == ${l}) {
                return getImage${l}(y, x);
            }
            `;
        r += "}";
        const i = {
                variableNames: [...o, "extrema", "radial"],
                outputShape: [n.shape[0], t.shape[0], 2],
                // last dimension: [fbin, magnitude]
                userCode: `
                ${r}

                void main() {
                    ivec3 coords = getOutputCoords();
                    int featureIndex = coords[0];
                    int radialIndex = coords[1];
                    int propertyIndex = coords[2];

                    int radialY = int(getRadial(radialIndex, 0));
                    int radialX = int(getRadial(radialIndex, 1));
                    float radialW = getRadial(radialIndex, 2);

                    int octave = int(getExtrema(featureIndex, 1));
                    int y = int(getExtrema(featureIndex, 2));
                    int x = int(getExtrema(featureIndex, 3));

                    int xp = x + radialX;
                    int yp = y + radialY;

                    float dy = getPixel(octave, yp+1, xp) - getPixel(octave, yp-1, xp);
                    float dx = getPixel(octave, yp, xp+1) - getPixel(octave, yp, xp-1);

                    if (propertyIndex == 0) {
                    // be careful that atan(0, 0) gives 1.57 instead of 0 (different from js), but doesn't matter here, coz magnitude is 0
                    
                    float angle = atan(dy, dx) + ${Math.PI};
                    float fbin = angle * ${sr}. * ${x4};
                    setOutput(fbin);
                    return;
                    }

                    if (propertyIndex == 1) {
                        float mag = sqrt(dx * dx + dy * dy);
                        float magnitude = radialW * mag;
                        setOutput(magnitude);
                        return;
                    }
                }

                `,
            },
            a = {
                variableNames: ["fbinMag"],
                outputShape: [n.shape[0], sr],
                userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int featureIndex = coords[0];
                int binIndex = coords[1];

                float sum = 0.;
                for (int i = 0; i < ${t.shape[0]}; i++) {
                    float fbin = getFbinMag(featureIndex, i, 0);
                    int bin = int(floor(fbin - 0.5));
                    int b1 = imod(bin + ${sr}, ${sr});
                    int b2 = imod(bin + 1 + ${sr}, ${sr});

                    if (b1 == binIndex || b2 == binIndex) {
                        float magnitude = getFbinMag(featureIndex, i, 1);
                        float w2 = fbin - float(bin) - 0.5;
                        float w1 = w2 * -1. + 1.;

                        if (b1 == binIndex) {
                            sum += w1 * magnitude;
                        }
                        if (b2 == binIndex) {
                            sum += w2 * magnitude;
                        }
                    }
                }
                setOutput(sum);
            }
            `,
            };
        Yu[s] = [i, a];
    }
    return Yu[s];
}
const w4 = (n) => {
        const {
                gaussianImagesT: t,
                prunedExtremasT: e,
                radialPropertiesT: s,
                pyramidImagesLength: o,
            } = n.inputs,
            r = n.backend,
            [i, a] = y4(e, s, o),
            l = r.runWebGLProgram(i, [...t, e, s], s.dtype),
            c = r.runWebGLProgram(a, [l], s.dtype);
        return r.disposeIntermediateTensorInfo(l), c;
    },
    I4 = {
        kernelName: "ComputeOrientationHistograms",
        backendName: "webgl",
        kernelFunc: w4,
        // as {} as KernelFunc,
    },
    Qu = {};
function C4(n) {
    const t = n.shape[1],
        e = n.shape[0],
        s = "w" + t + "h" + e;
    if (!Qu.hasOwnProperty(s)) {
        const o = {
            variableNames: ["p"],
            outputShape: [Math.floor(e / 2), Math.floor(t / 2)],
            userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int y = coords[0] * 2;
                int x = coords[1] * 2;
        
                float sum = getP(y, x) * 0.25;
                sum += getP(y+1,x) * 0.25; 
                sum += getP(y, x+1) * 0.25; 
                sum += getP(y+1,x+1) * 0.25;
                setOutput(sum);
            }
            `,
        };
        Qu[s] = o;
    }
    return Qu[s];
}
const v4 = (n) => {
        const t = n.inputs.image,
            e = n.backend,
            s = C4(t);
        return e.runWebGLProgram(s, [t], t.dtype);
    },
    S4 = {
        //: KernelConfig
        kernelName: "DownsampleBilinear",
        backendName: "webgl",
        kernelFunc: v4,
        // as {} as KernelFunc,
    },
    k4 = (n) => {
        const { extremasResultT: t } = n.inputs,
            e = n.backend,
            s = t.shape[0],
            o = t.shape[1],
            r = {
                variableNames: ["extrema"],
                outputShape: [Math.floor(s / 2), Math.floor(o / 2)],
                userCode: `
		  void main() {
			ivec2 coords = getOutputCoords();
			int y = coords[0] * 2;
			int x = coords[1] * 2;
  
			float location = 0.0;
			float values = getExtrema(y, x);
  
			if (getExtrema(y+1, x) != 0.0) {
			  location = 1.0;
		  values = getExtrema(y+1, x);
			}
			else if (getExtrema(y, x+1) != 0.0) {
			  location = 2.0;
		  values = getExtrema(y, x+1);
			}
			else if (getExtrema(y+1, x+1) != 0.0) {
			  location = 3.0;
		  values = getExtrema(y+1, x+1);
			}
  
			if (values < 0.0) {
			  setOutput(location * -1000.0 + values);
			} else {
			  setOutput(location * 1000.0 + values);
			}
		  }
		`,
            };
        return e.runWebGLProgram(r, [t], t.dtype);
    },
    T4 = {
        //: KernelConfig
        kernelName: "ExtremaReduction",
        backendName: "webgl",
        kernelFunc: k4,
        // as {} as KernelFunc,
    },
    nl = 36,
    N4 = 5,
    Ju = {};
function R4(n) {
    const t = `h${n.shape[0]}`;
    if (!Ju.hasOwnProperty(t)) {
        const e = {
            variableNames: ["histogram"],
            outputShape: [n.shape[0], nl],
            userCode: `
            void main() {
                ivec2 coords = getOutputCoords();

                int featureIndex = coords[0];
                int binIndex = coords[1];

                int prevBin = imod(binIndex - 1 + ${nl}, ${nl});
                int nextBin = imod(binIndex + 1, ${nl});
                float result = 0.274068619061197 * getHistogram(featureIndex, prevBin) + 0.451862761877606 * getHistogram(featureIndex, binIndex) + 0.274068619061197 * getHistogram(featureIndex, nextBin);

                setOutput(result);
            }
            `,
        };
        Ju[t] = e;
    }
    return Ju[t];
}
const $4 = (n) => {
        let { histograms: t } = n.inputs;
        const e = n.backend,
            s = R4(t);
        for (let o = 0; o < N4; o++) {
            const r = t;
            (t = e.runWebGLProgram(s, [t], t.dtype)),
                o > 0 && e.disposeIntermediateTensorInfo(r);
        }
        return t;
    },
    G4 = {
        //: KernelConfig
        kernelName: "SmoothHistograms",
        backendName: "webgl",
        kernelFunc: $4,
        // as {} as KernelFunc,
    },
    ju = {};
function E4(n, t) {
    const e = t.shape[1],
        s = t.shape[0],
        o = "w" + e + "h" + s;
    if (!ju.hasOwnProperty(o)) {
        const r = {
            variableNames: ["p"],
            outputShape: [s, e],
            userCode: `
              void main() {
                ivec2 coords = getOutputCoords();
                int j = coords[0];
                int i = coords[1];
        
                float sj = 0.5 * float(j) - 0.25; 
                float si = 0.5 * float(i) - 0.25;
        
                float sj0 = floor(sj);
                float sj1 = ceil(sj);
                float si0 = floor(si);
                float si1 = ceil(si);
        
                int sj0I = int(sj0);
                int sj1I = int(sj1);
                int si0I = int(si0);
                int si1I = int(si1);
        
                float sum = 0.0;
                sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);
                sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);
                sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);
                sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);
                setOutput(sum);
              }
            `,
        };
        ju[o] = r;
    }
    return ju[o];
}
const L4 = (n) => {
        const { image: t, targetImage: e } = n.inputs,
            s = n.backend,
            o = E4(t, e);
        return s.runWebGLProgram(o, [t], t.dtype);
    },
    M4 = {
        //: KernelConfig
        kernelName: "UpsampleBilinear",
        backendName: "webgl",
        kernelFunc: L4,
        // as {} as KernelFunc,
    };
sn(q5);
sn(o4);
sn(a4);
sn(u4);
sn(f4);
sn(b4);
sn(I4);
sn(S4);
sn(T4);
sn(G4);
sn(M4);
const Hg = 8,
    W4 = 5,
    Br = 10,
    D4 = 5,
    qu = 3,
    F4 = 1.5;
((Ao.length - 1) * Ao.length) / 2;
class vC {
    constructor(t, e, s = !1) {
        (this.debugMode = s), (this.width = t), (this.height = e);
        let o = 0;
        for (; t >= Hg && e >= Hg && ((t /= 2), (e /= 2), o++, o !== W4); );
        (this.numOctaves = o),
            (this.tensorCaches = {}),
            (this.kernelCaches = {});
    }
    // used in compiler
    detectImageData(t) {
        const e = new Uint8ClampedArray(4 * t.length);
        for (let o = 0; o < t.length; o++)
            (e[4 * o] = t[o]),
                (e[4 * o + 1] = t[o]),
                (e[4 * o + 2] = t[o]),
                (e[4 * o + 3] = 255);
        const s = new ImageData(e, this.width, this.height);
        return this.detect(s);
    }
    /**
     *
     * @param {tf.Tensor<tf.Rank>} inputImageT
     * @returns
     */
    detect(t) {
        let e = null;
        const s = [];
        for (let b = 0; b < this.numOctaves; b++) {
            let x, w;
            b === 0
                ? (x = this._applyFilter(t))
                : (x = this._downsampleBilinear(s[b - 1][s[b - 1].length - 1])),
                (w = this._applyFilter(x)),
                s.push([x, w]);
        }
        const o = [];
        for (let b = 0; b < this.numOctaves; b++) {
            let x = this._differenceImageBinomial(s[b][0], s[b][1]);
            o.push(x);
        }
        const r = [];
        for (let b = 1; b < this.numOctaves - 1; b++) {
            const x = this._buildExtremas(o[b - 1], o[b], o[b + 1]);
            r.push(x);
        }
        const i = this._applyPrune(r),
            a = this._computeLocalization(i, o),
            l = this._computeOrientationHistograms(a, s),
            c = this._smoothHistograms(l),
            u = this._computeExtremaAngles(c),
            d = this._computeExtremaFreak(s, a, u),
            h = this._computeFreakDescriptors(d),
            p = a.arraySync(),
            f = u.arraySync(),
            m = h.arraySync();
        this.debugMode &&
            (e = {
                pyramidImages: s.map((b) => b.map((x) => x.arraySync())),
                dogPyramidImages: o.map((b) => (b ? b.arraySync() : null)),
                extremasResults: r.map((b) => b.arraySync()),
                extremaAngles: u.arraySync(),
                prunedExtremas: i,
                localizedExtremas: a.arraySync(),
            }),
            s.forEach((b) => b.forEach((x) => x.dispose())),
            o.forEach((b) => b && b.dispose()),
            r.forEach((b) => b.dispose()),
            a.dispose(),
            l.dispose(),
            c.dispose(),
            u.dispose(),
            d.dispose(),
            h.dispose();
        const g = [];
        for (let b = 0; b < p.length; b++) {
            if (p[b][0] == 0) continue;
            const x = [];
            for (let N = 0; N < m[b].length; N += 4) {
                const R = m[b][N],
                    M = m[b][N + 1],
                    V = m[b][N + 2],
                    z = m[b][N + 3];
                let P = R * 16777216 + M * 65536 + V * 256 + z;
                x.push(P);
            }
            const w = p[b][1],
                y = p[b][2],
                v = p[b][3] * Math.pow(2, w) + Math.pow(2, w - 1) - 0.5,
                k = y * Math.pow(2, w) + Math.pow(2, w - 1) - 0.5,
                S = Math.pow(2, w);
            g.push({
                maxima: p[b][0] > 0,
                x: v,
                y: k,
                scale: S,
                angle: f[b],
                descriptors: x,
            });
        }
        return { featurePoints: g, debugExtra: e };
    }
    _computeFreakDescriptors(t) {
        if (!this.tensorCaches.computeFreakDescriptors) {
            const s = [],
                o = [];
            for (let a = 0; a < t.shape[1]; a++)
                for (let l = a + 1; l < t.shape[1]; l++) s.push(a), o.push(l);
            const r = $e(s, [s.length]).cast("int32"),
                i = $e(o, [o.length]).cast("int32");
            this.tensorCaches.computeFreakDescriptors = {
                positionT: hn(Xn([r, i], 1)),
            };
        }
        const { positionT: e } = this.tensorCaches.computeFreakDescriptors;
        return D(() =>
            Ot().runKernel("ComputeFreakDescriptors", {
                extremaFreaks: t,
                positionT: e,
            })
        );
    }
    _computeExtremaFreak(t, e, s) {
        this.tensorCaches._computeExtremaFreak ||
            D(() => {
                const i = $e(Ao);
                this.tensorCaches._computeExtremaFreak = {
                    freakPointsT: hn(i),
                };
            });
        const { freakPointsT: o } = this.tensorCaches._computeExtremaFreak,
            r = [];
        for (let i = 1; i < t.length; i++) r.push(t[i][1]);
        return D(() =>
            Ot().runKernel("ComputeExtremaFreak", {
                gaussianImagesT: r,
                prunedExtremas: e,
                prunedExtremasAngles: s,
                freakPointsT: o,
                pyramidImagesLength: t.length,
            })
        );
    }
    /**
     *
     * @param {tf.Tensor<tf.Rank>} histograms
     * @returns
     */
    _computeExtremaAngles(t) {
        return D(() =>
            Ot().runKernel("ComputeExtremaAngles", { histograms: t })
        );
    }
    // TODO: maybe can try just using average momentum, instead of histogram method. histogram might be overcomplicated
    /**
     *
     * @param {tf.Tensor<tf.Rank>} prunedExtremasT
     * @param {tf.Tensor<tf.Rank>[]} pyramidImagesT
     * @returns
     */
    _computeOrientationHistograms(t, e) {
        const s = [];
        for (let r = 1; r < e.length; r++) s.push(e[r][1]);
        this.tensorCaches.orientationHistograms ||
            D(() => {
                const r = -1 / (2 * qu * qu),
                    i = qu * F4,
                    a = Math.ceil(i),
                    l = [];
                for (let c = -a; c <= a; c++)
                    for (let u = -a; u <= a; u++) {
                        const d = u * u + c * c;
                        if (d <= i * i) {
                            const h = d * r;
                            let p =
                                (720 +
                                    h *
                                        (720 +
                                            h *
                                                (360 +
                                                    h *
                                                        (120 +
                                                            h *
                                                                (30 +
                                                                    h *
                                                                        (6 +
                                                                            h)))))) *
                                0.0013888888;
                            l.push([c, u, p]);
                        }
                    }
                this.tensorCaches.orientationHistograms = {
                    radialPropertiesT: hn($e(l, [l.length, 3])),
                };
            });
        const { radialPropertiesT: o } =
            this.tensorCaches.orientationHistograms;
        return D(() =>
            Ot().runKernel("ComputeOrientationHistograms", {
                gaussianImagesT: s,
                prunedExtremasT: t,
                radialPropertiesT: o,
                pyramidImagesLength: e.length,
            })
        );
    }
    // The histogram is smoothed with a Gaussian, with sigma = 1
    _smoothHistograms(t) {
        return D(() => Ot().runKernel("SmoothHistograms", { histograms: t }));
    }
    /**
     *
     * @param {number[][]} prunedExtremasList
     * @param {tf.Tensor<tf.Rank>[]} dogPyramidImagesT
     * @returns
     */
    _computeLocalization(t, e) {
        return D(() => {
            const o = Ot()
                    .runKernel("ComputeLocalization", {
                        prunedExtremasList: t,
                        dogPyramidImagesT: e,
                    })
                    .arraySync(),
                r = [];
            for (let a = 0; a < o.length; a++) {
                r.push([]);
                for (let l = 0; l < o[a].length; l++) r[a].push([]);
            }
            const i = [];
            for (let a = 0; a < t.length; a++)
                i[a] = [t[a][0], t[a][1], t[a][2], t[a][3]];
            for (let a = 0; a < i.length; a++) {
                if (i[a][0] === 0) continue;
                const l = o[a],
                    c = 0.5 * (l[1][2] - l[1][0]),
                    u = 0.5 * (l[2][1] - l[0][1]),
                    d = l[1][2] + l[1][0] - 2 * l[1][1],
                    h = l[2][1] + l[0][1] - 2 * l[1][1],
                    p = 0.25 * (l[0][0] + l[2][2] - l[0][2] - l[2][0]),
                    f = d * h - p * p,
                    m = (h * -c + -p * -u) / f,
                    g = (-p * -c + d * -u) / f,
                    b = i[a][2] + g,
                    x = i[a][3] + m;
                Math.abs(f) < 1e-4 || ((i[a][2] = b), (i[a][3] = x));
            }
            return $e(i, [i.length, i[0].length], "float32");
        });
    }
    // faster to do it in CPU
    // if we do in gpu, we probably need to use tf.topk(), which seems to be run in CPU anyway (no gpu operation for that)
    //  TODO: research adapative maximum supression method
    /**
     *
     * @param {tf.Tensor<tf.Rank>[]} extremasResultsT
     * @returns
     */
    _applyPrune(t) {
        const e = Br * Br,
            s = D4,
            o = [],
            r = [];
        for (let a = 0; a < e; a++) {
            r.push([]), o.push([]);
            for (let l = 0; l < s; l++) r[a].push([0, 0, 0, 0]), o[a].push(0);
        }
        D(() => {
            for (let a = 0; a < t.length; a++) {
                const l = Ot().runKernel("ExtremaReduction", {
                        extremasResultT: t[a],
                    }),
                    c = a + 1,
                    u = l.arraySync(),
                    d = l.shape[0],
                    h = l.shape[1],
                    p = (h * 2) / Br,
                    f = (d * 2) / Br;
                for (let m = 0; m < d; m++)
                    for (let g = 0; g < h; g++) {
                        const b = u[m][g];
                        if (b == 0) continue;
                        const x = b % 1e3,
                            w = Math.floor(Math.abs(b) / 1e3),
                            y = g * 2 + (w === 2 || w === 3 ? 1 : 0),
                            I = m * 2 + (w === 1 || w === 3 ? 1 : 0),
                            v = Math.floor(y / p),
                            S = Math.floor(I / f) * Br + v,
                            N = Math.abs(x);
                        let R = s;
                        for (; R >= 1 && N > o[S][R - 1]; ) R -= 1;
                        if (R < s) {
                            for (let M = s - 1; M >= R + 1; M--)
                                (o[S][M] = o[S][M - 1]),
                                    (r[S][M][0] = r[S][M - 1][0]),
                                    (r[S][M][1] = r[S][M - 1][1]),
                                    (r[S][M][2] = r[S][M - 1][2]),
                                    (r[S][M][3] = r[S][M - 1][3]);
                            (o[S][R] = N),
                                (r[S][R][0] = x),
                                (r[S][R][1] = c),
                                (r[S][R][2] = I),
                                (r[S][R][3] = y);
                        }
                    }
            }
        });
        const i = [];
        for (let a = 0; a < e; a++) for (let l = 0; l < s; l++) i.push(r[a][l]);
        return i;
    }
    _buildExtremas(t, e, s) {
        return D(() =>
            Ot().runKernel("BuildExtremas", { image0: t, image1: e, image2: s })
        );
    }
    /**
     *
     * @param {tf.Tensor<tf.Rank>} image1
     * @param {tf.Tensor<tf.Rank>} image2
     * @returns
     */
    _differenceImageBinomial(t, e) {
        return D(() => t.sub(e));
    }
    // 4th order binomail filter [1,4,6,4,1] X [1,4,6,4,1]
    _applyFilter(t) {
        return D(() => Ot().runKernel("BinomialFilter", { image: t }));
    }
    /* _upsampleBilinear(image, targetImage) {
  		const imageHeight = image.shape[0];
  		const imageWidth = image.shape[1];
  
  		const kernelKey = 'w' + imageWidth;
  		if (!this.kernelCaches.upsampleBilinear) {
  			this.kernelCaches.upsampleBilinear = {};
  		}
  
  		if (!this.kernelCaches.upsampleBilinear[kernelKey]) {
  			const kernel = {
  				variableNames: ['p'],
  				outputShape: [targetImage.shape[0], targetImage.shape[1]],
  				userCode: `
  	  void main() {
  		ivec2 coords = getOutputCoords();
  		int j = coords[0];
  		int i = coords[1];
  
  		float sj = 0.5 * float(j) - 0.25; 
  		float si = 0.5 * float(i) - 0.25;
  
  		float sj0 = floor(sj);
  		float sj1 = ceil(sj);
  		float si0 = floor(si);
  		float si1 = ceil(si);
  
  		int sj0I = int(sj0);
  		int sj1I = int(sj1);
  		int si0I = int(si0);
  		int si1I = int(si1);
  
  		float sum = 0.0;
  		sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);
  		sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);
  		sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);
  		sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);
  		setOutput(sum);
  	  }
  	`
  			};
  			this.kernelCaches.upsampleBilinear[kernelKey] = kernel;
  		}
  
  		return tf.tidy(() => {
  			const program = this.kernelCaches.upsampleBilinear[kernelKey];
  			return tf.engine().runKernel("UpsampleBilinear", { x: image, width: image.shape[1], height: image.shape[0] });//this._compileAndRun(program, [image]);
  		});
  	} */
    _downsampleBilinear(t) {
        return D(() => Ot().runKernel("DownsampleBilinear", { image: t }));
    }
    /**
     *
     * @param {tf.MathBackendWebGL.GPGPUProgram} program
     * @param {*} inputs
     * @returns
     */
    _compileAndRun(t, e) {
        const s = ps().compileAndRun(t, e);
        return Ot().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
    }
    _runWebGLProgram(t, e, s) {
        const o = ps().runWebGLProgram(t, e, s);
        return Ot().makeTensorFromDataId(o.dataId, o.shape, o.dtype);
    }
}
class V4 {
    constructor(t, e, s = !1) {
        (this.debugMode = s), (this.width = t), (this.height = e);
        let o = Math.min(t, e) / 2,
            r = Math.pow(2, Math.round(Math.log(o) / Math.log(2)));
        (this.cropSize = r),
            (this.detector = new vC(r, r, s)),
            (this.kernelCaches = {}),
            (this.lastRandomIndex = 4);
    }
    detect(t) {
        const e = Math.floor(this.height / 2 - this.cropSize / 2),
            s = Math.floor(this.width / 2 - this.cropSize / 2),
            o = this._detect(t, s, e);
        return (
            this.debugMode &&
                (o.debugExtra.crop = {
                    startX: s,
                    startY: e,
                    cropSize: this.cropSize,
                }),
            o
        );
    }
    detectMoving(t) {
        const e = this.lastRandomIndex % 3,
            s = Math.floor(this.lastRandomIndex / 3);
        let o = Math.floor(
                this.height / 2 - this.cropSize + (s * this.cropSize) / 2
            ),
            r = Math.floor(
                this.width / 2 - this.cropSize + (e * this.cropSize) / 2
            );
        return (
            r < 0 && (r = 0),
            o < 0 && (o = 0),
            r >= this.width - this.cropSize &&
                (r = this.width - this.cropSize - 1),
            o >= this.height - this.cropSize &&
                (o = this.height - this.cropSize - 1),
            (this.lastRandomIndex = (this.lastRandomIndex + 1) % 9),
            this._detect(t, r, o)
        );
    }
    _detect(t, e, s) {
        const o = t.slice([s, e], [this.cropSize, this.cropSize]),
            { featurePoints: r, debugExtra: i } = this.detector.detect(o);
        return (
            r.forEach((a) => {
                (a.x += e), (a.y += s);
            }),
            this.debugMode && (i.projectedImage = o.arraySync()),
            o.dispose(),
            { featurePoints: r, debugExtra: i }
        );
    }
}
const SC = ({ image: n, ratio: t }) => {
        const e = Math.round(n.width * t),
            s = Math.round(n.height * t),
            o = new Uint8Array(e * s);
        for (let r = 0; r < e; r++) {
            let i = Math.round((1 * r) / t),
                a = Math.round((1 * (r + 1)) / t) - 1;
            a >= n.width && (a = n.width - 1);
            for (let l = 0; l < s; l++) {
                let c = Math.round((1 * l) / t),
                    u = Math.round((1 * (l + 1)) / t) - 1;
                u >= n.height && (u = n.height - 1);
                let d = 0,
                    h = 0;
                for (let p = i; p <= a; p++)
                    for (let f = c; f <= u; f++)
                        (d += 1 * n.data[f * n.width + p]), (h += 1);
                o[l * e + r] = Math.floor(d / h);
            }
        }
        return { data: o, width: e, height: s };
    },
    z4 = 100,
    P4 = (n) => {
        const t = z4 / Math.min(n.width, n.height),
            e = [];
        let s = t;
        for (;;)
            if ((e.push(s), (s *= Math.pow(2, 1 / 3)), s >= 0.95)) {
                s = 1;
                break;
            }
        e.push(s), e.reverse();
        const o = [];
        for (let r = 0; r < e.length; r++)
            n.width * e[r],
                n.height * e[r],
                o.push(
                    Object.assign(SC({ image: n, ratio: e[r] }), {
                        scale: e[r],
                    })
                );
        return o;
    },
    A4 = (n) => {
        const t = Math.min(n.width, n.height),
            e = [],
            s = [];
        e.push(256 / t), e.push(128 / t);
        for (let o = 0; o < e.length; o++)
            s.push(
                Object.assign(SC({ image: n, ratio: e[o] }), { scale: e[o] })
            );
        return s;
    },
    O4 = (n) => {
        const { v1: t, v2: e } = n;
        let s = 0;
        for (let o = 0; o < t.length; o++) {
            let r = (t[o] ^ e[o]) >>> 0;
            s += X4(r);
        }
        return s;
    },
    X4 = (n) => {
        var t = n - ((n >> 1) & 1431655765);
        return (
            (t = ((t >> 2) & 858993459) + (t & 858993459)),
            (t = ((t >> 4) + t) & 252645135),
            (t = ((t >> 8) + t) & 16711935),
            (t = ((t >> 16) + t) & 65535),
            t
        );
    },
    K4 = 1234,
    Z4 = () => ({
        seed: K4,
        arrayShuffle(t) {
            const { arr: e, sampleSize: s } = t;
            for (let o = 0; o < s; o++) {
                this.seed = (214013 * this.seed + 2531011) % -2147483648;
                let r = (this.seed >> 16) & 32767;
                r = r % e.length;
                let i = e[o];
                (e[o] = e[r]), (e[r] = i);
            }
        },
        nextInt(t) {
            this.seed = (214013 * this.seed + 2531011) % -2147483648;
            let e = (this.seed >> 16) & 32767;
            return (e = e % t), e;
        },
    }),
    B4 = 16,
    H4 = 128,
    Bd = 8,
    _4 = (n) => {
        const { points: t, pointIndexes: e, randomizer: s } = n,
            o = [];
        for (let l = 0; l < e.length; l++) o.push(l);
        let r = Number.MAX_SAFE_INTEGER,
            i = -1;
        const a = [];
        for (let l = 0; l < H4; l++) {
            s.arrayShuffle({ arr: o, sampleSize: Bd });
            let c = 0;
            const u = [];
            for (let d = 0; d < e.length; d++) {
                let h = Number.MAX_SAFE_INTEGER;
                for (let p = 0; p < Bd; p++) {
                    const f = e[o[p]],
                        m = O4({
                            v1: t[e[d]].descriptors,
                            v2: t[f].descriptors,
                        });
                    m < h && ((u[d] = o[p]), (h = m));
                }
                c += h;
            }
            a.push(u), c < r && ((r = c), (i = l));
        }
        return a[i];
    },
    _g = ({ points: n }) => {
        const t = [];
        for (let o = 0; o < n.length; o++) t.push(o);
        const e = Z4();
        return {
            rootNode: kC({
                points: n,
                pointIndexes: t,
                centerPointIndex: null,
                randomizer: e,
            }),
        };
    },
    kC = (n) => {
        const {
            points: t,
            pointIndexes: e,
            centerPointIndex: s,
            randomizer: o,
        } = n;
        let r = !1;
        (e.length <= Bd || e.length <= B4) && (r = !0);
        const i = {};
        if (!r) {
            const l = _4({ points: t, pointIndexes: e, randomizer: o });
            for (let c = 0; c < l.length; c++)
                i[e[l[c]]] === void 0 && (i[e[l[c]]] = []),
                    i[e[l[c]]].push(e[c]);
        }
        Object.keys(i).length === 1 && (r = !0);
        const a = {
            centerPointIndex: s,
        };
        if (r) {
            (a.leaf = !0), (a.pointIndexes = []);
            for (let l = 0; l < e.length; l++) a.pointIndexes.push(e[l]);
            return a;
        }
        return (
            (a.leaf = !1),
            (a.children = []),
            Object.keys(i).forEach((l) => {
                a.children.push(
                    kC({
                        points: t,
                        pointIndexes: i[l],
                        centerPointIndex: l,
                        randomizer: o,
                    })
                );
            }),
            a
        );
    };
var fo = 4294967295;
function U4(n, t, e) {
    var s = e / 4294967296,
        o = e;
    n.setUint32(t, s), n.setUint32(t + 4, o);
}
function TC(n, t, e) {
    var s = Math.floor(e / 4294967296),
        o = e;
    n.setUint32(t, s), n.setUint32(t + 4, o);
}
function NC(n, t) {
    var e = n.getInt32(t),
        s = n.getUint32(t + 4);
    return e * 4294967296 + s;
}
function Y4(n, t) {
    var e = n.getUint32(t),
        s = n.getUint32(t + 4);
    return e * 4294967296 + s;
}
var td,
    ed,
    nd,
    Tu =
        (typeof process > "u" ||
            ((td = process == null ? void 0 : process.env) === null ||
            td === void 0
                ? void 0
                : td.TEXT_ENCODING) !== "never") &&
        typeof TextEncoder < "u" &&
        typeof TextDecoder < "u";
function Ug(n) {
    for (var t = n.length, e = 0, s = 0; s < t; ) {
        var o = n.charCodeAt(s++);
        if (o & 4294967168)
            if (!(o & 4294965248)) e += 2;
            else {
                if (o >= 55296 && o <= 56319 && s < t) {
                    var r = n.charCodeAt(s);
                    (r & 64512) === 56320 &&
                        (++s, (o = ((o & 1023) << 10) + (r & 1023) + 65536));
                }
                o & 4294901760 ? (e += 4) : (e += 3);
            }
        else {
            e++;
            continue;
        }
    }
    return e;
}
function Q4(n, t, e) {
    for (var s = n.length, o = e, r = 0; r < s; ) {
        var i = n.charCodeAt(r++);
        if (i & 4294967168)
            if (!(i & 4294965248)) t[o++] = ((i >> 6) & 31) | 192;
            else {
                if (i >= 55296 && i <= 56319 && r < s) {
                    var a = n.charCodeAt(r);
                    (a & 64512) === 56320 &&
                        (++r, (i = ((i & 1023) << 10) + (a & 1023) + 65536));
                }
                i & 4294901760
                    ? ((t[o++] = ((i >> 18) & 7) | 240),
                      (t[o++] = ((i >> 12) & 63) | 128),
                      (t[o++] = ((i >> 6) & 63) | 128))
                    : ((t[o++] = ((i >> 12) & 15) | 224),
                      (t[o++] = ((i >> 6) & 63) | 128));
            }
        else {
            t[o++] = i;
            continue;
        }
        t[o++] = (i & 63) | 128;
    }
}
var oi = Tu ? new TextEncoder() : void 0,
    J4 = Tu
        ? typeof process < "u" &&
          ((ed = process == null ? void 0 : process.env) === null ||
          ed === void 0
              ? void 0
              : ed.TEXT_ENCODING) !== "force"
            ? 200
            : 0
        : fo;
function j4(n, t, e) {
    t.set(oi.encode(n), e);
}
function q4(n, t, e) {
    oi.encodeInto(n, t.subarray(e));
}
var tY = oi != null && oi.encodeInto ? q4 : j4,
    eY = 4096;
function RC(n, t, e) {
    for (var s = t, o = s + e, r = [], i = ""; s < o; ) {
        var a = n[s++];
        if (!(a & 128)) r.push(a);
        else if ((a & 224) === 192) {
            var l = n[s++] & 63;
            r.push(((a & 31) << 6) | l);
        } else if ((a & 240) === 224) {
            var l = n[s++] & 63,
                c = n[s++] & 63;
            r.push(((a & 31) << 12) | (l << 6) | c);
        } else if ((a & 248) === 240) {
            var l = n[s++] & 63,
                c = n[s++] & 63,
                u = n[s++] & 63,
                d = ((a & 7) << 18) | (l << 12) | (c << 6) | u;
            d > 65535 &&
                ((d -= 65536),
                r.push(((d >>> 10) & 1023) | 55296),
                (d = 56320 | (d & 1023))),
                r.push(d);
        } else r.push(a);
        r.length >= eY &&
            ((i += String.fromCharCode.apply(String, r)), (r.length = 0));
    }
    return r.length > 0 && (i += String.fromCharCode.apply(String, r)), i;
}
var nY = Tu ? new TextDecoder() : null,
    sY = Tu
        ? typeof process < "u" &&
          ((nd = process == null ? void 0 : process.env) === null ||
          nd === void 0
              ? void 0
              : nd.TEXT_DECODER) !== "force"
            ? 200
            : 0
        : fo;
function oY(n, t, e) {
    var s = n.subarray(t, t + e);
    return nY.decode(s);
}
var sl =
        /** @class */
        /* @__PURE__ */ (function () {
            function n(t, e) {
                (this.type = t), (this.data = e);
            }
            return n;
        })(),
    rY = /* @__PURE__ */ (function () {
        var n = function (t, e) {
            return (
                (n =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (s, o) {
                            s.__proto__ = o;
                        }) ||
                    function (s, o) {
                        for (var r in o)
                            Object.prototype.hasOwnProperty.call(o, r) &&
                                (s[r] = o[r]);
                    }),
                n(t, e)
            );
        };
        return function (t, e) {
            if (typeof e != "function" && e !== null)
                throw new TypeError(
                    "Class extends value " +
                        String(e) +
                        " is not a constructor or null"
                );
            n(t, e);
            function s() {
                this.constructor = t;
            }
            t.prototype =
                e === null
                    ? Object.create(e)
                    : ((s.prototype = e.prototype), new s());
        };
    })(),
    Yn =
        /** @class */
        (function (n) {
            rY(t, n);
            function t(e) {
                var s = n.call(this, e) || this,
                    o = Object.create(t.prototype);
                return (
                    Object.setPrototypeOf(s, o),
                    Object.defineProperty(s, "name", {
                        configurable: !0,
                        enumerable: !1,
                        value: t.name,
                    }),
                    s
                );
            }
            return t;
        })(Error),
    iY = -1,
    aY = 4294967296 - 1,
    lY = 17179869184 - 1;
function cY(n) {
    var t = n.sec,
        e = n.nsec;
    if (t >= 0 && e >= 0 && t <= lY)
        if (e === 0 && t <= aY) {
            var s = new Uint8Array(4),
                o = new DataView(s.buffer);
            return o.setUint32(0, t), s;
        } else {
            var r = t / 4294967296,
                i = t & 4294967295,
                s = new Uint8Array(8),
                o = new DataView(s.buffer);
            return o.setUint32(0, (e << 2) | (r & 3)), o.setUint32(4, i), s;
        }
    else {
        var s = new Uint8Array(12),
            o = new DataView(s.buffer);
        return o.setUint32(0, e), TC(o, 4, t), s;
    }
}
function uY(n) {
    var t = n.getTime(),
        e = Math.floor(t / 1e3),
        s = (t - e * 1e3) * 1e6,
        o = Math.floor(s / 1e9);
    return {
        sec: e + o,
        nsec: s - o * 1e9,
    };
}
function dY(n) {
    if (n instanceof Date) {
        var t = uY(n);
        return cY(t);
    } else return null;
}
function hY(n) {
    var t = new DataView(n.buffer, n.byteOffset, n.byteLength);
    switch (n.byteLength) {
        case 4: {
            var e = t.getUint32(0),
                s = 0;
            return { sec: e, nsec: s };
        }
        case 8: {
            var o = t.getUint32(0),
                r = t.getUint32(4),
                e = (o & 3) * 4294967296 + r,
                s = o >>> 2;
            return { sec: e, nsec: s };
        }
        case 12: {
            var e = NC(t, 4),
                s = t.getUint32(0);
            return { sec: e, nsec: s };
        }
        default:
            throw new Yn(
                "Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(
                    n.length
                )
            );
    }
}
function pY(n) {
    var t = hY(n);
    return new Date(t.sec * 1e3 + t.nsec / 1e6);
}
var fY = {
        type: iY,
        encode: dY,
        decode: pY,
    },
    $C =
        /** @class */
        (function () {
            function n() {
                (this.builtInEncoders = []),
                    (this.builtInDecoders = []),
                    (this.encoders = []),
                    (this.decoders = []),
                    this.register(fY);
            }
            return (
                (n.prototype.register = function (t) {
                    var e = t.type,
                        s = t.encode,
                        o = t.decode;
                    if (e >= 0) (this.encoders[e] = s), (this.decoders[e] = o);
                    else {
                        var r = 1 + e;
                        (this.builtInEncoders[r] = s),
                            (this.builtInDecoders[r] = o);
                    }
                }),
                (n.prototype.tryToEncode = function (t, e) {
                    for (var s = 0; s < this.builtInEncoders.length; s++) {
                        var o = this.builtInEncoders[s];
                        if (o != null) {
                            var r = o(t, e);
                            if (r != null) {
                                var i = -1 - s;
                                return new sl(i, r);
                            }
                        }
                    }
                    for (var s = 0; s < this.encoders.length; s++) {
                        var o = this.encoders[s];
                        if (o != null) {
                            var r = o(t, e);
                            if (r != null) {
                                var i = s;
                                return new sl(i, r);
                            }
                        }
                    }
                    return t instanceof sl ? t : null;
                }),
                (n.prototype.decode = function (t, e, s) {
                    var o =
                        e < 0 ? this.builtInDecoders[-1 - e] : this.decoders[e];
                    return o ? o(t, e, s) : new sl(e, t);
                }),
                (n.defaultCodec = new n()),
                n
            );
        })();
function Zl(n) {
    return n instanceof Uint8Array
        ? n
        : ArrayBuffer.isView(n)
        ? new Uint8Array(n.buffer, n.byteOffset, n.byteLength)
        : n instanceof ArrayBuffer
        ? new Uint8Array(n)
        : Uint8Array.from(n);
}
function mY(n) {
    if (n instanceof ArrayBuffer) return new DataView(n);
    var t = Zl(n);
    return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
var gY = 100,
    bY = 2048,
    xY =
        /** @class */
        (function () {
            function n(t, e, s, o, r, i, a, l) {
                t === void 0 && (t = $C.defaultCodec),
                    e === void 0 && (e = void 0),
                    s === void 0 && (s = gY),
                    o === void 0 && (o = bY),
                    r === void 0 && (r = !1),
                    i === void 0 && (i = !1),
                    a === void 0 && (a = !1),
                    l === void 0 && (l = !1),
                    (this.extensionCodec = t),
                    (this.context = e),
                    (this.maxDepth = s),
                    (this.initialBufferSize = o),
                    (this.sortKeys = r),
                    (this.forceFloat32 = i),
                    (this.ignoreUndefined = a),
                    (this.forceIntegerToFloat = l),
                    (this.pos = 0),
                    (this.view = new DataView(
                        new ArrayBuffer(this.initialBufferSize)
                    )),
                    (this.bytes = new Uint8Array(this.view.buffer));
            }
            return (
                (n.prototype.reinitializeState = function () {
                    this.pos = 0;
                }),
                (n.prototype.encodeSharedRef = function (t) {
                    return (
                        this.reinitializeState(),
                        this.doEncode(t, 1),
                        this.bytes.subarray(0, this.pos)
                    );
                }),
                (n.prototype.encode = function (t) {
                    return (
                        this.reinitializeState(),
                        this.doEncode(t, 1),
                        this.bytes.slice(0, this.pos)
                    );
                }),
                (n.prototype.doEncode = function (t, e) {
                    if (e > this.maxDepth)
                        throw new Error("Too deep objects in depth ".concat(e));
                    t == null
                        ? this.encodeNil()
                        : typeof t == "boolean"
                        ? this.encodeBoolean(t)
                        : typeof t == "number"
                        ? this.encodeNumber(t)
                        : typeof t == "string"
                        ? this.encodeString(t)
                        : this.encodeObject(t, e);
                }),
                (n.prototype.ensureBufferSizeToWrite = function (t) {
                    var e = this.pos + t;
                    this.view.byteLength < e && this.resizeBuffer(e * 2);
                }),
                (n.prototype.resizeBuffer = function (t) {
                    var e = new ArrayBuffer(t),
                        s = new Uint8Array(e),
                        o = new DataView(e);
                    s.set(this.bytes), (this.view = o), (this.bytes = s);
                }),
                (n.prototype.encodeNil = function () {
                    this.writeU8(192);
                }),
                (n.prototype.encodeBoolean = function (t) {
                    t === !1 ? this.writeU8(194) : this.writeU8(195);
                }),
                (n.prototype.encodeNumber = function (t) {
                    Number.isSafeInteger(t) && !this.forceIntegerToFloat
                        ? t >= 0
                            ? t < 128
                                ? this.writeU8(t)
                                : t < 256
                                ? (this.writeU8(204), this.writeU8(t))
                                : t < 65536
                                ? (this.writeU8(205), this.writeU16(t))
                                : t < 4294967296
                                ? (this.writeU8(206), this.writeU32(t))
                                : (this.writeU8(207), this.writeU64(t))
                            : t >= -32
                            ? this.writeU8(224 | (t + 32))
                            : t >= -128
                            ? (this.writeU8(208), this.writeI8(t))
                            : t >= -32768
                            ? (this.writeU8(209), this.writeI16(t))
                            : t >= -2147483648
                            ? (this.writeU8(210), this.writeI32(t))
                            : (this.writeU8(211), this.writeI64(t))
                        : this.forceFloat32
                        ? (this.writeU8(202), this.writeF32(t))
                        : (this.writeU8(203), this.writeF64(t));
                }),
                (n.prototype.writeStringHeader = function (t) {
                    if (t < 32) this.writeU8(160 + t);
                    else if (t < 256) this.writeU8(217), this.writeU8(t);
                    else if (t < 65536) this.writeU8(218), this.writeU16(t);
                    else if (t < 4294967296)
                        this.writeU8(219), this.writeU32(t);
                    else
                        throw new Error(
                            "Too long string: ".concat(t, " bytes in UTF-8")
                        );
                }),
                (n.prototype.encodeString = function (t) {
                    var e = 5,
                        s = t.length;
                    if (s > J4) {
                        var o = Ug(t);
                        this.ensureBufferSizeToWrite(e + o),
                            this.writeStringHeader(o),
                            tY(t, this.bytes, this.pos),
                            (this.pos += o);
                    } else {
                        var o = Ug(t);
                        this.ensureBufferSizeToWrite(e + o),
                            this.writeStringHeader(o),
                            Q4(t, this.bytes, this.pos),
                            (this.pos += o);
                    }
                }),
                (n.prototype.encodeObject = function (t, e) {
                    var s = this.extensionCodec.tryToEncode(t, this.context);
                    if (s != null) this.encodeExtension(s);
                    else if (Array.isArray(t)) this.encodeArray(t, e);
                    else if (ArrayBuffer.isView(t)) this.encodeBinary(t);
                    else if (typeof t == "object") this.encodeMap(t, e);
                    else
                        throw new Error(
                            "Unrecognized object: ".concat(
                                Object.prototype.toString.apply(t)
                            )
                        );
                }),
                (n.prototype.encodeBinary = function (t) {
                    var e = t.byteLength;
                    if (e < 256) this.writeU8(196), this.writeU8(e);
                    else if (e < 65536) this.writeU8(197), this.writeU16(e);
                    else if (e < 4294967296)
                        this.writeU8(198), this.writeU32(e);
                    else throw new Error("Too large binary: ".concat(e));
                    var s = Zl(t);
                    this.writeU8a(s);
                }),
                (n.prototype.encodeArray = function (t, e) {
                    var s = t.length;
                    if (s < 16) this.writeU8(144 + s);
                    else if (s < 65536) this.writeU8(220), this.writeU16(s);
                    else if (s < 4294967296)
                        this.writeU8(221), this.writeU32(s);
                    else throw new Error("Too large array: ".concat(s));
                    for (var o = 0, r = t; o < r.length; o++) {
                        var i = r[o];
                        this.doEncode(i, e + 1);
                    }
                }),
                (n.prototype.countWithoutUndefined = function (t, e) {
                    for (var s = 0, o = 0, r = e; o < r.length; o++) {
                        var i = r[o];
                        t[i] !== void 0 && s++;
                    }
                    return s;
                }),
                (n.prototype.encodeMap = function (t, e) {
                    var s = Object.keys(t);
                    this.sortKeys && s.sort();
                    var o = this.ignoreUndefined
                        ? this.countWithoutUndefined(t, s)
                        : s.length;
                    if (o < 16) this.writeU8(128 + o);
                    else if (o < 65536) this.writeU8(222), this.writeU16(o);
                    else if (o < 4294967296)
                        this.writeU8(223), this.writeU32(o);
                    else throw new Error("Too large map object: ".concat(o));
                    for (var r = 0, i = s; r < i.length; r++) {
                        var a = i[r],
                            l = t[a];
                        (this.ignoreUndefined && l === void 0) ||
                            (this.encodeString(a), this.doEncode(l, e + 1));
                    }
                }),
                (n.prototype.encodeExtension = function (t) {
                    var e = t.data.length;
                    if (e === 1) this.writeU8(212);
                    else if (e === 2) this.writeU8(213);
                    else if (e === 4) this.writeU8(214);
                    else if (e === 8) this.writeU8(215);
                    else if (e === 16) this.writeU8(216);
                    else if (e < 256) this.writeU8(199), this.writeU8(e);
                    else if (e < 65536) this.writeU8(200), this.writeU16(e);
                    else if (e < 4294967296)
                        this.writeU8(201), this.writeU32(e);
                    else
                        throw new Error(
                            "Too large extension object: ".concat(e)
                        );
                    this.writeI8(t.type), this.writeU8a(t.data);
                }),
                (n.prototype.writeU8 = function (t) {
                    this.ensureBufferSizeToWrite(1),
                        this.view.setUint8(this.pos, t),
                        this.pos++;
                }),
                (n.prototype.writeU8a = function (t) {
                    var e = t.length;
                    this.ensureBufferSizeToWrite(e),
                        this.bytes.set(t, this.pos),
                        (this.pos += e);
                }),
                (n.prototype.writeI8 = function (t) {
                    this.ensureBufferSizeToWrite(1),
                        this.view.setInt8(this.pos, t),
                        this.pos++;
                }),
                (n.prototype.writeU16 = function (t) {
                    this.ensureBufferSizeToWrite(2),
                        this.view.setUint16(this.pos, t),
                        (this.pos += 2);
                }),
                (n.prototype.writeI16 = function (t) {
                    this.ensureBufferSizeToWrite(2),
                        this.view.setInt16(this.pos, t),
                        (this.pos += 2);
                }),
                (n.prototype.writeU32 = function (t) {
                    this.ensureBufferSizeToWrite(4),
                        this.view.setUint32(this.pos, t),
                        (this.pos += 4);
                }),
                (n.prototype.writeI32 = function (t) {
                    this.ensureBufferSizeToWrite(4),
                        this.view.setInt32(this.pos, t),
                        (this.pos += 4);
                }),
                (n.prototype.writeF32 = function (t) {
                    this.ensureBufferSizeToWrite(4),
                        this.view.setFloat32(this.pos, t),
                        (this.pos += 4);
                }),
                (n.prototype.writeF64 = function (t) {
                    this.ensureBufferSizeToWrite(8),
                        this.view.setFloat64(this.pos, t),
                        (this.pos += 8);
                }),
                (n.prototype.writeU64 = function (t) {
                    this.ensureBufferSizeToWrite(8),
                        U4(this.view, this.pos, t),
                        (this.pos += 8);
                }),
                (n.prototype.writeI64 = function (t) {
                    this.ensureBufferSizeToWrite(8),
                        TC(this.view, this.pos, t),
                        (this.pos += 8);
                }),
                n
            );
        })(),
    yY = {};
function wY(n, t) {
    t === void 0 && (t = yY);
    var e = new xY(
        t.extensionCodec,
        t.context,
        t.maxDepth,
        t.initialBufferSize,
        t.sortKeys,
        t.forceFloat32,
        t.ignoreUndefined,
        t.forceIntegerToFloat
    );
    return e.encodeSharedRef(n);
}
function sd(n) {
    return ""
        .concat(n < 0 ? "-" : "", "0x")
        .concat(Math.abs(n).toString(16).padStart(2, "0"));
}
var IY = 16,
    CY = 16,
    vY =
        /** @class */
        (function () {
            function n(t, e) {
                t === void 0 && (t = IY),
                    e === void 0 && (e = CY),
                    (this.maxKeyLength = t),
                    (this.maxLengthPerKey = e),
                    (this.hit = 0),
                    (this.miss = 0),
                    (this.caches = []);
                for (var s = 0; s < this.maxKeyLength; s++)
                    this.caches.push([]);
            }
            return (
                (n.prototype.canBeCached = function (t) {
                    return t > 0 && t <= this.maxKeyLength;
                }),
                (n.prototype.find = function (t, e, s) {
                    var o = this.caches[s - 1];
                    t: for (var r = 0, i = o; r < i.length; r++) {
                        for (var a = i[r], l = a.bytes, c = 0; c < s; c++)
                            if (l[c] !== t[e + c]) continue t;
                        return a.str;
                    }
                    return null;
                }),
                (n.prototype.store = function (t, e) {
                    var s = this.caches[t.length - 1],
                        o = { bytes: t, str: e };
                    s.length >= this.maxLengthPerKey
                        ? (s[(Math.random() * s.length) | 0] = o)
                        : s.push(o);
                }),
                (n.prototype.decode = function (t, e, s) {
                    var o = this.find(t, e, s);
                    if (o != null) return this.hit++, o;
                    this.miss++;
                    var r = RC(t, e, s),
                        i = Uint8Array.prototype.slice.call(t, e, e + s);
                    return this.store(i, r), r;
                }),
                n
            );
        })(),
    SY = function (n, t, e, s) {
        function o(r) {
            return r instanceof e
                ? r
                : new e(function (i) {
                      i(r);
                  });
        }
        return new (e || (e = Promise))(function (r, i) {
            function a(u) {
                try {
                    c(s.next(u));
                } catch (d) {
                    i(d);
                }
            }
            function l(u) {
                try {
                    c(s.throw(u));
                } catch (d) {
                    i(d);
                }
            }
            function c(u) {
                u.done ? r(u.value) : o(u.value).then(a, l);
            }
            c((s = s.apply(n, t || [])).next());
        });
    },
    od = function (n, t) {
        var e = {
                label: 0,
                sent: function () {
                    if (r[0] & 1) throw r[1];
                    return r[1];
                },
                trys: [],
                ops: [],
            },
            s,
            o,
            r,
            i;
        return (
            (i = { next: a(0), throw: a(1), return: a(2) }),
            typeof Symbol == "function" &&
                (i[Symbol.iterator] = function () {
                    return this;
                }),
            i
        );
        function a(c) {
            return function (u) {
                return l([c, u]);
            };
        }
        function l(c) {
            if (s) throw new TypeError("Generator is already executing.");
            for (; e; )
                try {
                    if (
                        ((s = 1),
                        o &&
                            (r =
                                c[0] & 2
                                    ? o.return
                                    : c[0]
                                    ? o.throw ||
                                      ((r = o.return) && r.call(o), 0)
                                    : o.next) &&
                            !(r = r.call(o, c[1])).done)
                    )
                        return r;
                    switch (((o = 0), r && (c = [c[0] & 2, r.value]), c[0])) {
                        case 0:
                        case 1:
                            r = c;
                            break;
                        case 4:
                            return e.label++, { value: c[1], done: !1 };
                        case 5:
                            e.label++, (o = c[1]), (c = [0]);
                            continue;
                        case 7:
                            (c = e.ops.pop()), e.trys.pop();
                            continue;
                        default:
                            if (
                                ((r = e.trys),
                                !(r = r.length > 0 && r[r.length - 1]) &&
                                    (c[0] === 6 || c[0] === 2))
                            ) {
                                e = 0;
                                continue;
                            }
                            if (
                                c[0] === 3 &&
                                (!r || (c[1] > r[0] && c[1] < r[3]))
                            ) {
                                e.label = c[1];
                                break;
                            }
                            if (c[0] === 6 && e.label < r[1]) {
                                (e.label = r[1]), (r = c);
                                break;
                            }
                            if (r && e.label < r[2]) {
                                (e.label = r[2]), e.ops.push(c);
                                break;
                            }
                            r[2] && e.ops.pop(), e.trys.pop();
                            continue;
                    }
                    c = t.call(n, e);
                } catch (u) {
                    (c = [6, u]), (o = 0);
                } finally {
                    s = r = 0;
                }
            if (c[0] & 5) throw c[1];
            return { value: c[0] ? c[1] : void 0, done: !0 };
        }
    },
    Yg = function (n) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var t = n[Symbol.asyncIterator],
            e;
        return t
            ? t.call(n)
            : ((n =
                  typeof __values == "function"
                      ? __values(n)
                      : n[Symbol.iterator]()),
              (e = {}),
              s("next"),
              s("throw"),
              s("return"),
              (e[Symbol.asyncIterator] = function () {
                  return this;
              }),
              e);
        function s(r) {
            e[r] =
                n[r] &&
                function (i) {
                    return new Promise(function (a, l) {
                        (i = n[r](i)), o(a, l, i.done, i.value);
                    });
                };
        }
        function o(r, i, a, l) {
            Promise.resolve(l).then(function (c) {
                r({ value: c, done: a });
            }, i);
        }
    },
    hr = function (n) {
        return this instanceof hr ? ((this.v = n), this) : new hr(n);
    },
    kY = function (n, t, e) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var s = e.apply(n, t || []),
            o,
            r = [];
        return (
            (o = {}),
            i("next"),
            i("throw"),
            i("return"),
            (o[Symbol.asyncIterator] = function () {
                return this;
            }),
            o
        );
        function i(h) {
            s[h] &&
                (o[h] = function (p) {
                    return new Promise(function (f, m) {
                        r.push([h, p, f, m]) > 1 || a(h, p);
                    });
                });
        }
        function a(h, p) {
            try {
                l(s[h](p));
            } catch (f) {
                d(r[0][3], f);
            }
        }
        function l(h) {
            h.value instanceof hr
                ? Promise.resolve(h.value.v).then(c, u)
                : d(r[0][2], h);
        }
        function c(h) {
            a("next", h);
        }
        function u(h) {
            a("throw", h);
        }
        function d(h, p) {
            h(p), r.shift(), r.length && a(r[0][0], r[0][1]);
        }
    },
    TY = function (n) {
        var t = typeof n;
        return t === "string" || t === "number";
    },
    Hr = -1,
    cm = new DataView(new ArrayBuffer(0)),
    NY = new Uint8Array(cm.buffer),
    Hd = (function () {
        try {
            cm.getInt8(0);
        } catch (n) {
            return n.constructor;
        }
        throw new Error("never reached");
    })(),
    Qg = new Hd("Insufficient data"),
    RY = new vY(),
    $Y =
        /** @class */
        (function () {
            function n(t, e, s, o, r, i, a, l) {
                t === void 0 && (t = $C.defaultCodec),
                    e === void 0 && (e = void 0),
                    s === void 0 && (s = fo),
                    o === void 0 && (o = fo),
                    r === void 0 && (r = fo),
                    i === void 0 && (i = fo),
                    a === void 0 && (a = fo),
                    l === void 0 && (l = RY),
                    (this.extensionCodec = t),
                    (this.context = e),
                    (this.maxStrLength = s),
                    (this.maxBinLength = o),
                    (this.maxArrayLength = r),
                    (this.maxMapLength = i),
                    (this.maxExtLength = a),
                    (this.keyDecoder = l),
                    (this.totalPos = 0),
                    (this.pos = 0),
                    (this.view = cm),
                    (this.bytes = NY),
                    (this.headByte = Hr),
                    (this.stack = []);
            }
            return (
                (n.prototype.reinitializeState = function () {
                    (this.totalPos = 0),
                        (this.headByte = Hr),
                        (this.stack.length = 0);
                }),
                (n.prototype.setBuffer = function (t) {
                    (this.bytes = Zl(t)),
                        (this.view = mY(this.bytes)),
                        (this.pos = 0);
                }),
                (n.prototype.appendBuffer = function (t) {
                    if (this.headByte === Hr && !this.hasRemaining(1))
                        this.setBuffer(t);
                    else {
                        var e = this.bytes.subarray(this.pos),
                            s = Zl(t),
                            o = new Uint8Array(e.length + s.length);
                        o.set(e), o.set(s, e.length), this.setBuffer(o);
                    }
                }),
                (n.prototype.hasRemaining = function (t) {
                    return this.view.byteLength - this.pos >= t;
                }),
                (n.prototype.createExtraByteError = function (t) {
                    var e = this,
                        s = e.view,
                        o = e.pos;
                    return new RangeError(
                        "Extra "
                            .concat(s.byteLength - o, " of ")
                            .concat(s.byteLength, " byte(s) found at buffer[")
                            .concat(t, "]")
                    );
                }),
                (n.prototype.decode = function (t) {
                    this.reinitializeState(), this.setBuffer(t);
                    var e = this.doDecodeSync();
                    if (this.hasRemaining(1))
                        throw this.createExtraByteError(this.pos);
                    return e;
                }),
                (n.prototype.decodeMulti = function (t) {
                    return od(this, function (e) {
                        switch (e.label) {
                            case 0:
                                this.reinitializeState(),
                                    this.setBuffer(t),
                                    (e.label = 1);
                            case 1:
                                return this.hasRemaining(1)
                                    ? [4, this.doDecodeSync()]
                                    : [3, 3];
                            case 2:
                                return e.sent(), [3, 1];
                            case 3:
                                return [
                                    2,
                                    /*return*/
                                ];
                        }
                    });
                }),
                (n.prototype.decodeAsync = function (t) {
                    var e, s, o, r;
                    return SY(this, void 0, void 0, function () {
                        var i, a, l, c, u, d, h, p;
                        return od(this, function (f) {
                            switch (f.label) {
                                case 0:
                                    (i = !1), (f.label = 1);
                                case 1:
                                    f.trys.push([1, 6, 7, 12]),
                                        (e = Yg(t)),
                                        (f.label = 2);
                                case 2:
                                    return [4, e.next()];
                                case 3:
                                    if (((s = f.sent()), !!s.done))
                                        return [3, 5];
                                    if (((l = s.value), i))
                                        throw this.createExtraByteError(
                                            this.totalPos
                                        );
                                    this.appendBuffer(l);
                                    try {
                                        (a = this.doDecodeSync()), (i = !0);
                                    } catch (m) {
                                        if (!(m instanceof Hd)) throw m;
                                    }
                                    (this.totalPos += this.pos), (f.label = 4);
                                case 4:
                                    return [3, 2];
                                case 5:
                                    return [3, 12];
                                case 6:
                                    return (
                                        (c = f.sent()),
                                        (o = { error: c }),
                                        [3, 12]
                                    );
                                case 7:
                                    return (
                                        f.trys.push([7, , 10, 11]),
                                        s && !s.done && (r = e.return)
                                            ? [4, r.call(e)]
                                            : [3, 9]
                                    );
                                case 8:
                                    f.sent(), (f.label = 9);
                                case 9:
                                    return [3, 11];
                                case 10:
                                    if (o) throw o.error;
                                    return [
                                        7,
                                        /*endfinally*/
                                    ];
                                case 11:
                                    return [
                                        7,
                                        /*endfinally*/
                                    ];
                                case 12:
                                    if (i) {
                                        if (this.hasRemaining(1))
                                            throw this.createExtraByteError(
                                                this.totalPos
                                            );
                                        return [2, a];
                                    }
                                    throw (
                                        ((u = this),
                                        (d = u.headByte),
                                        (h = u.pos),
                                        (p = u.totalPos),
                                        new RangeError(
                                            "Insufficient data in parsing "
                                                .concat(sd(d), " at ")
                                                .concat(p, " (")
                                                .concat(
                                                    h,
                                                    " in the current buffer)"
                                                )
                                        ))
                                    );
                            }
                        });
                    });
                }),
                (n.prototype.decodeArrayStream = function (t) {
                    return this.decodeMultiAsync(t, !0);
                }),
                (n.prototype.decodeStream = function (t) {
                    return this.decodeMultiAsync(t, !1);
                }),
                (n.prototype.decodeMultiAsync = function (t, e) {
                    return kY(this, arguments, function () {
                        var o, r, i, a, l, c, u, d, h;
                        return od(this, function (p) {
                            switch (p.label) {
                                case 0:
                                    (o = e), (r = -1), (p.label = 1);
                                case 1:
                                    p.trys.push([1, 13, 14, 19]),
                                        (i = Yg(t)),
                                        (p.label = 2);
                                case 2:
                                    return [4, hr(i.next())];
                                case 3:
                                    if (((a = p.sent()), !!a.done))
                                        return [3, 12];
                                    if (((l = a.value), e && r === 0))
                                        throw this.createExtraByteError(
                                            this.totalPos
                                        );
                                    this.appendBuffer(l),
                                        o &&
                                            ((r = this.readArraySize()),
                                            (o = !1),
                                            this.complete()),
                                        (p.label = 4);
                                case 4:
                                    p.trys.push([4, 9, , 10]), (p.label = 5);
                                case 5:
                                    return [4, hr(this.doDecodeSync())];
                                case 6:
                                    return [4, p.sent()];
                                case 7:
                                    return (
                                        p.sent(), --r === 0 ? [3, 8] : [3, 5]
                                    );
                                case 8:
                                    return [3, 10];
                                case 9:
                                    if (((c = p.sent()), !(c instanceof Hd)))
                                        throw c;
                                    return [3, 10];
                                case 10:
                                    (this.totalPos += this.pos), (p.label = 11);
                                case 11:
                                    return [3, 2];
                                case 12:
                                    return [3, 19];
                                case 13:
                                    return (
                                        (u = p.sent()),
                                        (d = { error: u }),
                                        [3, 19]
                                    );
                                case 14:
                                    return (
                                        p.trys.push([14, , 17, 18]),
                                        a && !a.done && (h = i.return)
                                            ? [4, hr(h.call(i))]
                                            : [3, 16]
                                    );
                                case 15:
                                    p.sent(), (p.label = 16);
                                case 16:
                                    return [3, 18];
                                case 17:
                                    if (d) throw d.error;
                                    return [
                                        7,
                                        /*endfinally*/
                                    ];
                                case 18:
                                    return [
                                        7,
                                        /*endfinally*/
                                    ];
                                case 19:
                                    return [
                                        2,
                                        /*return*/
                                    ];
                            }
                        });
                    });
                }),
                (n.prototype.doDecodeSync = function () {
                    t: for (;;) {
                        var t = this.readHeadByte(),
                            e = void 0;
                        if (t >= 224) e = t - 256;
                        else if (t < 192)
                            if (t < 128) e = t;
                            else if (t < 144) {
                                var s = t - 128;
                                if (s !== 0) {
                                    this.pushMapState(s), this.complete();
                                    continue t;
                                } else e = {};
                            } else if (t < 160) {
                                var s = t - 144;
                                if (s !== 0) {
                                    this.pushArrayState(s), this.complete();
                                    continue t;
                                } else e = [];
                            } else {
                                var o = t - 160;
                                e = this.decodeUtf8String(o, 0);
                            }
                        else if (t === 192) e = null;
                        else if (t === 194) e = !1;
                        else if (t === 195) e = !0;
                        else if (t === 202) e = this.readF32();
                        else if (t === 203) e = this.readF64();
                        else if (t === 204) e = this.readU8();
                        else if (t === 205) e = this.readU16();
                        else if (t === 206) e = this.readU32();
                        else if (t === 207) e = this.readU64();
                        else if (t === 208) e = this.readI8();
                        else if (t === 209) e = this.readI16();
                        else if (t === 210) e = this.readI32();
                        else if (t === 211) e = this.readI64();
                        else if (t === 217) {
                            var o = this.lookU8();
                            e = this.decodeUtf8String(o, 1);
                        } else if (t === 218) {
                            var o = this.lookU16();
                            e = this.decodeUtf8String(o, 2);
                        } else if (t === 219) {
                            var o = this.lookU32();
                            e = this.decodeUtf8String(o, 4);
                        } else if (t === 220) {
                            var s = this.readU16();
                            if (s !== 0) {
                                this.pushArrayState(s), this.complete();
                                continue t;
                            } else e = [];
                        } else if (t === 221) {
                            var s = this.readU32();
                            if (s !== 0) {
                                this.pushArrayState(s), this.complete();
                                continue t;
                            } else e = [];
                        } else if (t === 222) {
                            var s = this.readU16();
                            if (s !== 0) {
                                this.pushMapState(s), this.complete();
                                continue t;
                            } else e = {};
                        } else if (t === 223) {
                            var s = this.readU32();
                            if (s !== 0) {
                                this.pushMapState(s), this.complete();
                                continue t;
                            } else e = {};
                        } else if (t === 196) {
                            var s = this.lookU8();
                            e = this.decodeBinary(s, 1);
                        } else if (t === 197) {
                            var s = this.lookU16();
                            e = this.decodeBinary(s, 2);
                        } else if (t === 198) {
                            var s = this.lookU32();
                            e = this.decodeBinary(s, 4);
                        } else if (t === 212) e = this.decodeExtension(1, 0);
                        else if (t === 213) e = this.decodeExtension(2, 0);
                        else if (t === 214) e = this.decodeExtension(4, 0);
                        else if (t === 215) e = this.decodeExtension(8, 0);
                        else if (t === 216) e = this.decodeExtension(16, 0);
                        else if (t === 199) {
                            var s = this.lookU8();
                            e = this.decodeExtension(s, 1);
                        } else if (t === 200) {
                            var s = this.lookU16();
                            e = this.decodeExtension(s, 2);
                        } else if (t === 201) {
                            var s = this.lookU32();
                            e = this.decodeExtension(s, 4);
                        } else
                            throw new Yn(
                                "Unrecognized type byte: ".concat(sd(t))
                            );
                        this.complete();
                        for (var r = this.stack; r.length > 0; ) {
                            var i = r[r.length - 1];
                            if (i.type === 0)
                                if (
                                    ((i.array[i.position] = e),
                                    i.position++,
                                    i.position === i.size)
                                )
                                    r.pop(), (e = i.array);
                                else continue t;
                            else if (i.type === 1) {
                                if (!TY(e))
                                    throw new Yn(
                                        "The type of key must be string or number but " +
                                            typeof e
                                    );
                                if (e === "__proto__")
                                    throw new Yn(
                                        "The key __proto__ is not allowed"
                                    );
                                (i.key = e), (i.type = 2);
                                continue t;
                            } else if (
                                ((i.map[i.key] = e),
                                i.readCount++,
                                i.readCount === i.size)
                            )
                                r.pop(), (e = i.map);
                            else {
                                (i.key = null), (i.type = 1);
                                continue t;
                            }
                        }
                        return e;
                    }
                }),
                (n.prototype.readHeadByte = function () {
                    return (
                        this.headByte === Hr && (this.headByte = this.readU8()),
                        this.headByte
                    );
                }),
                (n.prototype.complete = function () {
                    this.headByte = Hr;
                }),
                (n.prototype.readArraySize = function () {
                    var t = this.readHeadByte();
                    switch (t) {
                        case 220:
                            return this.readU16();
                        case 221:
                            return this.readU32();
                        default: {
                            if (t < 160) return t - 144;
                            throw new Yn(
                                "Unrecognized array type byte: ".concat(sd(t))
                            );
                        }
                    }
                }),
                (n.prototype.pushMapState = function (t) {
                    if (t > this.maxMapLength)
                        throw new Yn(
                            "Max length exceeded: map length ("
                                .concat(t, ") > maxMapLengthLength (")
                                .concat(this.maxMapLength, ")")
                        );
                    this.stack.push({
                        type: 1,
                        size: t,
                        key: null,
                        readCount: 0,
                        map: {},
                    });
                }),
                (n.prototype.pushArrayState = function (t) {
                    if (t > this.maxArrayLength)
                        throw new Yn(
                            "Max length exceeded: array length ("
                                .concat(t, ") > maxArrayLength (")
                                .concat(this.maxArrayLength, ")")
                        );
                    this.stack.push({
                        type: 0,
                        size: t,
                        array: new Array(t),
                        position: 0,
                    });
                }),
                (n.prototype.decodeUtf8String = function (t, e) {
                    var s;
                    if (t > this.maxStrLength)
                        throw new Yn(
                            "Max length exceeded: UTF-8 byte length ("
                                .concat(t, ") > maxStrLength (")
                                .concat(this.maxStrLength, ")")
                        );
                    if (this.bytes.byteLength < this.pos + e + t) throw Qg;
                    var o = this.pos + e,
                        r;
                    return (
                        this.stateIsMapKey() &&
                        !((s = this.keyDecoder) === null || s === void 0) &&
                        s.canBeCached(t)
                            ? (r = this.keyDecoder.decode(this.bytes, o, t))
                            : t > sY
                            ? (r = oY(this.bytes, o, t))
                            : (r = RC(this.bytes, o, t)),
                        (this.pos += e + t),
                        r
                    );
                }),
                (n.prototype.stateIsMapKey = function () {
                    if (this.stack.length > 0) {
                        var t = this.stack[this.stack.length - 1];
                        return t.type === 1;
                    }
                    return !1;
                }),
                (n.prototype.decodeBinary = function (t, e) {
                    if (t > this.maxBinLength)
                        throw new Yn(
                            "Max length exceeded: bin length ("
                                .concat(t, ") > maxBinLength (")
                                .concat(this.maxBinLength, ")")
                        );
                    if (!this.hasRemaining(t + e)) throw Qg;
                    var s = this.pos + e,
                        o = this.bytes.subarray(s, s + t);
                    return (this.pos += e + t), o;
                }),
                (n.prototype.decodeExtension = function (t, e) {
                    if (t > this.maxExtLength)
                        throw new Yn(
                            "Max length exceeded: ext length ("
                                .concat(t, ") > maxExtLength (")
                                .concat(this.maxExtLength, ")")
                        );
                    var s = this.view.getInt8(this.pos + e),
                        o = this.decodeBinary(
                            t,
                            e + 1
                            /* extType */
                        );
                    return this.extensionCodec.decode(o, s, this.context);
                }),
                (n.prototype.lookU8 = function () {
                    return this.view.getUint8(this.pos);
                }),
                (n.prototype.lookU16 = function () {
                    return this.view.getUint16(this.pos);
                }),
                (n.prototype.lookU32 = function () {
                    return this.view.getUint32(this.pos);
                }),
                (n.prototype.readU8 = function () {
                    var t = this.view.getUint8(this.pos);
                    return this.pos++, t;
                }),
                (n.prototype.readI8 = function () {
                    var t = this.view.getInt8(this.pos);
                    return this.pos++, t;
                }),
                (n.prototype.readU16 = function () {
                    var t = this.view.getUint16(this.pos);
                    return (this.pos += 2), t;
                }),
                (n.prototype.readI16 = function () {
                    var t = this.view.getInt16(this.pos);
                    return (this.pos += 2), t;
                }),
                (n.prototype.readU32 = function () {
                    var t = this.view.getUint32(this.pos);
                    return (this.pos += 4), t;
                }),
                (n.prototype.readI32 = function () {
                    var t = this.view.getInt32(this.pos);
                    return (this.pos += 4), t;
                }),
                (n.prototype.readU64 = function () {
                    var t = Y4(this.view, this.pos);
                    return (this.pos += 8), t;
                }),
                (n.prototype.readI64 = function () {
                    var t = NC(this.view, this.pos);
                    return (this.pos += 8), t;
                }),
                (n.prototype.readF32 = function () {
                    var t = this.view.getFloat32(this.pos);
                    return (this.pos += 4), t;
                }),
                (n.prototype.readF64 = function () {
                    var t = this.view.getFloat64(this.pos);
                    return (this.pos += 8), t;
                }),
                n
            );
        })(),
    GY = {};
function EY(n, t) {
    t === void 0 && (t = GY);
    var e = new $Y(
        t.extensionCodec,
        t.context,
        t.maxStrLength,
        t.maxBinLength,
        t.maxArrayLength,
        t.maxMapLength,
        t.maxExtLength
    );
    return e.decode(n);
}
const Jg = 2;
class LY {
    constructor() {
        this.data = null;
    }
    // input html Images
    compileImageTargets(t, e) {
        return new Promise(async (s, o) => {
            const r = [];
            for (let c = 0; c < t.length; c++) {
                const u = t[c],
                    h = this.createProcessCanvas(u).getContext("2d");
                h.drawImage(u, 0, 0, u.width, u.height);
                const p = h.getImageData(0, 0, u.width, u.height),
                    f = new Uint8Array(u.width * u.height);
                for (let g = 0; g < f.length; g++) {
                    const b = g * 4;
                    f[g] = Math.floor(
                        (p.data[b] + p.data[b + 1] + p.data[b + 2]) / 3
                    );
                }
                const m = { data: f, height: u.height, width: u.width };
                r.push(m);
            }
            const i = 50 / r.length;
            let a = 0;
            this.data = [];
            for (let c = 0; c < r.length; c++) {
                const u = r[c],
                    d = P4(u),
                    h = i / d.length,
                    p = await MY(d, () => {
                        (a += h), e(a);
                    });
                this.data.push({
                    targetImage: u,
                    imageList: d,
                    matchingData: p,
                });
            }
            for (let c = 0; c < r.length; c++) {
                const u = A4(r[c]);
                this.data[c].trackingImageList = u;
            }
            const l = await this.compileTrack({
                progressCallback: e,
                targetImages: r,
                basePercent: 50,
            });
            for (let c = 0; c < r.length; c++) this.data[c].trackingData = l[c];
            s(this.data);
        });
    }
    // not exporting imageList because too large. rebuild this using targetImage
    exportData() {
        const t = [];
        for (let s = 0; s < this.data.length; s++)
            t.push({
                //targetImage: this.data[i].targetImage,
                targetImage: {
                    width: this.data[s].targetImage.width,
                    height: this.data[s].targetImage.height,
                },
                trackingData: this.data[s].trackingData,
                matchingData: this.data[s].matchingData,
            });
        return wY({
            v: Jg,
            dataList: t,
        });
    }
    importData(t) {
        const e = EY(new Uint8Array(t));
        if (!e.v || e.v !== Jg)
            return (
                console.error(
                    "Your compiled .mind might be outdated. Please recompile"
                ),
                []
            );
        const { dataList: s } = e;
        this.data = [];
        for (let o = 0; o < s.length; o++)
            this.data.push({
                targetImage: s[o].targetImage,
                trackingData: s[o].trackingData,
                matchingData: s[o].matchingData,
            });
        return this.data;
    }
    createProcessCanvas(t) {
        console.warn("missing createProcessCanvas implementation");
    }
    compileTrack({ progressCallback: t, targetImages: e, basePercent: s }) {
        console.warn("missing compileTrack implementation");
    }
}
const MY = async (n, t) => {
        const e = [];
        for (let s = 0; s < n.length; s++) {
            const o = n[s],
                r = new vC(o.width, o.height);
            await su(),
                D(() => {
                    const i = $e(o.data, [o.data.length], "float32").reshape([
                            o.height,
                            o.width,
                        ]),
                        { featurePoints: a } = r.detect(i),
                        l = a.filter((h) => h.maxima),
                        c = a.filter((h) => !h.maxima),
                        u = _g({ points: l }),
                        d = _g({ points: c });
                    e.push({
                        maximaPoints: l,
                        minimaPoints: c,
                        maximaPointsCluster: u,
                        minimaPointsCluster: d,
                        width: o.width,
                        height: o.height,
                        scale: o.scale,
                    }),
                        t(s);
                });
        }
        return e;
    },
    GC =
        "KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2NsYXNzIHp7Y29uc3RydWN0b3Iocyx0LG8pe3RoaXMuY3Vtc3VtPVtdO2ZvcihsZXQgZT0wO2U8bztlKyspe3RoaXMuY3Vtc3VtLnB1c2goW10pO2ZvcihsZXQgbj0wO248dDtuKyspdGhpcy5jdW1zdW1bZV0ucHVzaCgwKX10aGlzLmN1bXN1bVswXVswXT1zWzBdO2ZvcihsZXQgZT0xO2U8dDtlKyspdGhpcy5jdW1zdW1bMF1bZV09dGhpcy5jdW1zdW1bMF1bZS0xXStzW2VdO2ZvcihsZXQgZT0xO2U8bztlKyspdGhpcy5jdW1zdW1bZV1bMF09dGhpcy5jdW1zdW1bZS0xXVswXStzW2UqdF07Zm9yKGxldCBlPTE7ZTxvO2UrKylmb3IobGV0IG49MTtuPHQ7bisrKXRoaXMuY3Vtc3VtW2VdW25dPXNbZSp0K25dK3RoaXMuY3Vtc3VtW2UtMV1bbl0rdGhpcy5jdW1zdW1bZV1bbi0xXS10aGlzLmN1bXN1bVtlLTFdW24tMV19cXVlcnkocyx0LG8sZSl7bGV0IG49dGhpcy5jdW1zdW1bZV1bb107cmV0dXJuIHQ+MCYmKG4tPXRoaXMuY3Vtc3VtW3QtMV1bb10pLHM+MCYmKG4tPXRoaXMuY3Vtc3VtW2VdW3MtMV0pLHM+MCYmdD4wJiYobis9dGhpcy5jdW1zdW1bdC0xXVtzLTFdKSxufX1jb25zdCBDPTEwLGI9MixNPTYsRj01LEk9Ljk1LEw9LjksTz0uMixaPTgsTj0yNCoyLzMsVT1yPT57Y29uc3R7ZGF0YTpzLHdpZHRoOnQsaGVpZ2h0Om8sc2NhbGU6ZX09cixuPVt0Km9dO2ZvcihsZXQgaT0wO2k8bi5sZW5ndGg7aSsrKW5baV09ITE7Y29uc3QgYT1uZXcgRmxvYXQzMkFycmF5KHMubGVuZ3RoKTtmb3IobGV0IGk9MDtpPHQ7aSsrKWFbaV09LTEsYVt0KihvLTEpK2ldPS0xO2ZvcihsZXQgaT0wO2k8bztpKyspYVtpKnRdPS0xLGFbaSp0K3QtMV09LTE7Zm9yKGxldCBpPTE7aTx0LTE7aSsrKWZvcihsZXQgcD0xO3A8by0xO3ArKyl7bGV0IGY9aSt0KnAsaD0wLGM9MDtmb3IobGV0IHU9LTE7dTw9MTt1KyspaCs9c1tmK3QqdSsxXS1zW2YrdCp1LTFdLGMrPXNbZit0K3VdLXNbZi10K3VdO2gvPTMqMjU2LGMvPTMqMjU2LGFbZl09TWF0aC5zcXJ0KChoKmgrYypjKS8yKX1jb25zdCBnPW5ldyBVaW50MzJBcnJheSgxZTMpO2ZvcihsZXQgaT0wO2k8MWUzO2krKylnW2ldPTA7Y29uc3QgZD1bLTEsMSwtdCx0XTtmb3IobGV0IGk9MTtpPHQtMTtpKyspZm9yKGxldCBwPTE7cDxvLTE7cCsrKXtsZXQgZj1pK3QqcCxoPSEwO2ZvcihsZXQgYz0wO2M8ZC5sZW5ndGg7YysrKWlmKGFbZl08PWFbZitkW2NdXSl7aD0hMTticmVha31pZihoKXtsZXQgYz1NYXRoLmZsb29yKGFbZl0qMWUzKTtjPjk5OSYmKGM9OTk5KSxjPDAmJihjPTApLGdbY10rPTEsbltmXT0hMH19Y29uc3Qgdz0uMDIqdCpvO2xldCBqPTk5OSxFPTA7Zm9yKDtqPj0wJiYoRSs9Z1tqXSwhKEU+dykpOylqLS07Zm9yKGxldCBpPTA7aTxuLmxlbmd0aDtpKyspbltpXSYmYVtpXSoxZTM8aiYmKG5baV09ITEpO2NvbnN0IGw9W107Zm9yKGxldCBpPTA7aTxzLmxlbmd0aDtpKyspbFtpXT1zW2ldKnNbaV07Y29uc3QgUz1uZXcgeihzLHQsbyksRD1uZXcgeihsLHQsbyksaz1uZXcgRmxvYXQzMkFycmF5KHMubGVuZ3RoKTtmb3IobGV0IGk9MDtpPHQ7aSsrKWZvcihsZXQgcD0wO3A8bztwKyspe2NvbnN0IGY9cCp0K2k7aWYoIW5bZl0pe2tbZl09MTtjb250aW51ZX1jb25zdCBoPVAoe2ltYWdlOnIsY3g6aSxjeTpwLHNkVGhyZXNoOkYsaW1hZ2VEYXRhQ3Vtc3VtOlMsaW1hZ2VEYXRhU3FyQ3Vtc3VtOkR9KTtpZihoPT09bnVsbCl7a1tmXT0xO2NvbnRpbnVlfWxldCBjPS0xO2ZvcihsZXQgdT0tQzt1PD1DO3UrKyl7Zm9yKGxldCBtPS1DO208PUM7bSsrKXtpZihtKm0rdSp1PD1iKmIpY29udGludWU7Y29uc3QgeD1SKHtpbWFnZTpyLGN4OmkrbSxjeTpwK3UsdmxlbjpoLHR4OmksdHk6cCxpbWFnZURhdGFDdW1zdW06UyxpbWFnZURhdGFTcXJDdW1zdW06RH0pO2lmKHghPT1udWxsJiZ4PmMmJihjPXgsYz5JKSlicmVha31pZihjPkkpYnJlYWt9a1tmXT1jfXJldHVybiBWKHtpbWFnZTpyLGZlYXR1cmVNYXA6ayx0ZW1wbGF0ZVNpemU6TSxzZWFyY2hTaXplOmIsb2NjU2l6ZTpOLG1heFNpbVRocmVzaDpMLG1pblNpbVRocmVzaDpPLHNkVGhyZXNoOlosaW1hZ2VEYXRhQ3Vtc3VtOlMsaW1hZ2VEYXRhU3FyQ3Vtc3VtOkR9KX0sVj1yPT57bGV0e2ltYWdlOnMsZmVhdHVyZU1hcDp0LHRlbXBsYXRlU2l6ZTpvLHNlYXJjaFNpemU6ZSxvY2NTaXplOm4sbWF4U2ltVGhyZXNoOmEsbWluU2ltVGhyZXNoOmcsc2RUaHJlc2g6ZCxpbWFnZURhdGFDdW1zdW06dyxpbWFnZURhdGFTcXJDdW1zdW06an09cjtjb25zdHtkYXRhOkUsd2lkdGg6bCxoZWlnaHQ6UyxzY2FsZTpEfT1zO249TWF0aC5mbG9vcihNYXRoLm1pbihzLndpZHRoLHMuaGVpZ2h0KS8xMCk7Y29uc3Qgaz0obyoyKzEpKjMsQT1NYXRoLmZsb29yKGwvayksaT1NYXRoLmZsb29yKFMvayk7bGV0IHA9TWF0aC5mbG9vcihsL24pKk1hdGguZmxvb3IoUy9uKStBKmk7Y29uc3QgZj1bXSxoPW5ldyBGbG9hdDMyQXJyYXkoRS5sZW5ndGgpO2ZvcihsZXQgdT0wO3U8aC5sZW5ndGg7dSsrKWhbdV09dFt1XTtsZXQgYz0wO2Zvcig7YzxwOyl7bGV0IHU9YSxtPS0xLHg9LTE7Zm9yKGxldCB5PTA7eTxTO3krKylmb3IobGV0IFQ9MDtUPGw7VCsrKWhbeSpsK1RdPHUmJih1PWhbeSpsK1RdLG09VCx4PXkpO2lmKG09PT0tMSlicmVhaztjb25zdCB2PVAoe2ltYWdlOnMsY3g6bSxjeTp4LHNkVGhyZXNoOjAsaW1hZ2VEYXRhQ3Vtc3VtOncsaW1hZ2VEYXRhU3FyQ3Vtc3VtOmp9KTtpZih2PT09bnVsbCl7aFt4KmwrbV09MTtjb250aW51ZX1pZih2LyhvKjIrMSk8ZCl7aFt4KmwrbV09MTtjb250aW51ZX1sZXQgcT0xLF89LTE7Zm9yKGxldCB5PS1lO3k8PWU7eSsrKXtmb3IobGV0IFQ9LWU7VDw9ZTtUKyspe2lmKFQqVCt5Knk+ZSplfHxUPT09MCYmeT09PTApY29udGludWU7Y29uc3QgSD1SKHtpbWFnZTpzLHZsZW46dixjeDptK1QsY3k6eCt5LHR4Om0sdHk6eCxpbWFnZURhdGFDdW1zdW06dyxpbWFnZURhdGFTcXJDdW1zdW06an0pO2lmKEghPT1udWxsJiYoSDxxJiYocT1ILHE8ZyYmcTx1KXx8SD5fJiYoXz1ILF8+Ljk5KSkpYnJlYWt9aWYocTxnJiZxPHV8fF8+Ljk5KWJyZWFrfWlmKHE8ZyYmcTx1fHxfPi45OSl7aFt4KmwrbV09MTtjb250aW51ZX1mLnB1c2goe3g6bSx5Onh9KSxjKz0xO2ZvcihsZXQgeT0tbjt5PD1uO3krKylmb3IobGV0IFQ9LW47VDw9bjtUKyspeCt5PDB8fHgreT49U3x8bStUPDB8fG0rVD49bHx8KGhbKHgreSkqbCsobStUKV09MSl9cmV0dXJuIGZ9LFA9KHtpbWFnZTpyLGN4OnMsY3k6dCxzZFRocmVzaDpvLGltYWdlRGF0YUN1bXN1bTplLGltYWdlRGF0YVNxckN1bXN1bTpufSk9PntpZihzLU08MHx8cytNPj1yLndpZHRofHx0LU08MHx8dCtNPj1yLmhlaWdodClyZXR1cm4gbnVsbDtjb25zdCBhPTIqTSsxLGc9YSphO2xldCBkPWUucXVlcnkocy1NLHQtTSxzK00sdCtNKTtkLz1nO2xldCB3PW4ucXVlcnkocy1NLHQtTSxzK00sdCtNKTtyZXR1cm4gdy09MipkKmUucXVlcnkocy1NLHQtTSxzK00sdCtNKSx3Kz1nKmQqZCx3L2c8bypvP251bGw6KHc9TWF0aC5zcXJ0KHcpLHcpfSxSPXI9Pntjb25zdHtpbWFnZTpzLGN4OnQsY3k6byx2bGVuOmUsdHg6bix0eTphLGltYWdlRGF0YUN1bXN1bTpnLGltYWdlRGF0YVNxckN1bXN1bTpkfT1yLHtkYXRhOncsd2lkdGg6aixoZWlnaHQ6RX09cyxsPU07aWYodC1sPDB8fHQrbD49anx8by1sPDB8fG8rbD49RSlyZXR1cm4gbnVsbDtjb25zdCBTPTIqbCsxO2xldCBEPWcucXVlcnkodC1sLG8tbCx0K2wsbytsKSxrPWQucXVlcnkodC1sLG8tbCx0K2wsbytsKSxBPTAsaT0oby1sKSpqKyh0LWwpLHA9KGEtbCkqaisobi1sKSxmPWotUztmb3IobGV0IG09MDttPFM7bSsrKXtmb3IobGV0IHg9MDt4PFM7eCsrKUErPXdbaV0qd1twXSxpKz0xLHArPTE7aSs9ZixwKz1mfWxldCBoPWcucXVlcnkobi1sLGEtbCxuK2wsYStsKTtoLz1TKlMsQS09aCpEO2xldCBjPWstRCpELyhTKlMpO3JldHVybiBjPT0wP251bGw6KGM9TWF0aC5zcXJ0KGMpLDEqQS8oZSpjKSl9LFc9KHIscyk9Pntjb25zdCB0PVtdO2ZvcihsZXQgbz0wO288ci5sZW5ndGg7bysrKXtjb25zdCBlPXJbb10sbj1VKGUpLGE9e2RhdGE6ZS5kYXRhLHNjYWxlOmUuc2NhbGUsd2lkdGg6ZS53aWR0aCxoZWlnaHQ6ZS5oZWlnaHQscG9pbnRzOm59O3QucHVzaChhKSxzKG8pfXJldHVybiB0fSxYPSh7aW1hZ2U6cixyYXRpbzpzfSk9Pntjb25zdCB0PU1hdGgucm91bmQoci53aWR0aCpzKSxvPU1hdGgucm91bmQoci5oZWlnaHQqcyksZT1uZXcgVWludDhBcnJheSh0Km8pO2ZvcihsZXQgbj0wO248dDtuKyspe2xldCBhPU1hdGgucm91bmQoMSpuL3MpLGc9TWF0aC5yb3VuZCgxKihuKzEpL3MpLTE7Zz49ci53aWR0aCYmKGc9ci53aWR0aC0xKTtmb3IobGV0IGQ9MDtkPG87ZCsrKXtsZXQgdz1NYXRoLnJvdW5kKDEqZC9zKSxqPU1hdGgucm91bmQoMSooZCsxKS9zKS0xO2o+PXIuaGVpZ2h0JiYoaj1yLmhlaWdodC0xKTtsZXQgRT0wLGw9MDtmb3IobGV0IFM9YTtTPD1nO1MrKylmb3IobGV0IEQ9dztEPD1qO0QrKylFKz0xKnIuZGF0YVtEKnIud2lkdGgrU10sbCs9MTtlW2QqdCtuXT1NYXRoLmZsb29yKEUvbCl9fXJldHVybntkYXRhOmUsd2lkdGg6dCxoZWlnaHQ6b319LFk9cj0+e2NvbnN0IHM9TWF0aC5taW4oci53aWR0aCxyLmhlaWdodCksdD1bXSxvPVtdO3QucHVzaCgyNTYvcyksdC5wdXNoKDEyOC9zKTtmb3IobGV0IGU9MDtlPHQubGVuZ3RoO2UrKylvLnB1c2goT2JqZWN0LmFzc2lnbihYKHtpbWFnZTpyLHJhdGlvOnRbZV19KSx7c2NhbGU6dFtlXX0pKTtyZXR1cm4gb307b25tZXNzYWdlPXI9Pntjb25zdHtkYXRhOnN9PXI7aWYocy50eXBlPT09ImNvbXBpbGUiKXtjb25zdHt0YXJnZXRJbWFnZXM6dH09cyxvPTEwMC90Lmxlbmd0aDtsZXQgZT0wO2NvbnN0IG49W107Zm9yKGxldCBhPTA7YTx0Lmxlbmd0aDthKyspe2NvbnN0IGc9dFthXSxkPVkoZyksdz1vL2QubGVuZ3RoLGo9VyhkLEU9PntlKz13LHBvc3RNZXNzYWdlKHt0eXBlOiJwcm9ncmVzcyIscGVyY2VudDplfSl9KTtuLnB1c2goail9cG9zdE1lc3NhZ2Uoe3R5cGU6ImNvbXBpbGVEb25lIixsaXN0Om59KX19fSkoKTsK",
    jg =
        typeof window < "u" &&
        window.Blob &&
        new Blob([atob(GC)], { type: "text/javascript;charset=utf-8" });
function WY(n) {
    let t;
    try {
        if (
            ((t = jg && (window.URL || window.webkitURL).createObjectURL(jg)),
            !t)
        )
            throw "";
        const e = new Worker(t, {
            name: n == null ? void 0 : n.name,
        });
        return (
            e.addEventListener("error", () => {
                (window.URL || window.webkitURL).revokeObjectURL(t);
            }),
            e
        );
    } catch {
        return new Worker("data:application/javascript;base64," + GC, {
            name: n == null ? void 0 : n.name,
        });
    } finally {
        t && (window.URL || window.webkitURL).revokeObjectURL(t);
    }
}
class DY extends LY {
    createProcessCanvas(t) {
        const e = document.createElement("canvas");
        return (e.width = t.width), (e.height = t.height), e;
    }
    compileTrack({ progressCallback: t, targetImages: e, basePercent: s }) {
        return new Promise((o, r) => {
            const i = new WY();
            (i.onmessage = (a) => {
                a.data.type === "progress"
                    ? t(s + (a.data.percent * s) / 100)
                    : a.data.type === "compileDone" && o(a.data.list);
            }),
                i.postMessage({ type: "compile", targetImages: e });
        });
    }
}
class FY {
    constructor(t, e) {
        (this.width = t), (this.height = e), (this.texShape = [e, t]);
        const s = document.createElement("canvas").getContext("2d");
        (s.canvas.width = t),
            (s.canvas.height = e),
            (this.context = s),
            (this.program = this.buildProgram(t, e));
        const o = ps();
        (this.tempPixelHandle = o.makeTensorInfo(this.texShape, "float32")),
            (o.texData.get(this.tempPixelHandle.dataId).usage = 2);
    }
    // old method
    _loadInput(t) {
        return D(() => {
            let e = P0(t);
            return (e = e.mean(2)), e;
        });
    }
    // input is instance of HTMLVideoElement or HTMLImageElement
    loadInput(t) {
        const e = this.context;
        if (
            (e.clearRect(
                0,
                0,
                this.context.canvas.width,
                this.context.canvas.height
            ),
            t.width === this.height && t.height === this.width)
        ) {
            let i = this.context.canvas.width / 2,
                a = this.context.canvas.height / 2,
                l = 90;
            e.save(),
                e.translate(i, a),
                e.rotate((l * Math.PI) / 180),
                e.drawImage(t, -t.width / 2, -t.height / 2),
                e.restore();
        } else this.context.drawImage(t, 0, 0, t.width, t.height);
        const o = ps();
        return (
            o.gpgpu.uploadPixelDataToTexture(
                o.getTexture(this.tempPixelHandle.dataId),
                this.context.canvas
            ),
            this._compileAndRun(this.program, [this.tempPixelHandle])
        );
    }
    buildProgram(t, e) {
        const s =
            F().getNumber("WEBGL_VERSION") === 2 ? "texture" : "texture2D";
        return {
            variableNames: ["A"],
            outputShape: this.texShape,
            userCode: `
	void main() {
	  ivec2 coords = getOutputCoords();
	  int texR = coords[0];
	  int texC = coords[1];
	  vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${t}.0, ${e}.0);

	  vec4 values = ${s}(A, uv);
	  setOutput((0.299 * values.r + 0.587 * values.g + 0.114 * values.b) * 255.0);
	}
      `,
        };
    }
    _compileAndRun(t, e) {
        const s = ps().compileAndRun(t, e);
        return Ot().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
    }
    _runWebGLProgram(t, e, s) {
        const o = ps().runWebGLProgram(t, e, s);
        return Ot().makeTensorFromDataId(o.dataId, o.shape, o.dtype);
    }
}
const rd = { memory: wl, nextFrame: su },
    VY = 1e-3,
    zY = 1e3,
    PY = 5,
    AY = 5;
class QQ {
    constructor({
        inputWidth: t,
        inputHeight: e,
        onUpdate: s = null,
        debugMode: o = !1,
        maxTrack: r = 1,
        warmupTolerance: i = null,
        missTolerance: a = null,
        filterMinCF: l = null,
        filterBeta: c = null,
    }) {
        (this.inputWidth = t),
            (this.inputHeight = e),
            (this.maxTrack = r),
            (this.filterMinCF = l === null ? VY : l),
            (this.filterBeta = c === null ? zY : c),
            (this.warmupTolerance = i === null ? PY : i),
            (this.missTolerance = a === null ? AY : a),
            (this.cropDetector = new V4(this.inputWidth, this.inputHeight, o)),
            (this.inputLoader = new FY(this.inputWidth, this.inputHeight)),
            (this.markerDimensions = null),
            (this.onUpdate = s),
            (this.debugMode = o),
            (this.processingVideo = !1),
            (this.interestedTargetIndex = -1),
            (this.trackingStates = []);
        const u = 10,
            d = 1e5,
            h = (45 * Math.PI) / 180,
            p = this.inputHeight / 2 / Math.tan(h / 2);
        (this.projectionTransform = [
            [p, 0, this.inputWidth / 2],
            [0, p, this.inputHeight / 2],
            [0, 0, 1],
        ]),
            (this.projectionMatrix = this._glProjectionMatrix({
                projectionTransform: this.projectionTransform,
                width: this.inputWidth,
                height: this.inputHeight,
                near: u,
                far: d,
            })),
            (this.worker = new A5()),
            (this.workerMatchDone = null),
            (this.workerTrackDone = null),
            (this.worker.onmessage = (f) => {
                f.data.type === "matchDone" &&
                    this.workerMatchDone !== null &&
                    this.workerMatchDone(f.data),
                    f.data.type === "trackUpdateDone" &&
                        this.workerTrackDone !== null &&
                        this.workerTrackDone(f.data);
            });
    }
    showTFStats() {
        console.log(rd.memory().numTensors), console.table(rd.memory());
    }
    addImageTargets(t) {
        return new Promise(async (e, s) => {
            const r = await (await fetch(t)).arrayBuffer(),
                i = this.addImageTargetsFromBuffer(r);
            e(i);
        });
    }
    addImageTargetsFromBuffer(t) {
        const s = new DY().importData(t),
            o = [],
            r = [],
            i = [];
        for (let a = 0; a < s.length; a++)
            r.push(s[a].matchingData),
                o.push(s[a].trackingData),
                i.push([s[a].targetImage.width, s[a].targetImage.height]);
        return (
            (this.tracker = new Q5(
                i,
                o,
                this.projectionTransform,
                this.inputWidth,
                this.inputHeight,
                this.debugMode
            )),
            this.worker.postMessage({
                type: "setup",
                inputWidth: this.inputWidth,
                inputHeight: this.inputHeight,
                projectionTransform: this.projectionTransform,
                debugMode: this.debugMode,
                matchingDataList: r,
            }),
            (this.markerDimensions = i),
            { dimensions: i, matchingDataList: r, trackingDataList: o }
        );
    }
    dispose() {
        this.stopProcessVideo(),
            this.worker.postMessage({
                type: "dispose",
            });
    }
    // warm up gpu - build kernels is slow
    dummyRun(t) {
        const e = this.inputLoader.loadInput(t);
        this.cropDetector.detect(e), this.tracker.dummyRun(e), e.dispose();
    }
    getProjectionMatrix() {
        return this.projectionMatrix;
    }
    getRotatedZ90Matrix(t) {
        return [
            -t[1],
            t[0],
            t[2],
            t[3],
            -t[5],
            t[4],
            t[6],
            t[7],
            -t[9],
            t[8],
            t[10],
            t[11],
            -t[13],
            t[12],
            t[14],
            t[15],
        ];
    }
    getWorldMatrix(t, e) {
        return this._glModelViewMatrix(t, e);
    }
    async _detectAndMatch(t, e) {
        const { featurePoints: s } = this.cropDetector.detectMoving(t),
            { targetIndex: o, modelViewTransform: r } = await this._workerMatch(
                s,
                e
            );
        return { targetIndex: o, modelViewTransform: r };
    }
    async _trackAndUpdate(t, e, s) {
        const { worldCoords: o, screenCoords: r } = this.tracker.track(t, e, s);
        return o.length < 4
            ? null
            : await this._workerTrackUpdate(e, {
                  worldCoords: o,
                  screenCoords: r,
              });
    }
    processVideo(t) {
        if (this.processingVideo) return;
        (this.processingVideo = !0), (this.trackingStates = []);
        for (let s = 0; s < this.markerDimensions.length; s++)
            this.trackingStates.push({
                showing: !1,
                isTracking: !1,
                currentModelViewTransform: null,
                trackCount: 0,
                trackMiss: 0,
                filter: new WC({
                    minCutOff: this.filterMinCF,
                    beta: this.filterBeta,
                }),
            });
        (async () => {
            for (; this.processingVideo; ) {
                const s = this.inputLoader.loadInput(t);
                if (
                    this.trackingStates.reduce(
                        (r, i) => r + (i.isTracking ? 1 : 0),
                        0
                    ) < this.maxTrack
                ) {
                    const r = [];
                    for (let l = 0; l < this.trackingStates.length; l++)
                        this.trackingStates[l].isTracking !== !0 &&
                            ((this.interestedTargetIndex !== -1 &&
                                this.interestedTargetIndex !== l) ||
                                r.push(l));
                    const { targetIndex: i, modelViewTransform: a } =
                        await this._detectAndMatch(s, r);
                    i !== -1 &&
                        ((this.trackingStates[i].isTracking = !0),
                        (this.trackingStates[i].currentModelViewTransform = a));
                }
                for (let r = 0; r < this.trackingStates.length; r++) {
                    const i = this.trackingStates[r];
                    if (i.isTracking) {
                        let a = await this._trackAndUpdate(
                            s,
                            i.currentModelViewTransform,
                            r
                        );
                        a === null
                            ? (i.isTracking = !1)
                            : (i.currentModelViewTransform = a);
                    }
                    if (
                        (i.showing ||
                            (i.isTracking &&
                                ((i.trackMiss = 0),
                                (i.trackCount += 1),
                                i.trackCount > this.warmupTolerance &&
                                    ((i.showing = !0),
                                    (i.trackingMatrix = null),
                                    i.filter.reset()))),
                        i.showing &&
                            (i.isTracking
                                ? (i.trackMiss = 0)
                                : ((i.trackCount = 0),
                                  (i.trackMiss += 1),
                                  i.trackMiss > this.missTolerance &&
                                      ((i.showing = !1),
                                      (i.trackingMatrix = null),
                                      this.onUpdate &&
                                          this.onUpdate({
                                              type: "updateMatrix",
                                              targetIndex: r,
                                              worldMatrix: null,
                                          })))),
                        i.showing)
                    ) {
                        const a = this._glModelViewMatrix(
                            i.currentModelViewTransform,
                            r
                        );
                        i.trackingMatrix = i.filter.filter(Date.now(), a);
                        let l = [];
                        for (let u = 0; u < i.trackingMatrix.length; u++)
                            l[u] = i.trackingMatrix[u];
                        t.width === this.inputHeight &&
                            t.height === this.inputWidth &&
                            (l = this.getRotatedZ90Matrix(l)),
                            this.onUpdate &&
                                this.onUpdate({
                                    type: "updateMatrix",
                                    targetIndex: r,
                                    worldMatrix: l,
                                });
                    }
                }
                s.dispose(),
                    this.onUpdate && this.onUpdate({ type: "processDone" }),
                    await rd.nextFrame();
            }
        })();
    }
    stopProcessVideo() {
        this.processingVideo = !1;
    }
    async detect(t) {
        const e = this.inputLoader.loadInput(t),
            { featurePoints: s, debugExtra: o } =
                await this.cropDetector.detect(e);
        return e.dispose(), { featurePoints: s, debugExtra: o };
    }
    async match(t, e) {
        const { modelViewTransform: s, debugExtra: o } =
            await this._workerMatch(t, [e]);
        return { modelViewTransform: s, debugExtra: o };
    }
    async track(t, e, s) {
        const o = this.inputLoader.loadInput(t),
            r = this.tracker.track(o, e, s);
        return o.dispose(), r;
    }
    async trackUpdate(t, e) {
        return e.worldCoords.length < 4
            ? null
            : await this._workerTrackUpdate(t, e);
    }
    _workerMatch(t, e) {
        return new Promise(async (s, o) => {
            (this.workerMatchDone = (r) => {
                s({
                    targetIndex: r.targetIndex,
                    modelViewTransform: r.modelViewTransform,
                    debugExtra: r.debugExtra,
                });
            }),
                this.worker.postMessage({
                    type: "match",
                    featurePoints: t,
                    targetIndexes: e,
                });
        });
    }
    _workerTrackUpdate(t, e) {
        return new Promise(async (s, o) => {
            this.workerTrackDone = (a) => {
                s(a.modelViewTransform);
            };
            const { worldCoords: r, screenCoords: i } = e;
            this.worker.postMessage({
                type: "trackUpdate",
                modelViewTransform: t,
                worldCoords: r,
                screenCoords: i,
            });
        });
    }
    _glModelViewMatrix(t, e) {
        const s = this.markerDimensions[e][1];
        return [
            t[0][0],
            -t[1][0],
            -t[2][0],
            0,
            -t[0][1],
            t[1][1],
            t[2][1],
            0,
            -t[0][2],
            t[1][2],
            t[2][2],
            0,
            t[0][1] * s + t[0][3],
            -(t[1][1] * s + t[1][3]),
            -(t[2][1] * s + t[2][3]),
            1,
        ];
    }
    // build openGL projection matrix
    // ref: https://strawlab.org/2011/11/05/augmented-reality-with-OpenGL/
    _glProjectionMatrix({
        projectionTransform: t,
        width: e,
        height: s,
        near: o,
        far: r,
    }) {
        const i = [
                [(2 * t[0][0]) / e, 0, -((2 * t[0][2]) / e - 1), 0],
                [0, (2 * t[1][1]) / s, -((2 * t[1][2]) / s - 1), 0],
                [0, 0, -(r + o) / (r - o), (-2 * r * o) / (r - o)],
                [0, 0, -1, 0],
            ],
            a = [];
        for (let l = 0; l < 4; l++) for (let c = 0; c < 4; c++) a.push(i[c][l]);
        return a;
    }
}
export {
    gt as $,
    qd as A,
    rh as B,
    QQ as C,
    ub as D,
    $ as E,
    vr as F,
    ms as G,
    kQ as H,
    vt as I,
    kT as J,
    Sa as K,
    hb as L,
    pb as M,
    Lo as N,
    ve as O,
    Hl as P,
    wa as Q,
    mb as R,
    wb as S,
    Mt as T,
    y0 as U,
    yb as V,
    C0 as W,
    Pe as X,
    ka as Y,
    cp as Z,
    I2 as _,
    DY as a,
    Ex as a$,
    it as a0,
    ut as a1,
    gr as a2,
    xb as a3,
    Ib as a4,
    db as a5,
    Se as a6,
    $e as a7,
    Vp as a8,
    ap as a9,
    hQ as aA,
    Cm as aB,
    B2 as aC,
    z2 as aD,
    Z2 as aE,
    km as aF,
    F0 as aG,
    Em as aH,
    gQ as aI,
    a$ as aJ,
    yQ as aK,
    mQ as aL,
    fQ as aM,
    bQ as aN,
    l$ as aO,
    a0 as aP,
    tt as aQ,
    kt as aR,
    zp as aS,
    Pp as aT,
    Ap as aU,
    zx as aV,
    Px as aW,
    Ax as aX,
    Ox as aY,
    Gx as aZ,
    yf as a_,
    Fp as aa,
    Le as ab,
    Ue as ac,
    Te as ad,
    se as ae,
    bt as af,
    Eo as ag,
    Cb as ah,
    No as ai,
    Wp as aj,
    kN as ak,
    vN as al,
    Dp as am,
    IN as an,
    Nm as ao,
    ee as ap,
    P2 as aq,
    pQ as ar,
    F as as,
    Cs as at,
    V2 as au,
    tp as av,
    h$ as aw,
    F2 as ax,
    xQ as ay,
    Ab as az,
    C as b,
    Fy as b$,
    Lx as b0,
    Mx as b1,
    Wx as b2,
    Dx as b3,
    en as b4,
    wf as b5,
    If as b6,
    Cf as b7,
    vf as b8,
    Sf as b9,
    Oy as bA,
    Ky as bB,
    Zy as bC,
    By as bD,
    _y as bE,
    Uy as bF,
    Qy as bG,
    qy as bH,
    Jy as bI,
    jy as bJ,
    Yy as bK,
    t1 as bL,
    o1 as bM,
    r1 as bN,
    i1 as bO,
    u1 as bP,
    p1 as bQ,
    g1 as bR,
    x1 as bS,
    I1 as bT,
    y1 as bU,
    C1 as bV,
    c1 as bW,
    h1 as bX,
    m1 as bY,
    Dy as bZ,
    Wf as b_,
    kf as ba,
    Fx as bb,
    ur as bc,
    mi as bd,
    fL as be,
    wn as bf,
    Wa as bg,
    Iy as bh,
    xy as bi,
    yy as bj,
    wy as bk,
    vy as bl,
    Cy as bm,
    fu as bn,
    Fa as bo,
    ky as bp,
    Va as bq,
    Ty as br,
    Ry as bs,
    $y as bt,
    Gy as bu,
    Ey as bv,
    Xy as bw,
    Ay as bx,
    Vf as by,
    Py as bz,
    T as c,
    iS as c$,
    gu as c0,
    Wy as c1,
    Mf as c2,
    zy as c3,
    Ff as c4,
    no as c5,
    Df as c6,
    k1 as c7,
    S1 as c8,
    e1 as c9,
    yt as cA,
    ao as cB,
    kn as cC,
    yo as cD,
    ug as cE,
    N2 as cF,
    me as cG,
    gv as cH,
    xv as cI,
    Qb as cJ,
    Id as cK,
    ai as cL,
    vv as cM,
    kv as cN,
    Nv as cO,
    $v as cP,
    Ev as cQ,
    Mv as cR,
    np as cS,
    Ov as cT,
    Qc as cU,
    Jv as cV,
    qv as cW,
    eS as cX,
    op as cY,
    sS as cZ,
    ni as c_,
    n1 as ca,
    s1 as cb,
    Hy as cc,
    T1 as cd,
    N1 as ce,
    $1 as cf,
    R1 as cg,
    L1 as ch,
    St as ci,
    mu as cj,
    Hx as ck,
    VL as cl,
    zL as cm,
    _x as cn,
    Yx as co,
    FL as cp,
    DQ as cq,
    Bx as cr,
    Rf as cs,
    $f as ct,
    uu as cu,
    FQ as cv,
    hu as cw,
    AQ as cx,
    OQ as cy,
    hi as cz,
    $t as d,
    Ak as d$,
    fn as d0,
    vo as d1,
    cS as d2,
    dS as d3,
    pS as d4,
    mS as d5,
    Jb as d6,
    $o as d7,
    jb as d8,
    IS as d9,
    Yb as dA,
    rn as dB,
    Bo as dC,
    kl as dD,
    up as dE,
    fs as dF,
    b0 as dG,
    pk as dH,
    mk as dI,
    bk as dJ,
    dp as dK,
    Cl as dL,
    Tr as dM,
    e$ as dN,
    Ck as dO,
    Nn as dP,
    hp as dQ,
    $k as dR,
    r0 as dS,
    pp as dT,
    ss as dU,
    fp as dV,
    i0 as dW,
    Vk as dX,
    $Q as dY,
    Pn as dZ,
    mp as d_,
    SS as da,
    ip as db,
    t0 as dc,
    v0 as dd,
    vd as de,
    e0 as df,
    Tm as dg,
    ES as dh,
    WS as di,
    PS as dj,
    OS as dk,
    bN as dl,
    Or as dm,
    Jc as dn,
    xN as dp,
    Tn as dq,
    BS as dr,
    tk as ds,
    mn as dt,
    Oe as du,
    ok as dv,
    o0 as dw,
    Gp as dx,
    Ca as dy,
    qc as dz,
    Ge as e,
    Ci as e$,
    qs as e0,
    oe as e1,
    Il as e2,
    br as e3,
    Bk as e4,
    _k as e5,
    gp as e6,
    Yt as e7,
    jc as e8,
    ui as e9,
    GQ as eA,
    NQ as eB,
    pn as eC,
    Ve as eD,
    Kt as eE,
    x0 as eF,
    Xn as eG,
    Ta as eH,
    nN as eI,
    EQ as eJ,
    at as eK,
    oN as eL,
    Ze as eM,
    il as eN,
    rN as eO,
    Vn as eP,
    aN as eQ,
    w0 as eR,
    uN as eS,
    I0 as eT,
    Mo as eU,
    pN as eV,
    Ee as eW,
    be as eX,
    Tt as eY,
    hn as eZ,
    D as e_,
    Rn as ea,
    sT as eb,
    yp as ec,
    lv as ed,
    iT as ee,
    di as ef,
    vl as eg,
    $T as eh,
    Ts as ei,
    c0 as ej,
    Ep as ek,
    u0 as el,
    d0 as em,
    h0 as en,
    p0 as eo,
    zT as ep,
    RQ as eq,
    f0 as er,
    m0 as es,
    Np as et,
    g0 as eu,
    Rp as ev,
    Sl as ew,
    $p as ex,
    va as ey,
    xp as ez,
    U as f,
    ad as f$,
    xt as f0,
    zf as f1,
    He as f2,
    P0 as f3,
    Q3 as f4,
    u2 as f5,
    z3 as f6,
    yn as f7,
    BQ as f8,
    HQ as f9,
    CL as fA,
    Gi as fB,
    Ei as fC,
    Li as fD,
    ih as fE,
    ec as fF,
    nc as fG,
    sc as fH,
    ah as fI,
    oc as fJ,
    rc as fK,
    lh as fL,
    ch as fM,
    Mi as fN,
    Wi as fO,
    dh as fP,
    uh as fQ,
    ic as fR,
    kL as fS,
    qg as fT,
    hh as fU,
    ph as fV,
    ac as fW,
    fh as fX,
    mh as fY,
    lc as fZ,
    ld as f_,
    jx as fa,
    Ul as fb,
    vi as fc,
    Si as fd,
    R0 as fe,
    $0 as ff,
    G0 as fg,
    E0 as fh,
    Sr as fi,
    th as fj,
    eh as fk,
    Yl as fl,
    Ql as fm,
    ki as fn,
    Ti as fo,
    Ni as fp,
    $i as fq,
    Ri as fr,
    Jl as fs,
    jl as ft,
    sh as fu,
    nh as fv,
    ql as fw,
    tc as fx,
    oh as fy,
    JC as fz,
    G as g,
    Nh as g$,
    gh as g0,
    ab as g1,
    bh as g2,
    Fi as g3,
    xh as g4,
    BC as g5,
    cc as g6,
    Vi as g7,
    zi as g8,
    uc as g9,
    mc as gA,
    gc as gB,
    _i as gC,
    Ui as gD,
    jC as gE,
    bc as gF,
    xc as gG,
    yc as gH,
    XY as gI,
    KY as gJ,
    yu as gK,
    Cu as gL,
    ZY as gM,
    Ic as gN,
    Cc as gO,
    vc as gP,
    Th as gQ,
    kh as gR,
    Yi as gS,
    Sc as gT,
    kc as gU,
    Qi as gV,
    Tc as gW,
    Ji as gX,
    L0 as gY,
    ji as gZ,
    Nc as g_,
    Pi as ga,
    yh as gb,
    wh as gc,
    Ih as gd,
    Ai as ge,
    Oi as gf,
    cd as gg,
    dc as gh,
    gl as gi,
    Au as gj,
    hc as gk,
    pc as gl,
    Xi as gm,
    SL as gn,
    Ch as go,
    Ki as gp,
    vh as gq,
    de as gr,
    Zi as gs,
    Bi as gt,
    Hi as gu,
    _d as gv,
    wc as gw,
    Sh as gx,
    iL as gy,
    fc as gz,
    kr as h,
    Zh as h$,
    Rh as h0,
    $h as h1,
    Rc as h2,
    Gc as h3,
    $c as h4,
    eo as h5,
    T$ as h6,
    Ec as h7,
    Lc as h8,
    BY as h9,
    ia as hA,
    aa as hB,
    Ac as hC,
    Zc as hD,
    ua as hE,
    Xc as hF,
    Wh as hG,
    Dh as hH,
    Fh as hI,
    Vh as hJ,
    Kc as hK,
    da as hL,
    zh as hM,
    ha as hN,
    Bc as hO,
    ba as hP,
    Ph as hQ,
    Ah as hR,
    Oh as hS,
    Xh as hT,
    pa as hU,
    Oc as hV,
    os as hW,
    fa as hX,
    ma as hY,
    ga as hZ,
    Kh as h_,
    qi as ha,
    Mc as hb,
    Wc as hc,
    M0 as hd,
    Gh as he,
    ym as hf,
    Eh as hg,
    Di as hh,
    ta as hi,
    Ke as hj,
    ea as hk,
    na as hl,
    Dc as hm,
    Vc as hn,
    Mh as ho,
    Fc as hp,
    Lh as hq,
    zc as hr,
    Hh as hs,
    sa as ht,
    oa as hu,
    Xp as hv,
    Pc as hw,
    ra as hx,
    ca as hy,
    la as hz,
    cb as i,
    ar as i0,
    Bh as i1,
    Hc as i2,
    _c as i3,
    HY as i4,
    yl as i5,
    Uc as i6,
    ml as i7,
    ps as i8,
    E$ as i9,
    oQ as iA,
    aQ as iB,
    Pb as iC,
    t2 as iD,
    sn as iE,
    lQ as iF,
    TQ as iG,
    LQ as iH,
    iQ as iI,
    dQ as iJ,
    EP as iK,
    fW as iL,
    k$ as iM,
    Yh as iN,
    JY as iO,
    rQ as iP,
    tr as iQ,
    UY as iR,
    _Y as iS,
    tn as iT,
    QY as iU,
    vQ as iV,
    SQ as iW,
    kk as iX,
    YQ as iY,
    _Q as iZ,
    wQ as ia,
    MQ as ib,
    YY as ic,
    nQ as id,
    jY as ie,
    eQ as ig,
    sQ as ih,
    tQ as ii,
    qY as ij,
    Ot as ik,
    cQ as il,
    uQ as im,
    sX as io,
    WQ as ip,
    G2 as iq,
    dm as ir,
    bl as is,
    ud as it,
    UQ as iu,
    IQ as iv,
    CQ as iw,
    VQ as ix,
    wl as iy,
    su as iz,
    XC as j,
    X as k,
    ks as l,
    Gt as m,
    jh as n,
    L as o,
    fb as p,
    bp as q,
    W as r,
    Ft as s,
    sp as t,
    gb as u,
    bb as v,
    is as w,
    qe as x,
    ya as y,
    Ks as z,
};
